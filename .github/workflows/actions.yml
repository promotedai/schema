on:
  workflow_dispatch:
  push:

permissions:
  contents: write
  pull-requests: write

name: Build, test and generate libraries

jobs:
  build-test-generate:
    name: Build, test and generate libraries

    # This has bazelisk already.
    runs-on: ubuntu-latest-8-cores
    steps:

      - name: Cache Bazel
        uses: actions/cache@v3
        env:
          cache-name: bazel-cache
        with:
          path: |
            ~/.cache/bazelisk
            ~/.cache/bazel
          # To write a new cache, we need to have a unique key.
          # TODO - try to get "-${{ hashFiles('WORKSPACE', '**/BUILD.bazel') }}"" to work
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.ref }}
          # We use restore-keys to find a recent cache to reuse.
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Git checkout
        id: checkout
        uses: actions/checkout@v3

      - name: Build protos
        id: build_protos
        run: |
          export USE_BAZEL_VERSION=7.2.0
          # If you hit any cache issues, either delete the cache or enable this line.
          # bazel sync --configure
          bazel build proto/... tests/...

      - name: Run tests
        id: run_tests
        run: |
          TESTS=$(bazel query 'tests(//...)')
          if [[ ! -z "$TESTS" ]]
          then
            bazel test tests/...
          else
            echo "No tests.  Skipping tests."
          fi

      - uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure Poetry
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install

      # Needed for the generate script.
      - name: Install Go
        id: install_go
        uses: actions/setup-go@v4
        with:
          go-version: 1.16.x

      - name: Generate libraries
        # Generate libraries on both push and pull_requests
        id: generate_libraries
        run: |
          ./scripts/generate-java.sh -s || exit 1
          ./scripts/generate.sh -s || exit 1
          git remote set-url origin https://x-access-token:${{ secrets.PROMOTED_PUBLIC_DEPLOYER_GITHUB_ACTIONS }}@github.com/${{ github.repository }}
          git config user.name prm-deployer
          git config user.email prm-deployer@promoted.ai
          git add .

      - name: Check for modified files
        id: git-check
        run: |
          echo ::set-output name=modified::$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)
          echo $(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)

      - name: Commit generated libraries
        # Only commit if there is a change.
        id: commit_generated
        # Check if the PR is not from a fork
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git commit -m "Generate libraries"
          git push
