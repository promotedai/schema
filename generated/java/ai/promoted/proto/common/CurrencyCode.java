// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/common/common.proto

package ai.promoted.proto.common;

/**
 * Protobuf enum {@code common.CurrencyCode}
 */
public enum CurrencyCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN_CURRENCY_CODE = 0;</code>
   */
  UNKNOWN_CURRENCY_CODE(0),
  /**
   * <code>USD = 1;</code>
   */
  USD(1),
  /**
   * <code>EUR = 2;</code>
   */
  EUR(2),
  /**
   * <code>JPY = 3;</code>
   */
  JPY(3),
  /**
   * <code>GBP = 4;</code>
   */
  GBP(4),
  /**
   * <code>AUD = 5;</code>
   */
  AUD(5),
  /**
   * <code>CAD = 6;</code>
   */
  CAD(6),
  /**
   * <code>CHF = 7;</code>
   */
  CHF(7),
  /**
   * <code>CNY = 8;</code>
   */
  CNY(8),
  /**
   * <code>HKD = 9;</code>
   */
  HKD(9),
  /**
   * <code>NZD = 10;</code>
   */
  NZD(10),
  /**
   * <code>SEK = 11;</code>
   */
  SEK(11),
  /**
   * <code>KRW = 12;</code>
   */
  KRW(12),
  /**
   * <code>SGD = 13;</code>
   */
  SGD(13),
  /**
   * <code>NOK = 14;</code>
   */
  NOK(14),
  /**
   * <code>MXN = 15;</code>
   */
  MXN(15),
  /**
   * <code>INR = 16;</code>
   */
  INR(16),
  /**
   * <code>RUB = 17;</code>
   */
  RUB(17),
  /**
   * <code>ZAR = 18;</code>
   */
  ZAR(18),
  /**
   * <code>TRY = 19;</code>
   */
  TRY(19),
  /**
   * <code>BRL = 20;</code>
   */
  BRL(20),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN_CURRENCY_CODE = 0;</code>
   */
  public static final int UNKNOWN_CURRENCY_CODE_VALUE = 0;
  /**
   * <code>USD = 1;</code>
   */
  public static final int USD_VALUE = 1;
  /**
   * <code>EUR = 2;</code>
   */
  public static final int EUR_VALUE = 2;
  /**
   * <code>JPY = 3;</code>
   */
  public static final int JPY_VALUE = 3;
  /**
   * <code>GBP = 4;</code>
   */
  public static final int GBP_VALUE = 4;
  /**
   * <code>AUD = 5;</code>
   */
  public static final int AUD_VALUE = 5;
  /**
   * <code>CAD = 6;</code>
   */
  public static final int CAD_VALUE = 6;
  /**
   * <code>CHF = 7;</code>
   */
  public static final int CHF_VALUE = 7;
  /**
   * <code>CNY = 8;</code>
   */
  public static final int CNY_VALUE = 8;
  /**
   * <code>HKD = 9;</code>
   */
  public static final int HKD_VALUE = 9;
  /**
   * <code>NZD = 10;</code>
   */
  public static final int NZD_VALUE = 10;
  /**
   * <code>SEK = 11;</code>
   */
  public static final int SEK_VALUE = 11;
  /**
   * <code>KRW = 12;</code>
   */
  public static final int KRW_VALUE = 12;
  /**
   * <code>SGD = 13;</code>
   */
  public static final int SGD_VALUE = 13;
  /**
   * <code>NOK = 14;</code>
   */
  public static final int NOK_VALUE = 14;
  /**
   * <code>MXN = 15;</code>
   */
  public static final int MXN_VALUE = 15;
  /**
   * <code>INR = 16;</code>
   */
  public static final int INR_VALUE = 16;
  /**
   * <code>RUB = 17;</code>
   */
  public static final int RUB_VALUE = 17;
  /**
   * <code>ZAR = 18;</code>
   */
  public static final int ZAR_VALUE = 18;
  /**
   * <code>TRY = 19;</code>
   */
  public static final int TRY_VALUE = 19;
  /**
   * <code>BRL = 20;</code>
   */
  public static final int BRL_VALUE = 20;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static CurrencyCode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static CurrencyCode forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_CURRENCY_CODE;
      case 1: return USD;
      case 2: return EUR;
      case 3: return JPY;
      case 4: return GBP;
      case 5: return AUD;
      case 6: return CAD;
      case 7: return CHF;
      case 8: return CNY;
      case 9: return HKD;
      case 10: return NZD;
      case 11: return SEK;
      case 12: return KRW;
      case 13: return SGD;
      case 14: return NOK;
      case 15: return MXN;
      case 16: return INR;
      case 17: return RUB;
      case 18: return ZAR;
      case 19: return TRY;
      case 20: return BRL;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CurrencyCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      CurrencyCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<CurrencyCode>() {
          public CurrencyCode findValueByNumber(int number) {
            return CurrencyCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return ai.promoted.proto.common.CommonProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final CurrencyCode[] VALUES = values();

  public static CurrencyCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CurrencyCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:common.CurrencyCode)
}

