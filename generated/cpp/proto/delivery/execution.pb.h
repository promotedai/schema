// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/delivery/execution.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fdelivery_2fexecution_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fdelivery_2fexecution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/delivery/delivery.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fdelivery_2fexecution_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fdelivery_2fexecution_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fdelivery_2fexecution_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_proto_2fdelivery_2fexecution_2eproto_metadata_getter(int index);
namespace delivery {
class DeliveryExecution;
struct DeliveryExecutionDefaultTypeInternal;
extern DeliveryExecutionDefaultTypeInternal _DeliveryExecution_default_instance_;
class DeliveryLog;
struct DeliveryLogDefaultTypeInternal;
extern DeliveryLogDefaultTypeInternal _DeliveryLog_default_instance_;
}  // namespace delivery
PROTOBUF_NAMESPACE_OPEN
template<> ::delivery::DeliveryExecution* Arena::CreateMaybeMessage<::delivery::DeliveryExecution>(Arena*);
template<> ::delivery::DeliveryLog* Arena::CreateMaybeMessage<::delivery::DeliveryLog>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace delivery {

enum ExecutionServer : int {
  UNKNOWN_EXECUTION_SERVER = 0,
  SDK = 2,
  ExecutionServer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ExecutionServer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ExecutionServer_IsValid(int value);
constexpr ExecutionServer ExecutionServer_MIN = UNKNOWN_EXECUTION_SERVER;
constexpr ExecutionServer ExecutionServer_MAX = SDK;
constexpr int ExecutionServer_ARRAYSIZE = ExecutionServer_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutionServer_descriptor();
template<typename T>
inline const std::string& ExecutionServer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExecutionServer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExecutionServer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExecutionServer_descriptor(), enum_t_value);
}
inline bool ExecutionServer_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExecutionServer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExecutionServer>(
    ExecutionServer_descriptor(), name, value);
}
// ===================================================================

class DeliveryLog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:delivery.DeliveryLog) */ {
 public:
  inline DeliveryLog() : DeliveryLog(nullptr) {}
  virtual ~DeliveryLog();
  explicit constexpr DeliveryLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeliveryLog(const DeliveryLog& from);
  DeliveryLog(DeliveryLog&& from) noexcept
    : DeliveryLog() {
    *this = ::std::move(from);
  }

  inline DeliveryLog& operator=(const DeliveryLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeliveryLog& operator=(DeliveryLog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeliveryLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeliveryLog* internal_default_instance() {
    return reinterpret_cast<const DeliveryLog*>(
               &_DeliveryLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeliveryLog& a, DeliveryLog& b) {
    a.Swap(&b);
  }
  inline void Swap(DeliveryLog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeliveryLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeliveryLog* New() const final {
    return CreateMaybeMessage<DeliveryLog>(nullptr);
  }

  DeliveryLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeliveryLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeliveryLog& from);
  void MergeFrom(const DeliveryLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeliveryLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "delivery.DeliveryLog";
  }
  protected:
  explicit DeliveryLog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fdelivery_2fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 2,
    kResponseFieldNumber = 3,
    kExecutionFieldNumber = 4,
    kPlatformIdFieldNumber = 1,
  };
  // .delivery.Request request = 2 [json_name = "request"];
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::delivery::Request& request() const;
  ::delivery::Request* release_request();
  ::delivery::Request* mutable_request();
  void set_allocated_request(::delivery::Request* request);
  private:
  const ::delivery::Request& _internal_request() const;
  ::delivery::Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::delivery::Request* request);
  ::delivery::Request* unsafe_arena_release_request();

  // .delivery.Response response = 3 [json_name = "response"];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::delivery::Response& response() const;
  ::delivery::Response* release_response();
  ::delivery::Response* mutable_response();
  void set_allocated_response(::delivery::Response* response);
  private:
  const ::delivery::Response& _internal_response() const;
  ::delivery::Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::delivery::Response* response);
  ::delivery::Response* unsafe_arena_release_response();

  // .delivery.DeliveryExecution execution = 4 [json_name = "execution"];
  bool has_execution() const;
  private:
  bool _internal_has_execution() const;
  public:
  void clear_execution();
  const ::delivery::DeliveryExecution& execution() const;
  ::delivery::DeliveryExecution* release_execution();
  ::delivery::DeliveryExecution* mutable_execution();
  void set_allocated_execution(::delivery::DeliveryExecution* execution);
  private:
  const ::delivery::DeliveryExecution& _internal_execution() const;
  ::delivery::DeliveryExecution* _internal_mutable_execution();
  public:
  void unsafe_arena_set_allocated_execution(
      ::delivery::DeliveryExecution* execution);
  ::delivery::DeliveryExecution* unsafe_arena_release_execution();

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:delivery.DeliveryLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::delivery::Request* request_;
  ::delivery::Response* response_;
  ::delivery::DeliveryExecution* execution_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fdelivery_2fexecution_2eproto;
};
// -------------------------------------------------------------------

class DeliveryExecution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:delivery.DeliveryExecution) */ {
 public:
  inline DeliveryExecution() : DeliveryExecution(nullptr) {}
  virtual ~DeliveryExecution();
  explicit constexpr DeliveryExecution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeliveryExecution(const DeliveryExecution& from);
  DeliveryExecution(DeliveryExecution&& from) noexcept
    : DeliveryExecution() {
    *this = ::std::move(from);
  }

  inline DeliveryExecution& operator=(const DeliveryExecution& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeliveryExecution& operator=(DeliveryExecution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeliveryExecution& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeliveryExecution* internal_default_instance() {
    return reinterpret_cast<const DeliveryExecution*>(
               &_DeliveryExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeliveryExecution& a, DeliveryExecution& b) {
    a.Swap(&b);
  }
  inline void Swap(DeliveryExecution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeliveryExecution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeliveryExecution* New() const final {
    return CreateMaybeMessage<DeliveryExecution>(nullptr);
  }

  DeliveryExecution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeliveryExecution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeliveryExecution& from);
  void MergeFrom(const DeliveryExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeliveryExecution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "delivery.DeliveryExecution";
  }
  protected:
  explicit DeliveryExecution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fdelivery_2fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerVersionFieldNumber = 7,
    kExecutionServerFieldNumber = 2,
  };
  // string server_version = 7 [json_name = "serverVersion"];
  void clear_server_version();
  const std::string& server_version() const;
  void set_server_version(const std::string& value);
  void set_server_version(std::string&& value);
  void set_server_version(const char* value);
  void set_server_version(const char* value, size_t size);
  std::string* mutable_server_version();
  std::string* release_server_version();
  void set_allocated_server_version(std::string* server_version);
  private:
  const std::string& _internal_server_version() const;
  void _internal_set_server_version(const std::string& value);
  std::string* _internal_mutable_server_version();
  public:

  // .delivery.ExecutionServer execution_server = 2 [json_name = "executionServer"];
  void clear_execution_server();
  ::delivery::ExecutionServer execution_server() const;
  void set_execution_server(::delivery::ExecutionServer value);
  private:
  ::delivery::ExecutionServer _internal_execution_server() const;
  void _internal_set_execution_server(::delivery::ExecutionServer value);
  public:

  // @@protoc_insertion_point(class_scope:delivery.DeliveryExecution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_version_;
  int execution_server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fdelivery_2fexecution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeliveryLog

// uint64 platform_id = 1 [json_name = "platformId"];
inline void DeliveryLog::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeliveryLog::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeliveryLog::platform_id() const {
  // @@protoc_insertion_point(field_get:delivery.DeliveryLog.platform_id)
  return _internal_platform_id();
}
inline void DeliveryLog::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void DeliveryLog::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:delivery.DeliveryLog.platform_id)
}

// .delivery.Request request = 2 [json_name = "request"];
inline bool DeliveryLog::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool DeliveryLog::has_request() const {
  return _internal_has_request();
}
inline const ::delivery::Request& DeliveryLog::_internal_request() const {
  const ::delivery::Request* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::delivery::Request&>(
      ::delivery::_Request_default_instance_);
}
inline const ::delivery::Request& DeliveryLog::request() const {
  // @@protoc_insertion_point(field_get:delivery.DeliveryLog.request)
  return _internal_request();
}
inline void DeliveryLog::unsafe_arena_set_allocated_request(
    ::delivery::Request* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.DeliveryLog.request)
}
inline ::delivery::Request* DeliveryLog::release_request() {
  
  ::delivery::Request* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::delivery::Request* DeliveryLog::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:delivery.DeliveryLog.request)
  
  ::delivery::Request* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::delivery::Request* DeliveryLog::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::delivery::Request>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::delivery::Request* DeliveryLog::mutable_request() {
  // @@protoc_insertion_point(field_mutable:delivery.DeliveryLog.request)
  return _internal_mutable_request();
}
inline void DeliveryLog::set_allocated_request(::delivery::Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:delivery.DeliveryLog.request)
}

// .delivery.Response response = 3 [json_name = "response"];
inline bool DeliveryLog::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool DeliveryLog::has_response() const {
  return _internal_has_response();
}
inline const ::delivery::Response& DeliveryLog::_internal_response() const {
  const ::delivery::Response* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::delivery::Response&>(
      ::delivery::_Response_default_instance_);
}
inline const ::delivery::Response& DeliveryLog::response() const {
  // @@protoc_insertion_point(field_get:delivery.DeliveryLog.response)
  return _internal_response();
}
inline void DeliveryLog::unsafe_arena_set_allocated_response(
    ::delivery::Response* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.DeliveryLog.response)
}
inline ::delivery::Response* DeliveryLog::release_response() {
  
  ::delivery::Response* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::delivery::Response* DeliveryLog::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:delivery.DeliveryLog.response)
  
  ::delivery::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::delivery::Response* DeliveryLog::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::delivery::Response>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::delivery::Response* DeliveryLog::mutable_response() {
  // @@protoc_insertion_point(field_mutable:delivery.DeliveryLog.response)
  return _internal_mutable_response();
}
inline void DeliveryLog::set_allocated_response(::delivery::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:delivery.DeliveryLog.response)
}

// .delivery.DeliveryExecution execution = 4 [json_name = "execution"];
inline bool DeliveryLog::_internal_has_execution() const {
  return this != internal_default_instance() && execution_ != nullptr;
}
inline bool DeliveryLog::has_execution() const {
  return _internal_has_execution();
}
inline void DeliveryLog::clear_execution() {
  if (GetArena() == nullptr && execution_ != nullptr) {
    delete execution_;
  }
  execution_ = nullptr;
}
inline const ::delivery::DeliveryExecution& DeliveryLog::_internal_execution() const {
  const ::delivery::DeliveryExecution* p = execution_;
  return p != nullptr ? *p : reinterpret_cast<const ::delivery::DeliveryExecution&>(
      ::delivery::_DeliveryExecution_default_instance_);
}
inline const ::delivery::DeliveryExecution& DeliveryLog::execution() const {
  // @@protoc_insertion_point(field_get:delivery.DeliveryLog.execution)
  return _internal_execution();
}
inline void DeliveryLog::unsafe_arena_set_allocated_execution(
    ::delivery::DeliveryExecution* execution) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_);
  }
  execution_ = execution;
  if (execution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.DeliveryLog.execution)
}
inline ::delivery::DeliveryExecution* DeliveryLog::release_execution() {
  
  ::delivery::DeliveryExecution* temp = execution_;
  execution_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::delivery::DeliveryExecution* DeliveryLog::unsafe_arena_release_execution() {
  // @@protoc_insertion_point(field_release:delivery.DeliveryLog.execution)
  
  ::delivery::DeliveryExecution* temp = execution_;
  execution_ = nullptr;
  return temp;
}
inline ::delivery::DeliveryExecution* DeliveryLog::_internal_mutable_execution() {
  
  if (execution_ == nullptr) {
    auto* p = CreateMaybeMessage<::delivery::DeliveryExecution>(GetArena());
    execution_ = p;
  }
  return execution_;
}
inline ::delivery::DeliveryExecution* DeliveryLog::mutable_execution() {
  // @@protoc_insertion_point(field_mutable:delivery.DeliveryLog.execution)
  return _internal_mutable_execution();
}
inline void DeliveryLog::set_allocated_execution(::delivery::DeliveryExecution* execution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete execution_;
  }
  if (execution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(execution);
    if (message_arena != submessage_arena) {
      execution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution, submessage_arena);
    }
    
  } else {
    
  }
  execution_ = execution;
  // @@protoc_insertion_point(field_set_allocated:delivery.DeliveryLog.execution)
}

// -------------------------------------------------------------------

// DeliveryExecution

// .delivery.ExecutionServer execution_server = 2 [json_name = "executionServer"];
inline void DeliveryExecution::clear_execution_server() {
  execution_server_ = 0;
}
inline ::delivery::ExecutionServer DeliveryExecution::_internal_execution_server() const {
  return static_cast< ::delivery::ExecutionServer >(execution_server_);
}
inline ::delivery::ExecutionServer DeliveryExecution::execution_server() const {
  // @@protoc_insertion_point(field_get:delivery.DeliveryExecution.execution_server)
  return _internal_execution_server();
}
inline void DeliveryExecution::_internal_set_execution_server(::delivery::ExecutionServer value) {
  
  execution_server_ = value;
}
inline void DeliveryExecution::set_execution_server(::delivery::ExecutionServer value) {
  _internal_set_execution_server(value);
  // @@protoc_insertion_point(field_set:delivery.DeliveryExecution.execution_server)
}

// string server_version = 7 [json_name = "serverVersion"];
inline void DeliveryExecution::clear_server_version() {
  server_version_.ClearToEmpty();
}
inline const std::string& DeliveryExecution::server_version() const {
  // @@protoc_insertion_point(field_get:delivery.DeliveryExecution.server_version)
  return _internal_server_version();
}
inline void DeliveryExecution::set_server_version(const std::string& value) {
  _internal_set_server_version(value);
  // @@protoc_insertion_point(field_set:delivery.DeliveryExecution.server_version)
}
inline std::string* DeliveryExecution::mutable_server_version() {
  // @@protoc_insertion_point(field_mutable:delivery.DeliveryExecution.server_version)
  return _internal_mutable_server_version();
}
inline const std::string& DeliveryExecution::_internal_server_version() const {
  return server_version_.Get();
}
inline void DeliveryExecution::_internal_set_server_version(const std::string& value) {
  
  server_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeliveryExecution::set_server_version(std::string&& value) {
  
  server_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.DeliveryExecution.server_version)
}
inline void DeliveryExecution::set_server_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.DeliveryExecution.server_version)
}
inline void DeliveryExecution::set_server_version(const char* value,
    size_t size) {
  
  server_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.DeliveryExecution.server_version)
}
inline std::string* DeliveryExecution::_internal_mutable_server_version() {
  
  return server_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeliveryExecution::release_server_version() {
  // @@protoc_insertion_point(field_release:delivery.DeliveryExecution.server_version)
  return server_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeliveryExecution::set_allocated_server_version(std::string* server_version) {
  if (server_version != nullptr) {
    
  } else {
    
  }
  server_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.DeliveryExecution.server_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace delivery

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::delivery::ExecutionServer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::delivery::ExecutionServer>() {
  return ::delivery::ExecutionServer_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fdelivery_2fexecution_2eproto
