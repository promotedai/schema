// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/delivery/delivery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fdelivery_2fdelivery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fdelivery_2fdelivery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
#include "proto/common/common.pb.h"
#include "proto/delivery/blender.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fdelivery_2fdelivery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fdelivery_2fdelivery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fdelivery_2fdelivery_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_proto_2fdelivery_2fdelivery_2eproto_metadata_getter(int index);
namespace delivery {
class Insertion;
struct InsertionDefaultTypeInternal;
extern InsertionDefaultTypeInternal _Insertion_default_instance_;
class Paging;
struct PagingDefaultTypeInternal;
extern PagingDefaultTypeInternal _Paging_default_instance_;
class PagingInfo;
struct PagingInfoDefaultTypeInternal;
extern PagingInfoDefaultTypeInternal _PagingInfo_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace delivery
PROTOBUF_NAMESPACE_OPEN
template<> ::delivery::Insertion* Arena::CreateMaybeMessage<::delivery::Insertion>(Arena*);
template<> ::delivery::Paging* Arena::CreateMaybeMessage<::delivery::Paging>(Arena*);
template<> ::delivery::PagingInfo* Arena::CreateMaybeMessage<::delivery::PagingInfo>(Arena*);
template<> ::delivery::Request* Arena::CreateMaybeMessage<::delivery::Request>(Arena*);
template<> ::delivery::Response* Arena::CreateMaybeMessage<::delivery::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace delivery {

enum UseCase : int {
  UNKNOWN_USE_CASE = 0,
  CUSTOM = 1,
  SEARCH = 2,
  SEARCH_SUGGESTIONS = 3,
  FEED = 4,
  RELATED_CONTENT = 5,
  CLOSE_UP = 6,
  CATEGORY_CONTENT = 7,
  MY_CONTENT = 8,
  MY_SAVED_CONTENT = 9,
  SELLER_CONTENT = 10,
  DISCOVER = 11,
  UseCase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UseCase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UseCase_IsValid(int value);
constexpr UseCase UseCase_MIN = UNKNOWN_USE_CASE;
constexpr UseCase UseCase_MAX = DISCOVER;
constexpr int UseCase_ARRAYSIZE = UseCase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UseCase_descriptor();
template<typename T>
inline const std::string& UseCase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UseCase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UseCase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UseCase_descriptor(), enum_t_value);
}
inline bool UseCase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UseCase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UseCase>(
    UseCase_descriptor(), name, value);
}
// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:delivery.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  virtual ~Request();
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "delivery.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fdelivery_2fdelivery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsertionFieldNumber = 11,
    kInsertionMatrixHeadersFieldNumber = 20,
    kRequestIdFieldNumber = 6,
    kViewIdFieldNumber = 7,
    kSessionIdFieldNumber = 8,
    kSearchQueryFieldNumber = 10,
    kClientRequestIdFieldNumber = 14,
    kAutoViewIdFieldNumber = 19,
    kUserInfoFieldNumber = 2,
    kTimingFieldNumber = 3,
    kClientInfoFieldNumber = 4,
    kBlenderConfigFieldNumber = 12,
    kPropertiesFieldNumber = 13,
    kPagingFieldNumber = 17,
    kDeviceFieldNumber = 18,
    kInsertionMatrixFieldNumber = 21,
    kPlatformIdFieldNumber = 1,
    kUseCaseFieldNumber = 9,
  };
  // repeated .delivery.Insertion insertion = 11 [json_name = "insertion"];
  int insertion_size() const;
  private:
  int _internal_insertion_size() const;
  public:
  void clear_insertion();
  ::delivery::Insertion* mutable_insertion(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion >*
      mutable_insertion();
  private:
  const ::delivery::Insertion& _internal_insertion(int index) const;
  ::delivery::Insertion* _internal_add_insertion();
  public:
  const ::delivery::Insertion& insertion(int index) const;
  ::delivery::Insertion* add_insertion();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion >&
      insertion() const;

  // repeated string insertion_matrix_headers = 20 [json_name = "insertionMatrixHeaders"];
  int insertion_matrix_headers_size() const;
  private:
  int _internal_insertion_matrix_headers_size() const;
  public:
  void clear_insertion_matrix_headers();
  const std::string& insertion_matrix_headers(int index) const;
  std::string* mutable_insertion_matrix_headers(int index);
  void set_insertion_matrix_headers(int index, const std::string& value);
  void set_insertion_matrix_headers(int index, std::string&& value);
  void set_insertion_matrix_headers(int index, const char* value);
  void set_insertion_matrix_headers(int index, const char* value, size_t size);
  std::string* add_insertion_matrix_headers();
  void add_insertion_matrix_headers(const std::string& value);
  void add_insertion_matrix_headers(std::string&& value);
  void add_insertion_matrix_headers(const char* value);
  void add_insertion_matrix_headers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& insertion_matrix_headers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_insertion_matrix_headers();
  private:
  const std::string& _internal_insertion_matrix_headers(int index) const;
  std::string* _internal_add_insertion_matrix_headers();
  public:

  // string request_id = 6 [json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string view_id = 7 [json_name = "viewId"];
  void clear_view_id();
  const std::string& view_id() const;
  void set_view_id(const std::string& value);
  void set_view_id(std::string&& value);
  void set_view_id(const char* value);
  void set_view_id(const char* value, size_t size);
  std::string* mutable_view_id();
  std::string* release_view_id();
  void set_allocated_view_id(std::string* view_id);
  private:
  const std::string& _internal_view_id() const;
  void _internal_set_view_id(const std::string& value);
  std::string* _internal_mutable_view_id();
  public:

  // string session_id = 8 [json_name = "sessionId"];
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string search_query = 10 [json_name = "searchQuery"];
  void clear_search_query();
  const std::string& search_query() const;
  void set_search_query(const std::string& value);
  void set_search_query(std::string&& value);
  void set_search_query(const char* value);
  void set_search_query(const char* value, size_t size);
  std::string* mutable_search_query();
  std::string* release_search_query();
  void set_allocated_search_query(std::string* search_query);
  private:
  const std::string& _internal_search_query() const;
  void _internal_set_search_query(const std::string& value);
  std::string* _internal_mutable_search_query();
  public:

  // string client_request_id = 14 [json_name = "clientRequestId"];
  void clear_client_request_id();
  const std::string& client_request_id() const;
  void set_client_request_id(const std::string& value);
  void set_client_request_id(std::string&& value);
  void set_client_request_id(const char* value);
  void set_client_request_id(const char* value, size_t size);
  std::string* mutable_client_request_id();
  std::string* release_client_request_id();
  void set_allocated_client_request_id(std::string* client_request_id);
  private:
  const std::string& _internal_client_request_id() const;
  void _internal_set_client_request_id(const std::string& value);
  std::string* _internal_mutable_client_request_id();
  public:

  // string auto_view_id = 19 [json_name = "autoViewId"];
  void clear_auto_view_id();
  const std::string& auto_view_id() const;
  void set_auto_view_id(const std::string& value);
  void set_auto_view_id(std::string&& value);
  void set_auto_view_id(const char* value);
  void set_auto_view_id(const char* value, size_t size);
  std::string* mutable_auto_view_id();
  std::string* release_auto_view_id();
  void set_allocated_auto_view_id(std::string* auto_view_id);
  private:
  const std::string& _internal_auto_view_id() const;
  void _internal_set_auto_view_id(const std::string& value);
  std::string* _internal_mutable_auto_view_id();
  public:

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::common::UserInfo& user_info() const;
  ::common::UserInfo* release_user_info();
  ::common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::common::UserInfo* user_info);
  private:
  const ::common::UserInfo& _internal_user_info() const;
  ::common::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::common::UserInfo* user_info);
  ::common::UserInfo* unsafe_arena_release_user_info();

  // .common.Timing timing = 3 [json_name = "timing"];
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::common::Timing& timing() const;
  ::common::Timing* release_timing();
  ::common::Timing* mutable_timing();
  void set_allocated_timing(::common::Timing* timing);
  private:
  const ::common::Timing& _internal_timing() const;
  ::common::Timing* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::common::Timing* timing);
  ::common::Timing* unsafe_arena_release_timing();

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::common::ClientInfo& client_info() const;
  ::common::ClientInfo* release_client_info();
  ::common::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::common::ClientInfo* client_info);
  private:
  const ::common::ClientInfo& _internal_client_info() const;
  ::common::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::common::ClientInfo* client_info);
  ::common::ClientInfo* unsafe_arena_release_client_info();

  // .delivery.BlenderConfig blender_config = 12 [json_name = "blenderConfig"];
  bool has_blender_config() const;
  private:
  bool _internal_has_blender_config() const;
  public:
  void clear_blender_config();
  const ::delivery::BlenderConfig& blender_config() const;
  ::delivery::BlenderConfig* release_blender_config();
  ::delivery::BlenderConfig* mutable_blender_config();
  void set_allocated_blender_config(::delivery::BlenderConfig* blender_config);
  private:
  const ::delivery::BlenderConfig& _internal_blender_config() const;
  ::delivery::BlenderConfig* _internal_mutable_blender_config();
  public:
  void unsafe_arena_set_allocated_blender_config(
      ::delivery::BlenderConfig* blender_config);
  ::delivery::BlenderConfig* unsafe_arena_release_blender_config();

  // .common.Properties properties = 13 [json_name = "properties"];
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::common::Properties& properties() const;
  ::common::Properties* release_properties();
  ::common::Properties* mutable_properties();
  void set_allocated_properties(::common::Properties* properties);
  private:
  const ::common::Properties& _internal_properties() const;
  ::common::Properties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::common::Properties* properties);
  ::common::Properties* unsafe_arena_release_properties();

  // .delivery.Paging paging = 17 [json_name = "paging"];
  bool has_paging() const;
  private:
  bool _internal_has_paging() const;
  public:
  void clear_paging();
  const ::delivery::Paging& paging() const;
  ::delivery::Paging* release_paging();
  ::delivery::Paging* mutable_paging();
  void set_allocated_paging(::delivery::Paging* paging);
  private:
  const ::delivery::Paging& _internal_paging() const;
  ::delivery::Paging* _internal_mutable_paging();
  public:
  void unsafe_arena_set_allocated_paging(
      ::delivery::Paging* paging);
  ::delivery::Paging* unsafe_arena_release_paging();

  // .common.Device device = 18 [json_name = "device"];
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::common::Device& device() const;
  ::common::Device* release_device();
  ::common::Device* mutable_device();
  void set_allocated_device(::common::Device* device);
  private:
  const ::common::Device& _internal_device() const;
  ::common::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::common::Device* device);
  ::common::Device* unsafe_arena_release_device();

  // .google.protobuf.ListValue insertion_matrix = 21 [json_name = "insertionMatrix"];
  bool has_insertion_matrix() const;
  private:
  bool _internal_has_insertion_matrix() const;
  public:
  void clear_insertion_matrix();
  const PROTOBUF_NAMESPACE_ID::ListValue& insertion_matrix() const;
  PROTOBUF_NAMESPACE_ID::ListValue* release_insertion_matrix();
  PROTOBUF_NAMESPACE_ID::ListValue* mutable_insertion_matrix();
  void set_allocated_insertion_matrix(PROTOBUF_NAMESPACE_ID::ListValue* insertion_matrix);
  private:
  const PROTOBUF_NAMESPACE_ID::ListValue& _internal_insertion_matrix() const;
  PROTOBUF_NAMESPACE_ID::ListValue* _internal_mutable_insertion_matrix();
  public:
  void unsafe_arena_set_allocated_insertion_matrix(
      PROTOBUF_NAMESPACE_ID::ListValue* insertion_matrix);
  PROTOBUF_NAMESPACE_ID::ListValue* unsafe_arena_release_insertion_matrix();

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .delivery.UseCase use_case = 9 [json_name = "useCase"];
  void clear_use_case();
  ::delivery::UseCase use_case() const;
  void set_use_case(::delivery::UseCase value);
  private:
  ::delivery::UseCase _internal_use_case() const;
  void _internal_set_use_case(::delivery::UseCase value);
  public:

  // @@protoc_insertion_point(class_scope:delivery.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion > insertion_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> insertion_matrix_headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_view_id_;
  ::common::UserInfo* user_info_;
  ::common::Timing* timing_;
  ::common::ClientInfo* client_info_;
  ::delivery::BlenderConfig* blender_config_;
  ::common::Properties* properties_;
  ::delivery::Paging* paging_;
  ::common::Device* device_;
  PROTOBUF_NAMESPACE_ID::ListValue* insertion_matrix_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  int use_case_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fdelivery_2fdelivery_2eproto;
};
// -------------------------------------------------------------------

class Paging PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:delivery.Paging) */ {
 public:
  inline Paging() : Paging(nullptr) {}
  virtual ~Paging();
  explicit constexpr Paging(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Paging(const Paging& from);
  Paging(Paging&& from) noexcept
    : Paging() {
    *this = ::std::move(from);
  }

  inline Paging& operator=(const Paging& from) {
    CopyFrom(from);
    return *this;
  }
  inline Paging& operator=(Paging&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Paging& default_instance() {
    return *internal_default_instance();
  }
  enum StartingCase {
    kCursor = 3,
    kOffset = 4,
    STARTING_NOT_SET = 0,
  };

  static inline const Paging* internal_default_instance() {
    return reinterpret_cast<const Paging*>(
               &_Paging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Paging& a, Paging& b) {
    a.Swap(&b);
  }
  inline void Swap(Paging* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Paging* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Paging* New() const final {
    return CreateMaybeMessage<Paging>(nullptr);
  }

  Paging* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Paging>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Paging& from);
  void MergeFrom(const Paging& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Paging* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "delivery.Paging";
  }
  protected:
  explicit Paging(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fdelivery_2fdelivery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPagingIdFieldNumber = 1,
    kSizeFieldNumber = 2,
    kCursorFieldNumber = 3,
    kOffsetFieldNumber = 4,
  };
  // string paging_id = 1 [json_name = "pagingId"];
  void clear_paging_id();
  const std::string& paging_id() const;
  void set_paging_id(const std::string& value);
  void set_paging_id(std::string&& value);
  void set_paging_id(const char* value);
  void set_paging_id(const char* value, size_t size);
  std::string* mutable_paging_id();
  std::string* release_paging_id();
  void set_allocated_paging_id(std::string* paging_id);
  private:
  const std::string& _internal_paging_id() const;
  void _internal_set_paging_id(const std::string& value);
  std::string* _internal_mutable_paging_id();
  public:

  // int32 size = 2 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // string cursor = 3 [json_name = "cursor"];
  bool has_cursor() const;
  private:
  bool _internal_has_cursor() const;
  public:
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int32 offset = 4 [json_name = "offset"];
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_starting();
  StartingCase starting_case() const;
  // @@protoc_insertion_point(class_scope:delivery.Paging)
 private:
  class _Internal;
  void set_has_cursor();
  void set_has_offset();

  inline bool has_starting() const;
  inline void clear_has_starting();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paging_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  union StartingUnion {
    constexpr StartingUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  } starting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fdelivery_2fdelivery_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:delivery.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "delivery.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fdelivery_2fdelivery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsertionFieldNumber = 2,
    kIntrospectionDataFieldNumber = 4,
    kRequestIdFieldNumber = 5,
    kPagingInfoFieldNumber = 3,
  };
  // repeated .delivery.Insertion insertion = 2 [json_name = "insertion"];
  int insertion_size() const;
  private:
  int _internal_insertion_size() const;
  public:
  void clear_insertion();
  ::delivery::Insertion* mutable_insertion(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion >*
      mutable_insertion();
  private:
  const ::delivery::Insertion& _internal_insertion(int index) const;
  ::delivery::Insertion* _internal_add_insertion();
  public:
  const ::delivery::Insertion& insertion(int index) const;
  ::delivery::Insertion* add_insertion();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion >&
      insertion() const;

  // string introspection_data = 4 [json_name = "introspectionData"];
  bool has_introspection_data() const;
  private:
  bool _internal_has_introspection_data() const;
  public:
  void clear_introspection_data();
  const std::string& introspection_data() const;
  void set_introspection_data(const std::string& value);
  void set_introspection_data(std::string&& value);
  void set_introspection_data(const char* value);
  void set_introspection_data(const char* value, size_t size);
  std::string* mutable_introspection_data();
  std::string* release_introspection_data();
  void set_allocated_introspection_data(std::string* introspection_data);
  private:
  const std::string& _internal_introspection_data() const;
  void _internal_set_introspection_data(const std::string& value);
  std::string* _internal_mutable_introspection_data();
  public:

  // string request_id = 5 [json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .delivery.PagingInfo paging_info = 3 [json_name = "pagingInfo"];
  bool has_paging_info() const;
  private:
  bool _internal_has_paging_info() const;
  public:
  void clear_paging_info();
  const ::delivery::PagingInfo& paging_info() const;
  ::delivery::PagingInfo* release_paging_info();
  ::delivery::PagingInfo* mutable_paging_info();
  void set_allocated_paging_info(::delivery::PagingInfo* paging_info);
  private:
  const ::delivery::PagingInfo& _internal_paging_info() const;
  ::delivery::PagingInfo* _internal_mutable_paging_info();
  public:
  void unsafe_arena_set_allocated_paging_info(
      ::delivery::PagingInfo* paging_info);
  ::delivery::PagingInfo* unsafe_arena_release_paging_info();

  // @@protoc_insertion_point(class_scope:delivery.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion > insertion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr introspection_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::delivery::PagingInfo* paging_info_;
  friend struct ::TableStruct_proto_2fdelivery_2fdelivery_2eproto;
};
// -------------------------------------------------------------------

class PagingInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:delivery.PagingInfo) */ {
 public:
  inline PagingInfo() : PagingInfo(nullptr) {}
  virtual ~PagingInfo();
  explicit constexpr PagingInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PagingInfo(const PagingInfo& from);
  PagingInfo(PagingInfo&& from) noexcept
    : PagingInfo() {
    *this = ::std::move(from);
  }

  inline PagingInfo& operator=(const PagingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PagingInfo& operator=(PagingInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PagingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PagingInfo* internal_default_instance() {
    return reinterpret_cast<const PagingInfo*>(
               &_PagingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PagingInfo& a, PagingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PagingInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PagingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PagingInfo* New() const final {
    return CreateMaybeMessage<PagingInfo>(nullptr);
  }

  PagingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PagingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PagingInfo& from);
  void MergeFrom(const PagingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PagingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "delivery.PagingInfo";
  }
  protected:
  explicit PagingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fdelivery_2fdelivery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPagingIdFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // string paging_id = 1 [json_name = "pagingId"];
  void clear_paging_id();
  const std::string& paging_id() const;
  void set_paging_id(const std::string& value);
  void set_paging_id(std::string&& value);
  void set_paging_id(const char* value);
  void set_paging_id(const char* value, size_t size);
  std::string* mutable_paging_id();
  std::string* release_paging_id();
  void set_allocated_paging_id(std::string* paging_id);
  private:
  const std::string& _internal_paging_id() const;
  void _internal_set_paging_id(const std::string& value);
  std::string* _internal_mutable_paging_id();
  public:

  // string cursor = 2 [json_name = "cursor"];
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:delivery.PagingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paging_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fdelivery_2fdelivery_2eproto;
};
// -------------------------------------------------------------------

class Insertion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:delivery.Insertion) */ {
 public:
  inline Insertion() : Insertion(nullptr) {}
  virtual ~Insertion();
  explicit constexpr Insertion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Insertion(const Insertion& from);
  Insertion(Insertion&& from) noexcept
    : Insertion() {
    *this = ::std::move(from);
  }

  inline Insertion& operator=(const Insertion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Insertion& operator=(Insertion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Insertion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Insertion* internal_default_instance() {
    return reinterpret_cast<const Insertion*>(
               &_Insertion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Insertion& a, Insertion& b) {
    a.Swap(&b);
  }
  inline void Swap(Insertion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Insertion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Insertion* New() const final {
    return CreateMaybeMessage<Insertion>(nullptr);
  }

  Insertion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Insertion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Insertion& from);
  void MergeFrom(const Insertion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Insertion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "delivery.Insertion";
  }
  protected:
  explicit Insertion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fdelivery_2fdelivery_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsertionIdFieldNumber = 6,
    kRequestIdFieldNumber = 7,
    kSessionIdFieldNumber = 8,
    kViewIdFieldNumber = 9,
    kContentIdFieldNumber = 10,
    kAutoViewIdFieldNumber = 21,
    kUserInfoFieldNumber = 2,
    kTimingFieldNumber = 3,
    kClientInfoFieldNumber = 4,
    kPropertiesFieldNumber = 13,
    kPlatformIdFieldNumber = 1,
    kPositionFieldNumber = 12,
    kRetrievalScoreFieldNumber = 20,
    kRetrievalRankFieldNumber = 19,
  };
  // string insertion_id = 6 [json_name = "insertionId"];
  void clear_insertion_id();
  const std::string& insertion_id() const;
  void set_insertion_id(const std::string& value);
  void set_insertion_id(std::string&& value);
  void set_insertion_id(const char* value);
  void set_insertion_id(const char* value, size_t size);
  std::string* mutable_insertion_id();
  std::string* release_insertion_id();
  void set_allocated_insertion_id(std::string* insertion_id);
  private:
  const std::string& _internal_insertion_id() const;
  void _internal_set_insertion_id(const std::string& value);
  std::string* _internal_mutable_insertion_id();
  public:

  // string request_id = 7 [json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string session_id = 8 [json_name = "sessionId"];
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string view_id = 9 [json_name = "viewId"];
  void clear_view_id();
  const std::string& view_id() const;
  void set_view_id(const std::string& value);
  void set_view_id(std::string&& value);
  void set_view_id(const char* value);
  void set_view_id(const char* value, size_t size);
  std::string* mutable_view_id();
  std::string* release_view_id();
  void set_allocated_view_id(std::string* view_id);
  private:
  const std::string& _internal_view_id() const;
  void _internal_set_view_id(const std::string& value);
  std::string* _internal_mutable_view_id();
  public:

  // string content_id = 10 [json_name = "contentId"];
  void clear_content_id();
  const std::string& content_id() const;
  void set_content_id(const std::string& value);
  void set_content_id(std::string&& value);
  void set_content_id(const char* value);
  void set_content_id(const char* value, size_t size);
  std::string* mutable_content_id();
  std::string* release_content_id();
  void set_allocated_content_id(std::string* content_id);
  private:
  const std::string& _internal_content_id() const;
  void _internal_set_content_id(const std::string& value);
  std::string* _internal_mutable_content_id();
  public:

  // string auto_view_id = 21 [json_name = "autoViewId"];
  void clear_auto_view_id();
  const std::string& auto_view_id() const;
  void set_auto_view_id(const std::string& value);
  void set_auto_view_id(std::string&& value);
  void set_auto_view_id(const char* value);
  void set_auto_view_id(const char* value, size_t size);
  std::string* mutable_auto_view_id();
  std::string* release_auto_view_id();
  void set_allocated_auto_view_id(std::string* auto_view_id);
  private:
  const std::string& _internal_auto_view_id() const;
  void _internal_set_auto_view_id(const std::string& value);
  std::string* _internal_mutable_auto_view_id();
  public:

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::common::UserInfo& user_info() const;
  ::common::UserInfo* release_user_info();
  ::common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::common::UserInfo* user_info);
  private:
  const ::common::UserInfo& _internal_user_info() const;
  ::common::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::common::UserInfo* user_info);
  ::common::UserInfo* unsafe_arena_release_user_info();

  // .common.Timing timing = 3 [json_name = "timing"];
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::common::Timing& timing() const;
  ::common::Timing* release_timing();
  ::common::Timing* mutable_timing();
  void set_allocated_timing(::common::Timing* timing);
  private:
  const ::common::Timing& _internal_timing() const;
  ::common::Timing* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::common::Timing* timing);
  ::common::Timing* unsafe_arena_release_timing();

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::common::ClientInfo& client_info() const;
  ::common::ClientInfo* release_client_info();
  ::common::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::common::ClientInfo* client_info);
  private:
  const ::common::ClientInfo& _internal_client_info() const;
  ::common::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::common::ClientInfo* client_info);
  ::common::ClientInfo* unsafe_arena_release_client_info();

  // .common.Properties properties = 13 [json_name = "properties"];
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::common::Properties& properties() const;
  ::common::Properties* release_properties();
  ::common::Properties* mutable_properties();
  void set_allocated_properties(::common::Properties* properties);
  private:
  const ::common::Properties& _internal_properties() const;
  ::common::Properties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::common::Properties* properties);
  ::common::Properties* unsafe_arena_release_properties();

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 position = 12 [json_name = "position"];
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float retrieval_score = 20 [json_name = "retrievalScore"];
  bool has_retrieval_score() const;
  private:
  bool _internal_has_retrieval_score() const;
  public:
  void clear_retrieval_score();
  float retrieval_score() const;
  void set_retrieval_score(float value);
  private:
  float _internal_retrieval_score() const;
  void _internal_set_retrieval_score(float value);
  public:

  // uint64 retrieval_rank = 19 [json_name = "retrievalRank"];
  bool has_retrieval_rank() const;
  private:
  bool _internal_has_retrieval_rank() const;
  public:
  void clear_retrieval_rank();
  ::PROTOBUF_NAMESPACE_ID::uint64 retrieval_rank() const;
  void set_retrieval_rank(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_retrieval_rank() const;
  void _internal_set_retrieval_rank(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:delivery.Insertion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insertion_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_view_id_;
  ::common::UserInfo* user_info_;
  ::common::Timing* timing_;
  ::common::ClientInfo* client_info_;
  ::common::Properties* properties_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 position_;
  float retrieval_score_;
  ::PROTOBUF_NAMESPACE_ID::uint64 retrieval_rank_;
  friend struct ::TableStruct_proto_2fdelivery_2fdelivery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// uint64 platform_id = 1 [json_name = "platformId"];
inline void Request::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::platform_id() const {
  // @@protoc_insertion_point(field_get:delivery.Request.platform_id)
  return _internal_platform_id();
}
inline void Request::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void Request::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:delivery.Request.platform_id)
}

// .common.UserInfo user_info = 2 [json_name = "userInfo"];
inline bool Request::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool Request::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::common::UserInfo& Request::_internal_user_info() const {
  const ::common::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UserInfo&>(
      ::common::_UserInfo_default_instance_);
}
inline const ::common::UserInfo& Request::user_info() const {
  // @@protoc_insertion_point(field_get:delivery.Request.user_info)
  return _internal_user_info();
}
inline void Request::unsafe_arena_set_allocated_user_info(
    ::common::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Request.user_info)
}
inline ::common::UserInfo* Request::release_user_info() {
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::UserInfo* Request::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:delivery.Request.user_info)
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::common::UserInfo* Request::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::common::UserInfo* Request::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.user_info)
  return _internal_mutable_user_info();
}
inline void Request::set_allocated_user_info(::common::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.user_info)
}

// .common.Timing timing = 3 [json_name = "timing"];
inline bool Request::_internal_has_timing() const {
  return this != internal_default_instance() && timing_ != nullptr;
}
inline bool Request::has_timing() const {
  return _internal_has_timing();
}
inline const ::common::Timing& Request::_internal_timing() const {
  const ::common::Timing* p = timing_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Timing&>(
      ::common::_Timing_default_instance_);
}
inline const ::common::Timing& Request::timing() const {
  // @@protoc_insertion_point(field_get:delivery.Request.timing)
  return _internal_timing();
}
inline void Request::unsafe_arena_set_allocated_timing(
    ::common::Timing* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Request.timing)
}
inline ::common::Timing* Request::release_timing() {
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Timing* Request::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:delivery.Request.timing)
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::common::Timing* Request::_internal_mutable_timing() {
  
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Timing>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::common::Timing* Request::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.timing)
  return _internal_mutable_timing();
}
inline void Request::set_allocated_timing(::common::Timing* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing)->GetArena();
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.timing)
}

// .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
inline bool Request::_internal_has_client_info() const {
  return this != internal_default_instance() && client_info_ != nullptr;
}
inline bool Request::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::common::ClientInfo& Request::_internal_client_info() const {
  const ::common::ClientInfo* p = client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientInfo&>(
      ::common::_ClientInfo_default_instance_);
}
inline const ::common::ClientInfo& Request::client_info() const {
  // @@protoc_insertion_point(field_get:delivery.Request.client_info)
  return _internal_client_info();
}
inline void Request::unsafe_arena_set_allocated_client_info(
    ::common::ClientInfo* client_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Request.client_info)
}
inline ::common::ClientInfo* Request::release_client_info() {
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ClientInfo* Request::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:delivery.Request.client_info)
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::common::ClientInfo* Request::_internal_mutable_client_info() {
  
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientInfo>(GetArena());
    client_info_ = p;
  }
  return client_info_;
}
inline ::common::ClientInfo* Request::mutable_client_info() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.client_info)
  return _internal_mutable_client_info();
}
inline void Request::set_allocated_client_info(::common::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info)->GetArena();
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.client_info)
}

// .common.Device device = 18 [json_name = "device"];
inline bool Request::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool Request::has_device() const {
  return _internal_has_device();
}
inline const ::common::Device& Request::_internal_device() const {
  const ::common::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Device&>(
      ::common::_Device_default_instance_);
}
inline const ::common::Device& Request::device() const {
  // @@protoc_insertion_point(field_get:delivery.Request.device)
  return _internal_device();
}
inline void Request::unsafe_arena_set_allocated_device(
    ::common::Device* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Request.device)
}
inline ::common::Device* Request::release_device() {
  
  ::common::Device* temp = device_;
  device_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Device* Request::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:delivery.Request.device)
  
  ::common::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::common::Device* Request::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Device>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::common::Device* Request::mutable_device() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.device)
  return _internal_mutable_device();
}
inline void Request::set_allocated_device(::common::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device)->GetArena();
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.device)
}

// string request_id = 6 [json_name = "requestId"];
inline void Request::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& Request::request_id() const {
  // @@protoc_insertion_point(field_get:delivery.Request.request_id)
  return _internal_request_id();
}
inline void Request::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:delivery.Request.request_id)
}
inline std::string* Request::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& Request::_internal_request_id() const {
  return request_id_.Get();
}
inline void Request::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_request_id(std::string&& value) {
  
  request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Request.request_id)
}
inline void Request::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Request.request_id)
}
inline void Request::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Request.request_id)
}
inline std::string* Request::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_request_id() {
  // @@protoc_insertion_point(field_release:delivery.Request.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.request_id)
}

// string view_id = 7 [json_name = "viewId"];
inline void Request::clear_view_id() {
  view_id_.ClearToEmpty();
}
inline const std::string& Request::view_id() const {
  // @@protoc_insertion_point(field_get:delivery.Request.view_id)
  return _internal_view_id();
}
inline void Request::set_view_id(const std::string& value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:delivery.Request.view_id)
}
inline std::string* Request::mutable_view_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.view_id)
  return _internal_mutable_view_id();
}
inline const std::string& Request::_internal_view_id() const {
  return view_id_.Get();
}
inline void Request::_internal_set_view_id(const std::string& value) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_view_id(std::string&& value) {
  
  view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Request.view_id)
}
inline void Request::set_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Request.view_id)
}
inline void Request::set_view_id(const char* value,
    size_t size) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Request.view_id)
}
inline std::string* Request::_internal_mutable_view_id() {
  
  return view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_view_id() {
  // @@protoc_insertion_point(field_release:delivery.Request.view_id)
  return view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_view_id(std::string* view_id) {
  if (view_id != nullptr) {
    
  } else {
    
  }
  view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.view_id)
}

// string auto_view_id = 19 [json_name = "autoViewId"];
inline void Request::clear_auto_view_id() {
  auto_view_id_.ClearToEmpty();
}
inline const std::string& Request::auto_view_id() const {
  // @@protoc_insertion_point(field_get:delivery.Request.auto_view_id)
  return _internal_auto_view_id();
}
inline void Request::set_auto_view_id(const std::string& value) {
  _internal_set_auto_view_id(value);
  // @@protoc_insertion_point(field_set:delivery.Request.auto_view_id)
}
inline std::string* Request::mutable_auto_view_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.auto_view_id)
  return _internal_mutable_auto_view_id();
}
inline const std::string& Request::_internal_auto_view_id() const {
  return auto_view_id_.Get();
}
inline void Request::_internal_set_auto_view_id(const std::string& value) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_auto_view_id(std::string&& value) {
  
  auto_view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Request.auto_view_id)
}
inline void Request::set_auto_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Request.auto_view_id)
}
inline void Request::set_auto_view_id(const char* value,
    size_t size) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Request.auto_view_id)
}
inline std::string* Request::_internal_mutable_auto_view_id() {
  
  return auto_view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_auto_view_id() {
  // @@protoc_insertion_point(field_release:delivery.Request.auto_view_id)
  return auto_view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_auto_view_id(std::string* auto_view_id) {
  if (auto_view_id != nullptr) {
    
  } else {
    
  }
  auto_view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.auto_view_id)
}

// string session_id = 8 [json_name = "sessionId"];
inline void Request::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& Request::session_id() const {
  // @@protoc_insertion_point(field_get:delivery.Request.session_id)
  return _internal_session_id();
}
inline void Request::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:delivery.Request.session_id)
}
inline std::string* Request::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& Request::_internal_session_id() const {
  return session_id_.Get();
}
inline void Request::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Request.session_id)
}
inline void Request::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Request.session_id)
}
inline void Request::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Request.session_id)
}
inline std::string* Request::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_session_id() {
  // @@protoc_insertion_point(field_release:delivery.Request.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.session_id)
}

// string client_request_id = 14 [json_name = "clientRequestId"];
inline void Request::clear_client_request_id() {
  client_request_id_.ClearToEmpty();
}
inline const std::string& Request::client_request_id() const {
  // @@protoc_insertion_point(field_get:delivery.Request.client_request_id)
  return _internal_client_request_id();
}
inline void Request::set_client_request_id(const std::string& value) {
  _internal_set_client_request_id(value);
  // @@protoc_insertion_point(field_set:delivery.Request.client_request_id)
}
inline std::string* Request::mutable_client_request_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.client_request_id)
  return _internal_mutable_client_request_id();
}
inline const std::string& Request::_internal_client_request_id() const {
  return client_request_id_.Get();
}
inline void Request::_internal_set_client_request_id(const std::string& value) {
  
  client_request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_client_request_id(std::string&& value) {
  
  client_request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Request.client_request_id)
}
inline void Request::set_client_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Request.client_request_id)
}
inline void Request::set_client_request_id(const char* value,
    size_t size) {
  
  client_request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Request.client_request_id)
}
inline std::string* Request::_internal_mutable_client_request_id() {
  
  return client_request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_client_request_id() {
  // @@protoc_insertion_point(field_release:delivery.Request.client_request_id)
  return client_request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_client_request_id(std::string* client_request_id) {
  if (client_request_id != nullptr) {
    
  } else {
    
  }
  client_request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.client_request_id)
}

// .delivery.UseCase use_case = 9 [json_name = "useCase"];
inline void Request::clear_use_case() {
  use_case_ = 0;
}
inline ::delivery::UseCase Request::_internal_use_case() const {
  return static_cast< ::delivery::UseCase >(use_case_);
}
inline ::delivery::UseCase Request::use_case() const {
  // @@protoc_insertion_point(field_get:delivery.Request.use_case)
  return _internal_use_case();
}
inline void Request::_internal_set_use_case(::delivery::UseCase value) {
  
  use_case_ = value;
}
inline void Request::set_use_case(::delivery::UseCase value) {
  _internal_set_use_case(value);
  // @@protoc_insertion_point(field_set:delivery.Request.use_case)
}

// string search_query = 10 [json_name = "searchQuery"];
inline void Request::clear_search_query() {
  search_query_.ClearToEmpty();
}
inline const std::string& Request::search_query() const {
  // @@protoc_insertion_point(field_get:delivery.Request.search_query)
  return _internal_search_query();
}
inline void Request::set_search_query(const std::string& value) {
  _internal_set_search_query(value);
  // @@protoc_insertion_point(field_set:delivery.Request.search_query)
}
inline std::string* Request::mutable_search_query() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.search_query)
  return _internal_mutable_search_query();
}
inline const std::string& Request::_internal_search_query() const {
  return search_query_.Get();
}
inline void Request::_internal_set_search_query(const std::string& value) {
  
  search_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request::set_search_query(std::string&& value) {
  
  search_query_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Request.search_query)
}
inline void Request::set_search_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Request.search_query)
}
inline void Request::set_search_query(const char* value,
    size_t size) {
  
  search_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Request.search_query)
}
inline std::string* Request::_internal_mutable_search_query() {
  
  return search_query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request::release_search_query() {
  // @@protoc_insertion_point(field_release:delivery.Request.search_query)
  return search_query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_search_query(std::string* search_query) {
  if (search_query != nullptr) {
    
  } else {
    
  }
  search_query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.search_query)
}

// .delivery.Paging paging = 17 [json_name = "paging"];
inline bool Request::_internal_has_paging() const {
  return this != internal_default_instance() && paging_ != nullptr;
}
inline bool Request::has_paging() const {
  return _internal_has_paging();
}
inline void Request::clear_paging() {
  if (GetArena() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
}
inline const ::delivery::Paging& Request::_internal_paging() const {
  const ::delivery::Paging* p = paging_;
  return p != nullptr ? *p : reinterpret_cast<const ::delivery::Paging&>(
      ::delivery::_Paging_default_instance_);
}
inline const ::delivery::Paging& Request::paging() const {
  // @@protoc_insertion_point(field_get:delivery.Request.paging)
  return _internal_paging();
}
inline void Request::unsafe_arena_set_allocated_paging(
    ::delivery::Paging* paging) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paging_);
  }
  paging_ = paging;
  if (paging) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Request.paging)
}
inline ::delivery::Paging* Request::release_paging() {
  
  ::delivery::Paging* temp = paging_;
  paging_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::delivery::Paging* Request::unsafe_arena_release_paging() {
  // @@protoc_insertion_point(field_release:delivery.Request.paging)
  
  ::delivery::Paging* temp = paging_;
  paging_ = nullptr;
  return temp;
}
inline ::delivery::Paging* Request::_internal_mutable_paging() {
  
  if (paging_ == nullptr) {
    auto* p = CreateMaybeMessage<::delivery::Paging>(GetArena());
    paging_ = p;
  }
  return paging_;
}
inline ::delivery::Paging* Request::mutable_paging() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.paging)
  return _internal_mutable_paging();
}
inline void Request::set_allocated_paging(::delivery::Paging* paging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete paging_;
  }
  if (paging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(paging);
    if (message_arena != submessage_arena) {
      paging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paging, submessage_arena);
    }
    
  } else {
    
  }
  paging_ = paging;
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.paging)
}

// repeated .delivery.Insertion insertion = 11 [json_name = "insertion"];
inline int Request::_internal_insertion_size() const {
  return insertion_.size();
}
inline int Request::insertion_size() const {
  return _internal_insertion_size();
}
inline void Request::clear_insertion() {
  insertion_.Clear();
}
inline ::delivery::Insertion* Request::mutable_insertion(int index) {
  // @@protoc_insertion_point(field_mutable:delivery.Request.insertion)
  return insertion_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion >*
Request::mutable_insertion() {
  // @@protoc_insertion_point(field_mutable_list:delivery.Request.insertion)
  return &insertion_;
}
inline const ::delivery::Insertion& Request::_internal_insertion(int index) const {
  return insertion_.Get(index);
}
inline const ::delivery::Insertion& Request::insertion(int index) const {
  // @@protoc_insertion_point(field_get:delivery.Request.insertion)
  return _internal_insertion(index);
}
inline ::delivery::Insertion* Request::_internal_add_insertion() {
  return insertion_.Add();
}
inline ::delivery::Insertion* Request::add_insertion() {
  // @@protoc_insertion_point(field_add:delivery.Request.insertion)
  return _internal_add_insertion();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion >&
Request::insertion() const {
  // @@protoc_insertion_point(field_list:delivery.Request.insertion)
  return insertion_;
}

// repeated string insertion_matrix_headers = 20 [json_name = "insertionMatrixHeaders"];
inline int Request::_internal_insertion_matrix_headers_size() const {
  return insertion_matrix_headers_.size();
}
inline int Request::insertion_matrix_headers_size() const {
  return _internal_insertion_matrix_headers_size();
}
inline void Request::clear_insertion_matrix_headers() {
  insertion_matrix_headers_.Clear();
}
inline std::string* Request::add_insertion_matrix_headers() {
  // @@protoc_insertion_point(field_add_mutable:delivery.Request.insertion_matrix_headers)
  return _internal_add_insertion_matrix_headers();
}
inline const std::string& Request::_internal_insertion_matrix_headers(int index) const {
  return insertion_matrix_headers_.Get(index);
}
inline const std::string& Request::insertion_matrix_headers(int index) const {
  // @@protoc_insertion_point(field_get:delivery.Request.insertion_matrix_headers)
  return _internal_insertion_matrix_headers(index);
}
inline std::string* Request::mutable_insertion_matrix_headers(int index) {
  // @@protoc_insertion_point(field_mutable:delivery.Request.insertion_matrix_headers)
  return insertion_matrix_headers_.Mutable(index);
}
inline void Request::set_insertion_matrix_headers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:delivery.Request.insertion_matrix_headers)
  insertion_matrix_headers_.Mutable(index)->assign(value);
}
inline void Request::set_insertion_matrix_headers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:delivery.Request.insertion_matrix_headers)
  insertion_matrix_headers_.Mutable(index)->assign(std::move(value));
}
inline void Request::set_insertion_matrix_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  insertion_matrix_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:delivery.Request.insertion_matrix_headers)
}
inline void Request::set_insertion_matrix_headers(int index, const char* value, size_t size) {
  insertion_matrix_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:delivery.Request.insertion_matrix_headers)
}
inline std::string* Request::_internal_add_insertion_matrix_headers() {
  return insertion_matrix_headers_.Add();
}
inline void Request::add_insertion_matrix_headers(const std::string& value) {
  insertion_matrix_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:delivery.Request.insertion_matrix_headers)
}
inline void Request::add_insertion_matrix_headers(std::string&& value) {
  insertion_matrix_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:delivery.Request.insertion_matrix_headers)
}
inline void Request::add_insertion_matrix_headers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  insertion_matrix_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:delivery.Request.insertion_matrix_headers)
}
inline void Request::add_insertion_matrix_headers(const char* value, size_t size) {
  insertion_matrix_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:delivery.Request.insertion_matrix_headers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Request::insertion_matrix_headers() const {
  // @@protoc_insertion_point(field_list:delivery.Request.insertion_matrix_headers)
  return insertion_matrix_headers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Request::mutable_insertion_matrix_headers() {
  // @@protoc_insertion_point(field_mutable_list:delivery.Request.insertion_matrix_headers)
  return &insertion_matrix_headers_;
}

// .google.protobuf.ListValue insertion_matrix = 21 [json_name = "insertionMatrix"];
inline bool Request::_internal_has_insertion_matrix() const {
  return this != internal_default_instance() && insertion_matrix_ != nullptr;
}
inline bool Request::has_insertion_matrix() const {
  return _internal_has_insertion_matrix();
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& Request::_internal_insertion_matrix() const {
  const PROTOBUF_NAMESPACE_ID::ListValue* p = insertion_matrix_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::ListValue&>(
      PROTOBUF_NAMESPACE_ID::_ListValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& Request::insertion_matrix() const {
  // @@protoc_insertion_point(field_get:delivery.Request.insertion_matrix)
  return _internal_insertion_matrix();
}
inline void Request::unsafe_arena_set_allocated_insertion_matrix(
    PROTOBUF_NAMESPACE_ID::ListValue* insertion_matrix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insertion_matrix_);
  }
  insertion_matrix_ = insertion_matrix;
  if (insertion_matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Request.insertion_matrix)
}
inline PROTOBUF_NAMESPACE_ID::ListValue* Request::release_insertion_matrix() {
  
  PROTOBUF_NAMESPACE_ID::ListValue* temp = insertion_matrix_;
  insertion_matrix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* Request::unsafe_arena_release_insertion_matrix() {
  // @@protoc_insertion_point(field_release:delivery.Request.insertion_matrix)
  
  PROTOBUF_NAMESPACE_ID::ListValue* temp = insertion_matrix_;
  insertion_matrix_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* Request::_internal_mutable_insertion_matrix() {
  
  if (insertion_matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::ListValue>(GetArena());
    insertion_matrix_ = p;
  }
  return insertion_matrix_;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* Request::mutable_insertion_matrix() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.insertion_matrix)
  return _internal_mutable_insertion_matrix();
}
inline void Request::set_allocated_insertion_matrix(PROTOBUF_NAMESPACE_ID::ListValue* insertion_matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(insertion_matrix_);
  }
  if (insertion_matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insertion_matrix)->GetArena();
    if (message_arena != submessage_arena) {
      insertion_matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insertion_matrix, submessage_arena);
    }
    
  } else {
    
  }
  insertion_matrix_ = insertion_matrix;
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.insertion_matrix)
}

// .delivery.BlenderConfig blender_config = 12 [json_name = "blenderConfig"];
inline bool Request::_internal_has_blender_config() const {
  return this != internal_default_instance() && blender_config_ != nullptr;
}
inline bool Request::has_blender_config() const {
  return _internal_has_blender_config();
}
inline const ::delivery::BlenderConfig& Request::_internal_blender_config() const {
  const ::delivery::BlenderConfig* p = blender_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::delivery::BlenderConfig&>(
      ::delivery::_BlenderConfig_default_instance_);
}
inline const ::delivery::BlenderConfig& Request::blender_config() const {
  // @@protoc_insertion_point(field_get:delivery.Request.blender_config)
  return _internal_blender_config();
}
inline void Request::unsafe_arena_set_allocated_blender_config(
    ::delivery::BlenderConfig* blender_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blender_config_);
  }
  blender_config_ = blender_config;
  if (blender_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Request.blender_config)
}
inline ::delivery::BlenderConfig* Request::release_blender_config() {
  
  ::delivery::BlenderConfig* temp = blender_config_;
  blender_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::delivery::BlenderConfig* Request::unsafe_arena_release_blender_config() {
  // @@protoc_insertion_point(field_release:delivery.Request.blender_config)
  
  ::delivery::BlenderConfig* temp = blender_config_;
  blender_config_ = nullptr;
  return temp;
}
inline ::delivery::BlenderConfig* Request::_internal_mutable_blender_config() {
  
  if (blender_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::delivery::BlenderConfig>(GetArena());
    blender_config_ = p;
  }
  return blender_config_;
}
inline ::delivery::BlenderConfig* Request::mutable_blender_config() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.blender_config)
  return _internal_mutable_blender_config();
}
inline void Request::set_allocated_blender_config(::delivery::BlenderConfig* blender_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blender_config_);
  }
  if (blender_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blender_config)->GetArena();
    if (message_arena != submessage_arena) {
      blender_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blender_config, submessage_arena);
    }
    
  } else {
    
  }
  blender_config_ = blender_config;
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.blender_config)
}

// .common.Properties properties = 13 [json_name = "properties"];
inline bool Request::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool Request::has_properties() const {
  return _internal_has_properties();
}
inline const ::common::Properties& Request::_internal_properties() const {
  const ::common::Properties* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Properties&>(
      ::common::_Properties_default_instance_);
}
inline const ::common::Properties& Request::properties() const {
  // @@protoc_insertion_point(field_get:delivery.Request.properties)
  return _internal_properties();
}
inline void Request::unsafe_arena_set_allocated_properties(
    ::common::Properties* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Request.properties)
}
inline ::common::Properties* Request::release_properties() {
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Properties* Request::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:delivery.Request.properties)
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::common::Properties* Request::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Properties>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline ::common::Properties* Request::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:delivery.Request.properties)
  return _internal_mutable_properties();
}
inline void Request::set_allocated_properties(::common::Properties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties)->GetArena();
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:delivery.Request.properties)
}

// -------------------------------------------------------------------

// Paging

// string paging_id = 1 [json_name = "pagingId"];
inline void Paging::clear_paging_id() {
  paging_id_.ClearToEmpty();
}
inline const std::string& Paging::paging_id() const {
  // @@protoc_insertion_point(field_get:delivery.Paging.paging_id)
  return _internal_paging_id();
}
inline void Paging::set_paging_id(const std::string& value) {
  _internal_set_paging_id(value);
  // @@protoc_insertion_point(field_set:delivery.Paging.paging_id)
}
inline std::string* Paging::mutable_paging_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Paging.paging_id)
  return _internal_mutable_paging_id();
}
inline const std::string& Paging::_internal_paging_id() const {
  return paging_id_.Get();
}
inline void Paging::_internal_set_paging_id(const std::string& value) {
  
  paging_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Paging::set_paging_id(std::string&& value) {
  
  paging_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Paging.paging_id)
}
inline void Paging::set_paging_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paging_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Paging.paging_id)
}
inline void Paging::set_paging_id(const char* value,
    size_t size) {
  
  paging_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Paging.paging_id)
}
inline std::string* Paging::_internal_mutable_paging_id() {
  
  return paging_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Paging::release_paging_id() {
  // @@protoc_insertion_point(field_release:delivery.Paging.paging_id)
  return paging_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Paging::set_allocated_paging_id(std::string* paging_id) {
  if (paging_id != nullptr) {
    
  } else {
    
  }
  paging_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paging_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Paging.paging_id)
}

// int32 size = 2 [json_name = "size"];
inline void Paging::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Paging::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Paging::size() const {
  // @@protoc_insertion_point(field_get:delivery.Paging.size)
  return _internal_size();
}
inline void Paging::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void Paging::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:delivery.Paging.size)
}

// string cursor = 3 [json_name = "cursor"];
inline bool Paging::_internal_has_cursor() const {
  return starting_case() == kCursor;
}
inline bool Paging::has_cursor() const {
  return _internal_has_cursor();
}
inline void Paging::set_has_cursor() {
  _oneof_case_[0] = kCursor;
}
inline void Paging::clear_cursor() {
  if (_internal_has_cursor()) {
    starting_.cursor_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_starting();
  }
}
inline const std::string& Paging::cursor() const {
  // @@protoc_insertion_point(field_get:delivery.Paging.cursor)
  return _internal_cursor();
}
inline void Paging::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:delivery.Paging.cursor)
}
inline std::string* Paging::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:delivery.Paging.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& Paging::_internal_cursor() const {
  if (_internal_has_cursor()) {
    return starting_.cursor_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Paging::_internal_set_cursor(const std::string& value) {
  if (!_internal_has_cursor()) {
    clear_starting();
    set_has_cursor();
    starting_.cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  starting_.cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Paging::set_cursor(std::string&& value) {
  // @@protoc_insertion_point(field_set:delivery.Paging.cursor)
  if (!_internal_has_cursor()) {
    clear_starting();
    set_has_cursor();
    starting_.cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  starting_.cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Paging.cursor)
}
inline void Paging::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_cursor()) {
    clear_starting();
    set_has_cursor();
    starting_.cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  starting_.cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Paging.cursor)
}
inline void Paging::set_cursor(const char* value,
                             size_t size) {
  if (!_internal_has_cursor()) {
    clear_starting();
    set_has_cursor();
    starting_.cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  starting_.cursor_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Paging.cursor)
}
inline std::string* Paging::_internal_mutable_cursor() {
  if (!_internal_has_cursor()) {
    clear_starting();
    set_has_cursor();
    starting_.cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return starting_.cursor_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Paging::release_cursor() {
  // @@protoc_insertion_point(field_release:delivery.Paging.cursor)
  if (_internal_has_cursor()) {
    clear_has_starting();
    return starting_.cursor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Paging::set_allocated_cursor(std::string* cursor) {
  if (has_starting()) {
    clear_starting();
  }
  if (cursor != nullptr) {
    set_has_cursor();
    starting_.cursor_.UnsafeSetDefault(cursor);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(cursor);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.Paging.cursor)
}

// int32 offset = 4 [json_name = "offset"];
inline bool Paging::_internal_has_offset() const {
  return starting_case() == kOffset;
}
inline bool Paging::has_offset() const {
  return _internal_has_offset();
}
inline void Paging::set_has_offset() {
  _oneof_case_[0] = kOffset;
}
inline void Paging::clear_offset() {
  if (_internal_has_offset()) {
    starting_.offset_ = 0;
    clear_has_starting();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Paging::_internal_offset() const {
  if (_internal_has_offset()) {
    return starting_.offset_;
  }
  return 0;
}
inline void Paging::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_offset()) {
    clear_starting();
    set_has_offset();
  }
  starting_.offset_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Paging::offset() const {
  // @@protoc_insertion_point(field_get:delivery.Paging.offset)
  return _internal_offset();
}
inline void Paging::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:delivery.Paging.offset)
}

inline bool Paging::has_starting() const {
  return starting_case() != STARTING_NOT_SET;
}
inline void Paging::clear_has_starting() {
  _oneof_case_[0] = STARTING_NOT_SET;
}
inline Paging::StartingCase Paging::starting_case() const {
  return Paging::StartingCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// repeated .delivery.Insertion insertion = 2 [json_name = "insertion"];
inline int Response::_internal_insertion_size() const {
  return insertion_.size();
}
inline int Response::insertion_size() const {
  return _internal_insertion_size();
}
inline void Response::clear_insertion() {
  insertion_.Clear();
}
inline ::delivery::Insertion* Response::mutable_insertion(int index) {
  // @@protoc_insertion_point(field_mutable:delivery.Response.insertion)
  return insertion_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion >*
Response::mutable_insertion() {
  // @@protoc_insertion_point(field_mutable_list:delivery.Response.insertion)
  return &insertion_;
}
inline const ::delivery::Insertion& Response::_internal_insertion(int index) const {
  return insertion_.Get(index);
}
inline const ::delivery::Insertion& Response::insertion(int index) const {
  // @@protoc_insertion_point(field_get:delivery.Response.insertion)
  return _internal_insertion(index);
}
inline ::delivery::Insertion* Response::_internal_add_insertion() {
  return insertion_.Add();
}
inline ::delivery::Insertion* Response::add_insertion() {
  // @@protoc_insertion_point(field_add:delivery.Response.insertion)
  return _internal_add_insertion();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion >&
Response::insertion() const {
  // @@protoc_insertion_point(field_list:delivery.Response.insertion)
  return insertion_;
}

// .delivery.PagingInfo paging_info = 3 [json_name = "pagingInfo"];
inline bool Response::_internal_has_paging_info() const {
  return this != internal_default_instance() && paging_info_ != nullptr;
}
inline bool Response::has_paging_info() const {
  return _internal_has_paging_info();
}
inline void Response::clear_paging_info() {
  if (GetArena() == nullptr && paging_info_ != nullptr) {
    delete paging_info_;
  }
  paging_info_ = nullptr;
}
inline const ::delivery::PagingInfo& Response::_internal_paging_info() const {
  const ::delivery::PagingInfo* p = paging_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::delivery::PagingInfo&>(
      ::delivery::_PagingInfo_default_instance_);
}
inline const ::delivery::PagingInfo& Response::paging_info() const {
  // @@protoc_insertion_point(field_get:delivery.Response.paging_info)
  return _internal_paging_info();
}
inline void Response::unsafe_arena_set_allocated_paging_info(
    ::delivery::PagingInfo* paging_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paging_info_);
  }
  paging_info_ = paging_info;
  if (paging_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Response.paging_info)
}
inline ::delivery::PagingInfo* Response::release_paging_info() {
  
  ::delivery::PagingInfo* temp = paging_info_;
  paging_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::delivery::PagingInfo* Response::unsafe_arena_release_paging_info() {
  // @@protoc_insertion_point(field_release:delivery.Response.paging_info)
  
  ::delivery::PagingInfo* temp = paging_info_;
  paging_info_ = nullptr;
  return temp;
}
inline ::delivery::PagingInfo* Response::_internal_mutable_paging_info() {
  
  if (paging_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::delivery::PagingInfo>(GetArena());
    paging_info_ = p;
  }
  return paging_info_;
}
inline ::delivery::PagingInfo* Response::mutable_paging_info() {
  // @@protoc_insertion_point(field_mutable:delivery.Response.paging_info)
  return _internal_mutable_paging_info();
}
inline void Response::set_allocated_paging_info(::delivery::PagingInfo* paging_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete paging_info_;
  }
  if (paging_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(paging_info);
    if (message_arena != submessage_arena) {
      paging_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paging_info, submessage_arena);
    }
    
  } else {
    
  }
  paging_info_ = paging_info;
  // @@protoc_insertion_point(field_set_allocated:delivery.Response.paging_info)
}

// string introspection_data = 4 [json_name = "introspectionData"];
inline bool Response::_internal_has_introspection_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response::has_introspection_data() const {
  return _internal_has_introspection_data();
}
inline void Response::clear_introspection_data() {
  introspection_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::introspection_data() const {
  // @@protoc_insertion_point(field_get:delivery.Response.introspection_data)
  return _internal_introspection_data();
}
inline void Response::set_introspection_data(const std::string& value) {
  _internal_set_introspection_data(value);
  // @@protoc_insertion_point(field_set:delivery.Response.introspection_data)
}
inline std::string* Response::mutable_introspection_data() {
  // @@protoc_insertion_point(field_mutable:delivery.Response.introspection_data)
  return _internal_mutable_introspection_data();
}
inline const std::string& Response::_internal_introspection_data() const {
  return introspection_data_.Get();
}
inline void Response::_internal_set_introspection_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  introspection_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_introspection_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  introspection_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Response.introspection_data)
}
inline void Response::set_introspection_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  introspection_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Response.introspection_data)
}
inline void Response::set_introspection_data(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  introspection_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Response.introspection_data)
}
inline std::string* Response::_internal_mutable_introspection_data() {
  _has_bits_[0] |= 0x00000001u;
  return introspection_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_introspection_data() {
  // @@protoc_insertion_point(field_release:delivery.Response.introspection_data)
  if (!_internal_has_introspection_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return introspection_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_introspection_data(std::string* introspection_data) {
  if (introspection_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  introspection_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), introspection_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Response.introspection_data)
}

// string request_id = 5 [json_name = "requestId"];
inline void Response::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& Response::request_id() const {
  // @@protoc_insertion_point(field_get:delivery.Response.request_id)
  return _internal_request_id();
}
inline void Response::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:delivery.Response.request_id)
}
inline std::string* Response::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Response.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& Response::_internal_request_id() const {
  return request_id_.Get();
}
inline void Response::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Response::set_request_id(std::string&& value) {
  
  request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Response.request_id)
}
inline void Response::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Response.request_id)
}
inline void Response::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Response.request_id)
}
inline std::string* Response::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Response::release_request_id() {
  // @@protoc_insertion_point(field_release:delivery.Response.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Response.request_id)
}

// -------------------------------------------------------------------

// PagingInfo

// string paging_id = 1 [json_name = "pagingId"];
inline void PagingInfo::clear_paging_id() {
  paging_id_.ClearToEmpty();
}
inline const std::string& PagingInfo::paging_id() const {
  // @@protoc_insertion_point(field_get:delivery.PagingInfo.paging_id)
  return _internal_paging_id();
}
inline void PagingInfo::set_paging_id(const std::string& value) {
  _internal_set_paging_id(value);
  // @@protoc_insertion_point(field_set:delivery.PagingInfo.paging_id)
}
inline std::string* PagingInfo::mutable_paging_id() {
  // @@protoc_insertion_point(field_mutable:delivery.PagingInfo.paging_id)
  return _internal_mutable_paging_id();
}
inline const std::string& PagingInfo::_internal_paging_id() const {
  return paging_id_.Get();
}
inline void PagingInfo::_internal_set_paging_id(const std::string& value) {
  
  paging_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PagingInfo::set_paging_id(std::string&& value) {
  
  paging_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.PagingInfo.paging_id)
}
inline void PagingInfo::set_paging_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paging_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.PagingInfo.paging_id)
}
inline void PagingInfo::set_paging_id(const char* value,
    size_t size) {
  
  paging_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.PagingInfo.paging_id)
}
inline std::string* PagingInfo::_internal_mutable_paging_id() {
  
  return paging_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PagingInfo::release_paging_id() {
  // @@protoc_insertion_point(field_release:delivery.PagingInfo.paging_id)
  return paging_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PagingInfo::set_allocated_paging_id(std::string* paging_id) {
  if (paging_id != nullptr) {
    
  } else {
    
  }
  paging_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paging_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.PagingInfo.paging_id)
}

// string cursor = 2 [json_name = "cursor"];
inline void PagingInfo::clear_cursor() {
  cursor_.ClearToEmpty();
}
inline const std::string& PagingInfo::cursor() const {
  // @@protoc_insertion_point(field_get:delivery.PagingInfo.cursor)
  return _internal_cursor();
}
inline void PagingInfo::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:delivery.PagingInfo.cursor)
}
inline std::string* PagingInfo::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:delivery.PagingInfo.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& PagingInfo::_internal_cursor() const {
  return cursor_.Get();
}
inline void PagingInfo::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PagingInfo::set_cursor(std::string&& value) {
  
  cursor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.PagingInfo.cursor)
}
inline void PagingInfo::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.PagingInfo.cursor)
}
inline void PagingInfo::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.PagingInfo.cursor)
}
inline std::string* PagingInfo::_internal_mutable_cursor() {
  
  return cursor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PagingInfo::release_cursor() {
  // @@protoc_insertion_point(field_release:delivery.PagingInfo.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PagingInfo::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.PagingInfo.cursor)
}

// -------------------------------------------------------------------

// Insertion

// uint64 platform_id = 1 [json_name = "platformId"];
inline void Insertion::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Insertion::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Insertion::platform_id() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.platform_id)
  return _internal_platform_id();
}
inline void Insertion::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void Insertion::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:delivery.Insertion.platform_id)
}

// .common.UserInfo user_info = 2 [json_name = "userInfo"];
inline bool Insertion::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool Insertion::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::common::UserInfo& Insertion::_internal_user_info() const {
  const ::common::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UserInfo&>(
      ::common::_UserInfo_default_instance_);
}
inline const ::common::UserInfo& Insertion::user_info() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.user_info)
  return _internal_user_info();
}
inline void Insertion::unsafe_arena_set_allocated_user_info(
    ::common::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Insertion.user_info)
}
inline ::common::UserInfo* Insertion::release_user_info() {
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::UserInfo* Insertion::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:delivery.Insertion.user_info)
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::common::UserInfo* Insertion::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::common::UserInfo* Insertion::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:delivery.Insertion.user_info)
  return _internal_mutable_user_info();
}
inline void Insertion::set_allocated_user_info(::common::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:delivery.Insertion.user_info)
}

// .common.Timing timing = 3 [json_name = "timing"];
inline bool Insertion::_internal_has_timing() const {
  return this != internal_default_instance() && timing_ != nullptr;
}
inline bool Insertion::has_timing() const {
  return _internal_has_timing();
}
inline const ::common::Timing& Insertion::_internal_timing() const {
  const ::common::Timing* p = timing_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Timing&>(
      ::common::_Timing_default_instance_);
}
inline const ::common::Timing& Insertion::timing() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.timing)
  return _internal_timing();
}
inline void Insertion::unsafe_arena_set_allocated_timing(
    ::common::Timing* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Insertion.timing)
}
inline ::common::Timing* Insertion::release_timing() {
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Timing* Insertion::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:delivery.Insertion.timing)
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::common::Timing* Insertion::_internal_mutable_timing() {
  
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Timing>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::common::Timing* Insertion::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:delivery.Insertion.timing)
  return _internal_mutable_timing();
}
inline void Insertion::set_allocated_timing(::common::Timing* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing)->GetArena();
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:delivery.Insertion.timing)
}

// .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
inline bool Insertion::_internal_has_client_info() const {
  return this != internal_default_instance() && client_info_ != nullptr;
}
inline bool Insertion::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::common::ClientInfo& Insertion::_internal_client_info() const {
  const ::common::ClientInfo* p = client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientInfo&>(
      ::common::_ClientInfo_default_instance_);
}
inline const ::common::ClientInfo& Insertion::client_info() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.client_info)
  return _internal_client_info();
}
inline void Insertion::unsafe_arena_set_allocated_client_info(
    ::common::ClientInfo* client_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Insertion.client_info)
}
inline ::common::ClientInfo* Insertion::release_client_info() {
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ClientInfo* Insertion::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:delivery.Insertion.client_info)
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::common::ClientInfo* Insertion::_internal_mutable_client_info() {
  
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientInfo>(GetArena());
    client_info_ = p;
  }
  return client_info_;
}
inline ::common::ClientInfo* Insertion::mutable_client_info() {
  // @@protoc_insertion_point(field_mutable:delivery.Insertion.client_info)
  return _internal_mutable_client_info();
}
inline void Insertion::set_allocated_client_info(::common::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info)->GetArena();
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:delivery.Insertion.client_info)
}

// string insertion_id = 6 [json_name = "insertionId"];
inline void Insertion::clear_insertion_id() {
  insertion_id_.ClearToEmpty();
}
inline const std::string& Insertion::insertion_id() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.insertion_id)
  return _internal_insertion_id();
}
inline void Insertion::set_insertion_id(const std::string& value) {
  _internal_set_insertion_id(value);
  // @@protoc_insertion_point(field_set:delivery.Insertion.insertion_id)
}
inline std::string* Insertion::mutable_insertion_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Insertion.insertion_id)
  return _internal_mutable_insertion_id();
}
inline const std::string& Insertion::_internal_insertion_id() const {
  return insertion_id_.Get();
}
inline void Insertion::_internal_set_insertion_id(const std::string& value) {
  
  insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Insertion::set_insertion_id(std::string&& value) {
  
  insertion_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Insertion.insertion_id)
}
inline void Insertion::set_insertion_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Insertion.insertion_id)
}
inline void Insertion::set_insertion_id(const char* value,
    size_t size) {
  
  insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Insertion.insertion_id)
}
inline std::string* Insertion::_internal_mutable_insertion_id() {
  
  return insertion_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Insertion::release_insertion_id() {
  // @@protoc_insertion_point(field_release:delivery.Insertion.insertion_id)
  return insertion_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Insertion::set_allocated_insertion_id(std::string* insertion_id) {
  if (insertion_id != nullptr) {
    
  } else {
    
  }
  insertion_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insertion_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Insertion.insertion_id)
}

// string request_id = 7 [json_name = "requestId"];
inline void Insertion::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& Insertion::request_id() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.request_id)
  return _internal_request_id();
}
inline void Insertion::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:delivery.Insertion.request_id)
}
inline std::string* Insertion::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Insertion.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& Insertion::_internal_request_id() const {
  return request_id_.Get();
}
inline void Insertion::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Insertion::set_request_id(std::string&& value) {
  
  request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Insertion.request_id)
}
inline void Insertion::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Insertion.request_id)
}
inline void Insertion::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Insertion.request_id)
}
inline std::string* Insertion::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Insertion::release_request_id() {
  // @@protoc_insertion_point(field_release:delivery.Insertion.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Insertion::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Insertion.request_id)
}

// string view_id = 9 [json_name = "viewId"];
inline void Insertion::clear_view_id() {
  view_id_.ClearToEmpty();
}
inline const std::string& Insertion::view_id() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.view_id)
  return _internal_view_id();
}
inline void Insertion::set_view_id(const std::string& value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:delivery.Insertion.view_id)
}
inline std::string* Insertion::mutable_view_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Insertion.view_id)
  return _internal_mutable_view_id();
}
inline const std::string& Insertion::_internal_view_id() const {
  return view_id_.Get();
}
inline void Insertion::_internal_set_view_id(const std::string& value) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Insertion::set_view_id(std::string&& value) {
  
  view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Insertion.view_id)
}
inline void Insertion::set_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Insertion.view_id)
}
inline void Insertion::set_view_id(const char* value,
    size_t size) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Insertion.view_id)
}
inline std::string* Insertion::_internal_mutable_view_id() {
  
  return view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Insertion::release_view_id() {
  // @@protoc_insertion_point(field_release:delivery.Insertion.view_id)
  return view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Insertion::set_allocated_view_id(std::string* view_id) {
  if (view_id != nullptr) {
    
  } else {
    
  }
  view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Insertion.view_id)
}

// string auto_view_id = 21 [json_name = "autoViewId"];
inline void Insertion::clear_auto_view_id() {
  auto_view_id_.ClearToEmpty();
}
inline const std::string& Insertion::auto_view_id() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.auto_view_id)
  return _internal_auto_view_id();
}
inline void Insertion::set_auto_view_id(const std::string& value) {
  _internal_set_auto_view_id(value);
  // @@protoc_insertion_point(field_set:delivery.Insertion.auto_view_id)
}
inline std::string* Insertion::mutable_auto_view_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Insertion.auto_view_id)
  return _internal_mutable_auto_view_id();
}
inline const std::string& Insertion::_internal_auto_view_id() const {
  return auto_view_id_.Get();
}
inline void Insertion::_internal_set_auto_view_id(const std::string& value) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Insertion::set_auto_view_id(std::string&& value) {
  
  auto_view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Insertion.auto_view_id)
}
inline void Insertion::set_auto_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Insertion.auto_view_id)
}
inline void Insertion::set_auto_view_id(const char* value,
    size_t size) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Insertion.auto_view_id)
}
inline std::string* Insertion::_internal_mutable_auto_view_id() {
  
  return auto_view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Insertion::release_auto_view_id() {
  // @@protoc_insertion_point(field_release:delivery.Insertion.auto_view_id)
  return auto_view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Insertion::set_allocated_auto_view_id(std::string* auto_view_id) {
  if (auto_view_id != nullptr) {
    
  } else {
    
  }
  auto_view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Insertion.auto_view_id)
}

// string session_id = 8 [json_name = "sessionId"];
inline void Insertion::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& Insertion::session_id() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.session_id)
  return _internal_session_id();
}
inline void Insertion::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:delivery.Insertion.session_id)
}
inline std::string* Insertion::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Insertion.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& Insertion::_internal_session_id() const {
  return session_id_.Get();
}
inline void Insertion::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Insertion::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Insertion.session_id)
}
inline void Insertion::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Insertion.session_id)
}
inline void Insertion::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Insertion.session_id)
}
inline std::string* Insertion::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Insertion::release_session_id() {
  // @@protoc_insertion_point(field_release:delivery.Insertion.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Insertion::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Insertion.session_id)
}

// string content_id = 10 [json_name = "contentId"];
inline void Insertion::clear_content_id() {
  content_id_.ClearToEmpty();
}
inline const std::string& Insertion::content_id() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.content_id)
  return _internal_content_id();
}
inline void Insertion::set_content_id(const std::string& value) {
  _internal_set_content_id(value);
  // @@protoc_insertion_point(field_set:delivery.Insertion.content_id)
}
inline std::string* Insertion::mutable_content_id() {
  // @@protoc_insertion_point(field_mutable:delivery.Insertion.content_id)
  return _internal_mutable_content_id();
}
inline const std::string& Insertion::_internal_content_id() const {
  return content_id_.Get();
}
inline void Insertion::_internal_set_content_id(const std::string& value) {
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Insertion::set_content_id(std::string&& value) {
  
  content_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:delivery.Insertion.content_id)
}
inline void Insertion::set_content_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:delivery.Insertion.content_id)
}
inline void Insertion::set_content_id(const char* value,
    size_t size) {
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:delivery.Insertion.content_id)
}
inline std::string* Insertion::_internal_mutable_content_id() {
  
  return content_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Insertion::release_content_id() {
  // @@protoc_insertion_point(field_release:delivery.Insertion.content_id)
  return content_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Insertion::set_allocated_content_id(std::string* content_id) {
  if (content_id != nullptr) {
    
  } else {
    
  }
  content_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:delivery.Insertion.content_id)
}

// uint64 position = 12 [json_name = "position"];
inline bool Insertion::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Insertion::has_position() const {
  return _internal_has_position();
}
inline void Insertion::clear_position() {
  position_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Insertion::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Insertion::position() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.position)
  return _internal_position();
}
inline void Insertion::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  position_ = value;
}
inline void Insertion::set_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:delivery.Insertion.position)
}

// .common.Properties properties = 13 [json_name = "properties"];
inline bool Insertion::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool Insertion::has_properties() const {
  return _internal_has_properties();
}
inline const ::common::Properties& Insertion::_internal_properties() const {
  const ::common::Properties* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Properties&>(
      ::common::_Properties_default_instance_);
}
inline const ::common::Properties& Insertion::properties() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.properties)
  return _internal_properties();
}
inline void Insertion::unsafe_arena_set_allocated_properties(
    ::common::Properties* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:delivery.Insertion.properties)
}
inline ::common::Properties* Insertion::release_properties() {
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Properties* Insertion::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:delivery.Insertion.properties)
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::common::Properties* Insertion::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Properties>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline ::common::Properties* Insertion::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:delivery.Insertion.properties)
  return _internal_mutable_properties();
}
inline void Insertion::set_allocated_properties(::common::Properties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties)->GetArena();
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:delivery.Insertion.properties)
}

// uint64 retrieval_rank = 19 [json_name = "retrievalRank"];
inline bool Insertion::_internal_has_retrieval_rank() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Insertion::has_retrieval_rank() const {
  return _internal_has_retrieval_rank();
}
inline void Insertion::clear_retrieval_rank() {
  retrieval_rank_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Insertion::_internal_retrieval_rank() const {
  return retrieval_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Insertion::retrieval_rank() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.retrieval_rank)
  return _internal_retrieval_rank();
}
inline void Insertion::_internal_set_retrieval_rank(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  retrieval_rank_ = value;
}
inline void Insertion::set_retrieval_rank(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_retrieval_rank(value);
  // @@protoc_insertion_point(field_set:delivery.Insertion.retrieval_rank)
}

// float retrieval_score = 20 [json_name = "retrievalScore"];
inline bool Insertion::_internal_has_retrieval_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Insertion::has_retrieval_score() const {
  return _internal_has_retrieval_score();
}
inline void Insertion::clear_retrieval_score() {
  retrieval_score_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Insertion::_internal_retrieval_score() const {
  return retrieval_score_;
}
inline float Insertion::retrieval_score() const {
  // @@protoc_insertion_point(field_get:delivery.Insertion.retrieval_score)
  return _internal_retrieval_score();
}
inline void Insertion::_internal_set_retrieval_score(float value) {
  _has_bits_[0] |= 0x00000002u;
  retrieval_score_ = value;
}
inline void Insertion::set_retrieval_score(float value) {
  _internal_set_retrieval_score(value);
  // @@protoc_insertion_point(field_set:delivery.Insertion.retrieval_score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace delivery

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::delivery::UseCase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::delivery::UseCase>() {
  return ::delivery::UseCase_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fdelivery_2fdelivery_2eproto
