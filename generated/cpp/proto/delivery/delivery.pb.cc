// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/delivery/delivery.proto

#include "proto/delivery/delivery.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace delivery {
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : insertion_()
  , insertion_matrix_headers_()
  , request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , search_query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auto_view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_info_(nullptr)
  , timing_(nullptr)
  , client_info_(nullptr)
  , blender_config_(nullptr)
  , properties_(nullptr)
  , paging_(nullptr)
  , device_(nullptr)
  , insertion_matrix_(nullptr)
  , platform_id_(PROTOBUF_ULONGLONG(0))
  , use_case_(0)
{}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr Paging::Paging(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paging_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(0)
  , _oneof_case_{}{}
struct PagingDefaultTypeInternal {
  constexpr PagingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PagingDefaultTypeInternal() {}
  union {
    Paging _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PagingDefaultTypeInternal _Paging_default_instance_;
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : insertion_()
  , introspection_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , paging_info_(nullptr){}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
constexpr PagingInfo::PagingInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paging_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cursor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PagingInfoDefaultTypeInternal {
  constexpr PagingInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PagingInfoDefaultTypeInternal() {}
  union {
    PagingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PagingInfoDefaultTypeInternal _PagingInfo_default_instance_;
constexpr Insertion::Insertion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : insertion_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auto_view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_info_(nullptr)
  , timing_(nullptr)
  , client_info_(nullptr)
  , properties_(nullptr)
  , platform_id_(PROTOBUF_ULONGLONG(0))
  , position_(PROTOBUF_ULONGLONG(0))
  , retrieval_score_(0)
  , retrieval_rank_(PROTOBUF_ULONGLONG(0)){}
struct InsertionDefaultTypeInternal {
  constexpr InsertionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertionDefaultTypeInternal() {}
  union {
    Insertion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertionDefaultTypeInternal _Insertion_default_instance_;
}  // namespace delivery
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fdelivery_2fdelivery_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fdelivery_2fdelivery_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fdelivery_2fdelivery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fdelivery_2fdelivery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::Request, platform_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, user_info_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, timing_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, client_info_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, device_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, request_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, view_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, auto_view_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, session_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, client_request_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, use_case_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, search_query_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, paging_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, insertion_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, insertion_matrix_headers_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, insertion_matrix_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, blender_config_),
  PROTOBUF_FIELD_OFFSET(::delivery::Request, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::Paging, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::delivery::Paging, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::Paging, paging_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Paging, size_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::delivery::Paging, starting_),
  PROTOBUF_FIELD_OFFSET(::delivery::Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::delivery::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::Response, insertion_),
  PROTOBUF_FIELD_OFFSET(::delivery::Response, paging_info_),
  PROTOBUF_FIELD_OFFSET(::delivery::Response, introspection_data_),
  PROTOBUF_FIELD_OFFSET(::delivery::Response, request_id_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::PagingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::PagingInfo, paging_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::PagingInfo, cursor_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, platform_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, user_info_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, timing_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, client_info_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, insertion_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, request_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, view_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, auto_view_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, session_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, content_id_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, position_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, properties_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, retrieval_rank_),
  PROTOBUF_FIELD_OFFSET(::delivery::Insertion, retrieval_score_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  2,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::delivery::Request)},
  { 23, -1, sizeof(::delivery::Paging)},
  { 33, 42, sizeof(::delivery::Response)},
  { 46, -1, sizeof(::delivery::PagingInfo)},
  { 53, 72, sizeof(::delivery::Insertion)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_Paging_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_PagingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_Insertion_default_instance_),
};

const char descriptor_table_protodef_proto_2fdelivery_2fdelivery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035proto/delivery/delivery.proto\022\010deliver"
  "y\032\034google/protobuf/struct.proto\032\031proto/c"
  "ommon/common.proto\032\034proto/delivery/blend"
  "er.proto\"\262\006\n\007Request\022\037\n\013platform_id\030\001 \001("
  "\004R\nplatformId\022-\n\tuser_info\030\002 \001(\0132\020.commo"
  "n.UserInfoR\010userInfo\022&\n\006timing\030\003 \001(\0132\016.c"
  "ommon.TimingR\006timing\0223\n\013client_info\030\004 \001("
  "\0132\022.common.ClientInfoR\nclientInfo\022&\n\006dev"
  "ice\030\022 \001(\0132\016.common.DeviceR\006device\022\035\n\nreq"
  "uest_id\030\006 \001(\tR\trequestId\022\027\n\007view_id\030\007 \001("
  "\tR\006viewId\022 \n\014auto_view_id\030\023 \001(\tR\nautoVie"
  "wId\022\035\n\nsession_id\030\010 \001(\tR\tsessionId\022*\n\021cl"
  "ient_request_id\030\016 \001(\tR\017clientRequestId\022,"
  "\n\010use_case\030\t \001(\0162\021.delivery.UseCaseR\007use"
  "Case\022!\n\014search_query\030\n \001(\tR\013searchQuery\022"
  "(\n\006paging\030\021 \001(\0132\020.delivery.PagingR\006pagin"
  "g\0221\n\tinsertion\030\013 \003(\0132\023.delivery.Insertio"
  "nR\tinsertion\0228\n\030insertion_matrix_headers"
  "\030\024 \003(\tR\026insertionMatrixHeaders\022E\n\020insert"
  "ion_matrix\030\025 \001(\0132\032.google.protobuf.ListV"
  "alueR\017insertionMatrix\022>\n\016blender_config\030"
  "\014 \001(\0132\027.delivery.BlenderConfigR\rblenderC"
  "onfig\0222\n\nproperties\030\r \001(\0132\022.common.Prope"
  "rtiesR\npropertiesJ\004\010\005\020\006J\004\010\017\020\020\"y\n\006Paging\022"
  "\033\n\tpaging_id\030\001 \001(\tR\010pagingId\022\022\n\004size\030\002 \001"
  "(\005R\004size\022\030\n\006cursor\030\003 \001(\tH\000R\006cursor\022\030\n\006of"
  "fset\030\004 \001(\005H\000R\006offsetB\n\n\010starting\"\344\001\n\010Res"
  "ponse\0221\n\tinsertion\030\002 \003(\0132\023.delivery.Inse"
  "rtionR\tinsertion\0225\n\013paging_info\030\003 \001(\0132\024."
  "delivery.PagingInfoR\npagingInfo\0222\n\022intro"
  "spection_data\030\004 \001(\tH\000R\021introspectionData"
  "\210\001\001\022\035\n\nrequest_id\030\005 \001(\tR\trequestIdB\025\n\023_i"
  "ntrospection_dataJ\004\010\001\020\002\"A\n\nPagingInfo\022\033\n"
  "\tpaging_id\030\001 \001(\tR\010pagingId\022\026\n\006cursor\030\002 \001"
  "(\tR\006cursor\"\214\005\n\tInsertion\022\037\n\013platform_id\030"
  "\001 \001(\004R\nplatformId\022-\n\tuser_info\030\002 \001(\0132\020.c"
  "ommon.UserInfoR\010userInfo\022&\n\006timing\030\003 \001(\013"
  "2\016.common.TimingR\006timing\0223\n\013client_info\030"
  "\004 \001(\0132\022.common.ClientInfoR\nclientInfo\022!\n"
  "\014insertion_id\030\006 \001(\tR\013insertionId\022\035\n\nrequ"
  "est_id\030\007 \001(\tR\trequestId\022\027\n\007view_id\030\t \001(\t"
  "R\006viewId\022 \n\014auto_view_id\030\025 \001(\tR\nautoView"
  "Id\022\035\n\nsession_id\030\010 \001(\tR\tsessionId\022\035\n\ncon"
  "tent_id\030\n \001(\tR\tcontentId\022\037\n\010position\030\014 \001"
  "(\004H\000R\010position\210\001\001\0222\n\nproperties\030\r \001(\0132\022."
  "common.PropertiesR\nproperties\022*\n\016retriev"
  "al_rank\030\023 \001(\004H\001R\rretrievalRank\210\001\001\022,\n\017ret"
  "rieval_score\030\024 \001(\002H\002R\016retrievalScore\210\001\001B"
  "\013\n\t_positionB\021\n\017_retrieval_rankB\022\n\020_retr"
  "ieval_scoreJ\004\010\005\020\006J\004\010\013\020\014J\004\010\016\020\017J\004\010\017\020\020J\004\010\020\020"
  "\021J\004\010\021\020\022J\004\010\022\020\023J\004\010\026\020\027J\004\010\027\020\030*\332\001\n\007UseCase\022\024\n"
  "\020UNKNOWN_USE_CASE\020\000\022\n\n\006CUSTOM\020\001\022\n\n\006SEARC"
  "H\020\002\022\026\n\022SEARCH_SUGGESTIONS\020\003\022\010\n\004FEED\020\004\022\023\n"
  "\017RELATED_CONTENT\020\005\022\014\n\010CLOSE_UP\020\006\022\024\n\020CATE"
  "GORY_CONTENT\020\007\022\016\n\nMY_CONTENT\020\010\022\024\n\020MY_SAV"
  "ED_CONTENT\020\t\022\022\n\016SELLER_CONTENT\020\n\022\014\n\010DISC"
  "OVER\020\013Bb\n\032ai.promoted.proto.deliveryB\010De"
  "liveryP\001Z8github.com/promotedai/schema/g"
  "enerated/go/proto/deliveryb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fdelivery_2fdelivery_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_proto_2fcommon_2fcommon_2eproto,
  &::descriptor_table_proto_2fdelivery_2fblender_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fdelivery_2fdelivery_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fdelivery_2fdelivery_2eproto = {
  false, false, 2354, descriptor_table_protodef_proto_2fdelivery_2fdelivery_2eproto, "proto/delivery/delivery.proto", 
  &descriptor_table_proto_2fdelivery_2fdelivery_2eproto_once, descriptor_table_proto_2fdelivery_2fdelivery_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_proto_2fdelivery_2fdelivery_2eproto::offsets,
  file_level_metadata_proto_2fdelivery_2fdelivery_2eproto, file_level_enum_descriptors_proto_2fdelivery_2fdelivery_2eproto, file_level_service_descriptors_proto_2fdelivery_2fdelivery_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_proto_2fdelivery_2fdelivery_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fdelivery_2fdelivery_2eproto);
  return descriptor_table_proto_2fdelivery_2fdelivery_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fdelivery_2fdelivery_2eproto(&descriptor_table_proto_2fdelivery_2fdelivery_2eproto);
namespace delivery {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UseCase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fdelivery_2fdelivery_2eproto);
  return file_level_enum_descriptors_proto_2fdelivery_2fdelivery_2eproto[0];
}
bool UseCase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Request::_Internal {
 public:
  static const ::common::UserInfo& user_info(const Request* msg);
  static const ::common::Timing& timing(const Request* msg);
  static const ::common::ClientInfo& client_info(const Request* msg);
  static const ::common::Device& device(const Request* msg);
  static const ::delivery::Paging& paging(const Request* msg);
  static const PROTOBUF_NAMESPACE_ID::ListValue& insertion_matrix(const Request* msg);
  static const ::delivery::BlenderConfig& blender_config(const Request* msg);
  static const ::common::Properties& properties(const Request* msg);
};

const ::common::UserInfo&
Request::_Internal::user_info(const Request* msg) {
  return *msg->user_info_;
}
const ::common::Timing&
Request::_Internal::timing(const Request* msg) {
  return *msg->timing_;
}
const ::common::ClientInfo&
Request::_Internal::client_info(const Request* msg) {
  return *msg->client_info_;
}
const ::common::Device&
Request::_Internal::device(const Request* msg) {
  return *msg->device_;
}
const ::delivery::Paging&
Request::_Internal::paging(const Request* msg) {
  return *msg->paging_;
}
const PROTOBUF_NAMESPACE_ID::ListValue&
Request::_Internal::insertion_matrix(const Request* msg) {
  return *msg->insertion_matrix_;
}
const ::delivery::BlenderConfig&
Request::_Internal::blender_config(const Request* msg) {
  return *msg->blender_config_;
}
const ::common::Properties&
Request::_Internal::properties(const Request* msg) {
  return *msg->properties_;
}
void Request::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
void Request::clear_timing() {
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
}
void Request::clear_client_info() {
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
void Request::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
void Request::clear_insertion_matrix() {
  if (GetArena() == nullptr && insertion_matrix_ != nullptr) {
    delete insertion_matrix_;
  }
  insertion_matrix_ = nullptr;
}
void Request::clear_blender_config() {
  if (GetArena() == nullptr && blender_config_ != nullptr) {
    delete blender_config_;
  }
  blender_config_ = nullptr;
}
void Request::clear_properties() {
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  insertion_(arena),
  insertion_matrix_headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      insertion_(from.insertion_),
      insertion_matrix_headers_(from.insertion_matrix_headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArena());
  }
  view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_view_id().empty()) {
    view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_view_id(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  search_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_search_query().empty()) {
    search_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_query(), 
      GetArena());
  }
  client_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_request_id().empty()) {
    client_request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_request_id(), 
      GetArena());
  }
  auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auto_view_id().empty()) {
    auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auto_view_id(), 
      GetArena());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::common::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  if (from._internal_has_timing()) {
    timing_ = new ::common::Timing(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::common::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  if (from._internal_has_blender_config()) {
    blender_config_ = new ::delivery::BlenderConfig(*from.blender_config_);
  } else {
    blender_config_ = nullptr;
  }
  if (from._internal_has_properties()) {
    properties_ = new ::common::Properties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  if (from._internal_has_paging()) {
    paging_ = new ::delivery::Paging(*from.paging_);
  } else {
    paging_ = nullptr;
  }
  if (from._internal_has_device()) {
    device_ = new ::common::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from._internal_has_insertion_matrix()) {
    insertion_matrix_ = new PROTOBUF_NAMESPACE_ID::ListValue(*from.insertion_matrix_);
  } else {
    insertion_matrix_ = nullptr;
  }
  ::memcpy(&platform_id_, &from.platform_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_case_) -
    reinterpret_cast<char*>(&platform_id_)) + sizeof(use_case_));
  // @@protoc_insertion_point(copy_constructor:delivery.Request)
}

void Request::SharedCtor() {
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
search_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
client_request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_case_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(use_case_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:delivery.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  search_query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auto_view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete timing_;
  if (this != internal_default_instance()) delete client_info_;
  if (this != internal_default_instance()) delete blender_config_;
  if (this != internal_default_instance()) delete properties_;
  if (this != internal_default_instance()) delete paging_;
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete insertion_matrix_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  insertion_.Clear();
  insertion_matrix_headers_.Clear();
  request_id_.ClearToEmpty();
  view_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  search_query_.ClearToEmpty();
  client_request_id_.ClearToEmpty();
  auto_view_id_.ClearToEmpty();
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  if (GetArena() == nullptr && blender_config_ != nullptr) {
    delete blender_config_;
  }
  blender_config_ = nullptr;
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  if (GetArena() == nullptr && paging_ != nullptr) {
    delete paging_;
  }
  paging_ = nullptr;
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  if (GetArena() == nullptr && insertion_matrix_ != nullptr) {
    delete insertion_matrix_;
  }
  insertion_matrix_ = nullptr;
  ::memset(&platform_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_case_) -
      reinterpret_cast<char*>(&platform_id_)) + sizeof(use_case_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.UserInfo user_info = 2 [json_name = "userInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Timing timing = 3 [json_name = "timing"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 6 [json_name = "requestId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Request.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string view_id = 7 [json_name = "viewId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Request.view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 8 [json_name = "sessionId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Request.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.UseCase use_case = 9 [json_name = "useCase"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_case(static_cast<::delivery::UseCase>(val));
        } else goto handle_unusual;
        continue;
      // string search_query = 10 [json_name = "searchQuery"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_search_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Request.search_query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .delivery.Insertion insertion = 11 [json_name = "insertion"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insertion(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .delivery.BlenderConfig blender_config = 12 [json_name = "blenderConfig"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_blender_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Properties properties = 13 [json_name = "properties"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_request_id = 14 [json_name = "clientRequestId"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_client_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Request.client_request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.Paging paging = 17 [json_name = "paging"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Device device = 18 [json_name = "device"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auto_view_id = 19 [json_name = "autoViewId"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_auto_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Request.auto_view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string insertion_matrix_headers = 20 [json_name = "insertionMatrixHeaders"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_insertion_matrix_headers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Request.insertion_matrix_headers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.ListValue insertion_matrix = 21 [json_name = "insertionMatrix"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_insertion_matrix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_platform_id(), target);
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timing(this), target, stream);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_info(this), target, stream);
  }

  // string request_id = 6 [json_name = "requestId"];
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Request.request_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_request_id(), target);
  }

  // string view_id = 7 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_view_id().data(), static_cast<int>(this->_internal_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Request.view_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_view_id(), target);
  }

  // string session_id = 8 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Request.session_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_session_id(), target);
  }

  // .delivery.UseCase use_case = 9 [json_name = "useCase"];
  if (this->use_case() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_use_case(), target);
  }

  // string search_query = 10 [json_name = "searchQuery"];
  if (this->search_query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_query().data(), static_cast<int>(this->_internal_search_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Request.search_query");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_search_query(), target);
  }

  // repeated .delivery.Insertion insertion = 11 [json_name = "insertion"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_insertion_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_insertion(i), target, stream);
  }

  // .delivery.BlenderConfig blender_config = 12 [json_name = "blenderConfig"];
  if (this->has_blender_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::blender_config(this), target, stream);
  }

  // .common.Properties properties = 13 [json_name = "properties"];
  if (this->has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::properties(this), target, stream);
  }

  // string client_request_id = 14 [json_name = "clientRequestId"];
  if (this->client_request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_request_id().data(), static_cast<int>(this->_internal_client_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Request.client_request_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_client_request_id(), target);
  }

  // .delivery.Paging paging = 17 [json_name = "paging"];
  if (this->has_paging()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::paging(this), target, stream);
  }

  // .common.Device device = 18 [json_name = "device"];
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::device(this), target, stream);
  }

  // string auto_view_id = 19 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auto_view_id().data(), static_cast<int>(this->_internal_auto_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Request.auto_view_id");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_auto_view_id(), target);
  }

  // repeated string insertion_matrix_headers = 20 [json_name = "insertionMatrixHeaders"];
  for (int i = 0, n = this->_internal_insertion_matrix_headers_size(); i < n; i++) {
    const auto& s = this->_internal_insertion_matrix_headers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Request.insertion_matrix_headers");
    target = stream->WriteString(20, s, target);
  }

  // .google.protobuf.ListValue insertion_matrix = 21 [json_name = "insertionMatrix"];
  if (this->has_insertion_matrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::insertion_matrix(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .delivery.Insertion insertion = 11 [json_name = "insertion"];
  total_size += 1UL * this->_internal_insertion_size();
  for (const auto& msg : this->insertion_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string insertion_matrix_headers = 20 [json_name = "insertionMatrixHeaders"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(insertion_matrix_headers_.size());
  for (int i = 0, n = insertion_matrix_headers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      insertion_matrix_headers_.Get(i));
  }

  // string request_id = 6 [json_name = "requestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string view_id = 7 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_id());
  }

  // string session_id = 8 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string search_query = 10 [json_name = "searchQuery"];
  if (this->search_query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_query());
  }

  // string client_request_id = 14 [json_name = "clientRequestId"];
  if (this->client_request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_request_id());
  }

  // string auto_view_id = 19 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_view_id());
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  // .delivery.BlenderConfig blender_config = 12 [json_name = "blenderConfig"];
  if (this->has_blender_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blender_config_);
  }

  // .common.Properties properties = 13 [json_name = "properties"];
  if (this->has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  // .delivery.Paging paging = 17 [json_name = "paging"];
  if (this->has_paging()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paging_);
  }

  // .common.Device device = 18 [json_name = "device"];
  if (this->has_device()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .google.protobuf.ListValue insertion_matrix = 21 [json_name = "insertionMatrix"];
  if (this->has_insertion_matrix()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *insertion_matrix_);
  }

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_platform_id());
  }

  // .delivery.UseCase use_case = 9 [json_name = "useCase"];
  if (this->use_case() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_case());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  insertion_.MergeFrom(from.insertion_);
  insertion_matrix_headers_.MergeFrom(from.insertion_matrix_headers_);
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.view_id().size() > 0) {
    _internal_set_view_id(from._internal_view_id());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.search_query().size() > 0) {
    _internal_set_search_query(from._internal_search_query());
  }
  if (from.client_request_id().size() > 0) {
    _internal_set_client_request_id(from._internal_client_request_id());
  }
  if (from.auto_view_id().size() > 0) {
    _internal_set_auto_view_id(from._internal_auto_view_id());
  }
  if (from.has_user_info()) {
    _internal_mutable_user_info()->::common::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.has_timing()) {
    _internal_mutable_timing()->::common::Timing::MergeFrom(from._internal_timing());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::common::ClientInfo::MergeFrom(from._internal_client_info());
  }
  if (from.has_blender_config()) {
    _internal_mutable_blender_config()->::delivery::BlenderConfig::MergeFrom(from._internal_blender_config());
  }
  if (from.has_properties()) {
    _internal_mutable_properties()->::common::Properties::MergeFrom(from._internal_properties());
  }
  if (from.has_paging()) {
    _internal_mutable_paging()->::delivery::Paging::MergeFrom(from._internal_paging());
  }
  if (from.has_device()) {
    _internal_mutable_device()->::common::Device::MergeFrom(from._internal_device());
  }
  if (from.has_insertion_matrix()) {
    _internal_mutable_insertion_matrix()->PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(from._internal_insertion_matrix());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
  if (from.use_case() != 0) {
    _internal_set_use_case(from._internal_use_case());
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  insertion_.InternalSwap(&other->insertion_);
  insertion_matrix_headers_.InternalSwap(&other->insertion_matrix_headers_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  view_id_.Swap(&other->view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  search_query_.Swap(&other->search_query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_request_id_.Swap(&other->client_request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auto_view_id_.Swap(&other->auto_view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, use_case_)
      + sizeof(Request::use_case_)
      - PROTOBUF_FIELD_OFFSET(Request, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Paging::_Internal {
 public:
};

Paging::Paging(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.Paging)
}
Paging::Paging(const Paging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  paging_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paging_id().empty()) {
    paging_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_paging_id(), 
      GetArena());
  }
  size_ = from.size_;
  clear_has_starting();
  switch (from.starting_case()) {
    case kCursor: {
      _internal_set_cursor(from._internal_cursor());
      break;
    }
    case kOffset: {
      _internal_set_offset(from._internal_offset());
      break;
    }
    case STARTING_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:delivery.Paging)
}

void Paging::SharedCtor() {
paging_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
size_ = 0;
clear_has_starting();
}

Paging::~Paging() {
  // @@protoc_insertion_point(destructor:delivery.Paging)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Paging::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  paging_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_starting()) {
    clear_starting();
  }
}

void Paging::ArenaDtor(void* object) {
  Paging* _this = reinterpret_cast< Paging* >(object);
  (void)_this;
}
void Paging::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Paging::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Paging::clear_starting() {
// @@protoc_insertion_point(one_of_clear_start:delivery.Paging)
  switch (starting_case()) {
    case kCursor: {
      starting_.cursor_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kOffset: {
      // No need to clear
      break;
    }
    case STARTING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STARTING_NOT_SET;
}


void Paging::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.Paging)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paging_id_.ClearToEmpty();
  size_ = 0;
  clear_starting();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Paging::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string paging_id = 1 [json_name = "pagingId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_paging_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Paging.paging_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 2 [json_name = "size"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 3 [json_name = "cursor"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Paging.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offset = 4 [json_name = "offset"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Paging::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.Paging)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string paging_id = 1 [json_name = "pagingId"];
  if (this->paging_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paging_id().data(), static_cast<int>(this->_internal_paging_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Paging.paging_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_paging_id(), target);
  }

  // int32 size = 2 [json_name = "size"];
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  // string cursor = 3 [json_name = "cursor"];
  if (_internal_has_cursor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Paging.cursor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cursor(), target);
  }

  // int32 offset = 4 [json_name = "offset"];
  if (_internal_has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.Paging)
  return target;
}

size_t Paging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.Paging)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string paging_id = 1 [json_name = "pagingId"];
  if (this->paging_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paging_id());
  }

  // int32 size = 2 [json_name = "size"];
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  switch (starting_case()) {
    // string cursor = 3 [json_name = "cursor"];
    case kCursor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cursor());
      break;
    }
    // int32 offset = 4 [json_name = "offset"];
    case kOffset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_offset());
      break;
    }
    case STARTING_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Paging::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.Paging)
  GOOGLE_DCHECK_NE(&from, this);
  const Paging* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Paging>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.Paging)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.Paging)
    MergeFrom(*source);
  }
}

void Paging::MergeFrom(const Paging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.Paging)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paging_id().size() > 0) {
    _internal_set_paging_id(from._internal_paging_id());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  switch (from.starting_case()) {
    case kCursor: {
      _internal_set_cursor(from._internal_cursor());
      break;
    }
    case kOffset: {
      _internal_set_offset(from._internal_offset());
      break;
    }
    case STARTING_NOT_SET: {
      break;
    }
  }
}

void Paging::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.Paging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Paging::CopyFrom(const Paging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.Paging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Paging::IsInitialized() const {
  return true;
}

void Paging::InternalSwap(Paging* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  paging_id_.Swap(&other->paging_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(size_, other->size_);
  swap(starting_, other->starting_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Paging::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Response::_Internal {
 public:
  using HasBits = decltype(std::declval<Response>()._has_bits_);
  static const ::delivery::PagingInfo& paging_info(const Response* msg);
  static void set_has_introspection_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::delivery::PagingInfo&
Response::_Internal::paging_info(const Response* msg) {
  return *msg->paging_info_;
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  insertion_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      insertion_(from.insertion_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  introspection_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_introspection_data()) {
    introspection_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_introspection_data(), 
      GetArena());
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArena());
  }
  if (from._internal_has_paging_info()) {
    paging_info_ = new ::delivery::PagingInfo(*from.paging_info_);
  } else {
    paging_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:delivery.Response)
}

void Response::SharedCtor() {
introspection_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
paging_info_ = nullptr;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:delivery.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  introspection_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete paging_info_;
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  insertion_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    introspection_data_.ClearNonDefaultToEmpty();
  }
  request_id_.ClearToEmpty();
  if (GetArena() == nullptr && paging_info_ != nullptr) {
    delete paging_info_;
  }
  paging_info_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .delivery.Insertion insertion = 2 [json_name = "insertion"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insertion(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .delivery.PagingInfo paging_info = 3 [json_name = "pagingInfo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string introspection_data = 4 [json_name = "introspectionData"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_introspection_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Response.introspection_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 5 [json_name = "requestId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Response.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .delivery.Insertion insertion = 2 [json_name = "insertion"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_insertion_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_insertion(i), target, stream);
  }

  // .delivery.PagingInfo paging_info = 3 [json_name = "pagingInfo"];
  if (this->has_paging_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::paging_info(this), target, stream);
  }

  // string introspection_data = 4 [json_name = "introspectionData"];
  if (_internal_has_introspection_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_introspection_data().data(), static_cast<int>(this->_internal_introspection_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Response.introspection_data");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_introspection_data(), target);
  }

  // string request_id = 5 [json_name = "requestId"];
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Response.request_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .delivery.Insertion insertion = 2 [json_name = "insertion"];
  total_size += 1UL * this->_internal_insertion_size();
  for (const auto& msg : this->insertion_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string introspection_data = 4 [json_name = "introspectionData"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_introspection_data());
  }

  // string request_id = 5 [json_name = "requestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .delivery.PagingInfo paging_info = 3 [json_name = "pagingInfo"];
  if (this->has_paging_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paging_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  insertion_.MergeFrom(from.insertion_);
  if (from._internal_has_introspection_data()) {
    _internal_set_introspection_data(from._internal_introspection_data());
  }
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.has_paging_info()) {
    _internal_mutable_paging_info()->::delivery::PagingInfo::MergeFrom(from._internal_paging_info());
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  insertion_.InternalSwap(&other->insertion_);
  introspection_data_.Swap(&other->introspection_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(paging_info_, other->paging_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PagingInfo::_Internal {
 public:
};

PagingInfo::PagingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.PagingInfo)
}
PagingInfo::PagingInfo(const PagingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  paging_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paging_id().empty()) {
    paging_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_paging_id(), 
      GetArena());
  }
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cursor().empty()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:delivery.PagingInfo)
}

void PagingInfo::SharedCtor() {
paging_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PagingInfo::~PagingInfo() {
  // @@protoc_insertion_point(destructor:delivery.PagingInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PagingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  paging_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PagingInfo::ArenaDtor(void* object) {
  PagingInfo* _this = reinterpret_cast< PagingInfo* >(object);
  (void)_this;
}
void PagingInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PagingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PagingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.PagingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paging_id_.ClearToEmpty();
  cursor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PagingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string paging_id = 1 [json_name = "pagingId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_paging_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.PagingInfo.paging_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cursor = 2 [json_name = "cursor"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.PagingInfo.cursor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PagingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.PagingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string paging_id = 1 [json_name = "pagingId"];
  if (this->paging_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paging_id().data(), static_cast<int>(this->_internal_paging_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.PagingInfo.paging_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_paging_id(), target);
  }

  // string cursor = 2 [json_name = "cursor"];
  if (this->cursor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.PagingInfo.cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.PagingInfo)
  return target;
}

size_t PagingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.PagingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string paging_id = 1 [json_name = "pagingId"];
  if (this->paging_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paging_id());
  }

  // string cursor = 2 [json_name = "cursor"];
  if (this->cursor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PagingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.PagingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PagingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PagingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.PagingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.PagingInfo)
    MergeFrom(*source);
  }
}

void PagingInfo::MergeFrom(const PagingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.PagingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paging_id().size() > 0) {
    _internal_set_paging_id(from._internal_paging_id());
  }
  if (from.cursor().size() > 0) {
    _internal_set_cursor(from._internal_cursor());
  }
}

void PagingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.PagingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PagingInfo::CopyFrom(const PagingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.PagingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PagingInfo::IsInitialized() const {
  return true;
}

void PagingInfo::InternalSwap(PagingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  paging_id_.Swap(&other->paging_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PagingInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Insertion::_Internal {
 public:
  using HasBits = decltype(std::declval<Insertion>()._has_bits_);
  static const ::common::UserInfo& user_info(const Insertion* msg);
  static const ::common::Timing& timing(const Insertion* msg);
  static const ::common::ClientInfo& client_info(const Insertion* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::common::Properties& properties(const Insertion* msg);
  static void set_has_retrieval_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_retrieval_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::common::UserInfo&
Insertion::_Internal::user_info(const Insertion* msg) {
  return *msg->user_info_;
}
const ::common::Timing&
Insertion::_Internal::timing(const Insertion* msg) {
  return *msg->timing_;
}
const ::common::ClientInfo&
Insertion::_Internal::client_info(const Insertion* msg) {
  return *msg->client_info_;
}
const ::common::Properties&
Insertion::_Internal::properties(const Insertion* msg) {
  return *msg->properties_;
}
void Insertion::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
void Insertion::clear_timing() {
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
}
void Insertion::clear_client_info() {
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
void Insertion::clear_properties() {
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
Insertion::Insertion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.Insertion)
}
Insertion::Insertion(const Insertion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  insertion_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_insertion_id().empty()) {
    insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_insertion_id(), 
      GetArena());
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_view_id().empty()) {
    view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_view_id(), 
      GetArena());
  }
  content_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content_id().empty()) {
    content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content_id(), 
      GetArena());
  }
  auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auto_view_id().empty()) {
    auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auto_view_id(), 
      GetArena());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::common::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  if (from._internal_has_timing()) {
    timing_ = new ::common::Timing(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::common::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  if (from._internal_has_properties()) {
    properties_ = new ::common::Properties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  ::memcpy(&platform_id_, &from.platform_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&retrieval_rank_) -
    reinterpret_cast<char*>(&platform_id_)) + sizeof(retrieval_rank_));
  // @@protoc_insertion_point(copy_constructor:delivery.Insertion)
}

void Insertion::SharedCtor() {
insertion_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&retrieval_rank_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(retrieval_rank_));
}

Insertion::~Insertion() {
  // @@protoc_insertion_point(destructor:delivery.Insertion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Insertion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  insertion_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auto_view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete timing_;
  if (this != internal_default_instance()) delete client_info_;
  if (this != internal_default_instance()) delete properties_;
}

void Insertion::ArenaDtor(void* object) {
  Insertion* _this = reinterpret_cast< Insertion* >(object);
  (void)_this;
}
void Insertion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Insertion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Insertion::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.Insertion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  insertion_id_.ClearToEmpty();
  request_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  view_id_.ClearToEmpty();
  content_id_.ClearToEmpty();
  auto_view_id_.ClearToEmpty();
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  platform_id_ = PROTOBUF_ULONGLONG(0);
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&retrieval_rank_) -
        reinterpret_cast<char*>(&position_)) + sizeof(retrieval_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Insertion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.UserInfo user_info = 2 [json_name = "userInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Timing timing = 3 [json_name = "timing"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string insertion_id = 6 [json_name = "insertionId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_insertion_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Insertion.insertion_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 7 [json_name = "requestId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Insertion.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 8 [json_name = "sessionId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Insertion.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string view_id = 9 [json_name = "viewId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Insertion.view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content_id = 10 [json_name = "contentId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_content_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Insertion.content_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 position = 12 [json_name = "position"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Properties properties = 13 [json_name = "properties"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 retrieval_rank = 19 [json_name = "retrievalRank"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_retrieval_rank(&has_bits);
          retrieval_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float retrieval_score = 20 [json_name = "retrievalScore"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_retrieval_score(&has_bits);
          retrieval_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string auto_view_id = 21 [json_name = "autoViewId"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_auto_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.Insertion.auto_view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Insertion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.Insertion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_platform_id(), target);
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timing(this), target, stream);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_info(this), target, stream);
  }

  // string insertion_id = 6 [json_name = "insertionId"];
  if (this->insertion_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insertion_id().data(), static_cast<int>(this->_internal_insertion_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Insertion.insertion_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_insertion_id(), target);
  }

  // string request_id = 7 [json_name = "requestId"];
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Insertion.request_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_request_id(), target);
  }

  // string session_id = 8 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Insertion.session_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_session_id(), target);
  }

  // string view_id = 9 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_view_id().data(), static_cast<int>(this->_internal_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Insertion.view_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_view_id(), target);
  }

  // string content_id = 10 [json_name = "contentId"];
  if (this->content_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_id().data(), static_cast<int>(this->_internal_content_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Insertion.content_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_content_id(), target);
  }

  // uint64 position = 12 [json_name = "position"];
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_position(), target);
  }

  // .common.Properties properties = 13 [json_name = "properties"];
  if (this->has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::properties(this), target, stream);
  }

  // uint64 retrieval_rank = 19 [json_name = "retrievalRank"];
  if (_internal_has_retrieval_rank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_retrieval_rank(), target);
  }

  // float retrieval_score = 20 [json_name = "retrievalScore"];
  if (_internal_has_retrieval_score()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_retrieval_score(), target);
  }

  // string auto_view_id = 21 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auto_view_id().data(), static_cast<int>(this->_internal_auto_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.Insertion.auto_view_id");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_auto_view_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.Insertion)
  return target;
}

size_t Insertion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.Insertion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string insertion_id = 6 [json_name = "insertionId"];
  if (this->insertion_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insertion_id());
  }

  // string request_id = 7 [json_name = "requestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string session_id = 8 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string view_id = 9 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_id());
  }

  // string content_id = 10 [json_name = "contentId"];
  if (this->content_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_id());
  }

  // string auto_view_id = 21 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_view_id());
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  // .common.Properties properties = 13 [json_name = "properties"];
  if (this->has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_platform_id());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // uint64 position = 12 [json_name = "position"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_position());
    }

    // float retrieval_score = 20 [json_name = "retrievalScore"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // uint64 retrieval_rank = 19 [json_name = "retrievalRank"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_retrieval_rank());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Insertion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.Insertion)
  GOOGLE_DCHECK_NE(&from, this);
  const Insertion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Insertion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.Insertion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.Insertion)
    MergeFrom(*source);
  }
}

void Insertion::MergeFrom(const Insertion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.Insertion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.insertion_id().size() > 0) {
    _internal_set_insertion_id(from._internal_insertion_id());
  }
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.view_id().size() > 0) {
    _internal_set_view_id(from._internal_view_id());
  }
  if (from.content_id().size() > 0) {
    _internal_set_content_id(from._internal_content_id());
  }
  if (from.auto_view_id().size() > 0) {
    _internal_set_auto_view_id(from._internal_auto_view_id());
  }
  if (from.has_user_info()) {
    _internal_mutable_user_info()->::common::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.has_timing()) {
    _internal_mutable_timing()->::common::Timing::MergeFrom(from._internal_timing());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::common::ClientInfo::MergeFrom(from._internal_client_info());
  }
  if (from.has_properties()) {
    _internal_mutable_properties()->::common::Properties::MergeFrom(from._internal_properties());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000002u) {
      retrieval_score_ = from.retrieval_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      retrieval_rank_ = from.retrieval_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Insertion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.Insertion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Insertion::CopyFrom(const Insertion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.Insertion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Insertion::IsInitialized() const {
  return true;
}

void Insertion::InternalSwap(Insertion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  insertion_id_.Swap(&other->insertion_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  view_id_.Swap(&other->view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_id_.Swap(&other->content_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auto_view_id_.Swap(&other->auto_view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Insertion, retrieval_rank_)
      + sizeof(Insertion::retrieval_rank_)
      - PROTOBUF_FIELD_OFFSET(Insertion, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Insertion::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace delivery
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::delivery::Request* Arena::CreateMaybeMessage< ::delivery::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::Paging* Arena::CreateMaybeMessage< ::delivery::Paging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::Paging >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::Response* Arena::CreateMaybeMessage< ::delivery::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::PagingInfo* Arena::CreateMaybeMessage< ::delivery::PagingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::PagingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::Insertion* Arena::CreateMaybeMessage< ::delivery::Insertion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::Insertion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
