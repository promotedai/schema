// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/delivery/blender.proto

#include "proto/delivery/blender.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace delivery {
constexpr LeafExpression::LeafExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lookups_()
  , default__(0){}
struct LeafExpressionDefaultTypeInternal {
  constexpr LeafExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeafExpressionDefaultTypeInternal() {}
  union {
    LeafExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeafExpressionDefaultTypeInternal _LeafExpression_default_instance_;
constexpr Lookup::Lookup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct LookupDefaultTypeInternal {
  constexpr LookupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LookupDefaultTypeInternal() {}
  union {
    Lookup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LookupDefaultTypeInternal _Lookup_default_instance_;
constexpr BlenderConfig::BlenderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quality_score_(nullptr)
  , sort_key_(nullptr){}
struct BlenderConfigDefaultTypeInternal {
  constexpr BlenderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlenderConfigDefaultTypeInternal() {}
  union {
    BlenderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlenderConfigDefaultTypeInternal _BlenderConfig_default_instance_;
constexpr BlenderExpression::BlenderExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct BlenderExpressionDefaultTypeInternal {
  constexpr BlenderExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlenderExpressionDefaultTypeInternal() {}
  union {
    BlenderExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlenderExpressionDefaultTypeInternal _BlenderExpression_default_instance_;
constexpr BlenderArithmeticExpression::BlenderArithmeticExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_()
  , op_(0)
{}
struct BlenderArithmeticExpressionDefaultTypeInternal {
  constexpr BlenderArithmeticExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlenderArithmeticExpressionDefaultTypeInternal() {}
  union {
    BlenderArithmeticExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlenderArithmeticExpressionDefaultTypeInternal _BlenderArithmeticExpression_default_instance_;
constexpr BlenderConditionalExpression::BlenderConditionalExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predicate_lhs_(nullptr)
  , predicate_rhs_(nullptr)
  , then_branch_(nullptr)
  , else_branch_(nullptr)
  , op_(0)
{}
struct BlenderConditionalExpressionDefaultTypeInternal {
  constexpr BlenderConditionalExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlenderConditionalExpressionDefaultTypeInternal() {}
  union {
    BlenderConditionalExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlenderConditionalExpressionDefaultTypeInternal _BlenderConditionalExpression_default_instance_;
constexpr BlenderSortKey::BlenderSortKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_(){}
struct BlenderSortKeyDefaultTypeInternal {
  constexpr BlenderSortKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlenderSortKeyDefaultTypeInternal() {}
  union {
    BlenderSortKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlenderSortKeyDefaultTypeInternal _BlenderSortKey_default_instance_;
constexpr HyperloopConfig_ParametersEntry_DoNotUse::HyperloopConfig_ParametersEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HyperloopConfig_ParametersEntry_DoNotUseDefaultTypeInternal {
  constexpr HyperloopConfig_ParametersEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperloopConfig_ParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HyperloopConfig_ParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperloopConfig_ParametersEntry_DoNotUseDefaultTypeInternal _HyperloopConfig_ParametersEntry_DoNotUse_default_instance_;
constexpr HyperloopConfig::HyperloopConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameters_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct HyperloopConfigDefaultTypeInternal {
  constexpr HyperloopConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperloopConfigDefaultTypeInternal() {}
  union {
    HyperloopConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperloopConfigDefaultTypeInternal _HyperloopConfig_default_instance_;
constexpr HyperloopParameter::HyperloopParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groups_()
  , default__(0){}
struct HyperloopParameterDefaultTypeInternal {
  constexpr HyperloopParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperloopParameterDefaultTypeInternal() {}
  union {
    HyperloopParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperloopParameterDefaultTypeInternal _HyperloopParameter_default_instance_;
constexpr HyperloopGroup::HyperloopGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exp_(nullptr)
  , low_bucket_(0)
  , high_bucket_(0){}
struct HyperloopGroupDefaultTypeInternal {
  constexpr HyperloopGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperloopGroupDefaultTypeInternal() {}
  union {
    HyperloopGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperloopGroupDefaultTypeInternal _HyperloopGroup_default_instance_;
constexpr HyperloopExpression::HyperloopExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct HyperloopExpressionDefaultTypeInternal {
  constexpr HyperloopExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperloopExpressionDefaultTypeInternal() {}
  union {
    HyperloopExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperloopExpressionDefaultTypeInternal _HyperloopExpression_default_instance_;
constexpr HyperloopGeneratorExpression::HyperloopGeneratorExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct HyperloopGeneratorExpressionDefaultTypeInternal {
  constexpr HyperloopGeneratorExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperloopGeneratorExpressionDefaultTypeInternal() {}
  union {
    HyperloopGeneratorExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperloopGeneratorExpressionDefaultTypeInternal _HyperloopGeneratorExpression_default_instance_;
constexpr HyperloopUniformGenerator::HyperloopUniformGenerator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : low_bound_(0)
  , high_bound_(0){}
struct HyperloopUniformGeneratorDefaultTypeInternal {
  constexpr HyperloopUniformGeneratorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperloopUniformGeneratorDefaultTypeInternal() {}
  union {
    HyperloopUniformGenerator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperloopUniformGeneratorDefaultTypeInternal _HyperloopUniformGenerator_default_instance_;
constexpr HyperloopUniformMultiGenerator::HyperloopUniformMultiGenerator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_(0)
  , multi_(0){}
struct HyperloopUniformMultiGeneratorDefaultTypeInternal {
  constexpr HyperloopUniformMultiGeneratorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperloopUniformMultiGeneratorDefaultTypeInternal() {}
  union {
    HyperloopUniformMultiGenerator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperloopUniformMultiGeneratorDefaultTypeInternal _HyperloopUniformMultiGenerator_default_instance_;
constexpr HyperloopConditionalExpression::HyperloopConditionalExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predicate_lhs_(nullptr)
  , predicate_rhs_(nullptr)
  , then_branch_(nullptr)
  , else_branch_(nullptr)
  , op_(0)
{}
struct HyperloopConditionalExpressionDefaultTypeInternal {
  constexpr HyperloopConditionalExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperloopConditionalExpressionDefaultTypeInternal() {}
  union {
    HyperloopConditionalExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperloopConditionalExpressionDefaultTypeInternal _HyperloopConditionalExpression_default_instance_;
constexpr HyperloopLog_ParameterLogsEntry_DoNotUse::HyperloopLog_ParameterLogsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HyperloopLog_ParameterLogsEntry_DoNotUseDefaultTypeInternal {
  constexpr HyperloopLog_ParameterLogsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperloopLog_ParameterLogsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HyperloopLog_ParameterLogsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperloopLog_ParameterLogsEntry_DoNotUseDefaultTypeInternal _HyperloopLog_ParameterLogsEntry_DoNotUse_default_instance_;
constexpr HyperloopLog::HyperloopLog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameter_logs_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct HyperloopLogDefaultTypeInternal {
  constexpr HyperloopLogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperloopLogDefaultTypeInternal() {}
  union {
    HyperloopLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperloopLogDefaultTypeInternal _HyperloopLog_default_instance_;
constexpr HyperloopParameterLog::HyperloopParameterLog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bucket_(0)
  , value_(0){}
struct HyperloopParameterLogDefaultTypeInternal {
  constexpr HyperloopParameterLogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HyperloopParameterLogDefaultTypeInternal() {}
  union {
    HyperloopParameterLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HyperloopParameterLogDefaultTypeInternal _HyperloopParameterLog_default_instance_;
}  // namespace delivery
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fdelivery_2fblender_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fdelivery_2fblender_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fdelivery_2fblender_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fdelivery_2fblender_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::LeafExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::LeafExpression, lookups_),
  PROTOBUF_FIELD_OFFSET(::delivery::LeafExpression, default__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::Lookup, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::delivery::Lookup, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::delivery::Lookup, lookup_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderConfig, quality_score_),
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderConfig, sort_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderExpression, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderExpression, exp_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderArithmeticExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderArithmeticExpression, op_),
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderArithmeticExpression, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderConditionalExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderConditionalExpression, op_),
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderConditionalExpression, predicate_lhs_),
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderConditionalExpression, predicate_rhs_),
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderConditionalExpression, then_branch_),
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderConditionalExpression, else_branch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderSortKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderSortKey, elements_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopConfig_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopConfig_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopConfig_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopConfig_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopConfig, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopParameter, groups_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopParameter, default__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopGroup, low_bucket_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopGroup, high_bucket_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopGroup, exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopExpression, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopExpression, node_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopGeneratorExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopGeneratorExpression, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopGeneratorExpression, generator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopUniformGenerator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopUniformGenerator, low_bound_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopUniformGenerator, high_bound_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopUniformMultiGenerator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopUniformMultiGenerator, base_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopUniformMultiGenerator, multi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopConditionalExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopConditionalExpression, op_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopConditionalExpression, predicate_lhs_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopConditionalExpression, predicate_rhs_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopConditionalExpression, then_branch_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopConditionalExpression, else_branch_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopLog_ParameterLogsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopLog_ParameterLogsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopLog_ParameterLogsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopLog_ParameterLogsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopLog, parameter_logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopParameterLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopParameterLog, bucket_),
  PROTOBUF_FIELD_OFFSET(::delivery::HyperloopParameterLog, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::delivery::LeafExpression)},
  { 7, -1, sizeof(::delivery::Lookup)},
  { 15, -1, sizeof(::delivery::BlenderConfig)},
  { 22, -1, sizeof(::delivery::BlenderExpression)},
  { 31, -1, sizeof(::delivery::BlenderArithmeticExpression)},
  { 38, -1, sizeof(::delivery::BlenderConditionalExpression)},
  { 48, -1, sizeof(::delivery::BlenderSortKey)},
  { 54, 61, sizeof(::delivery::HyperloopConfig_ParametersEntry_DoNotUse)},
  { 63, -1, sizeof(::delivery::HyperloopConfig)},
  { 69, -1, sizeof(::delivery::HyperloopParameter)},
  { 76, -1, sizeof(::delivery::HyperloopGroup)},
  { 84, -1, sizeof(::delivery::HyperloopExpression)},
  { 93, -1, sizeof(::delivery::HyperloopGeneratorExpression)},
  { 101, -1, sizeof(::delivery::HyperloopUniformGenerator)},
  { 108, -1, sizeof(::delivery::HyperloopUniformMultiGenerator)},
  { 115, -1, sizeof(::delivery::HyperloopConditionalExpression)},
  { 125, 132, sizeof(::delivery::HyperloopLog_ParameterLogsEntry_DoNotUse)},
  { 134, -1, sizeof(::delivery::HyperloopLog)},
  { 140, -1, sizeof(::delivery::HyperloopParameterLog)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_LeafExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_Lookup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_BlenderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_BlenderExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_BlenderArithmeticExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_BlenderConditionalExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_BlenderSortKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_HyperloopConfig_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_HyperloopConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_HyperloopParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_HyperloopGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_HyperloopExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_HyperloopGeneratorExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_HyperloopUniformGenerator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_HyperloopUniformMultiGenerator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_HyperloopConditionalExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_HyperloopLog_ParameterLogsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_HyperloopLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_HyperloopParameterLog_default_instance_),
};

const char descriptor_table_protodef_proto_2fdelivery_2fblender_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034proto/delivery/blender.proto\022\010delivery"
  "\"V\n\016LeafExpression\022*\n\007lookups\030\001 \003(\0132\020.de"
  "livery.LookupR\007lookups\022\030\n\007default\030\002 \001(\002R"
  "\007default\"_\n\006Lookup\022\037\n\nfeature_id\030\001 \001(\004H\000"
  "R\tfeatureId\022%\n\rparameter_key\030\002 \001(\004H\000R\014pa"
  "rameterKeyB\r\n\013lookup_type\"\206\001\n\rBlenderCon"
  "fig\022@\n\rquality_score\030\001 \001(\0132\033.delivery.Bl"
  "enderExpressionR\014qualityScore\0223\n\010sort_ke"
  "y\030\002 \001(\0132\030.delivery.BlenderSortKeyR\007sortK"
  "ey\"\362\001\n\021BlenderExpression\022.\n\004leaf\030\001 \001(\0132\030"
  ".delivery.LeafExpressionH\000R\004leaf\022N\n\016arit"
  "hmetic_exp\030\002 \001(\0132%.delivery.BlenderArith"
  "meticExpressionH\000R\rarithmeticExp\022Q\n\017cond"
  "itional_exp\030\003 \001(\0132&.delivery.BlenderCond"
  "itionalExpressionH\000R\016conditionalExpB\n\n\010e"
  "xp_type\"\206\002\n\033BlenderArithmeticExpression\022"
  ">\n\002op\030\001 \001(\0162..delivery.BlenderArithmetic"
  "Expression.OperatorR\002op\0223\n\006inputs\030\002 \003(\0132"
  "\033.delivery.BlenderExpressionR\006inputs\"r\n\010"
  "Operator\022\013\n\007UNKNOWN\020\000\022\007\n\003ADD\020\001\022\014\n\010MULTIP"
  "LY\020\002\022\014\n\010SUBTRACT\020\003\022\n\n\006DIVIDE\020\004\022\007\n\003MIN\020\005\022"
  "\007\n\003MAX\020\006\022\t\n\005FLOOR\020\007\022\013\n\007CEILING\020\010\"\260\003\n\034Ble"
  "nderConditionalExpression\022\?\n\002op\030\001 \001(\0162/."
  "delivery.BlenderConditionalExpression.Op"
  "eratorR\002op\022@\n\rpredicate_lhs\030\002 \001(\0132\033.deli"
  "very.BlenderExpressionR\014predicateLhs\022@\n\r"
  "predicate_rhs\030\003 \001(\0132\033.delivery.BlenderEx"
  "pressionR\014predicateRhs\022<\n\013then_branch\030\004 "
  "\001(\0132\033.delivery.BlenderExpressionR\nthenBr"
  "anch\022<\n\013else_branch\030\005 \001(\0132\033.delivery.Ble"
  "nderExpressionR\nelseBranch\"O\n\010Operator\022\013"
  "\n\007UNKNOWN\020\000\022\t\n\005EQUAL\020\001\022\020\n\014GREATER_THAN\020\002"
  "\022\031\n\025GREATER_THAN_OR_EQUAL\020\003\"I\n\016BlenderSo"
  "rtKey\0227\n\010elements\030\001 \003(\0132\033.delivery.Blend"
  "erExpressionR\010elements\"\271\001\n\017HyperloopConf"
  "ig\022I\n\nparameters\030\001 \003(\0132).delivery.Hyperl"
  "oopConfig.ParametersEntryR\nparameters\032[\n"
  "\017ParametersEntry\022\020\n\003key\030\001 \001(\004R\003key\0222\n\005va"
  "lue\030\002 \001(\0132\034.delivery.HyperloopParameterR"
  "\005value:\0028\001\"`\n\022HyperloopParameter\0220\n\006grou"
  "ps\030\001 \003(\0132\030.delivery.HyperloopGroupR\006grou"
  "ps\022\030\n\007default\030\002 \001(\002R\007default\"\201\001\n\016Hyperlo"
  "opGroup\022\035\n\nlow_bucket\030\001 \001(\005R\tlowBucket\022\037"
  "\n\013high_bucket\030\002 \001(\005R\nhighBucket\022/\n\003exp\030\003"
  " \001(\0132\035.delivery.HyperloopExpressionR\003exp"
  "\"\366\001\n\023HyperloopExpression\022.\n\004leaf\030\001 \001(\0132\030"
  ".delivery.LeafExpressionH\000R\004leaf\022M\n\rgene"
  "rator_exp\030\002 \001(\0132&.delivery.HyperloopGene"
  "ratorExpressionH\000R\014generatorExp\022S\n\017condi"
  "tional_exp\030\003 \001(\0132(.delivery.HyperloopCon"
  "ditionalExpressionH\000R\016conditionalExpB\013\n\t"
  "node_type\"\275\001\n\034HyperloopGeneratorExpressi"
  "on\022\?\n\007uniform\030\001 \001(\0132#.delivery.Hyperloop"
  "UniformGeneratorH\000R\007uniform\022O\n\runiform_m"
  "ulti\030\002 \001(\0132(.delivery.HyperloopUniformMu"
  "ltiGeneratorH\000R\014uniformMultiB\013\n\tgenerato"
  "r\"W\n\031HyperloopUniformGenerator\022\033\n\tlow_bo"
  "und\030\001 \001(\002R\010lowBound\022\035\n\nhigh_bound\030\002 \001(\002R"
  "\thighBound\"J\n\036HyperloopUniformMultiGener"
  "ator\022\022\n\004base\030\001 \001(\002R\004base\022\024\n\005multi\030\002 \001(\002R"
  "\005multi\"\274\003\n\036HyperloopConditionalExpressio"
  "n\022A\n\002op\030\001 \001(\01621.delivery.HyperloopCondit"
  "ionalExpression.OperatorR\002op\022B\n\rpredicat"
  "e_lhs\030\002 \001(\0132\035.delivery.HyperloopExpressi"
  "onR\014predicateLhs\022B\n\rpredicate_rhs\030\003 \001(\0132"
  "\035.delivery.HyperloopExpressionR\014predicat"
  "eRhs\022>\n\013then_branch\030\004 \001(\0132\035.delivery.Hyp"
  "erloopExpressionR\nthenBranch\022>\n\013else_bra"
  "nch\030\005 \001(\0132\035.delivery.HyperloopExpression"
  "R\nelseBranch\"O\n\010Operator\022\013\n\007UNKNOWN\020\000\022\t\n"
  "\005EQUAL\020\001\022\020\n\014GREATER_THAN\020\002\022\031\n\025GREATER_TH"
  "AN_OR_EQUAL\020\003\"\303\001\n\014HyperloopLog\022P\n\016parame"
  "ter_logs\030\001 \003(\0132).delivery.HyperloopLog.P"
  "arameterLogsEntryR\rparameterLogs\032a\n\022Para"
  "meterLogsEntry\022\020\n\003key\030\001 \001(\004R\003key\0225\n\005valu"
  "e\030\002 \001(\0132\037.delivery.HyperloopParameterLog"
  "R\005value:\0028\001\"E\n\025HyperloopParameterLog\022\026\n\006"
  "bucket\030\001 \001(\005R\006bucket\022\024\n\005value\030\002 \001(\002R\005val"
  "ueBu\n\032ai.promoted.proto.deliveryB\007Blende"
  "rP\001Z8github.com/promotedai/schema/genera"
  "ted/go/proto/delivery\252\002\021Promoted.Deliver"
  "yb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fdelivery_2fblender_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fdelivery_2fblender_2eproto = {
  false, false, 3249, descriptor_table_protodef_proto_2fdelivery_2fblender_2eproto, "proto/delivery/blender.proto", 
  &descriptor_table_proto_2fdelivery_2fblender_2eproto_once, nullptr, 0, 19,
  schemas, file_default_instances, TableStruct_proto_2fdelivery_2fblender_2eproto::offsets,
  file_level_metadata_proto_2fdelivery_2fblender_2eproto, file_level_enum_descriptors_proto_2fdelivery_2fblender_2eproto, file_level_service_descriptors_proto_2fdelivery_2fblender_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_proto_2fdelivery_2fblender_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fdelivery_2fblender_2eproto);
  return descriptor_table_proto_2fdelivery_2fblender_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fdelivery_2fblender_2eproto(&descriptor_table_proto_2fdelivery_2fblender_2eproto);
namespace delivery {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlenderArithmeticExpression_Operator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fdelivery_2fblender_2eproto);
  return file_level_enum_descriptors_proto_2fdelivery_2fblender_2eproto[0];
}
bool BlenderArithmeticExpression_Operator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BlenderArithmeticExpression_Operator BlenderArithmeticExpression::UNKNOWN;
constexpr BlenderArithmeticExpression_Operator BlenderArithmeticExpression::ADD;
constexpr BlenderArithmeticExpression_Operator BlenderArithmeticExpression::MULTIPLY;
constexpr BlenderArithmeticExpression_Operator BlenderArithmeticExpression::SUBTRACT;
constexpr BlenderArithmeticExpression_Operator BlenderArithmeticExpression::DIVIDE;
constexpr BlenderArithmeticExpression_Operator BlenderArithmeticExpression::MIN;
constexpr BlenderArithmeticExpression_Operator BlenderArithmeticExpression::MAX;
constexpr BlenderArithmeticExpression_Operator BlenderArithmeticExpression::FLOOR;
constexpr BlenderArithmeticExpression_Operator BlenderArithmeticExpression::CEILING;
constexpr BlenderArithmeticExpression_Operator BlenderArithmeticExpression::Operator_MIN;
constexpr BlenderArithmeticExpression_Operator BlenderArithmeticExpression::Operator_MAX;
constexpr int BlenderArithmeticExpression::Operator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlenderConditionalExpression_Operator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fdelivery_2fblender_2eproto);
  return file_level_enum_descriptors_proto_2fdelivery_2fblender_2eproto[1];
}
bool BlenderConditionalExpression_Operator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BlenderConditionalExpression_Operator BlenderConditionalExpression::UNKNOWN;
constexpr BlenderConditionalExpression_Operator BlenderConditionalExpression::EQUAL;
constexpr BlenderConditionalExpression_Operator BlenderConditionalExpression::GREATER_THAN;
constexpr BlenderConditionalExpression_Operator BlenderConditionalExpression::GREATER_THAN_OR_EQUAL;
constexpr BlenderConditionalExpression_Operator BlenderConditionalExpression::Operator_MIN;
constexpr BlenderConditionalExpression_Operator BlenderConditionalExpression::Operator_MAX;
constexpr int BlenderConditionalExpression::Operator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HyperloopConditionalExpression_Operator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fdelivery_2fblender_2eproto);
  return file_level_enum_descriptors_proto_2fdelivery_2fblender_2eproto[2];
}
bool HyperloopConditionalExpression_Operator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HyperloopConditionalExpression_Operator HyperloopConditionalExpression::UNKNOWN;
constexpr HyperloopConditionalExpression_Operator HyperloopConditionalExpression::EQUAL;
constexpr HyperloopConditionalExpression_Operator HyperloopConditionalExpression::GREATER_THAN;
constexpr HyperloopConditionalExpression_Operator HyperloopConditionalExpression::GREATER_THAN_OR_EQUAL;
constexpr HyperloopConditionalExpression_Operator HyperloopConditionalExpression::Operator_MIN;
constexpr HyperloopConditionalExpression_Operator HyperloopConditionalExpression::Operator_MAX;
constexpr int HyperloopConditionalExpression::Operator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class LeafExpression::_Internal {
 public:
};

LeafExpression::LeafExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lookups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.LeafExpression)
}
LeafExpression::LeafExpression(const LeafExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lookups_(from.lookups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  default__ = from.default__;
  // @@protoc_insertion_point(copy_constructor:delivery.LeafExpression)
}

void LeafExpression::SharedCtor() {
default__ = 0;
}

LeafExpression::~LeafExpression() {
  // @@protoc_insertion_point(destructor:delivery.LeafExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeafExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LeafExpression::ArenaDtor(void* object) {
  LeafExpression* _this = reinterpret_cast< LeafExpression* >(object);
  (void)_this;
}
void LeafExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeafExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeafExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.LeafExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lookups_.Clear();
  default__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeafExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .delivery.Lookup lookups = 1 [json_name = "lookups"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lookups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // float default = 2 [json_name = "default"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          default__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeafExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.LeafExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .delivery.Lookup lookups = 1 [json_name = "lookups"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lookups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lookups(i), target, stream);
  }

  // float default = 2 [json_name = "default"];
  if (!(this->default_() <= 0 && this->default_() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_default_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.LeafExpression)
  return target;
}

size_t LeafExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.LeafExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .delivery.Lookup lookups = 1 [json_name = "lookups"];
  total_size += 1UL * this->_internal_lookups_size();
  for (const auto& msg : this->lookups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float default = 2 [json_name = "default"];
  if (!(this->default_() <= 0 && this->default_() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeafExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.LeafExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const LeafExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeafExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.LeafExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.LeafExpression)
    MergeFrom(*source);
  }
}

void LeafExpression::MergeFrom(const LeafExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.LeafExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lookups_.MergeFrom(from.lookups_);
  if (!(from.default_() <= 0 && from.default_() >= 0)) {
    _internal_set_default_(from._internal_default_());
  }
}

void LeafExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.LeafExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeafExpression::CopyFrom(const LeafExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.LeafExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafExpression::IsInitialized() const {
  return true;
}

void LeafExpression::InternalSwap(LeafExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lookups_.InternalSwap(&other->lookups_);
  swap(default__, other->default__);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeafExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Lookup::_Internal {
 public:
};

Lookup::Lookup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.Lookup)
}
Lookup::Lookup(const Lookup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_lookup_type();
  switch (from.lookup_type_case()) {
    case kFeatureId: {
      _internal_set_feature_id(from._internal_feature_id());
      break;
    }
    case kParameterKey: {
      _internal_set_parameter_key(from._internal_parameter_key());
      break;
    }
    case LOOKUP_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:delivery.Lookup)
}

void Lookup::SharedCtor() {
clear_has_lookup_type();
}

Lookup::~Lookup() {
  // @@protoc_insertion_point(destructor:delivery.Lookup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Lookup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_lookup_type()) {
    clear_lookup_type();
  }
}

void Lookup::ArenaDtor(void* object) {
  Lookup* _this = reinterpret_cast< Lookup* >(object);
  (void)_this;
}
void Lookup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lookup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Lookup::clear_lookup_type() {
// @@protoc_insertion_point(one_of_clear_start:delivery.Lookup)
  switch (lookup_type_case()) {
    case kFeatureId: {
      // No need to clear
      break;
    }
    case kParameterKey: {
      // No need to clear
      break;
    }
    case LOOKUP_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOOKUP_TYPE_NOT_SET;
}


void Lookup::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.Lookup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_lookup_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lookup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 feature_id = 1 [json_name = "featureId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_feature_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 parameter_key = 2 [json_name = "parameterKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_parameter_key(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lookup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.Lookup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 feature_id = 1 [json_name = "featureId"];
  if (_internal_has_feature_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_feature_id(), target);
  }

  // uint64 parameter_key = 2 [json_name = "parameterKey"];
  if (_internal_has_parameter_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_parameter_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.Lookup)
  return target;
}

size_t Lookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.Lookup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (lookup_type_case()) {
    // uint64 feature_id = 1 [json_name = "featureId"];
    case kFeatureId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_feature_id());
      break;
    }
    // uint64 parameter_key = 2 [json_name = "parameterKey"];
    case kParameterKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_parameter_key());
      break;
    }
    case LOOKUP_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lookup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.Lookup)
  GOOGLE_DCHECK_NE(&from, this);
  const Lookup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lookup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.Lookup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.Lookup)
    MergeFrom(*source);
  }
}

void Lookup::MergeFrom(const Lookup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.Lookup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.lookup_type_case()) {
    case kFeatureId: {
      _internal_set_feature_id(from._internal_feature_id());
      break;
    }
    case kParameterKey: {
      _internal_set_parameter_key(from._internal_parameter_key());
      break;
    }
    case LOOKUP_TYPE_NOT_SET: {
      break;
    }
  }
}

void Lookup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.Lookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lookup::CopyFrom(const Lookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.Lookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lookup::IsInitialized() const {
  return true;
}

void Lookup::InternalSwap(Lookup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(lookup_type_, other->lookup_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lookup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlenderConfig::_Internal {
 public:
  static const ::delivery::BlenderExpression& quality_score(const BlenderConfig* msg);
  static const ::delivery::BlenderSortKey& sort_key(const BlenderConfig* msg);
};

const ::delivery::BlenderExpression&
BlenderConfig::_Internal::quality_score(const BlenderConfig* msg) {
  return *msg->quality_score_;
}
const ::delivery::BlenderSortKey&
BlenderConfig::_Internal::sort_key(const BlenderConfig* msg) {
  return *msg->sort_key_;
}
BlenderConfig::BlenderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.BlenderConfig)
}
BlenderConfig::BlenderConfig(const BlenderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quality_score()) {
    quality_score_ = new ::delivery::BlenderExpression(*from.quality_score_);
  } else {
    quality_score_ = nullptr;
  }
  if (from._internal_has_sort_key()) {
    sort_key_ = new ::delivery::BlenderSortKey(*from.sort_key_);
  } else {
    sort_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:delivery.BlenderConfig)
}

void BlenderConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quality_score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sort_key_) -
    reinterpret_cast<char*>(&quality_score_)) + sizeof(sort_key_));
}

BlenderConfig::~BlenderConfig() {
  // @@protoc_insertion_point(destructor:delivery.BlenderConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlenderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete quality_score_;
  if (this != internal_default_instance()) delete sort_key_;
}

void BlenderConfig::ArenaDtor(void* object) {
  BlenderConfig* _this = reinterpret_cast< BlenderConfig* >(object);
  (void)_this;
}
void BlenderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlenderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlenderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.BlenderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && quality_score_ != nullptr) {
    delete quality_score_;
  }
  quality_score_ = nullptr;
  if (GetArena() == nullptr && sort_key_ != nullptr) {
    delete sort_key_;
  }
  sort_key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlenderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .delivery.BlenderExpression quality_score = 1 [json_name = "qualityScore"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_score(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.BlenderSortKey sort_key = 2 [json_name = "sortKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlenderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.BlenderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .delivery.BlenderExpression quality_score = 1 [json_name = "qualityScore"];
  if (this->has_quality_score()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::quality_score(this), target, stream);
  }

  // .delivery.BlenderSortKey sort_key = 2 [json_name = "sortKey"];
  if (this->has_sort_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sort_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.BlenderConfig)
  return target;
}

size_t BlenderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.BlenderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .delivery.BlenderExpression quality_score = 1 [json_name = "qualityScore"];
  if (this->has_quality_score()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quality_score_);
  }

  // .delivery.BlenderSortKey sort_key = 2 [json_name = "sortKey"];
  if (this->has_sort_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sort_key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlenderConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.BlenderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BlenderConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlenderConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.BlenderConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.BlenderConfig)
    MergeFrom(*source);
  }
}

void BlenderConfig::MergeFrom(const BlenderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.BlenderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_quality_score()) {
    _internal_mutable_quality_score()->::delivery::BlenderExpression::MergeFrom(from._internal_quality_score());
  }
  if (from.has_sort_key()) {
    _internal_mutable_sort_key()->::delivery::BlenderSortKey::MergeFrom(from._internal_sort_key());
  }
}

void BlenderConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.BlenderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlenderConfig::CopyFrom(const BlenderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.BlenderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlenderConfig::IsInitialized() const {
  return true;
}

void BlenderConfig::InternalSwap(BlenderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlenderConfig, sort_key_)
      + sizeof(BlenderConfig::sort_key_)
      - PROTOBUF_FIELD_OFFSET(BlenderConfig, quality_score_)>(
          reinterpret_cast<char*>(&quality_score_),
          reinterpret_cast<char*>(&other->quality_score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlenderConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlenderExpression::_Internal {
 public:
  static const ::delivery::LeafExpression& leaf(const BlenderExpression* msg);
  static const ::delivery::BlenderArithmeticExpression& arithmetic_exp(const BlenderExpression* msg);
  static const ::delivery::BlenderConditionalExpression& conditional_exp(const BlenderExpression* msg);
};

const ::delivery::LeafExpression&
BlenderExpression::_Internal::leaf(const BlenderExpression* msg) {
  return *msg->exp_type_.leaf_;
}
const ::delivery::BlenderArithmeticExpression&
BlenderExpression::_Internal::arithmetic_exp(const BlenderExpression* msg) {
  return *msg->exp_type_.arithmetic_exp_;
}
const ::delivery::BlenderConditionalExpression&
BlenderExpression::_Internal::conditional_exp(const BlenderExpression* msg) {
  return *msg->exp_type_.conditional_exp_;
}
void BlenderExpression::set_allocated_leaf(::delivery::LeafExpression* leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_exp_type();
  if (leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaf);
    if (message_arena != submessage_arena) {
      leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaf, submessage_arena);
    }
    set_has_leaf();
    exp_type_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.BlenderExpression.leaf)
}
void BlenderExpression::set_allocated_arithmetic_exp(::delivery::BlenderArithmeticExpression* arithmetic_exp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_exp_type();
  if (arithmetic_exp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(arithmetic_exp);
    if (message_arena != submessage_arena) {
      arithmetic_exp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arithmetic_exp, submessage_arena);
    }
    set_has_arithmetic_exp();
    exp_type_.arithmetic_exp_ = arithmetic_exp;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.BlenderExpression.arithmetic_exp)
}
void BlenderExpression::set_allocated_conditional_exp(::delivery::BlenderConditionalExpression* conditional_exp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_exp_type();
  if (conditional_exp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conditional_exp);
    if (message_arena != submessage_arena) {
      conditional_exp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditional_exp, submessage_arena);
    }
    set_has_conditional_exp();
    exp_type_.conditional_exp_ = conditional_exp;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.BlenderExpression.conditional_exp)
}
BlenderExpression::BlenderExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.BlenderExpression)
}
BlenderExpression::BlenderExpression(const BlenderExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_exp_type();
  switch (from.exp_type_case()) {
    case kLeaf: {
      _internal_mutable_leaf()->::delivery::LeafExpression::MergeFrom(from._internal_leaf());
      break;
    }
    case kArithmeticExp: {
      _internal_mutable_arithmetic_exp()->::delivery::BlenderArithmeticExpression::MergeFrom(from._internal_arithmetic_exp());
      break;
    }
    case kConditionalExp: {
      _internal_mutable_conditional_exp()->::delivery::BlenderConditionalExpression::MergeFrom(from._internal_conditional_exp());
      break;
    }
    case EXP_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:delivery.BlenderExpression)
}

void BlenderExpression::SharedCtor() {
clear_has_exp_type();
}

BlenderExpression::~BlenderExpression() {
  // @@protoc_insertion_point(destructor:delivery.BlenderExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlenderExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_exp_type()) {
    clear_exp_type();
  }
}

void BlenderExpression::ArenaDtor(void* object) {
  BlenderExpression* _this = reinterpret_cast< BlenderExpression* >(object);
  (void)_this;
}
void BlenderExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlenderExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlenderExpression::clear_exp_type() {
// @@protoc_insertion_point(one_of_clear_start:delivery.BlenderExpression)
  switch (exp_type_case()) {
    case kLeaf: {
      if (GetArena() == nullptr) {
        delete exp_type_.leaf_;
      }
      break;
    }
    case kArithmeticExp: {
      if (GetArena() == nullptr) {
        delete exp_type_.arithmetic_exp_;
      }
      break;
    }
    case kConditionalExp: {
      if (GetArena() == nullptr) {
        delete exp_type_.conditional_exp_;
      }
      break;
    }
    case EXP_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXP_TYPE_NOT_SET;
}


void BlenderExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.BlenderExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_exp_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlenderExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .delivery.LeafExpression leaf = 1 [json_name = "leaf"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.BlenderArithmeticExpression arithmetic_exp = 2 [json_name = "arithmeticExp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_arithmetic_exp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.BlenderConditionalExpression conditional_exp = 3 [json_name = "conditionalExp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditional_exp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlenderExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.BlenderExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .delivery.LeafExpression leaf = 1 [json_name = "leaf"];
  if (_internal_has_leaf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::leaf(this), target, stream);
  }

  // .delivery.BlenderArithmeticExpression arithmetic_exp = 2 [json_name = "arithmeticExp"];
  if (_internal_has_arithmetic_exp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::arithmetic_exp(this), target, stream);
  }

  // .delivery.BlenderConditionalExpression conditional_exp = 3 [json_name = "conditionalExp"];
  if (_internal_has_conditional_exp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::conditional_exp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.BlenderExpression)
  return target;
}

size_t BlenderExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.BlenderExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (exp_type_case()) {
    // .delivery.LeafExpression leaf = 1 [json_name = "leaf"];
    case kLeaf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exp_type_.leaf_);
      break;
    }
    // .delivery.BlenderArithmeticExpression arithmetic_exp = 2 [json_name = "arithmeticExp"];
    case kArithmeticExp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exp_type_.arithmetic_exp_);
      break;
    }
    // .delivery.BlenderConditionalExpression conditional_exp = 3 [json_name = "conditionalExp"];
    case kConditionalExp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exp_type_.conditional_exp_);
      break;
    }
    case EXP_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlenderExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.BlenderExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const BlenderExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlenderExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.BlenderExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.BlenderExpression)
    MergeFrom(*source);
  }
}

void BlenderExpression::MergeFrom(const BlenderExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.BlenderExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.exp_type_case()) {
    case kLeaf: {
      _internal_mutable_leaf()->::delivery::LeafExpression::MergeFrom(from._internal_leaf());
      break;
    }
    case kArithmeticExp: {
      _internal_mutable_arithmetic_exp()->::delivery::BlenderArithmeticExpression::MergeFrom(from._internal_arithmetic_exp());
      break;
    }
    case kConditionalExp: {
      _internal_mutable_conditional_exp()->::delivery::BlenderConditionalExpression::MergeFrom(from._internal_conditional_exp());
      break;
    }
    case EXP_TYPE_NOT_SET: {
      break;
    }
  }
}

void BlenderExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.BlenderExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlenderExpression::CopyFrom(const BlenderExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.BlenderExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlenderExpression::IsInitialized() const {
  return true;
}

void BlenderExpression::InternalSwap(BlenderExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(exp_type_, other->exp_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlenderExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlenderArithmeticExpression::_Internal {
 public:
};

BlenderArithmeticExpression::BlenderArithmeticExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.BlenderArithmeticExpression)
}
BlenderArithmeticExpression::BlenderArithmeticExpression(const BlenderArithmeticExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:delivery.BlenderArithmeticExpression)
}

void BlenderArithmeticExpression::SharedCtor() {
op_ = 0;
}

BlenderArithmeticExpression::~BlenderArithmeticExpression() {
  // @@protoc_insertion_point(destructor:delivery.BlenderArithmeticExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlenderArithmeticExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlenderArithmeticExpression::ArenaDtor(void* object) {
  BlenderArithmeticExpression* _this = reinterpret_cast< BlenderArithmeticExpression* >(object);
  (void)_this;
}
void BlenderArithmeticExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlenderArithmeticExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlenderArithmeticExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.BlenderArithmeticExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlenderArithmeticExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .delivery.BlenderArithmeticExpression.Operator op = 1 [json_name = "op"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::delivery::BlenderArithmeticExpression_Operator>(val));
        } else goto handle_unusual;
        continue;
      // repeated .delivery.BlenderExpression inputs = 2 [json_name = "inputs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlenderArithmeticExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.BlenderArithmeticExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .delivery.BlenderArithmeticExpression.Operator op = 1 [json_name = "op"];
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // repeated .delivery.BlenderExpression inputs = 2 [json_name = "inputs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.BlenderArithmeticExpression)
  return target;
}

size_t BlenderArithmeticExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.BlenderArithmeticExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .delivery.BlenderExpression inputs = 2 [json_name = "inputs"];
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .delivery.BlenderArithmeticExpression.Operator op = 1 [json_name = "op"];
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlenderArithmeticExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.BlenderArithmeticExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const BlenderArithmeticExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlenderArithmeticExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.BlenderArithmeticExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.BlenderArithmeticExpression)
    MergeFrom(*source);
  }
}

void BlenderArithmeticExpression::MergeFrom(const BlenderArithmeticExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.BlenderArithmeticExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void BlenderArithmeticExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.BlenderArithmeticExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlenderArithmeticExpression::CopyFrom(const BlenderArithmeticExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.BlenderArithmeticExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlenderArithmeticExpression::IsInitialized() const {
  return true;
}

void BlenderArithmeticExpression::InternalSwap(BlenderArithmeticExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlenderArithmeticExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlenderConditionalExpression::_Internal {
 public:
  static const ::delivery::BlenderExpression& predicate_lhs(const BlenderConditionalExpression* msg);
  static const ::delivery::BlenderExpression& predicate_rhs(const BlenderConditionalExpression* msg);
  static const ::delivery::BlenderExpression& then_branch(const BlenderConditionalExpression* msg);
  static const ::delivery::BlenderExpression& else_branch(const BlenderConditionalExpression* msg);
};

const ::delivery::BlenderExpression&
BlenderConditionalExpression::_Internal::predicate_lhs(const BlenderConditionalExpression* msg) {
  return *msg->predicate_lhs_;
}
const ::delivery::BlenderExpression&
BlenderConditionalExpression::_Internal::predicate_rhs(const BlenderConditionalExpression* msg) {
  return *msg->predicate_rhs_;
}
const ::delivery::BlenderExpression&
BlenderConditionalExpression::_Internal::then_branch(const BlenderConditionalExpression* msg) {
  return *msg->then_branch_;
}
const ::delivery::BlenderExpression&
BlenderConditionalExpression::_Internal::else_branch(const BlenderConditionalExpression* msg) {
  return *msg->else_branch_;
}
BlenderConditionalExpression::BlenderConditionalExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.BlenderConditionalExpression)
}
BlenderConditionalExpression::BlenderConditionalExpression(const BlenderConditionalExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_predicate_lhs()) {
    predicate_lhs_ = new ::delivery::BlenderExpression(*from.predicate_lhs_);
  } else {
    predicate_lhs_ = nullptr;
  }
  if (from._internal_has_predicate_rhs()) {
    predicate_rhs_ = new ::delivery::BlenderExpression(*from.predicate_rhs_);
  } else {
    predicate_rhs_ = nullptr;
  }
  if (from._internal_has_then_branch()) {
    then_branch_ = new ::delivery::BlenderExpression(*from.then_branch_);
  } else {
    then_branch_ = nullptr;
  }
  if (from._internal_has_else_branch()) {
    else_branch_ = new ::delivery::BlenderExpression(*from.else_branch_);
  } else {
    else_branch_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:delivery.BlenderConditionalExpression)
}

void BlenderConditionalExpression::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&predicate_lhs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&predicate_lhs_)) + sizeof(op_));
}

BlenderConditionalExpression::~BlenderConditionalExpression() {
  // @@protoc_insertion_point(destructor:delivery.BlenderConditionalExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlenderConditionalExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete predicate_lhs_;
  if (this != internal_default_instance()) delete predicate_rhs_;
  if (this != internal_default_instance()) delete then_branch_;
  if (this != internal_default_instance()) delete else_branch_;
}

void BlenderConditionalExpression::ArenaDtor(void* object) {
  BlenderConditionalExpression* _this = reinterpret_cast< BlenderConditionalExpression* >(object);
  (void)_this;
}
void BlenderConditionalExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlenderConditionalExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlenderConditionalExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.BlenderConditionalExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && predicate_lhs_ != nullptr) {
    delete predicate_lhs_;
  }
  predicate_lhs_ = nullptr;
  if (GetArena() == nullptr && predicate_rhs_ != nullptr) {
    delete predicate_rhs_;
  }
  predicate_rhs_ = nullptr;
  if (GetArena() == nullptr && then_branch_ != nullptr) {
    delete then_branch_;
  }
  then_branch_ = nullptr;
  if (GetArena() == nullptr && else_branch_ != nullptr) {
    delete else_branch_;
  }
  else_branch_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlenderConditionalExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .delivery.BlenderConditionalExpression.Operator op = 1 [json_name = "op"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::delivery::BlenderConditionalExpression_Operator>(val));
        } else goto handle_unusual;
        continue;
      // .delivery.BlenderExpression predicate_lhs = 2 [json_name = "predicateLhs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate_lhs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.BlenderExpression predicate_rhs = 3 [json_name = "predicateRhs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate_rhs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.BlenderExpression then_branch = 4 [json_name = "thenBranch"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_then_branch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.BlenderExpression else_branch = 5 [json_name = "elseBranch"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_else_branch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlenderConditionalExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.BlenderConditionalExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .delivery.BlenderConditionalExpression.Operator op = 1 [json_name = "op"];
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // .delivery.BlenderExpression predicate_lhs = 2 [json_name = "predicateLhs"];
  if (this->has_predicate_lhs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::predicate_lhs(this), target, stream);
  }

  // .delivery.BlenderExpression predicate_rhs = 3 [json_name = "predicateRhs"];
  if (this->has_predicate_rhs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::predicate_rhs(this), target, stream);
  }

  // .delivery.BlenderExpression then_branch = 4 [json_name = "thenBranch"];
  if (this->has_then_branch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::then_branch(this), target, stream);
  }

  // .delivery.BlenderExpression else_branch = 5 [json_name = "elseBranch"];
  if (this->has_else_branch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::else_branch(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.BlenderConditionalExpression)
  return target;
}

size_t BlenderConditionalExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.BlenderConditionalExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .delivery.BlenderExpression predicate_lhs = 2 [json_name = "predicateLhs"];
  if (this->has_predicate_lhs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predicate_lhs_);
  }

  // .delivery.BlenderExpression predicate_rhs = 3 [json_name = "predicateRhs"];
  if (this->has_predicate_rhs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predicate_rhs_);
  }

  // .delivery.BlenderExpression then_branch = 4 [json_name = "thenBranch"];
  if (this->has_then_branch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *then_branch_);
  }

  // .delivery.BlenderExpression else_branch = 5 [json_name = "elseBranch"];
  if (this->has_else_branch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *else_branch_);
  }

  // .delivery.BlenderConditionalExpression.Operator op = 1 [json_name = "op"];
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlenderConditionalExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.BlenderConditionalExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const BlenderConditionalExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlenderConditionalExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.BlenderConditionalExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.BlenderConditionalExpression)
    MergeFrom(*source);
  }
}

void BlenderConditionalExpression::MergeFrom(const BlenderConditionalExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.BlenderConditionalExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_predicate_lhs()) {
    _internal_mutable_predicate_lhs()->::delivery::BlenderExpression::MergeFrom(from._internal_predicate_lhs());
  }
  if (from.has_predicate_rhs()) {
    _internal_mutable_predicate_rhs()->::delivery::BlenderExpression::MergeFrom(from._internal_predicate_rhs());
  }
  if (from.has_then_branch()) {
    _internal_mutable_then_branch()->::delivery::BlenderExpression::MergeFrom(from._internal_then_branch());
  }
  if (from.has_else_branch()) {
    _internal_mutable_else_branch()->::delivery::BlenderExpression::MergeFrom(from._internal_else_branch());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void BlenderConditionalExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.BlenderConditionalExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlenderConditionalExpression::CopyFrom(const BlenderConditionalExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.BlenderConditionalExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlenderConditionalExpression::IsInitialized() const {
  return true;
}

void BlenderConditionalExpression::InternalSwap(BlenderConditionalExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlenderConditionalExpression, op_)
      + sizeof(BlenderConditionalExpression::op_)
      - PROTOBUF_FIELD_OFFSET(BlenderConditionalExpression, predicate_lhs_)>(
          reinterpret_cast<char*>(&predicate_lhs_),
          reinterpret_cast<char*>(&other->predicate_lhs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlenderConditionalExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlenderSortKey::_Internal {
 public:
};

BlenderSortKey::BlenderSortKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.BlenderSortKey)
}
BlenderSortKey::BlenderSortKey(const BlenderSortKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:delivery.BlenderSortKey)
}

void BlenderSortKey::SharedCtor() {
}

BlenderSortKey::~BlenderSortKey() {
  // @@protoc_insertion_point(destructor:delivery.BlenderSortKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlenderSortKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlenderSortKey::ArenaDtor(void* object) {
  BlenderSortKey* _this = reinterpret_cast< BlenderSortKey* >(object);
  (void)_this;
}
void BlenderSortKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlenderSortKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlenderSortKey::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.BlenderSortKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlenderSortKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .delivery.BlenderExpression elements = 1 [json_name = "elements"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlenderSortKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.BlenderSortKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .delivery.BlenderExpression elements = 1 [json_name = "elements"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.BlenderSortKey)
  return target;
}

size_t BlenderSortKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.BlenderSortKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .delivery.BlenderExpression elements = 1 [json_name = "elements"];
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlenderSortKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.BlenderSortKey)
  GOOGLE_DCHECK_NE(&from, this);
  const BlenderSortKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlenderSortKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.BlenderSortKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.BlenderSortKey)
    MergeFrom(*source);
  }
}

void BlenderSortKey::MergeFrom(const BlenderSortKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.BlenderSortKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void BlenderSortKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.BlenderSortKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlenderSortKey::CopyFrom(const BlenderSortKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.BlenderSortKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlenderSortKey::IsInitialized() const {
  return true;
}

void BlenderSortKey::InternalSwap(BlenderSortKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlenderSortKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

HyperloopConfig_ParametersEntry_DoNotUse::HyperloopConfig_ParametersEntry_DoNotUse() {}
HyperloopConfig_ParametersEntry_DoNotUse::HyperloopConfig_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HyperloopConfig_ParametersEntry_DoNotUse::MergeFrom(const HyperloopConfig_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HyperloopConfig_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HyperloopConfig_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class HyperloopConfig::_Internal {
 public:
};

HyperloopConfig::HyperloopConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.HyperloopConfig)
}
HyperloopConfig::HyperloopConfig(const HyperloopConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  // @@protoc_insertion_point(copy_constructor:delivery.HyperloopConfig)
}

void HyperloopConfig::SharedCtor() {
}

HyperloopConfig::~HyperloopConfig() {
  // @@protoc_insertion_point(destructor:delivery.HyperloopConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HyperloopConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HyperloopConfig::ArenaDtor(void* object) {
  HyperloopConfig* _this = reinterpret_cast< HyperloopConfig* >(object);
  (void)_this;
}
void HyperloopConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HyperloopConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HyperloopConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.HyperloopConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperloopConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint64, .delivery.HyperloopParameter> parameters = 1 [json_name = "parameters"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HyperloopConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.HyperloopConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .delivery.HyperloopParameter> parameters = 1 [json_name = "parameters"];
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::delivery::HyperloopParameter >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::delivery::HyperloopParameter >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::delivery::HyperloopParameter >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HyperloopConfig_ParametersEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::delivery::HyperloopParameter >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = HyperloopConfig_ParametersEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.HyperloopConfig)
  return target;
}

size_t HyperloopConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.HyperloopConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .delivery.HyperloopParameter> parameters = 1 [json_name = "parameters"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::delivery::HyperloopParameter >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += HyperloopConfig_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HyperloopConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.HyperloopConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HyperloopConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HyperloopConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.HyperloopConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.HyperloopConfig)
    MergeFrom(*source);
  }
}

void HyperloopConfig::MergeFrom(const HyperloopConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.HyperloopConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
}

void HyperloopConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.HyperloopConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HyperloopConfig::CopyFrom(const HyperloopConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.HyperloopConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperloopConfig::IsInitialized() const {
  return true;
}

void HyperloopConfig::InternalSwap(HyperloopConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameters_.Swap(&other->parameters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperloopConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HyperloopParameter::_Internal {
 public:
};

HyperloopParameter::HyperloopParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.HyperloopParameter)
}
HyperloopParameter::HyperloopParameter(const HyperloopParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  default__ = from.default__;
  // @@protoc_insertion_point(copy_constructor:delivery.HyperloopParameter)
}

void HyperloopParameter::SharedCtor() {
default__ = 0;
}

HyperloopParameter::~HyperloopParameter() {
  // @@protoc_insertion_point(destructor:delivery.HyperloopParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HyperloopParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HyperloopParameter::ArenaDtor(void* object) {
  HyperloopParameter* _this = reinterpret_cast< HyperloopParameter* >(object);
  (void)_this;
}
void HyperloopParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HyperloopParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HyperloopParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.HyperloopParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  default__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperloopParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .delivery.HyperloopGroup groups = 1 [json_name = "groups"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // float default = 2 [json_name = "default"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          default__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HyperloopParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.HyperloopParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .delivery.HyperloopGroup groups = 1 [json_name = "groups"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_groups(i), target, stream);
  }

  // float default = 2 [json_name = "default"];
  if (!(this->default_() <= 0 && this->default_() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_default_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.HyperloopParameter)
  return target;
}

size_t HyperloopParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.HyperloopParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .delivery.HyperloopGroup groups = 1 [json_name = "groups"];
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float default = 2 [json_name = "default"];
  if (!(this->default_() <= 0 && this->default_() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HyperloopParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.HyperloopParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const HyperloopParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HyperloopParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.HyperloopParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.HyperloopParameter)
    MergeFrom(*source);
  }
}

void HyperloopParameter::MergeFrom(const HyperloopParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.HyperloopParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (!(from.default_() <= 0 && from.default_() >= 0)) {
    _internal_set_default_(from._internal_default_());
  }
}

void HyperloopParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.HyperloopParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HyperloopParameter::CopyFrom(const HyperloopParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.HyperloopParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperloopParameter::IsInitialized() const {
  return true;
}

void HyperloopParameter::InternalSwap(HyperloopParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
  swap(default__, other->default__);
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperloopParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HyperloopGroup::_Internal {
 public:
  static const ::delivery::HyperloopExpression& exp(const HyperloopGroup* msg);
};

const ::delivery::HyperloopExpression&
HyperloopGroup::_Internal::exp(const HyperloopGroup* msg) {
  return *msg->exp_;
}
HyperloopGroup::HyperloopGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.HyperloopGroup)
}
HyperloopGroup::HyperloopGroup(const HyperloopGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_exp()) {
    exp_ = new ::delivery::HyperloopExpression(*from.exp_);
  } else {
    exp_ = nullptr;
  }
  ::memcpy(&low_bucket_, &from.low_bucket_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_bucket_) -
    reinterpret_cast<char*>(&low_bucket_)) + sizeof(high_bucket_));
  // @@protoc_insertion_point(copy_constructor:delivery.HyperloopGroup)
}

void HyperloopGroup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&high_bucket_) -
    reinterpret_cast<char*>(&exp_)) + sizeof(high_bucket_));
}

HyperloopGroup::~HyperloopGroup() {
  // @@protoc_insertion_point(destructor:delivery.HyperloopGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HyperloopGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete exp_;
}

void HyperloopGroup::ArenaDtor(void* object) {
  HyperloopGroup* _this = reinterpret_cast< HyperloopGroup* >(object);
  (void)_this;
}
void HyperloopGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HyperloopGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HyperloopGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.HyperloopGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && exp_ != nullptr) {
    delete exp_;
  }
  exp_ = nullptr;
  ::memset(&low_bucket_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_bucket_) -
      reinterpret_cast<char*>(&low_bucket_)) + sizeof(high_bucket_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperloopGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 low_bucket = 1 [json_name = "lowBucket"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          low_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 high_bucket = 2 [json_name = "highBucket"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          high_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.HyperloopExpression exp = 3 [json_name = "exp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_exp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HyperloopGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.HyperloopGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 low_bucket = 1 [json_name = "lowBucket"];
  if (this->low_bucket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_low_bucket(), target);
  }

  // int32 high_bucket = 2 [json_name = "highBucket"];
  if (this->high_bucket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_high_bucket(), target);
  }

  // .delivery.HyperloopExpression exp = 3 [json_name = "exp"];
  if (this->has_exp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::exp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.HyperloopGroup)
  return target;
}

size_t HyperloopGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.HyperloopGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .delivery.HyperloopExpression exp = 3 [json_name = "exp"];
  if (this->has_exp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exp_);
  }

  // int32 low_bucket = 1 [json_name = "lowBucket"];
  if (this->low_bucket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_low_bucket());
  }

  // int32 high_bucket = 2 [json_name = "highBucket"];
  if (this->high_bucket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_high_bucket());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HyperloopGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.HyperloopGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const HyperloopGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HyperloopGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.HyperloopGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.HyperloopGroup)
    MergeFrom(*source);
  }
}

void HyperloopGroup::MergeFrom(const HyperloopGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.HyperloopGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exp()) {
    _internal_mutable_exp()->::delivery::HyperloopExpression::MergeFrom(from._internal_exp());
  }
  if (from.low_bucket() != 0) {
    _internal_set_low_bucket(from._internal_low_bucket());
  }
  if (from.high_bucket() != 0) {
    _internal_set_high_bucket(from._internal_high_bucket());
  }
}

void HyperloopGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.HyperloopGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HyperloopGroup::CopyFrom(const HyperloopGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.HyperloopGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperloopGroup::IsInitialized() const {
  return true;
}

void HyperloopGroup::InternalSwap(HyperloopGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HyperloopGroup, high_bucket_)
      + sizeof(HyperloopGroup::high_bucket_)
      - PROTOBUF_FIELD_OFFSET(HyperloopGroup, exp_)>(
          reinterpret_cast<char*>(&exp_),
          reinterpret_cast<char*>(&other->exp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperloopGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HyperloopExpression::_Internal {
 public:
  static const ::delivery::LeafExpression& leaf(const HyperloopExpression* msg);
  static const ::delivery::HyperloopGeneratorExpression& generator_exp(const HyperloopExpression* msg);
  static const ::delivery::HyperloopConditionalExpression& conditional_exp(const HyperloopExpression* msg);
};

const ::delivery::LeafExpression&
HyperloopExpression::_Internal::leaf(const HyperloopExpression* msg) {
  return *msg->node_type_.leaf_;
}
const ::delivery::HyperloopGeneratorExpression&
HyperloopExpression::_Internal::generator_exp(const HyperloopExpression* msg) {
  return *msg->node_type_.generator_exp_;
}
const ::delivery::HyperloopConditionalExpression&
HyperloopExpression::_Internal::conditional_exp(const HyperloopExpression* msg) {
  return *msg->node_type_.conditional_exp_;
}
void HyperloopExpression::set_allocated_leaf(::delivery::LeafExpression* leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_node_type();
  if (leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaf);
    if (message_arena != submessage_arena) {
      leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaf, submessage_arena);
    }
    set_has_leaf();
    node_type_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.HyperloopExpression.leaf)
}
void HyperloopExpression::set_allocated_generator_exp(::delivery::HyperloopGeneratorExpression* generator_exp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_node_type();
  if (generator_exp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(generator_exp);
    if (message_arena != submessage_arena) {
      generator_exp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generator_exp, submessage_arena);
    }
    set_has_generator_exp();
    node_type_.generator_exp_ = generator_exp;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.HyperloopExpression.generator_exp)
}
void HyperloopExpression::set_allocated_conditional_exp(::delivery::HyperloopConditionalExpression* conditional_exp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_node_type();
  if (conditional_exp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conditional_exp);
    if (message_arena != submessage_arena) {
      conditional_exp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditional_exp, submessage_arena);
    }
    set_has_conditional_exp();
    node_type_.conditional_exp_ = conditional_exp;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.HyperloopExpression.conditional_exp)
}
HyperloopExpression::HyperloopExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.HyperloopExpression)
}
HyperloopExpression::HyperloopExpression(const HyperloopExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node_type();
  switch (from.node_type_case()) {
    case kLeaf: {
      _internal_mutable_leaf()->::delivery::LeafExpression::MergeFrom(from._internal_leaf());
      break;
    }
    case kGeneratorExp: {
      _internal_mutable_generator_exp()->::delivery::HyperloopGeneratorExpression::MergeFrom(from._internal_generator_exp());
      break;
    }
    case kConditionalExp: {
      _internal_mutable_conditional_exp()->::delivery::HyperloopConditionalExpression::MergeFrom(from._internal_conditional_exp());
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:delivery.HyperloopExpression)
}

void HyperloopExpression::SharedCtor() {
clear_has_node_type();
}

HyperloopExpression::~HyperloopExpression() {
  // @@protoc_insertion_point(destructor:delivery.HyperloopExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HyperloopExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_node_type()) {
    clear_node_type();
  }
}

void HyperloopExpression::ArenaDtor(void* object) {
  HyperloopExpression* _this = reinterpret_cast< HyperloopExpression* >(object);
  (void)_this;
}
void HyperloopExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HyperloopExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HyperloopExpression::clear_node_type() {
// @@protoc_insertion_point(one_of_clear_start:delivery.HyperloopExpression)
  switch (node_type_case()) {
    case kLeaf: {
      if (GetArena() == nullptr) {
        delete node_type_.leaf_;
      }
      break;
    }
    case kGeneratorExp: {
      if (GetArena() == nullptr) {
        delete node_type_.generator_exp_;
      }
      break;
    }
    case kConditionalExp: {
      if (GetArena() == nullptr) {
        delete node_type_.conditional_exp_;
      }
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_TYPE_NOT_SET;
}


void HyperloopExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.HyperloopExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_node_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperloopExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .delivery.LeafExpression leaf = 1 [json_name = "leaf"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.HyperloopGeneratorExpression generator_exp = 2 [json_name = "generatorExp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_generator_exp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.HyperloopConditionalExpression conditional_exp = 3 [json_name = "conditionalExp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditional_exp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HyperloopExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.HyperloopExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .delivery.LeafExpression leaf = 1 [json_name = "leaf"];
  if (_internal_has_leaf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::leaf(this), target, stream);
  }

  // .delivery.HyperloopGeneratorExpression generator_exp = 2 [json_name = "generatorExp"];
  if (_internal_has_generator_exp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::generator_exp(this), target, stream);
  }

  // .delivery.HyperloopConditionalExpression conditional_exp = 3 [json_name = "conditionalExp"];
  if (_internal_has_conditional_exp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::conditional_exp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.HyperloopExpression)
  return target;
}

size_t HyperloopExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.HyperloopExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (node_type_case()) {
    // .delivery.LeafExpression leaf = 1 [json_name = "leaf"];
    case kLeaf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_type_.leaf_);
      break;
    }
    // .delivery.HyperloopGeneratorExpression generator_exp = 2 [json_name = "generatorExp"];
    case kGeneratorExp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_type_.generator_exp_);
      break;
    }
    // .delivery.HyperloopConditionalExpression conditional_exp = 3 [json_name = "conditionalExp"];
    case kConditionalExp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_type_.conditional_exp_);
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HyperloopExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.HyperloopExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const HyperloopExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HyperloopExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.HyperloopExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.HyperloopExpression)
    MergeFrom(*source);
  }
}

void HyperloopExpression::MergeFrom(const HyperloopExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.HyperloopExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.node_type_case()) {
    case kLeaf: {
      _internal_mutable_leaf()->::delivery::LeafExpression::MergeFrom(from._internal_leaf());
      break;
    }
    case kGeneratorExp: {
      _internal_mutable_generator_exp()->::delivery::HyperloopGeneratorExpression::MergeFrom(from._internal_generator_exp());
      break;
    }
    case kConditionalExp: {
      _internal_mutable_conditional_exp()->::delivery::HyperloopConditionalExpression::MergeFrom(from._internal_conditional_exp());
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
}

void HyperloopExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.HyperloopExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HyperloopExpression::CopyFrom(const HyperloopExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.HyperloopExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperloopExpression::IsInitialized() const {
  return true;
}

void HyperloopExpression::InternalSwap(HyperloopExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(node_type_, other->node_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperloopExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HyperloopGeneratorExpression::_Internal {
 public:
  static const ::delivery::HyperloopUniformGenerator& uniform(const HyperloopGeneratorExpression* msg);
  static const ::delivery::HyperloopUniformMultiGenerator& uniform_multi(const HyperloopGeneratorExpression* msg);
};

const ::delivery::HyperloopUniformGenerator&
HyperloopGeneratorExpression::_Internal::uniform(const HyperloopGeneratorExpression* msg) {
  return *msg->generator_.uniform_;
}
const ::delivery::HyperloopUniformMultiGenerator&
HyperloopGeneratorExpression::_Internal::uniform_multi(const HyperloopGeneratorExpression* msg) {
  return *msg->generator_.uniform_multi_;
}
void HyperloopGeneratorExpression::set_allocated_uniform(::delivery::HyperloopUniformGenerator* uniform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_generator();
  if (uniform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uniform);
    if (message_arena != submessage_arena) {
      uniform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform, submessage_arena);
    }
    set_has_uniform();
    generator_.uniform_ = uniform;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.HyperloopGeneratorExpression.uniform)
}
void HyperloopGeneratorExpression::set_allocated_uniform_multi(::delivery::HyperloopUniformMultiGenerator* uniform_multi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_generator();
  if (uniform_multi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uniform_multi);
    if (message_arena != submessage_arena) {
      uniform_multi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_multi, submessage_arena);
    }
    set_has_uniform_multi();
    generator_.uniform_multi_ = uniform_multi;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.HyperloopGeneratorExpression.uniform_multi)
}
HyperloopGeneratorExpression::HyperloopGeneratorExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.HyperloopGeneratorExpression)
}
HyperloopGeneratorExpression::HyperloopGeneratorExpression(const HyperloopGeneratorExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_generator();
  switch (from.generator_case()) {
    case kUniform: {
      _internal_mutable_uniform()->::delivery::HyperloopUniformGenerator::MergeFrom(from._internal_uniform());
      break;
    }
    case kUniformMulti: {
      _internal_mutable_uniform_multi()->::delivery::HyperloopUniformMultiGenerator::MergeFrom(from._internal_uniform_multi());
      break;
    }
    case GENERATOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:delivery.HyperloopGeneratorExpression)
}

void HyperloopGeneratorExpression::SharedCtor() {
clear_has_generator();
}

HyperloopGeneratorExpression::~HyperloopGeneratorExpression() {
  // @@protoc_insertion_point(destructor:delivery.HyperloopGeneratorExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HyperloopGeneratorExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_generator()) {
    clear_generator();
  }
}

void HyperloopGeneratorExpression::ArenaDtor(void* object) {
  HyperloopGeneratorExpression* _this = reinterpret_cast< HyperloopGeneratorExpression* >(object);
  (void)_this;
}
void HyperloopGeneratorExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HyperloopGeneratorExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HyperloopGeneratorExpression::clear_generator() {
// @@protoc_insertion_point(one_of_clear_start:delivery.HyperloopGeneratorExpression)
  switch (generator_case()) {
    case kUniform: {
      if (GetArena() == nullptr) {
        delete generator_.uniform_;
      }
      break;
    }
    case kUniformMulti: {
      if (GetArena() == nullptr) {
        delete generator_.uniform_multi_;
      }
      break;
    }
    case GENERATOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GENERATOR_NOT_SET;
}


void HyperloopGeneratorExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.HyperloopGeneratorExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_generator();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperloopGeneratorExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .delivery.HyperloopUniformGenerator uniform = 1 [json_name = "uniform"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.HyperloopUniformMultiGenerator uniform_multi = 2 [json_name = "uniformMulti"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_multi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HyperloopGeneratorExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.HyperloopGeneratorExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .delivery.HyperloopUniformGenerator uniform = 1 [json_name = "uniform"];
  if (_internal_has_uniform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uniform(this), target, stream);
  }

  // .delivery.HyperloopUniformMultiGenerator uniform_multi = 2 [json_name = "uniformMulti"];
  if (_internal_has_uniform_multi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uniform_multi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.HyperloopGeneratorExpression)
  return target;
}

size_t HyperloopGeneratorExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.HyperloopGeneratorExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (generator_case()) {
    // .delivery.HyperloopUniformGenerator uniform = 1 [json_name = "uniform"];
    case kUniform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generator_.uniform_);
      break;
    }
    // .delivery.HyperloopUniformMultiGenerator uniform_multi = 2 [json_name = "uniformMulti"];
    case kUniformMulti: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *generator_.uniform_multi_);
      break;
    }
    case GENERATOR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HyperloopGeneratorExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.HyperloopGeneratorExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const HyperloopGeneratorExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HyperloopGeneratorExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.HyperloopGeneratorExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.HyperloopGeneratorExpression)
    MergeFrom(*source);
  }
}

void HyperloopGeneratorExpression::MergeFrom(const HyperloopGeneratorExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.HyperloopGeneratorExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.generator_case()) {
    case kUniform: {
      _internal_mutable_uniform()->::delivery::HyperloopUniformGenerator::MergeFrom(from._internal_uniform());
      break;
    }
    case kUniformMulti: {
      _internal_mutable_uniform_multi()->::delivery::HyperloopUniformMultiGenerator::MergeFrom(from._internal_uniform_multi());
      break;
    }
    case GENERATOR_NOT_SET: {
      break;
    }
  }
}

void HyperloopGeneratorExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.HyperloopGeneratorExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HyperloopGeneratorExpression::CopyFrom(const HyperloopGeneratorExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.HyperloopGeneratorExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperloopGeneratorExpression::IsInitialized() const {
  return true;
}

void HyperloopGeneratorExpression::InternalSwap(HyperloopGeneratorExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(generator_, other->generator_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperloopGeneratorExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HyperloopUniformGenerator::_Internal {
 public:
};

HyperloopUniformGenerator::HyperloopUniformGenerator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.HyperloopUniformGenerator)
}
HyperloopUniformGenerator::HyperloopUniformGenerator(const HyperloopUniformGenerator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&low_bound_, &from.low_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_bound_) -
    reinterpret_cast<char*>(&low_bound_)) + sizeof(high_bound_));
  // @@protoc_insertion_point(copy_constructor:delivery.HyperloopUniformGenerator)
}

void HyperloopUniformGenerator::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&low_bound_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&high_bound_) -
    reinterpret_cast<char*>(&low_bound_)) + sizeof(high_bound_));
}

HyperloopUniformGenerator::~HyperloopUniformGenerator() {
  // @@protoc_insertion_point(destructor:delivery.HyperloopUniformGenerator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HyperloopUniformGenerator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HyperloopUniformGenerator::ArenaDtor(void* object) {
  HyperloopUniformGenerator* _this = reinterpret_cast< HyperloopUniformGenerator* >(object);
  (void)_this;
}
void HyperloopUniformGenerator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HyperloopUniformGenerator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HyperloopUniformGenerator::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.HyperloopUniformGenerator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&low_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_bound_) -
      reinterpret_cast<char*>(&low_bound_)) + sizeof(high_bound_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperloopUniformGenerator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float low_bound = 1 [json_name = "lowBound"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          low_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float high_bound = 2 [json_name = "highBound"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          high_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HyperloopUniformGenerator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.HyperloopUniformGenerator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float low_bound = 1 [json_name = "lowBound"];
  if (!(this->low_bound() <= 0 && this->low_bound() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_low_bound(), target);
  }

  // float high_bound = 2 [json_name = "highBound"];
  if (!(this->high_bound() <= 0 && this->high_bound() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_high_bound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.HyperloopUniformGenerator)
  return target;
}

size_t HyperloopUniformGenerator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.HyperloopUniformGenerator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float low_bound = 1 [json_name = "lowBound"];
  if (!(this->low_bound() <= 0 && this->low_bound() >= 0)) {
    total_size += 1 + 4;
  }

  // float high_bound = 2 [json_name = "highBound"];
  if (!(this->high_bound() <= 0 && this->high_bound() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HyperloopUniformGenerator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.HyperloopUniformGenerator)
  GOOGLE_DCHECK_NE(&from, this);
  const HyperloopUniformGenerator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HyperloopUniformGenerator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.HyperloopUniformGenerator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.HyperloopUniformGenerator)
    MergeFrom(*source);
  }
}

void HyperloopUniformGenerator::MergeFrom(const HyperloopUniformGenerator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.HyperloopUniformGenerator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.low_bound() <= 0 && from.low_bound() >= 0)) {
    _internal_set_low_bound(from._internal_low_bound());
  }
  if (!(from.high_bound() <= 0 && from.high_bound() >= 0)) {
    _internal_set_high_bound(from._internal_high_bound());
  }
}

void HyperloopUniformGenerator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.HyperloopUniformGenerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HyperloopUniformGenerator::CopyFrom(const HyperloopUniformGenerator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.HyperloopUniformGenerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperloopUniformGenerator::IsInitialized() const {
  return true;
}

void HyperloopUniformGenerator::InternalSwap(HyperloopUniformGenerator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HyperloopUniformGenerator, high_bound_)
      + sizeof(HyperloopUniformGenerator::high_bound_)
      - PROTOBUF_FIELD_OFFSET(HyperloopUniformGenerator, low_bound_)>(
          reinterpret_cast<char*>(&low_bound_),
          reinterpret_cast<char*>(&other->low_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperloopUniformGenerator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HyperloopUniformMultiGenerator::_Internal {
 public:
};

HyperloopUniformMultiGenerator::HyperloopUniformMultiGenerator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.HyperloopUniformMultiGenerator)
}
HyperloopUniformMultiGenerator::HyperloopUniformMultiGenerator(const HyperloopUniformMultiGenerator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&base_, &from.base_,
    static_cast<size_t>(reinterpret_cast<char*>(&multi_) -
    reinterpret_cast<char*>(&base_)) + sizeof(multi_));
  // @@protoc_insertion_point(copy_constructor:delivery.HyperloopUniformMultiGenerator)
}

void HyperloopUniformMultiGenerator::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&multi_) -
    reinterpret_cast<char*>(&base_)) + sizeof(multi_));
}

HyperloopUniformMultiGenerator::~HyperloopUniformMultiGenerator() {
  // @@protoc_insertion_point(destructor:delivery.HyperloopUniformMultiGenerator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HyperloopUniformMultiGenerator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HyperloopUniformMultiGenerator::ArenaDtor(void* object) {
  HyperloopUniformMultiGenerator* _this = reinterpret_cast< HyperloopUniformMultiGenerator* >(object);
  (void)_this;
}
void HyperloopUniformMultiGenerator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HyperloopUniformMultiGenerator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HyperloopUniformMultiGenerator::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.HyperloopUniformMultiGenerator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multi_) -
      reinterpret_cast<char*>(&base_)) + sizeof(multi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperloopUniformMultiGenerator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float base = 1 [json_name = "base"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float multi = 2 [json_name = "multi"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          multi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HyperloopUniformMultiGenerator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.HyperloopUniformMultiGenerator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float base = 1 [json_name = "base"];
  if (!(this->base() <= 0 && this->base() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_base(), target);
  }

  // float multi = 2 [json_name = "multi"];
  if (!(this->multi() <= 0 && this->multi() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_multi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.HyperloopUniformMultiGenerator)
  return target;
}

size_t HyperloopUniformMultiGenerator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.HyperloopUniformMultiGenerator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float base = 1 [json_name = "base"];
  if (!(this->base() <= 0 && this->base() >= 0)) {
    total_size += 1 + 4;
  }

  // float multi = 2 [json_name = "multi"];
  if (!(this->multi() <= 0 && this->multi() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HyperloopUniformMultiGenerator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.HyperloopUniformMultiGenerator)
  GOOGLE_DCHECK_NE(&from, this);
  const HyperloopUniformMultiGenerator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HyperloopUniformMultiGenerator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.HyperloopUniformMultiGenerator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.HyperloopUniformMultiGenerator)
    MergeFrom(*source);
  }
}

void HyperloopUniformMultiGenerator::MergeFrom(const HyperloopUniformMultiGenerator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.HyperloopUniformMultiGenerator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.base() <= 0 && from.base() >= 0)) {
    _internal_set_base(from._internal_base());
  }
  if (!(from.multi() <= 0 && from.multi() >= 0)) {
    _internal_set_multi(from._internal_multi());
  }
}

void HyperloopUniformMultiGenerator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.HyperloopUniformMultiGenerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HyperloopUniformMultiGenerator::CopyFrom(const HyperloopUniformMultiGenerator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.HyperloopUniformMultiGenerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperloopUniformMultiGenerator::IsInitialized() const {
  return true;
}

void HyperloopUniformMultiGenerator::InternalSwap(HyperloopUniformMultiGenerator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HyperloopUniformMultiGenerator, multi_)
      + sizeof(HyperloopUniformMultiGenerator::multi_)
      - PROTOBUF_FIELD_OFFSET(HyperloopUniformMultiGenerator, base_)>(
          reinterpret_cast<char*>(&base_),
          reinterpret_cast<char*>(&other->base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperloopUniformMultiGenerator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HyperloopConditionalExpression::_Internal {
 public:
  static const ::delivery::HyperloopExpression& predicate_lhs(const HyperloopConditionalExpression* msg);
  static const ::delivery::HyperloopExpression& predicate_rhs(const HyperloopConditionalExpression* msg);
  static const ::delivery::HyperloopExpression& then_branch(const HyperloopConditionalExpression* msg);
  static const ::delivery::HyperloopExpression& else_branch(const HyperloopConditionalExpression* msg);
};

const ::delivery::HyperloopExpression&
HyperloopConditionalExpression::_Internal::predicate_lhs(const HyperloopConditionalExpression* msg) {
  return *msg->predicate_lhs_;
}
const ::delivery::HyperloopExpression&
HyperloopConditionalExpression::_Internal::predicate_rhs(const HyperloopConditionalExpression* msg) {
  return *msg->predicate_rhs_;
}
const ::delivery::HyperloopExpression&
HyperloopConditionalExpression::_Internal::then_branch(const HyperloopConditionalExpression* msg) {
  return *msg->then_branch_;
}
const ::delivery::HyperloopExpression&
HyperloopConditionalExpression::_Internal::else_branch(const HyperloopConditionalExpression* msg) {
  return *msg->else_branch_;
}
HyperloopConditionalExpression::HyperloopConditionalExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.HyperloopConditionalExpression)
}
HyperloopConditionalExpression::HyperloopConditionalExpression(const HyperloopConditionalExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_predicate_lhs()) {
    predicate_lhs_ = new ::delivery::HyperloopExpression(*from.predicate_lhs_);
  } else {
    predicate_lhs_ = nullptr;
  }
  if (from._internal_has_predicate_rhs()) {
    predicate_rhs_ = new ::delivery::HyperloopExpression(*from.predicate_rhs_);
  } else {
    predicate_rhs_ = nullptr;
  }
  if (from._internal_has_then_branch()) {
    then_branch_ = new ::delivery::HyperloopExpression(*from.then_branch_);
  } else {
    then_branch_ = nullptr;
  }
  if (from._internal_has_else_branch()) {
    else_branch_ = new ::delivery::HyperloopExpression(*from.else_branch_);
  } else {
    else_branch_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:delivery.HyperloopConditionalExpression)
}

void HyperloopConditionalExpression::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&predicate_lhs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&predicate_lhs_)) + sizeof(op_));
}

HyperloopConditionalExpression::~HyperloopConditionalExpression() {
  // @@protoc_insertion_point(destructor:delivery.HyperloopConditionalExpression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HyperloopConditionalExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete predicate_lhs_;
  if (this != internal_default_instance()) delete predicate_rhs_;
  if (this != internal_default_instance()) delete then_branch_;
  if (this != internal_default_instance()) delete else_branch_;
}

void HyperloopConditionalExpression::ArenaDtor(void* object) {
  HyperloopConditionalExpression* _this = reinterpret_cast< HyperloopConditionalExpression* >(object);
  (void)_this;
}
void HyperloopConditionalExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HyperloopConditionalExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HyperloopConditionalExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.HyperloopConditionalExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && predicate_lhs_ != nullptr) {
    delete predicate_lhs_;
  }
  predicate_lhs_ = nullptr;
  if (GetArena() == nullptr && predicate_rhs_ != nullptr) {
    delete predicate_rhs_;
  }
  predicate_rhs_ = nullptr;
  if (GetArena() == nullptr && then_branch_ != nullptr) {
    delete then_branch_;
  }
  then_branch_ = nullptr;
  if (GetArena() == nullptr && else_branch_ != nullptr) {
    delete else_branch_;
  }
  else_branch_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperloopConditionalExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .delivery.HyperloopConditionalExpression.Operator op = 1 [json_name = "op"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::delivery::HyperloopConditionalExpression_Operator>(val));
        } else goto handle_unusual;
        continue;
      // .delivery.HyperloopExpression predicate_lhs = 2 [json_name = "predicateLhs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate_lhs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.HyperloopExpression predicate_rhs = 3 [json_name = "predicateRhs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate_rhs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.HyperloopExpression then_branch = 4 [json_name = "thenBranch"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_then_branch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.HyperloopExpression else_branch = 5 [json_name = "elseBranch"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_else_branch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HyperloopConditionalExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.HyperloopConditionalExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .delivery.HyperloopConditionalExpression.Operator op = 1 [json_name = "op"];
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // .delivery.HyperloopExpression predicate_lhs = 2 [json_name = "predicateLhs"];
  if (this->has_predicate_lhs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::predicate_lhs(this), target, stream);
  }

  // .delivery.HyperloopExpression predicate_rhs = 3 [json_name = "predicateRhs"];
  if (this->has_predicate_rhs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::predicate_rhs(this), target, stream);
  }

  // .delivery.HyperloopExpression then_branch = 4 [json_name = "thenBranch"];
  if (this->has_then_branch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::then_branch(this), target, stream);
  }

  // .delivery.HyperloopExpression else_branch = 5 [json_name = "elseBranch"];
  if (this->has_else_branch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::else_branch(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.HyperloopConditionalExpression)
  return target;
}

size_t HyperloopConditionalExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.HyperloopConditionalExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .delivery.HyperloopExpression predicate_lhs = 2 [json_name = "predicateLhs"];
  if (this->has_predicate_lhs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predicate_lhs_);
  }

  // .delivery.HyperloopExpression predicate_rhs = 3 [json_name = "predicateRhs"];
  if (this->has_predicate_rhs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predicate_rhs_);
  }

  // .delivery.HyperloopExpression then_branch = 4 [json_name = "thenBranch"];
  if (this->has_then_branch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *then_branch_);
  }

  // .delivery.HyperloopExpression else_branch = 5 [json_name = "elseBranch"];
  if (this->has_else_branch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *else_branch_);
  }

  // .delivery.HyperloopConditionalExpression.Operator op = 1 [json_name = "op"];
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HyperloopConditionalExpression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.HyperloopConditionalExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const HyperloopConditionalExpression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HyperloopConditionalExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.HyperloopConditionalExpression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.HyperloopConditionalExpression)
    MergeFrom(*source);
  }
}

void HyperloopConditionalExpression::MergeFrom(const HyperloopConditionalExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.HyperloopConditionalExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_predicate_lhs()) {
    _internal_mutable_predicate_lhs()->::delivery::HyperloopExpression::MergeFrom(from._internal_predicate_lhs());
  }
  if (from.has_predicate_rhs()) {
    _internal_mutable_predicate_rhs()->::delivery::HyperloopExpression::MergeFrom(from._internal_predicate_rhs());
  }
  if (from.has_then_branch()) {
    _internal_mutable_then_branch()->::delivery::HyperloopExpression::MergeFrom(from._internal_then_branch());
  }
  if (from.has_else_branch()) {
    _internal_mutable_else_branch()->::delivery::HyperloopExpression::MergeFrom(from._internal_else_branch());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void HyperloopConditionalExpression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.HyperloopConditionalExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HyperloopConditionalExpression::CopyFrom(const HyperloopConditionalExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.HyperloopConditionalExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperloopConditionalExpression::IsInitialized() const {
  return true;
}

void HyperloopConditionalExpression::InternalSwap(HyperloopConditionalExpression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HyperloopConditionalExpression, op_)
      + sizeof(HyperloopConditionalExpression::op_)
      - PROTOBUF_FIELD_OFFSET(HyperloopConditionalExpression, predicate_lhs_)>(
          reinterpret_cast<char*>(&predicate_lhs_),
          reinterpret_cast<char*>(&other->predicate_lhs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperloopConditionalExpression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

HyperloopLog_ParameterLogsEntry_DoNotUse::HyperloopLog_ParameterLogsEntry_DoNotUse() {}
HyperloopLog_ParameterLogsEntry_DoNotUse::HyperloopLog_ParameterLogsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HyperloopLog_ParameterLogsEntry_DoNotUse::MergeFrom(const HyperloopLog_ParameterLogsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HyperloopLog_ParameterLogsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HyperloopLog_ParameterLogsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class HyperloopLog::_Internal {
 public:
};

HyperloopLog::HyperloopLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameter_logs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.HyperloopLog)
}
HyperloopLog::HyperloopLog(const HyperloopLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameter_logs_.MergeFrom(from.parameter_logs_);
  // @@protoc_insertion_point(copy_constructor:delivery.HyperloopLog)
}

void HyperloopLog::SharedCtor() {
}

HyperloopLog::~HyperloopLog() {
  // @@protoc_insertion_point(destructor:delivery.HyperloopLog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HyperloopLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HyperloopLog::ArenaDtor(void* object) {
  HyperloopLog* _this = reinterpret_cast< HyperloopLog* >(object);
  (void)_this;
}
void HyperloopLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HyperloopLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HyperloopLog::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.HyperloopLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameter_logs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperloopLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint64, .delivery.HyperloopParameterLog> parameter_logs = 1 [json_name = "parameterLogs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameter_logs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HyperloopLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.HyperloopLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .delivery.HyperloopParameterLog> parameter_logs = 1 [json_name = "parameterLogs"];
  if (!this->_internal_parameter_logs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::delivery::HyperloopParameterLog >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameter_logs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameter_logs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::delivery::HyperloopParameterLog >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::delivery::HyperloopParameterLog >::const_iterator
          it = this->_internal_parameter_logs().begin();
          it != this->_internal_parameter_logs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HyperloopLog_ParameterLogsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::delivery::HyperloopParameterLog >::const_iterator
          it = this->_internal_parameter_logs().begin();
          it != this->_internal_parameter_logs().end(); ++it) {
        target = HyperloopLog_ParameterLogsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.HyperloopLog)
  return target;
}

size_t HyperloopLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.HyperloopLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .delivery.HyperloopParameterLog> parameter_logs = 1 [json_name = "parameterLogs"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameter_logs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::delivery::HyperloopParameterLog >::const_iterator
      it = this->_internal_parameter_logs().begin();
      it != this->_internal_parameter_logs().end(); ++it) {
    total_size += HyperloopLog_ParameterLogsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HyperloopLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.HyperloopLog)
  GOOGLE_DCHECK_NE(&from, this);
  const HyperloopLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HyperloopLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.HyperloopLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.HyperloopLog)
    MergeFrom(*source);
  }
}

void HyperloopLog::MergeFrom(const HyperloopLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.HyperloopLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameter_logs_.MergeFrom(from.parameter_logs_);
}

void HyperloopLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.HyperloopLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HyperloopLog::CopyFrom(const HyperloopLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.HyperloopLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperloopLog::IsInitialized() const {
  return true;
}

void HyperloopLog::InternalSwap(HyperloopLog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameter_logs_.Swap(&other->parameter_logs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperloopLog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HyperloopParameterLog::_Internal {
 public:
};

HyperloopParameterLog::HyperloopParameterLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.HyperloopParameterLog)
}
HyperloopParameterLog::HyperloopParameterLog(const HyperloopParameterLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bucket_, &from.bucket_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&bucket_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:delivery.HyperloopParameterLog)
}

void HyperloopParameterLog::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bucket_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&bucket_)) + sizeof(value_));
}

HyperloopParameterLog::~HyperloopParameterLog() {
  // @@protoc_insertion_point(destructor:delivery.HyperloopParameterLog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HyperloopParameterLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HyperloopParameterLog::ArenaDtor(void* object) {
  HyperloopParameterLog* _this = reinterpret_cast< HyperloopParameterLog* >(object);
  (void)_this;
}
void HyperloopParameterLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HyperloopParameterLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HyperloopParameterLog::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.HyperloopParameterLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bucket_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&bucket_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HyperloopParameterLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bucket = 1 [json_name = "bucket"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HyperloopParameterLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.HyperloopParameterLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bucket = 1 [json_name = "bucket"];
  if (this->bucket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bucket(), target);
  }

  // float value = 2 [json_name = "value"];
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.HyperloopParameterLog)
  return target;
}

size_t HyperloopParameterLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.HyperloopParameterLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bucket = 1 [json_name = "bucket"];
  if (this->bucket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bucket());
  }

  // float value = 2 [json_name = "value"];
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HyperloopParameterLog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.HyperloopParameterLog)
  GOOGLE_DCHECK_NE(&from, this);
  const HyperloopParameterLog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HyperloopParameterLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.HyperloopParameterLog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.HyperloopParameterLog)
    MergeFrom(*source);
  }
}

void HyperloopParameterLog::MergeFrom(const HyperloopParameterLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.HyperloopParameterLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bucket() != 0) {
    _internal_set_bucket(from._internal_bucket());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void HyperloopParameterLog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.HyperloopParameterLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HyperloopParameterLog::CopyFrom(const HyperloopParameterLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.HyperloopParameterLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperloopParameterLog::IsInitialized() const {
  return true;
}

void HyperloopParameterLog::InternalSwap(HyperloopParameterLog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HyperloopParameterLog, value_)
      + sizeof(HyperloopParameterLog::value_)
      - PROTOBUF_FIELD_OFFSET(HyperloopParameterLog, bucket_)>(
          reinterpret_cast<char*>(&bucket_),
          reinterpret_cast<char*>(&other->bucket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HyperloopParameterLog::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace delivery
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::delivery::LeafExpression* Arena::CreateMaybeMessage< ::delivery::LeafExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::LeafExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::Lookup* Arena::CreateMaybeMessage< ::delivery::Lookup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::Lookup >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::BlenderConfig* Arena::CreateMaybeMessage< ::delivery::BlenderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::BlenderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::BlenderExpression* Arena::CreateMaybeMessage< ::delivery::BlenderExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::BlenderExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::BlenderArithmeticExpression* Arena::CreateMaybeMessage< ::delivery::BlenderArithmeticExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::BlenderArithmeticExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::BlenderConditionalExpression* Arena::CreateMaybeMessage< ::delivery::BlenderConditionalExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::BlenderConditionalExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::BlenderSortKey* Arena::CreateMaybeMessage< ::delivery::BlenderSortKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::BlenderSortKey >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::HyperloopConfig_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::delivery::HyperloopConfig_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::HyperloopConfig_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::HyperloopConfig* Arena::CreateMaybeMessage< ::delivery::HyperloopConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::HyperloopConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::HyperloopParameter* Arena::CreateMaybeMessage< ::delivery::HyperloopParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::HyperloopParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::HyperloopGroup* Arena::CreateMaybeMessage< ::delivery::HyperloopGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::HyperloopGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::HyperloopExpression* Arena::CreateMaybeMessage< ::delivery::HyperloopExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::HyperloopExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::HyperloopGeneratorExpression* Arena::CreateMaybeMessage< ::delivery::HyperloopGeneratorExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::HyperloopGeneratorExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::HyperloopUniformGenerator* Arena::CreateMaybeMessage< ::delivery::HyperloopUniformGenerator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::HyperloopUniformGenerator >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::HyperloopUniformMultiGenerator* Arena::CreateMaybeMessage< ::delivery::HyperloopUniformMultiGenerator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::HyperloopUniformMultiGenerator >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::HyperloopConditionalExpression* Arena::CreateMaybeMessage< ::delivery::HyperloopConditionalExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::HyperloopConditionalExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::HyperloopLog_ParameterLogsEntry_DoNotUse* Arena::CreateMaybeMessage< ::delivery::HyperloopLog_ParameterLogsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::HyperloopLog_ParameterLogsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::HyperloopLog* Arena::CreateMaybeMessage< ::delivery::HyperloopLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::HyperloopLog >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::HyperloopParameterLog* Arena::CreateMaybeMessage< ::delivery::HyperloopParameterLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::HyperloopParameterLog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
