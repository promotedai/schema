// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/delivery/blender.proto

#include "proto/delivery/blender.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace delivery {
constexpr BlenderConfig::BlenderConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blender_rule_()
  , quality_score_config_(nullptr){}
struct BlenderConfigDefaultTypeInternal {
  constexpr BlenderConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlenderConfigDefaultTypeInternal() {}
  union {
    BlenderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlenderConfigDefaultTypeInternal _BlenderConfig_default_instance_;
constexpr BlenderRule::BlenderRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attribute_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct BlenderRuleDefaultTypeInternal {
  constexpr BlenderRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlenderRuleDefaultTypeInternal() {}
  union {
    BlenderRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlenderRuleDefaultTypeInternal _BlenderRule_default_instance_;
constexpr Flag::Flag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ignored_(false){}
struct FlagDefaultTypeInternal {
  constexpr FlagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlagDefaultTypeInternal() {}
  union {
    Flag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlagDefaultTypeInternal _Flag_default_instance_;
constexpr EqualV2::EqualV2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct EqualV2DefaultTypeInternal {
  constexpr EqualV2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EqualV2DefaultTypeInternal() {}
  union {
    EqualV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EqualV2DefaultTypeInternal _EqualV2_default_instance_;
constexpr Equal::Equal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compared_to_(0)
  , tolerance_(0){}
struct EqualDefaultTypeInternal {
  constexpr EqualDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EqualDefaultTypeInternal() {}
  union {
    Equal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EqualDefaultTypeInternal _Equal_default_instance_;
constexpr StringEquality::StringEquality(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct StringEqualityDefaultTypeInternal {
  constexpr StringEqualityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringEqualityDefaultTypeInternal() {}
  union {
    StringEquality _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringEqualityDefaultTypeInternal _StringEquality_default_instance_;
constexpr GreaterThan::GreaterThan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compared_to_(0)
  , or_equal_(false){}
struct GreaterThanDefaultTypeInternal {
  constexpr GreaterThanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GreaterThanDefaultTypeInternal() {}
  union {
    GreaterThan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GreaterThanDefaultTypeInternal _GreaterThan_default_instance_;
constexpr LessThan::LessThan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compared_to_(0)
  , or_equal_(false){}
struct LessThanDefaultTypeInternal {
  constexpr LessThanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LessThanDefaultTypeInternal() {}
  union {
    LessThan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LessThanDefaultTypeInternal _LessThan_default_instance_;
constexpr Interval::Interval(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upper_bound_(0)
  , lower_bound_(0)
  , lower_inclusive_(false)
  , upper_inclusive_(false){}
struct IntervalDefaultTypeInternal {
  constexpr IntervalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntervalDefaultTypeInternal() {}
  union {
    Interval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntervalDefaultTypeInternal _Interval_default_instance_;
constexpr PositiveRule::PositiveRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : select_pct_(0)
  , min_pos_(PROTOBUF_ULONGLONG(0))
  , max_pos_(PROTOBUF_ULONGLONG(0)){}
struct PositiveRuleDefaultTypeInternal {
  constexpr PositiveRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositiveRuleDefaultTypeInternal() {}
  union {
    PositiveRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositiveRuleDefaultTypeInternal _PositiveRule_default_instance_;
constexpr InsertRule::InsertRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : select_pct_(0)
  , min_pos_(PROTOBUF_ULONGLONG(0))
  , max_pos_(PROTOBUF_ULONGLONG(0))
  , applies_to_all_insertions_(false)
  , ranking_method_(0)
{}
struct InsertRuleDefaultTypeInternal {
  constexpr InsertRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertRuleDefaultTypeInternal() {}
  union {
    InsertRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertRuleDefaultTypeInternal _InsertRule_default_instance_;
constexpr NegativeRule::NegativeRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pluck_pct_(0)
  , forbid_less_pos_(PROTOBUF_ULONGLONG(0))
  , min_spacing_(PROTOBUF_ULONGLONG(0))
  , forbid_greater_pos_(PROTOBUF_ULONGLONG(0))
  , max_count_(PROTOBUF_ULONGLONG(0)){}
struct NegativeRuleDefaultTypeInternal {
  constexpr NegativeRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NegativeRuleDefaultTypeInternal() {}
  union {
    NegativeRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NegativeRuleDefaultTypeInternal _NegativeRule_default_instance_;
constexpr DiversityRule::DiversityRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : multi_(0){}
struct DiversityRuleDefaultTypeInternal {
  constexpr DiversityRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiversityRuleDefaultTypeInternal() {}
  union {
    DiversityRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiversityRuleDefaultTypeInternal _DiversityRule_default_instance_;
constexpr QualityScoreConfig::QualityScoreConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weighted_sum_term_(){}
struct QualityScoreConfigDefaultTypeInternal {
  constexpr QualityScoreConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QualityScoreConfigDefaultTypeInternal() {}
  union {
    QualityScoreConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QualityScoreConfigDefaultTypeInternal _QualityScoreConfig_default_instance_;
constexpr QualityScoreTerms::QualityScoreTerms(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quality_score_terms_(){}
struct QualityScoreTermsDefaultTypeInternal {
  constexpr QualityScoreTermsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QualityScoreTermsDefaultTypeInternal() {}
  union {
    QualityScoreTerms _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QualityScoreTermsDefaultTypeInternal _QualityScoreTerms_default_instance_;
constexpr QualityScoreTerm::QualityScoreTerm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_conditional_evaluation_(nullptr)
  , fetch_high_(0)
  , fetch_low_(0)
  , weight_(0)
  , offset_(0)
  , _oneof_case_{}{}
struct QualityScoreTermDefaultTypeInternal {
  constexpr QualityScoreTermDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QualityScoreTermDefaultTypeInternal() {}
  union {
    QualityScoreTerm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QualityScoreTermDefaultTypeInternal _QualityScoreTerm_default_instance_;
constexpr TermConditionalEvaluation::TermConditionalEvaluation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attribute_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_if_false_(0)
  , _oneof_case_{}{}
struct TermConditionalEvaluationDefaultTypeInternal {
  constexpr TermConditionalEvaluationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TermConditionalEvaluationDefaultTypeInternal() {}
  union {
    TermConditionalEvaluation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TermConditionalEvaluationDefaultTypeInternal _TermConditionalEvaluation_default_instance_;
}  // namespace delivery
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fdelivery_2fblender_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fdelivery_2fblender_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fdelivery_2fblender_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fdelivery_2fblender_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderConfig, blender_rule_),
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderConfig, quality_score_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderRule, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderRule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderRule, attribute_name_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderRule, rule_),
  PROTOBUF_FIELD_OFFSET(::delivery::BlenderRule, eval_method_),
  PROTOBUF_FIELD_OFFSET(::delivery::Flag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::delivery::Flag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::Flag, ignored_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::EqualV2, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::delivery::EqualV2, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::delivery::EqualV2, equality_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::Equal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::Equal, compared_to_),
  PROTOBUF_FIELD_OFFSET(::delivery::Equal, tolerance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::StringEquality, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::delivery::StringEquality, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::delivery::StringEquality, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::GreaterThan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::GreaterThan, compared_to_),
  PROTOBUF_FIELD_OFFSET(::delivery::GreaterThan, or_equal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::LessThan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::LessThan, compared_to_),
  PROTOBUF_FIELD_OFFSET(::delivery::LessThan, or_equal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::Interval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::Interval, upper_bound_),
  PROTOBUF_FIELD_OFFSET(::delivery::Interval, lower_bound_),
  PROTOBUF_FIELD_OFFSET(::delivery::Interval, lower_inclusive_),
  PROTOBUF_FIELD_OFFSET(::delivery::Interval, upper_inclusive_),
  PROTOBUF_FIELD_OFFSET(::delivery::PositiveRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::delivery::PositiveRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::PositiveRule, select_pct_),
  PROTOBUF_FIELD_OFFSET(::delivery::PositiveRule, min_pos_),
  PROTOBUF_FIELD_OFFSET(::delivery::PositiveRule, max_pos_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::delivery::InsertRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::delivery::InsertRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::InsertRule, select_pct_),
  PROTOBUF_FIELD_OFFSET(::delivery::InsertRule, min_pos_),
  PROTOBUF_FIELD_OFFSET(::delivery::InsertRule, max_pos_),
  PROTOBUF_FIELD_OFFSET(::delivery::InsertRule, applies_to_all_insertions_),
  PROTOBUF_FIELD_OFFSET(::delivery::InsertRule, ranking_method_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::delivery::NegativeRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::delivery::NegativeRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::NegativeRule, pluck_pct_),
  PROTOBUF_FIELD_OFFSET(::delivery::NegativeRule, forbid_less_pos_),
  PROTOBUF_FIELD_OFFSET(::delivery::NegativeRule, min_spacing_),
  PROTOBUF_FIELD_OFFSET(::delivery::NegativeRule, forbid_greater_pos_),
  PROTOBUF_FIELD_OFFSET(::delivery::NegativeRule, max_count_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::delivery::DiversityRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::delivery::DiversityRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::DiversityRule, multi_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreConfig, weighted_sum_term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreTerms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreTerms, quality_score_terms_),
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreTerm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreTerm, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreTerm, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreTerm, fetch_high_),
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreTerm, fetch_low_),
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreTerm, weight_),
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreTerm, offset_),
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreTerm, term_conditional_evaluation_),
  PROTOBUF_FIELD_OFFSET(::delivery::QualityScoreTerm, fetch_method_),
  ~0u,
  ~0u,
  1,
  2,
  3,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::delivery::TermConditionalEvaluation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::delivery::TermConditionalEvaluation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::delivery::TermConditionalEvaluation, value_if_false_),
  PROTOBUF_FIELD_OFFSET(::delivery::TermConditionalEvaluation, attribute_name_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::delivery::TermConditionalEvaluation, eval_method_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::delivery::BlenderConfig)},
  { 7, -1, sizeof(::delivery::BlenderRule)},
  { 24, 30, sizeof(::delivery::Flag)},
  { 31, -1, sizeof(::delivery::EqualV2)},
  { 39, -1, sizeof(::delivery::Equal)},
  { 46, -1, sizeof(::delivery::StringEquality)},
  { 53, -1, sizeof(::delivery::GreaterThan)},
  { 60, -1, sizeof(::delivery::LessThan)},
  { 67, -1, sizeof(::delivery::Interval)},
  { 76, 84, sizeof(::delivery::PositiveRule)},
  { 87, 97, sizeof(::delivery::InsertRule)},
  { 102, 112, sizeof(::delivery::NegativeRule)},
  { 117, 123, sizeof(::delivery::DiversityRule)},
  { 124, -1, sizeof(::delivery::QualityScoreConfig)},
  { 130, -1, sizeof(::delivery::QualityScoreTerms)},
  { 136, 149, sizeof(::delivery::QualityScoreTerm)},
  { 156, -1, sizeof(::delivery::TermConditionalEvaluation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_BlenderConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_BlenderRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_Flag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_EqualV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_Equal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_StringEquality_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_GreaterThan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_LessThan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_Interval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_PositiveRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_InsertRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_NegativeRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_DiversityRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_QualityScoreConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_QualityScoreTerms_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_QualityScoreTerm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::delivery::_TermConditionalEvaluation_default_instance_),
};

const char descriptor_table_protodef_proto_2fdelivery_2fblender_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034proto/delivery/blender.proto\022\010delivery"
  "\"\231\001\n\rBlenderConfig\0228\n\014blender_rule\030\001 \003(\013"
  "2\025.delivery.BlenderRuleR\013blenderRule\022N\n\024"
  "quality_score_config\030\002 \001(\0132\034.delivery.Qu"
  "alityScoreConfigR\022qualityScoreConfig\"\301\004\n"
  "\013BlenderRule\022%\n\016attribute_name\030\001 \001(\tR\rat"
  "tributeName\022=\n\rpositive_rule\030\006 \001(\0132\026.del"
  "ivery.PositiveRuleH\000R\014positiveRule\0227\n\013in"
  "sert_rule\030\007 \001(\0132\024.delivery.InsertRuleH\000R"
  "\ninsertRule\022=\n\rnegative_rule\030\010 \001(\0132\026.del"
  "ivery.NegativeRuleH\000R\014negativeRule\022@\n\016di"
  "versity_rule\030\t \001(\0132\027.delivery.DiversityR"
  "uleH\000R\rdiversityRule\022$\n\004flag\030\013 \001(\0132\016.del"
  "ivery.FlagH\001R\004flag\022:\n\014greater_than\030\r \001(\013"
  "2\025.delivery.GreaterThanH\001R\013greaterThan\0221"
  "\n\tless_than\030\016 \001(\0132\022.delivery.LessThanH\001R"
  "\010lessThan\0220\n\010interval\030\017 \001(\0132\022.delivery.I"
  "ntervalH\001R\010interval\022.\n\010equal_v2\030\020 \001(\0132\021."
  "delivery.EqualV2H\001R\007equalV2B\006\n\004ruleB\r\n\013e"
  "val_methodJ\004\010\002\020\006\"5\n\004Flag\022!\n\007ignored\030\001 \001("
  "\010B\002\030\001H\000R\007ignored\210\001\001B\n\n\010_ignored\"\212\001\n\007Equa"
  "lV2\022)\n\006number\030\001 \001(\0132\017.delivery.EqualH\000R\006"
  "number\022C\n\017string_equality\030\002 \001(\0132\030.delive"
  "ry.StringEqualityH\000R\016stringEqualityB\017\n\re"
  "quality_type\"F\n\005Equal\022\037\n\013compared_to\030\001 \001"
  "(\002R\ncomparedTo\022\034\n\ttolerance\030\002 \001(\002R\ttoler"
  "ance\"-\n\016StringEquality\022\022\n\003raw\030\001 \001(\tH\000R\003r"
  "awB\007\n\005value\"I\n\013GreaterThan\022\037\n\013compared_t"
  "o\030\001 \001(\002R\ncomparedTo\022\031\n\010or_equal\030\002 \001(\010R\007o"
  "rEqual\"F\n\010LessThan\022\037\n\013compared_to\030\001 \001(\002R"
  "\ncomparedTo\022\031\n\010or_equal\030\002 \001(\010R\007orEqual\"\236"
  "\001\n\010Interval\022\037\n\013upper_bound\030\001 \001(\002R\nupperB"
  "ound\022\037\n\013lower_bound\030\002 \001(\002R\nlowerBound\022\'\n"
  "\017lower_inclusive\030\003 \001(\010R\016lowerInclusive\022\'"
  "\n\017upper_inclusive\030\004 \001(\010R\016upperInclusive\""
  "\225\001\n\014PositiveRule\022\"\n\nselect_pct\030\001 \001(\001H\000R\t"
  "selectPct\210\001\001\022\034\n\007min_pos\030\002 \001(\004H\001R\006minPos\210"
  "\001\001\022\034\n\007max_pos\030\003 \001(\004H\002R\006maxPos\210\001\001B\r\n\013_sel"
  "ect_pctB\n\n\010_min_posB\n\n\010_max_pos\"\216\002\n\nInse"
  "rtRule\022\"\n\nselect_pct\030\001 \001(\001H\000R\tselectPct\210"
  "\001\001\022\034\n\007min_pos\030\002 \001(\004H\001R\006minPos\210\001\001\022\034\n\007max_"
  "pos\030\003 \001(\004H\002R\006maxPos\210\001\001\0229\n\031applies_to_all"
  "_insertions\030\005 \001(\010R\026appliesToAllInsertion"
  "s\022>\n\016ranking_method\030\006 \001(\0162\027.delivery.Ran"
  "kingMethodR\rrankingMethodB\r\n\013_select_pct"
  "B\n\n\010_min_posB\n\n\010_max_pos\"\257\002\n\014NegativeRul"
  "e\022 \n\tpluck_pct\030\001 \001(\001H\000R\010pluckPct\210\001\001\022+\n\017f"
  "orbid_less_pos\030\002 \001(\004H\001R\rforbidLessPos\210\001\001"
  "\022$\n\013min_spacing\030\003 \001(\004H\002R\nminSpacing\210\001\001\0221"
  "\n\022forbid_greater_pos\030\004 \001(\004H\003R\020forbidGrea"
  "terPos\210\001\001\022 \n\tmax_count\030\005 \001(\004H\004R\010maxCount"
  "\210\001\001B\014\n\n_pluck_pctB\022\n\020_forbid_less_posB\016\n"
  "\014_min_spacingB\025\n\023_forbid_greater_posB\014\n\n"
  "_max_count\"4\n\rDiversityRule\022\031\n\005multi\030\001 \001"
  "(\001H\000R\005multi\210\001\001B\010\n\006_multi\"\\\n\022QualityScore"
  "Config\022F\n\021weighted_sum_term\030\001 \003(\0132\032.deli"
  "very.QualityScoreTermR\017weightedSumTerm\"_"
  "\n\021QualityScoreTerms\022J\n\023quality_score_ter"
  "ms\030\001 \003(\0132\032.delivery.QualityScoreTermR\021qu"
  "alityScoreTerms\"\267\003\n\020QualityScoreTerm\022\'\n\016"
  "attribute_name\030\001 \001(\tH\000R\rattributeName\0227\n"
  "\007product\030\003 \001(\0132\033.delivery.QualityScoreTe"
  "rmsH\000R\007product\022\"\n\nfetch_high\030\n \001(\002H\001R\tfe"
  "tchHigh\210\001\001\022 \n\tfetch_low\030\013 \001(\002H\002R\010fetchLo"
  "w\210\001\001\022\033\n\006weight\030\014 \001(\002H\003R\006weight\210\001\001\022\026\n\006off"
  "set\030\r \001(\002R\006offset\022h\n\033term_conditional_ev"
  "aluation\030\016 \001(\0132#.delivery.TermConditiona"
  "lEvaluationH\004R\031termConditionalEvaluation"
  "\210\001\001B\016\n\014fetch_methodB\r\n\013_fetch_highB\014\n\n_f"
  "etch_lowB\t\n\007_weightB\036\n\034_term_conditional"
  "_evaluationJ\004\010\004\020\n\"\356\002\n\031TermConditionalEva"
  "luation\022$\n\016value_if_false\030\001 \001(\002R\014valueIf"
  "False\022%\n\016attribute_name\030\002 \001(\tR\rattribute"
  "Name\022$\n\004flag\030\004 \001(\0132\016.delivery.FlagH\000R\004fl"
  "ag\022:\n\014greater_than\030\006 \001(\0132\025.delivery.Grea"
  "terThanH\000R\013greaterThan\0221\n\tless_than\030\007 \001("
  "\0132\022.delivery.LessThanH\000R\010lessThan\0220\n\010int"
  "erval\030\010 \001(\0132\022.delivery.IntervalH\000R\010inter"
  "val\022.\n\010equal_v2\030\n \001(\0132\021.delivery.EqualV2"
  "H\000R\007equalV2B\r\n\013eval_method*5\n\rRankingMet"
  "hod\022\021\n\rQUALITY_SCORE\020\000\022\021\n\rREQUEST_ORDER\020"
  "\001Ba\n\032ai.promoted.proto.deliveryB\007Blender"
  "P\001Z8github.com/promotedai/schema/generat"
  "ed/go/proto/deliveryb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fdelivery_2fblender_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fdelivery_2fblender_2eproto = {
  false, false, 3348, descriptor_table_protodef_proto_2fdelivery_2fblender_2eproto, "proto/delivery/blender.proto", 
  &descriptor_table_proto_2fdelivery_2fblender_2eproto_once, nullptr, 0, 17,
  schemas, file_default_instances, TableStruct_proto_2fdelivery_2fblender_2eproto::offsets,
  file_level_metadata_proto_2fdelivery_2fblender_2eproto, file_level_enum_descriptors_proto_2fdelivery_2fblender_2eproto, file_level_service_descriptors_proto_2fdelivery_2fblender_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_proto_2fdelivery_2fblender_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fdelivery_2fblender_2eproto);
  return descriptor_table_proto_2fdelivery_2fblender_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fdelivery_2fblender_2eproto(&descriptor_table_proto_2fdelivery_2fblender_2eproto);
namespace delivery {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RankingMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fdelivery_2fblender_2eproto);
  return file_level_enum_descriptors_proto_2fdelivery_2fblender_2eproto[0];
}
bool RankingMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BlenderConfig::_Internal {
 public:
  static const ::delivery::QualityScoreConfig& quality_score_config(const BlenderConfig* msg);
};

const ::delivery::QualityScoreConfig&
BlenderConfig::_Internal::quality_score_config(const BlenderConfig* msg) {
  return *msg->quality_score_config_;
}
BlenderConfig::BlenderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blender_rule_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.BlenderConfig)
}
BlenderConfig::BlenderConfig(const BlenderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blender_rule_(from.blender_rule_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quality_score_config()) {
    quality_score_config_ = new ::delivery::QualityScoreConfig(*from.quality_score_config_);
  } else {
    quality_score_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:delivery.BlenderConfig)
}

void BlenderConfig::SharedCtor() {
quality_score_config_ = nullptr;
}

BlenderConfig::~BlenderConfig() {
  // @@protoc_insertion_point(destructor:delivery.BlenderConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlenderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete quality_score_config_;
}

void BlenderConfig::ArenaDtor(void* object) {
  BlenderConfig* _this = reinterpret_cast< BlenderConfig* >(object);
  (void)_this;
}
void BlenderConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlenderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlenderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.BlenderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blender_rule_.Clear();
  if (GetArena() == nullptr && quality_score_config_ != nullptr) {
    delete quality_score_config_;
  }
  quality_score_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlenderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .delivery.BlenderRule blender_rule = 1 [json_name = "blenderRule"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blender_rule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .delivery.QualityScoreConfig quality_score_config = 2 [json_name = "qualityScoreConfig"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality_score_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlenderConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.BlenderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .delivery.BlenderRule blender_rule = 1 [json_name = "blenderRule"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blender_rule_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blender_rule(i), target, stream);
  }

  // .delivery.QualityScoreConfig quality_score_config = 2 [json_name = "qualityScoreConfig"];
  if (this->has_quality_score_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quality_score_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.BlenderConfig)
  return target;
}

size_t BlenderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.BlenderConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .delivery.BlenderRule blender_rule = 1 [json_name = "blenderRule"];
  total_size += 1UL * this->_internal_blender_rule_size();
  for (const auto& msg : this->blender_rule_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .delivery.QualityScoreConfig quality_score_config = 2 [json_name = "qualityScoreConfig"];
  if (this->has_quality_score_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quality_score_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlenderConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.BlenderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BlenderConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlenderConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.BlenderConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.BlenderConfig)
    MergeFrom(*source);
  }
}

void BlenderConfig::MergeFrom(const BlenderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.BlenderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blender_rule_.MergeFrom(from.blender_rule_);
  if (from.has_quality_score_config()) {
    _internal_mutable_quality_score_config()->::delivery::QualityScoreConfig::MergeFrom(from._internal_quality_score_config());
  }
}

void BlenderConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.BlenderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlenderConfig::CopyFrom(const BlenderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.BlenderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlenderConfig::IsInitialized() const {
  return true;
}

void BlenderConfig::InternalSwap(BlenderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blender_rule_.InternalSwap(&other->blender_rule_);
  swap(quality_score_config_, other->quality_score_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlenderConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlenderRule::_Internal {
 public:
  static const ::delivery::PositiveRule& positive_rule(const BlenderRule* msg);
  static const ::delivery::InsertRule& insert_rule(const BlenderRule* msg);
  static const ::delivery::NegativeRule& negative_rule(const BlenderRule* msg);
  static const ::delivery::DiversityRule& diversity_rule(const BlenderRule* msg);
  static const ::delivery::Flag& flag(const BlenderRule* msg);
  static const ::delivery::GreaterThan& greater_than(const BlenderRule* msg);
  static const ::delivery::LessThan& less_than(const BlenderRule* msg);
  static const ::delivery::Interval& interval(const BlenderRule* msg);
  static const ::delivery::EqualV2& equal_v2(const BlenderRule* msg);
};

const ::delivery::PositiveRule&
BlenderRule::_Internal::positive_rule(const BlenderRule* msg) {
  return *msg->rule_.positive_rule_;
}
const ::delivery::InsertRule&
BlenderRule::_Internal::insert_rule(const BlenderRule* msg) {
  return *msg->rule_.insert_rule_;
}
const ::delivery::NegativeRule&
BlenderRule::_Internal::negative_rule(const BlenderRule* msg) {
  return *msg->rule_.negative_rule_;
}
const ::delivery::DiversityRule&
BlenderRule::_Internal::diversity_rule(const BlenderRule* msg) {
  return *msg->rule_.diversity_rule_;
}
const ::delivery::Flag&
BlenderRule::_Internal::flag(const BlenderRule* msg) {
  return *msg->eval_method_.flag_;
}
const ::delivery::GreaterThan&
BlenderRule::_Internal::greater_than(const BlenderRule* msg) {
  return *msg->eval_method_.greater_than_;
}
const ::delivery::LessThan&
BlenderRule::_Internal::less_than(const BlenderRule* msg) {
  return *msg->eval_method_.less_than_;
}
const ::delivery::Interval&
BlenderRule::_Internal::interval(const BlenderRule* msg) {
  return *msg->eval_method_.interval_;
}
const ::delivery::EqualV2&
BlenderRule::_Internal::equal_v2(const BlenderRule* msg) {
  return *msg->eval_method_.equal_v2_;
}
void BlenderRule::set_allocated_positive_rule(::delivery::PositiveRule* positive_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rule();
  if (positive_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(positive_rule);
    if (message_arena != submessage_arena) {
      positive_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positive_rule, submessage_arena);
    }
    set_has_positive_rule();
    rule_.positive_rule_ = positive_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.BlenderRule.positive_rule)
}
void BlenderRule::set_allocated_insert_rule(::delivery::InsertRule* insert_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rule();
  if (insert_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(insert_rule);
    if (message_arena != submessage_arena) {
      insert_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_rule, submessage_arena);
    }
    set_has_insert_rule();
    rule_.insert_rule_ = insert_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.BlenderRule.insert_rule)
}
void BlenderRule::set_allocated_negative_rule(::delivery::NegativeRule* negative_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rule();
  if (negative_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(negative_rule);
    if (message_arena != submessage_arena) {
      negative_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, negative_rule, submessage_arena);
    }
    set_has_negative_rule();
    rule_.negative_rule_ = negative_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.BlenderRule.negative_rule)
}
void BlenderRule::set_allocated_diversity_rule(::delivery::DiversityRule* diversity_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_rule();
  if (diversity_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(diversity_rule);
    if (message_arena != submessage_arena) {
      diversity_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diversity_rule, submessage_arena);
    }
    set_has_diversity_rule();
    rule_.diversity_rule_ = diversity_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.BlenderRule.diversity_rule)
}
void BlenderRule::set_allocated_flag(::delivery::Flag* flag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_eval_method();
  if (flag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flag);
    if (message_arena != submessage_arena) {
      flag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flag, submessage_arena);
    }
    set_has_flag();
    eval_method_.flag_ = flag;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.BlenderRule.flag)
}
void BlenderRule::set_allocated_greater_than(::delivery::GreaterThan* greater_than) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_eval_method();
  if (greater_than) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(greater_than);
    if (message_arena != submessage_arena) {
      greater_than = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, greater_than, submessage_arena);
    }
    set_has_greater_than();
    eval_method_.greater_than_ = greater_than;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.BlenderRule.greater_than)
}
void BlenderRule::set_allocated_less_than(::delivery::LessThan* less_than) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_eval_method();
  if (less_than) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(less_than);
    if (message_arena != submessage_arena) {
      less_than = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, less_than, submessage_arena);
    }
    set_has_less_than();
    eval_method_.less_than_ = less_than;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.BlenderRule.less_than)
}
void BlenderRule::set_allocated_interval(::delivery::Interval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_eval_method();
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interval);
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    set_has_interval();
    eval_method_.interval_ = interval;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.BlenderRule.interval)
}
void BlenderRule::set_allocated_equal_v2(::delivery::EqualV2* equal_v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_eval_method();
  if (equal_v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(equal_v2);
    if (message_arena != submessage_arena) {
      equal_v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equal_v2, submessage_arena);
    }
    set_has_equal_v2();
    eval_method_.equal_v2_ = equal_v2;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.BlenderRule.equal_v2)
}
BlenderRule::BlenderRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.BlenderRule)
}
BlenderRule::BlenderRule(const BlenderRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attribute_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attribute_name().empty()) {
    attribute_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attribute_name(), 
      GetArena());
  }
  clear_has_rule();
  switch (from.rule_case()) {
    case kPositiveRule: {
      _internal_mutable_positive_rule()->::delivery::PositiveRule::MergeFrom(from._internal_positive_rule());
      break;
    }
    case kInsertRule: {
      _internal_mutable_insert_rule()->::delivery::InsertRule::MergeFrom(from._internal_insert_rule());
      break;
    }
    case kNegativeRule: {
      _internal_mutable_negative_rule()->::delivery::NegativeRule::MergeFrom(from._internal_negative_rule());
      break;
    }
    case kDiversityRule: {
      _internal_mutable_diversity_rule()->::delivery::DiversityRule::MergeFrom(from._internal_diversity_rule());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  clear_has_eval_method();
  switch (from.eval_method_case()) {
    case kFlag: {
      _internal_mutable_flag()->::delivery::Flag::MergeFrom(from._internal_flag());
      break;
    }
    case kGreaterThan: {
      _internal_mutable_greater_than()->::delivery::GreaterThan::MergeFrom(from._internal_greater_than());
      break;
    }
    case kLessThan: {
      _internal_mutable_less_than()->::delivery::LessThan::MergeFrom(from._internal_less_than());
      break;
    }
    case kInterval: {
      _internal_mutable_interval()->::delivery::Interval::MergeFrom(from._internal_interval());
      break;
    }
    case kEqualV2: {
      _internal_mutable_equal_v2()->::delivery::EqualV2::MergeFrom(from._internal_equal_v2());
      break;
    }
    case EVAL_METHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:delivery.BlenderRule)
}

void BlenderRule::SharedCtor() {
attribute_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clear_has_rule();
clear_has_eval_method();
}

BlenderRule::~BlenderRule() {
  // @@protoc_insertion_point(destructor:delivery.BlenderRule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlenderRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  attribute_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_rule()) {
    clear_rule();
  }
  if (has_eval_method()) {
    clear_eval_method();
  }
}

void BlenderRule::ArenaDtor(void* object) {
  BlenderRule* _this = reinterpret_cast< BlenderRule* >(object);
  (void)_this;
}
void BlenderRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlenderRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlenderRule::clear_rule() {
// @@protoc_insertion_point(one_of_clear_start:delivery.BlenderRule)
  switch (rule_case()) {
    case kPositiveRule: {
      if (GetArena() == nullptr) {
        delete rule_.positive_rule_;
      }
      break;
    }
    case kInsertRule: {
      if (GetArena() == nullptr) {
        delete rule_.insert_rule_;
      }
      break;
    }
    case kNegativeRule: {
      if (GetArena() == nullptr) {
        delete rule_.negative_rule_;
      }
      break;
    }
    case kDiversityRule: {
      if (GetArena() == nullptr) {
        delete rule_.diversity_rule_;
      }
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RULE_NOT_SET;
}

void BlenderRule::clear_eval_method() {
// @@protoc_insertion_point(one_of_clear_start:delivery.BlenderRule)
  switch (eval_method_case()) {
    case kFlag: {
      if (GetArena() == nullptr) {
        delete eval_method_.flag_;
      }
      break;
    }
    case kGreaterThan: {
      if (GetArena() == nullptr) {
        delete eval_method_.greater_than_;
      }
      break;
    }
    case kLessThan: {
      if (GetArena() == nullptr) {
        delete eval_method_.less_than_;
      }
      break;
    }
    case kInterval: {
      if (GetArena() == nullptr) {
        delete eval_method_.interval_;
      }
      break;
    }
    case kEqualV2: {
      if (GetArena() == nullptr) {
        delete eval_method_.equal_v2_;
      }
      break;
    }
    case EVAL_METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = EVAL_METHOD_NOT_SET;
}


void BlenderRule::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.BlenderRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_name_.ClearToEmpty();
  clear_rule();
  clear_eval_method();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlenderRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string attribute_name = 1 [json_name = "attributeName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_attribute_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.BlenderRule.attribute_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.PositiveRule positive_rule = 6 [json_name = "positiveRule"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_positive_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.InsertRule insert_rule = 7 [json_name = "insertRule"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.NegativeRule negative_rule = 8 [json_name = "negativeRule"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_negative_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.DiversityRule diversity_rule = 9 [json_name = "diversityRule"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_diversity_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.Flag flag = 11 [json_name = "flag"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_flag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.GreaterThan greater_than = 13 [json_name = "greaterThan"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_greater_than(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.LessThan less_than = 14 [json_name = "lessThan"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_less_than(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.Interval interval = 15 [json_name = "interval"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.EqualV2 equal_v2 = 16 [json_name = "equalV2"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_equal_v2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlenderRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.BlenderRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string attribute_name = 1 [json_name = "attributeName"];
  if (this->attribute_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attribute_name().data(), static_cast<int>(this->_internal_attribute_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.BlenderRule.attribute_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_attribute_name(), target);
  }

  // .delivery.PositiveRule positive_rule = 6 [json_name = "positiveRule"];
  if (_internal_has_positive_rule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::positive_rule(this), target, stream);
  }

  // .delivery.InsertRule insert_rule = 7 [json_name = "insertRule"];
  if (_internal_has_insert_rule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::insert_rule(this), target, stream);
  }

  // .delivery.NegativeRule negative_rule = 8 [json_name = "negativeRule"];
  if (_internal_has_negative_rule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::negative_rule(this), target, stream);
  }

  // .delivery.DiversityRule diversity_rule = 9 [json_name = "diversityRule"];
  if (_internal_has_diversity_rule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::diversity_rule(this), target, stream);
  }

  // .delivery.Flag flag = 11 [json_name = "flag"];
  if (_internal_has_flag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::flag(this), target, stream);
  }

  // .delivery.GreaterThan greater_than = 13 [json_name = "greaterThan"];
  if (_internal_has_greater_than()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::greater_than(this), target, stream);
  }

  // .delivery.LessThan less_than = 14 [json_name = "lessThan"];
  if (_internal_has_less_than()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::less_than(this), target, stream);
  }

  // .delivery.Interval interval = 15 [json_name = "interval"];
  if (_internal_has_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::interval(this), target, stream);
  }

  // .delivery.EqualV2 equal_v2 = 16 [json_name = "equalV2"];
  if (_internal_has_equal_v2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::equal_v2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.BlenderRule)
  return target;
}

size_t BlenderRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.BlenderRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string attribute_name = 1 [json_name = "attributeName"];
  if (this->attribute_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attribute_name());
  }

  switch (rule_case()) {
    // .delivery.PositiveRule positive_rule = 6 [json_name = "positiveRule"];
    case kPositiveRule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rule_.positive_rule_);
      break;
    }
    // .delivery.InsertRule insert_rule = 7 [json_name = "insertRule"];
    case kInsertRule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rule_.insert_rule_);
      break;
    }
    // .delivery.NegativeRule negative_rule = 8 [json_name = "negativeRule"];
    case kNegativeRule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rule_.negative_rule_);
      break;
    }
    // .delivery.DiversityRule diversity_rule = 9 [json_name = "diversityRule"];
    case kDiversityRule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rule_.diversity_rule_);
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  switch (eval_method_case()) {
    // .delivery.Flag flag = 11 [json_name = "flag"];
    case kFlag: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eval_method_.flag_);
      break;
    }
    // .delivery.GreaterThan greater_than = 13 [json_name = "greaterThan"];
    case kGreaterThan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eval_method_.greater_than_);
      break;
    }
    // .delivery.LessThan less_than = 14 [json_name = "lessThan"];
    case kLessThan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eval_method_.less_than_);
      break;
    }
    // .delivery.Interval interval = 15 [json_name = "interval"];
    case kInterval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eval_method_.interval_);
      break;
    }
    // .delivery.EqualV2 equal_v2 = 16 [json_name = "equalV2"];
    case kEqualV2: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eval_method_.equal_v2_);
      break;
    }
    case EVAL_METHOD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlenderRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.BlenderRule)
  GOOGLE_DCHECK_NE(&from, this);
  const BlenderRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlenderRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.BlenderRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.BlenderRule)
    MergeFrom(*source);
  }
}

void BlenderRule::MergeFrom(const BlenderRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.BlenderRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attribute_name().size() > 0) {
    _internal_set_attribute_name(from._internal_attribute_name());
  }
  switch (from.rule_case()) {
    case kPositiveRule: {
      _internal_mutable_positive_rule()->::delivery::PositiveRule::MergeFrom(from._internal_positive_rule());
      break;
    }
    case kInsertRule: {
      _internal_mutable_insert_rule()->::delivery::InsertRule::MergeFrom(from._internal_insert_rule());
      break;
    }
    case kNegativeRule: {
      _internal_mutable_negative_rule()->::delivery::NegativeRule::MergeFrom(from._internal_negative_rule());
      break;
    }
    case kDiversityRule: {
      _internal_mutable_diversity_rule()->::delivery::DiversityRule::MergeFrom(from._internal_diversity_rule());
      break;
    }
    case RULE_NOT_SET: {
      break;
    }
  }
  switch (from.eval_method_case()) {
    case kFlag: {
      _internal_mutable_flag()->::delivery::Flag::MergeFrom(from._internal_flag());
      break;
    }
    case kGreaterThan: {
      _internal_mutable_greater_than()->::delivery::GreaterThan::MergeFrom(from._internal_greater_than());
      break;
    }
    case kLessThan: {
      _internal_mutable_less_than()->::delivery::LessThan::MergeFrom(from._internal_less_than());
      break;
    }
    case kInterval: {
      _internal_mutable_interval()->::delivery::Interval::MergeFrom(from._internal_interval());
      break;
    }
    case kEqualV2: {
      _internal_mutable_equal_v2()->::delivery::EqualV2::MergeFrom(from._internal_equal_v2());
      break;
    }
    case EVAL_METHOD_NOT_SET: {
      break;
    }
  }
}

void BlenderRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.BlenderRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlenderRule::CopyFrom(const BlenderRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.BlenderRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlenderRule::IsInitialized() const {
  return true;
}

void BlenderRule::InternalSwap(BlenderRule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribute_name_.Swap(&other->attribute_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rule_, other->rule_);
  swap(eval_method_, other->eval_method_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlenderRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Flag::_Internal {
 public:
  using HasBits = decltype(std::declval<Flag>()._has_bits_);
  static void set_has_ignored(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Flag::Flag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.Flag)
}
Flag::Flag(const Flag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ignored_ = from.ignored_;
  // @@protoc_insertion_point(copy_constructor:delivery.Flag)
}

void Flag::SharedCtor() {
ignored_ = false;
}

Flag::~Flag() {
  // @@protoc_insertion_point(destructor:delivery.Flag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Flag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Flag::ArenaDtor(void* object) {
  Flag* _this = reinterpret_cast< Flag* >(object);
  (void)_this;
}
void Flag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Flag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Flag::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.Flag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ignored_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Flag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ignored = 1 [json_name = "ignored", deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignored(&has_bits);
          ignored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Flag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.Flag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ignored = 1 [json_name = "ignored", deprecated = true];
  if (_internal_has_ignored()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignored(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.Flag)
  return target;
}

size_t Flag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.Flag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ignored = 1 [json_name = "ignored", deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Flag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.Flag)
  GOOGLE_DCHECK_NE(&from, this);
  const Flag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Flag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.Flag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.Flag)
    MergeFrom(*source);
  }
}

void Flag::MergeFrom(const Flag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.Flag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ignored()) {
    _internal_set_ignored(from._internal_ignored());
  }
}

void Flag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.Flag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Flag::CopyFrom(const Flag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.Flag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flag::IsInitialized() const {
  return true;
}

void Flag::InternalSwap(Flag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignored_, other->ignored_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Flag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EqualV2::_Internal {
 public:
  static const ::delivery::Equal& number(const EqualV2* msg);
  static const ::delivery::StringEquality& string_equality(const EqualV2* msg);
};

const ::delivery::Equal&
EqualV2::_Internal::number(const EqualV2* msg) {
  return *msg->equality_type_.number_;
}
const ::delivery::StringEquality&
EqualV2::_Internal::string_equality(const EqualV2* msg) {
  return *msg->equality_type_.string_equality_;
}
void EqualV2::set_allocated_number(::delivery::Equal* number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_equality_type();
  if (number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(number);
    if (message_arena != submessage_arena) {
      number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, number, submessage_arena);
    }
    set_has_number();
    equality_type_.number_ = number;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.EqualV2.number)
}
void EqualV2::set_allocated_string_equality(::delivery::StringEquality* string_equality) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_equality_type();
  if (string_equality) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(string_equality);
    if (message_arena != submessage_arena) {
      string_equality = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_equality, submessage_arena);
    }
    set_has_string_equality();
    equality_type_.string_equality_ = string_equality;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.EqualV2.string_equality)
}
EqualV2::EqualV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.EqualV2)
}
EqualV2::EqualV2(const EqualV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_equality_type();
  switch (from.equality_type_case()) {
    case kNumber: {
      _internal_mutable_number()->::delivery::Equal::MergeFrom(from._internal_number());
      break;
    }
    case kStringEquality: {
      _internal_mutable_string_equality()->::delivery::StringEquality::MergeFrom(from._internal_string_equality());
      break;
    }
    case EQUALITY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:delivery.EqualV2)
}

void EqualV2::SharedCtor() {
clear_has_equality_type();
}

EqualV2::~EqualV2() {
  // @@protoc_insertion_point(destructor:delivery.EqualV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EqualV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_equality_type()) {
    clear_equality_type();
  }
}

void EqualV2::ArenaDtor(void* object) {
  EqualV2* _this = reinterpret_cast< EqualV2* >(object);
  (void)_this;
}
void EqualV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EqualV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EqualV2::clear_equality_type() {
// @@protoc_insertion_point(one_of_clear_start:delivery.EqualV2)
  switch (equality_type_case()) {
    case kNumber: {
      if (GetArena() == nullptr) {
        delete equality_type_.number_;
      }
      break;
    }
    case kStringEquality: {
      if (GetArena() == nullptr) {
        delete equality_type_.string_equality_;
      }
      break;
    }
    case EQUALITY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EQUALITY_TYPE_NOT_SET;
}


void EqualV2::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.EqualV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_equality_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EqualV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .delivery.Equal number = 1 [json_name = "number"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.StringEquality string_equality = 2 [json_name = "stringEquality"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_equality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EqualV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.EqualV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .delivery.Equal number = 1 [json_name = "number"];
  if (_internal_has_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::number(this), target, stream);
  }

  // .delivery.StringEquality string_equality = 2 [json_name = "stringEquality"];
  if (_internal_has_string_equality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::string_equality(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.EqualV2)
  return target;
}

size_t EqualV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.EqualV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (equality_type_case()) {
    // .delivery.Equal number = 1 [json_name = "number"];
    case kNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *equality_type_.number_);
      break;
    }
    // .delivery.StringEquality string_equality = 2 [json_name = "stringEquality"];
    case kStringEquality: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *equality_type_.string_equality_);
      break;
    }
    case EQUALITY_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EqualV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.EqualV2)
  GOOGLE_DCHECK_NE(&from, this);
  const EqualV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EqualV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.EqualV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.EqualV2)
    MergeFrom(*source);
  }
}

void EqualV2::MergeFrom(const EqualV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.EqualV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.equality_type_case()) {
    case kNumber: {
      _internal_mutable_number()->::delivery::Equal::MergeFrom(from._internal_number());
      break;
    }
    case kStringEquality: {
      _internal_mutable_string_equality()->::delivery::StringEquality::MergeFrom(from._internal_string_equality());
      break;
    }
    case EQUALITY_TYPE_NOT_SET: {
      break;
    }
  }
}

void EqualV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.EqualV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EqualV2::CopyFrom(const EqualV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.EqualV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EqualV2::IsInitialized() const {
  return true;
}

void EqualV2::InternalSwap(EqualV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(equality_type_, other->equality_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EqualV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Equal::_Internal {
 public:
};

Equal::Equal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.Equal)
}
Equal::Equal(const Equal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&compared_to_, &from.compared_to_,
    static_cast<size_t>(reinterpret_cast<char*>(&tolerance_) -
    reinterpret_cast<char*>(&compared_to_)) + sizeof(tolerance_));
  // @@protoc_insertion_point(copy_constructor:delivery.Equal)
}

void Equal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&compared_to_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tolerance_) -
    reinterpret_cast<char*>(&compared_to_)) + sizeof(tolerance_));
}

Equal::~Equal() {
  // @@protoc_insertion_point(destructor:delivery.Equal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Equal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Equal::ArenaDtor(void* object) {
  Equal* _this = reinterpret_cast< Equal* >(object);
  (void)_this;
}
void Equal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Equal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Equal::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.Equal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&compared_to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tolerance_) -
      reinterpret_cast<char*>(&compared_to_)) + sizeof(tolerance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Equal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float compared_to = 1 [json_name = "comparedTo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          compared_to_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tolerance = 2 [json_name = "tolerance"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Equal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.Equal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float compared_to = 1 [json_name = "comparedTo"];
  if (!(this->compared_to() <= 0 && this->compared_to() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_compared_to(), target);
  }

  // float tolerance = 2 [json_name = "tolerance"];
  if (!(this->tolerance() <= 0 && this->tolerance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_tolerance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.Equal)
  return target;
}

size_t Equal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.Equal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float compared_to = 1 [json_name = "comparedTo"];
  if (!(this->compared_to() <= 0 && this->compared_to() >= 0)) {
    total_size += 1 + 4;
  }

  // float tolerance = 2 [json_name = "tolerance"];
  if (!(this->tolerance() <= 0 && this->tolerance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Equal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.Equal)
  GOOGLE_DCHECK_NE(&from, this);
  const Equal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Equal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.Equal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.Equal)
    MergeFrom(*source);
  }
}

void Equal::MergeFrom(const Equal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.Equal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.compared_to() <= 0 && from.compared_to() >= 0)) {
    _internal_set_compared_to(from._internal_compared_to());
  }
  if (!(from.tolerance() <= 0 && from.tolerance() >= 0)) {
    _internal_set_tolerance(from._internal_tolerance());
  }
}

void Equal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.Equal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equal::CopyFrom(const Equal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.Equal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equal::IsInitialized() const {
  return true;
}

void Equal::InternalSwap(Equal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Equal, tolerance_)
      + sizeof(Equal::tolerance_)
      - PROTOBUF_FIELD_OFFSET(Equal, compared_to_)>(
          reinterpret_cast<char*>(&compared_to_),
          reinterpret_cast<char*>(&other->compared_to_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Equal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StringEquality::_Internal {
 public:
};

StringEquality::StringEquality(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.StringEquality)
}
StringEquality::StringEquality(const StringEquality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:delivery.StringEquality)
}

void StringEquality::SharedCtor() {
clear_has_value();
}

StringEquality::~StringEquality() {
  // @@protoc_insertion_point(destructor:delivery.StringEquality)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StringEquality::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void StringEquality::ArenaDtor(void* object) {
  StringEquality* _this = reinterpret_cast< StringEquality* >(object);
  (void)_this;
}
void StringEquality::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringEquality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringEquality::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:delivery.StringEquality)
  switch (value_case()) {
    case kRaw: {
      value_.raw_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void StringEquality::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.StringEquality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringEquality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string raw = 1 [json_name = "raw"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_raw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.StringEquality.raw"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringEquality::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.StringEquality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string raw = 1 [json_name = "raw"];
  if (_internal_has_raw()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw().data(), static_cast<int>(this->_internal_raw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.StringEquality.raw");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_raw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.StringEquality)
  return target;
}

size_t StringEquality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.StringEquality)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // string raw = 1 [json_name = "raw"];
    case kRaw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_raw());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringEquality::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.StringEquality)
  GOOGLE_DCHECK_NE(&from, this);
  const StringEquality* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringEquality>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.StringEquality)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.StringEquality)
    MergeFrom(*source);
  }
}

void StringEquality::MergeFrom(const StringEquality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.StringEquality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void StringEquality::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.StringEquality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringEquality::CopyFrom(const StringEquality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.StringEquality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringEquality::IsInitialized() const {
  return true;
}

void StringEquality::InternalSwap(StringEquality* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringEquality::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GreaterThan::_Internal {
 public:
};

GreaterThan::GreaterThan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.GreaterThan)
}
GreaterThan::GreaterThan(const GreaterThan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&compared_to_, &from.compared_to_,
    static_cast<size_t>(reinterpret_cast<char*>(&or_equal_) -
    reinterpret_cast<char*>(&compared_to_)) + sizeof(or_equal_));
  // @@protoc_insertion_point(copy_constructor:delivery.GreaterThan)
}

void GreaterThan::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&compared_to_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&or_equal_) -
    reinterpret_cast<char*>(&compared_to_)) + sizeof(or_equal_));
}

GreaterThan::~GreaterThan() {
  // @@protoc_insertion_point(destructor:delivery.GreaterThan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GreaterThan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GreaterThan::ArenaDtor(void* object) {
  GreaterThan* _this = reinterpret_cast< GreaterThan* >(object);
  (void)_this;
}
void GreaterThan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GreaterThan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GreaterThan::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.GreaterThan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&compared_to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&or_equal_) -
      reinterpret_cast<char*>(&compared_to_)) + sizeof(or_equal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GreaterThan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float compared_to = 1 [json_name = "comparedTo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          compared_to_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool or_equal = 2 [json_name = "orEqual"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          or_equal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GreaterThan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.GreaterThan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float compared_to = 1 [json_name = "comparedTo"];
  if (!(this->compared_to() <= 0 && this->compared_to() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_compared_to(), target);
  }

  // bool or_equal = 2 [json_name = "orEqual"];
  if (this->or_equal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_or_equal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.GreaterThan)
  return target;
}

size_t GreaterThan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.GreaterThan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float compared_to = 1 [json_name = "comparedTo"];
  if (!(this->compared_to() <= 0 && this->compared_to() >= 0)) {
    total_size += 1 + 4;
  }

  // bool or_equal = 2 [json_name = "orEqual"];
  if (this->or_equal() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GreaterThan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.GreaterThan)
  GOOGLE_DCHECK_NE(&from, this);
  const GreaterThan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GreaterThan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.GreaterThan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.GreaterThan)
    MergeFrom(*source);
  }
}

void GreaterThan::MergeFrom(const GreaterThan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.GreaterThan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.compared_to() <= 0 && from.compared_to() >= 0)) {
    _internal_set_compared_to(from._internal_compared_to());
  }
  if (from.or_equal() != 0) {
    _internal_set_or_equal(from._internal_or_equal());
  }
}

void GreaterThan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.GreaterThan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GreaterThan::CopyFrom(const GreaterThan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.GreaterThan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GreaterThan::IsInitialized() const {
  return true;
}

void GreaterThan::InternalSwap(GreaterThan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GreaterThan, or_equal_)
      + sizeof(GreaterThan::or_equal_)
      - PROTOBUF_FIELD_OFFSET(GreaterThan, compared_to_)>(
          reinterpret_cast<char*>(&compared_to_),
          reinterpret_cast<char*>(&other->compared_to_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GreaterThan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LessThan::_Internal {
 public:
};

LessThan::LessThan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.LessThan)
}
LessThan::LessThan(const LessThan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&compared_to_, &from.compared_to_,
    static_cast<size_t>(reinterpret_cast<char*>(&or_equal_) -
    reinterpret_cast<char*>(&compared_to_)) + sizeof(or_equal_));
  // @@protoc_insertion_point(copy_constructor:delivery.LessThan)
}

void LessThan::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&compared_to_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&or_equal_) -
    reinterpret_cast<char*>(&compared_to_)) + sizeof(or_equal_));
}

LessThan::~LessThan() {
  // @@protoc_insertion_point(destructor:delivery.LessThan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LessThan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LessThan::ArenaDtor(void* object) {
  LessThan* _this = reinterpret_cast< LessThan* >(object);
  (void)_this;
}
void LessThan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LessThan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LessThan::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.LessThan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&compared_to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&or_equal_) -
      reinterpret_cast<char*>(&compared_to_)) + sizeof(or_equal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LessThan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float compared_to = 1 [json_name = "comparedTo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          compared_to_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool or_equal = 2 [json_name = "orEqual"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          or_equal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LessThan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.LessThan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float compared_to = 1 [json_name = "comparedTo"];
  if (!(this->compared_to() <= 0 && this->compared_to() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_compared_to(), target);
  }

  // bool or_equal = 2 [json_name = "orEqual"];
  if (this->or_equal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_or_equal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.LessThan)
  return target;
}

size_t LessThan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.LessThan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float compared_to = 1 [json_name = "comparedTo"];
  if (!(this->compared_to() <= 0 && this->compared_to() >= 0)) {
    total_size += 1 + 4;
  }

  // bool or_equal = 2 [json_name = "orEqual"];
  if (this->or_equal() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LessThan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.LessThan)
  GOOGLE_DCHECK_NE(&from, this);
  const LessThan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LessThan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.LessThan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.LessThan)
    MergeFrom(*source);
  }
}

void LessThan::MergeFrom(const LessThan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.LessThan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.compared_to() <= 0 && from.compared_to() >= 0)) {
    _internal_set_compared_to(from._internal_compared_to());
  }
  if (from.or_equal() != 0) {
    _internal_set_or_equal(from._internal_or_equal());
  }
}

void LessThan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.LessThan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LessThan::CopyFrom(const LessThan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.LessThan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LessThan::IsInitialized() const {
  return true;
}

void LessThan::InternalSwap(LessThan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LessThan, or_equal_)
      + sizeof(LessThan::or_equal_)
      - PROTOBUF_FIELD_OFFSET(LessThan, compared_to_)>(
          reinterpret_cast<char*>(&compared_to_),
          reinterpret_cast<char*>(&other->compared_to_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LessThan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Interval::_Internal {
 public:
};

Interval::Interval(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.Interval)
}
Interval::Interval(const Interval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upper_bound_, &from.upper_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_inclusive_) -
    reinterpret_cast<char*>(&upper_bound_)) + sizeof(upper_inclusive_));
  // @@protoc_insertion_point(copy_constructor:delivery.Interval)
}

void Interval::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upper_bound_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upper_inclusive_) -
    reinterpret_cast<char*>(&upper_bound_)) + sizeof(upper_inclusive_));
}

Interval::~Interval() {
  // @@protoc_insertion_point(destructor:delivery.Interval)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Interval::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Interval::ArenaDtor(void* object) {
  Interval* _this = reinterpret_cast< Interval* >(object);
  (void)_this;
}
void Interval::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interval::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.Interval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&upper_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_inclusive_) -
      reinterpret_cast<char*>(&upper_bound_)) + sizeof(upper_inclusive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float upper_bound = 1 [json_name = "upperBound"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lower_bound = 2 [json_name = "lowerBound"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          lower_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool lower_inclusive = 3 [json_name = "lowerInclusive"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lower_inclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool upper_inclusive = 4 [json_name = "upperInclusive"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          upper_inclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Interval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.Interval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float upper_bound = 1 [json_name = "upperBound"];
  if (!(this->upper_bound() <= 0 && this->upper_bound() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_upper_bound(), target);
  }

  // float lower_bound = 2 [json_name = "lowerBound"];
  if (!(this->lower_bound() <= 0 && this->lower_bound() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_lower_bound(), target);
  }

  // bool lower_inclusive = 3 [json_name = "lowerInclusive"];
  if (this->lower_inclusive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_lower_inclusive(), target);
  }

  // bool upper_inclusive = 4 [json_name = "upperInclusive"];
  if (this->upper_inclusive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_upper_inclusive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.Interval)
  return target;
}

size_t Interval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.Interval)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float upper_bound = 1 [json_name = "upperBound"];
  if (!(this->upper_bound() <= 0 && this->upper_bound() >= 0)) {
    total_size += 1 + 4;
  }

  // float lower_bound = 2 [json_name = "lowerBound"];
  if (!(this->lower_bound() <= 0 && this->lower_bound() >= 0)) {
    total_size += 1 + 4;
  }

  // bool lower_inclusive = 3 [json_name = "lowerInclusive"];
  if (this->lower_inclusive() != 0) {
    total_size += 1 + 1;
  }

  // bool upper_inclusive = 4 [json_name = "upperInclusive"];
  if (this->upper_inclusive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Interval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.Interval)
  GOOGLE_DCHECK_NE(&from, this);
  const Interval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Interval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.Interval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.Interval)
    MergeFrom(*source);
  }
}

void Interval::MergeFrom(const Interval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.Interval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.upper_bound() <= 0 && from.upper_bound() >= 0)) {
    _internal_set_upper_bound(from._internal_upper_bound());
  }
  if (!(from.lower_bound() <= 0 && from.lower_bound() >= 0)) {
    _internal_set_lower_bound(from._internal_lower_bound());
  }
  if (from.lower_inclusive() != 0) {
    _internal_set_lower_inclusive(from._internal_lower_inclusive());
  }
  if (from.upper_inclusive() != 0) {
    _internal_set_upper_inclusive(from._internal_upper_inclusive());
  }
}

void Interval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Interval::CopyFrom(const Interval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interval::IsInitialized() const {
  return true;
}

void Interval::InternalSwap(Interval* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interval, upper_inclusive_)
      + sizeof(Interval::upper_inclusive_)
      - PROTOBUF_FIELD_OFFSET(Interval, upper_bound_)>(
          reinterpret_cast<char*>(&upper_bound_),
          reinterpret_cast<char*>(&other->upper_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PositiveRule::_Internal {
 public:
  using HasBits = decltype(std::declval<PositiveRule>()._has_bits_);
  static void set_has_select_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PositiveRule::PositiveRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.PositiveRule)
}
PositiveRule::PositiveRule(const PositiveRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&select_pct_, &from.select_pct_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_pos_) -
    reinterpret_cast<char*>(&select_pct_)) + sizeof(max_pos_));
  // @@protoc_insertion_point(copy_constructor:delivery.PositiveRule)
}

void PositiveRule::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&select_pct_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_pos_) -
    reinterpret_cast<char*>(&select_pct_)) + sizeof(max_pos_));
}

PositiveRule::~PositiveRule() {
  // @@protoc_insertion_point(destructor:delivery.PositiveRule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositiveRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PositiveRule::ArenaDtor(void* object) {
  PositiveRule* _this = reinterpret_cast< PositiveRule* >(object);
  (void)_this;
}
void PositiveRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositiveRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositiveRule::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.PositiveRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&select_pct_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_pos_) -
        reinterpret_cast<char*>(&select_pct_)) + sizeof(max_pos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositiveRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double select_pct = 1 [json_name = "selectPct"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_select_pct(&has_bits);
          select_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 min_pos = 2 [json_name = "minPos"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_pos(&has_bits);
          min_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_pos = 3 [json_name = "maxPos"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_pos(&has_bits);
          max_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositiveRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.PositiveRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double select_pct = 1 [json_name = "selectPct"];
  if (_internal_has_select_pct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_select_pct(), target);
  }

  // uint64 min_pos = 2 [json_name = "minPos"];
  if (_internal_has_min_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_min_pos(), target);
  }

  // uint64 max_pos = 3 [json_name = "maxPos"];
  if (_internal_has_max_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_max_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.PositiveRule)
  return target;
}

size_t PositiveRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.PositiveRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // double select_pct = 1 [json_name = "selectPct"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // uint64 min_pos = 2 [json_name = "minPos"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_min_pos());
    }

    // uint64 max_pos = 3 [json_name = "maxPos"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_max_pos());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositiveRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.PositiveRule)
  GOOGLE_DCHECK_NE(&from, this);
  const PositiveRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositiveRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.PositiveRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.PositiveRule)
    MergeFrom(*source);
  }
}

void PositiveRule::MergeFrom(const PositiveRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.PositiveRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      select_pct_ = from.select_pct_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_pos_ = from.min_pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_pos_ = from.max_pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PositiveRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.PositiveRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositiveRule::CopyFrom(const PositiveRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.PositiveRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositiveRule::IsInitialized() const {
  return true;
}

void PositiveRule::InternalSwap(PositiveRule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositiveRule, max_pos_)
      + sizeof(PositiveRule::max_pos_)
      - PROTOBUF_FIELD_OFFSET(PositiveRule, select_pct_)>(
          reinterpret_cast<char*>(&select_pct_),
          reinterpret_cast<char*>(&other->select_pct_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositiveRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InsertRule::_Internal {
 public:
  using HasBits = decltype(std::declval<InsertRule>()._has_bits_);
  static void set_has_select_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

InsertRule::InsertRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.InsertRule)
}
InsertRule::InsertRule(const InsertRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&select_pct_, &from.select_pct_,
    static_cast<size_t>(reinterpret_cast<char*>(&ranking_method_) -
    reinterpret_cast<char*>(&select_pct_)) + sizeof(ranking_method_));
  // @@protoc_insertion_point(copy_constructor:delivery.InsertRule)
}

void InsertRule::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&select_pct_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ranking_method_) -
    reinterpret_cast<char*>(&select_pct_)) + sizeof(ranking_method_));
}

InsertRule::~InsertRule() {
  // @@protoc_insertion_point(destructor:delivery.InsertRule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InsertRule::ArenaDtor(void* object) {
  InsertRule* _this = reinterpret_cast< InsertRule* >(object);
  (void)_this;
}
void InsertRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertRule::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.InsertRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&select_pct_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_pos_) -
        reinterpret_cast<char*>(&select_pct_)) + sizeof(max_pos_));
  }
  ::memset(&applies_to_all_insertions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ranking_method_) -
      reinterpret_cast<char*>(&applies_to_all_insertions_)) + sizeof(ranking_method_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double select_pct = 1 [json_name = "selectPct"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_select_pct(&has_bits);
          select_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 min_pos = 2 [json_name = "minPos"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_pos(&has_bits);
          min_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_pos = 3 [json_name = "maxPos"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_pos(&has_bits);
          max_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool applies_to_all_insertions = 5 [json_name = "appliesToAllInsertions"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          applies_to_all_insertions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.RankingMethod ranking_method = 6 [json_name = "rankingMethod"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ranking_method(static_cast<::delivery::RankingMethod>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.InsertRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double select_pct = 1 [json_name = "selectPct"];
  if (_internal_has_select_pct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_select_pct(), target);
  }

  // uint64 min_pos = 2 [json_name = "minPos"];
  if (_internal_has_min_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_min_pos(), target);
  }

  // uint64 max_pos = 3 [json_name = "maxPos"];
  if (_internal_has_max_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_max_pos(), target);
  }

  // bool applies_to_all_insertions = 5 [json_name = "appliesToAllInsertions"];
  if (this->applies_to_all_insertions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_applies_to_all_insertions(), target);
  }

  // .delivery.RankingMethod ranking_method = 6 [json_name = "rankingMethod"];
  if (this->ranking_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_ranking_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.InsertRule)
  return target;
}

size_t InsertRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.InsertRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // double select_pct = 1 [json_name = "selectPct"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // uint64 min_pos = 2 [json_name = "minPos"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_min_pos());
    }

    // uint64 max_pos = 3 [json_name = "maxPos"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_max_pos());
    }

  }
  // bool applies_to_all_insertions = 5 [json_name = "appliesToAllInsertions"];
  if (this->applies_to_all_insertions() != 0) {
    total_size += 1 + 1;
  }

  // .delivery.RankingMethod ranking_method = 6 [json_name = "rankingMethod"];
  if (this->ranking_method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ranking_method());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.InsertRule)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.InsertRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.InsertRule)
    MergeFrom(*source);
  }
}

void InsertRule::MergeFrom(const InsertRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.InsertRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      select_pct_ = from.select_pct_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_pos_ = from.min_pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_pos_ = from.max_pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from.applies_to_all_insertions() != 0) {
    _internal_set_applies_to_all_insertions(from._internal_applies_to_all_insertions());
  }
  if (from.ranking_method() != 0) {
    _internal_set_ranking_method(from._internal_ranking_method());
  }
}

void InsertRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.InsertRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertRule::CopyFrom(const InsertRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.InsertRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRule::IsInitialized() const {
  return true;
}

void InsertRule::InternalSwap(InsertRule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertRule, ranking_method_)
      + sizeof(InsertRule::ranking_method_)
      - PROTOBUF_FIELD_OFFSET(InsertRule, select_pct_)>(
          reinterpret_cast<char*>(&select_pct_),
          reinterpret_cast<char*>(&other->select_pct_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NegativeRule::_Internal {
 public:
  using HasBits = decltype(std::declval<NegativeRule>()._has_bits_);
  static void set_has_pluck_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_forbid_less_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_spacing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_forbid_greater_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

NegativeRule::NegativeRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.NegativeRule)
}
NegativeRule::NegativeRule(const NegativeRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pluck_pct_, &from.pluck_pct_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
    reinterpret_cast<char*>(&pluck_pct_)) + sizeof(max_count_));
  // @@protoc_insertion_point(copy_constructor:delivery.NegativeRule)
}

void NegativeRule::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pluck_pct_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_count_) -
    reinterpret_cast<char*>(&pluck_pct_)) + sizeof(max_count_));
}

NegativeRule::~NegativeRule() {
  // @@protoc_insertion_point(destructor:delivery.NegativeRule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NegativeRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NegativeRule::ArenaDtor(void* object) {
  NegativeRule* _this = reinterpret_cast< NegativeRule* >(object);
  (void)_this;
}
void NegativeRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NegativeRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NegativeRule::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.NegativeRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&pluck_pct_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_count_) -
        reinterpret_cast<char*>(&pluck_pct_)) + sizeof(max_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NegativeRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double pluck_pct = 1 [json_name = "pluckPct"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_pluck_pct(&has_bits);
          pluck_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 forbid_less_pos = 2 [json_name = "forbidLessPos"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_forbid_less_pos(&has_bits);
          forbid_less_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_spacing = 3 [json_name = "minSpacing"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_spacing(&has_bits);
          min_spacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 forbid_greater_pos = 4 [json_name = "forbidGreaterPos"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_forbid_greater_pos(&has_bits);
          forbid_greater_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_count = 5 [json_name = "maxCount"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_count(&has_bits);
          max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NegativeRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.NegativeRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pluck_pct = 1 [json_name = "pluckPct"];
  if (_internal_has_pluck_pct()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_pluck_pct(), target);
  }

  // uint64 forbid_less_pos = 2 [json_name = "forbidLessPos"];
  if (_internal_has_forbid_less_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_forbid_less_pos(), target);
  }

  // uint64 min_spacing = 3 [json_name = "minSpacing"];
  if (_internal_has_min_spacing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_min_spacing(), target);
  }

  // uint64 forbid_greater_pos = 4 [json_name = "forbidGreaterPos"];
  if (_internal_has_forbid_greater_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_forbid_greater_pos(), target);
  }

  // uint64 max_count = 5 [json_name = "maxCount"];
  if (_internal_has_max_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_max_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.NegativeRule)
  return target;
}

size_t NegativeRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.NegativeRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // double pluck_pct = 1 [json_name = "pluckPct"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // uint64 forbid_less_pos = 2 [json_name = "forbidLessPos"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_forbid_less_pos());
    }

    // uint64 min_spacing = 3 [json_name = "minSpacing"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_min_spacing());
    }

    // uint64 forbid_greater_pos = 4 [json_name = "forbidGreaterPos"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_forbid_greater_pos());
    }

    // uint64 max_count = 5 [json_name = "maxCount"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_max_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NegativeRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.NegativeRule)
  GOOGLE_DCHECK_NE(&from, this);
  const NegativeRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NegativeRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.NegativeRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.NegativeRule)
    MergeFrom(*source);
  }
}

void NegativeRule::MergeFrom(const NegativeRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.NegativeRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      pluck_pct_ = from.pluck_pct_;
    }
    if (cached_has_bits & 0x00000002u) {
      forbid_less_pos_ = from.forbid_less_pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_spacing_ = from.min_spacing_;
    }
    if (cached_has_bits & 0x00000008u) {
      forbid_greater_pos_ = from.forbid_greater_pos_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_count_ = from.max_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NegativeRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.NegativeRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NegativeRule::CopyFrom(const NegativeRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.NegativeRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NegativeRule::IsInitialized() const {
  return true;
}

void NegativeRule::InternalSwap(NegativeRule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NegativeRule, max_count_)
      + sizeof(NegativeRule::max_count_)
      - PROTOBUF_FIELD_OFFSET(NegativeRule, pluck_pct_)>(
          reinterpret_cast<char*>(&pluck_pct_),
          reinterpret_cast<char*>(&other->pluck_pct_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NegativeRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DiversityRule::_Internal {
 public:
  using HasBits = decltype(std::declval<DiversityRule>()._has_bits_);
  static void set_has_multi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DiversityRule::DiversityRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.DiversityRule)
}
DiversityRule::DiversityRule(const DiversityRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  multi_ = from.multi_;
  // @@protoc_insertion_point(copy_constructor:delivery.DiversityRule)
}

void DiversityRule::SharedCtor() {
multi_ = 0;
}

DiversityRule::~DiversityRule() {
  // @@protoc_insertion_point(destructor:delivery.DiversityRule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiversityRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DiversityRule::ArenaDtor(void* object) {
  DiversityRule* _this = reinterpret_cast< DiversityRule* >(object);
  (void)_this;
}
void DiversityRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiversityRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiversityRule::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.DiversityRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiversityRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double multi = 1 [json_name = "multi"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_multi(&has_bits);
          multi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiversityRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.DiversityRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double multi = 1 [json_name = "multi"];
  if (_internal_has_multi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_multi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.DiversityRule)
  return target;
}

size_t DiversityRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.DiversityRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double multi = 1 [json_name = "multi"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiversityRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.DiversityRule)
  GOOGLE_DCHECK_NE(&from, this);
  const DiversityRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiversityRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.DiversityRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.DiversityRule)
    MergeFrom(*source);
  }
}

void DiversityRule::MergeFrom(const DiversityRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.DiversityRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_multi()) {
    _internal_set_multi(from._internal_multi());
  }
}

void DiversityRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.DiversityRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiversityRule::CopyFrom(const DiversityRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.DiversityRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiversityRule::IsInitialized() const {
  return true;
}

void DiversityRule::InternalSwap(DiversityRule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(multi_, other->multi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiversityRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QualityScoreConfig::_Internal {
 public:
};

QualityScoreConfig::QualityScoreConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  weighted_sum_term_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.QualityScoreConfig)
}
QualityScoreConfig::QualityScoreConfig(const QualityScoreConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weighted_sum_term_(from.weighted_sum_term_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:delivery.QualityScoreConfig)
}

void QualityScoreConfig::SharedCtor() {
}

QualityScoreConfig::~QualityScoreConfig() {
  // @@protoc_insertion_point(destructor:delivery.QualityScoreConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QualityScoreConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QualityScoreConfig::ArenaDtor(void* object) {
  QualityScoreConfig* _this = reinterpret_cast< QualityScoreConfig* >(object);
  (void)_this;
}
void QualityScoreConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QualityScoreConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QualityScoreConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.QualityScoreConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weighted_sum_term_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QualityScoreConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .delivery.QualityScoreTerm weighted_sum_term = 1 [json_name = "weightedSumTerm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weighted_sum_term(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QualityScoreConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.QualityScoreConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .delivery.QualityScoreTerm weighted_sum_term = 1 [json_name = "weightedSumTerm"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_weighted_sum_term_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_weighted_sum_term(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.QualityScoreConfig)
  return target;
}

size_t QualityScoreConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.QualityScoreConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .delivery.QualityScoreTerm weighted_sum_term = 1 [json_name = "weightedSumTerm"];
  total_size += 1UL * this->_internal_weighted_sum_term_size();
  for (const auto& msg : this->weighted_sum_term_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QualityScoreConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.QualityScoreConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const QualityScoreConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QualityScoreConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.QualityScoreConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.QualityScoreConfig)
    MergeFrom(*source);
  }
}

void QualityScoreConfig::MergeFrom(const QualityScoreConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.QualityScoreConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weighted_sum_term_.MergeFrom(from.weighted_sum_term_);
}

void QualityScoreConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.QualityScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualityScoreConfig::CopyFrom(const QualityScoreConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.QualityScoreConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualityScoreConfig::IsInitialized() const {
  return true;
}

void QualityScoreConfig::InternalSwap(QualityScoreConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  weighted_sum_term_.InternalSwap(&other->weighted_sum_term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QualityScoreConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QualityScoreTerms::_Internal {
 public:
};

QualityScoreTerms::QualityScoreTerms(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  quality_score_terms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.QualityScoreTerms)
}
QualityScoreTerms::QualityScoreTerms(const QualityScoreTerms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      quality_score_terms_(from.quality_score_terms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:delivery.QualityScoreTerms)
}

void QualityScoreTerms::SharedCtor() {
}

QualityScoreTerms::~QualityScoreTerms() {
  // @@protoc_insertion_point(destructor:delivery.QualityScoreTerms)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QualityScoreTerms::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QualityScoreTerms::ArenaDtor(void* object) {
  QualityScoreTerms* _this = reinterpret_cast< QualityScoreTerms* >(object);
  (void)_this;
}
void QualityScoreTerms::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QualityScoreTerms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QualityScoreTerms::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.QualityScoreTerms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quality_score_terms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QualityScoreTerms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .delivery.QualityScoreTerm quality_score_terms = 1 [json_name = "qualityScoreTerms"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quality_score_terms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QualityScoreTerms::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.QualityScoreTerms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .delivery.QualityScoreTerm quality_score_terms = 1 [json_name = "qualityScoreTerms"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quality_score_terms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_quality_score_terms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.QualityScoreTerms)
  return target;
}

size_t QualityScoreTerms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.QualityScoreTerms)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .delivery.QualityScoreTerm quality_score_terms = 1 [json_name = "qualityScoreTerms"];
  total_size += 1UL * this->_internal_quality_score_terms_size();
  for (const auto& msg : this->quality_score_terms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QualityScoreTerms::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.QualityScoreTerms)
  GOOGLE_DCHECK_NE(&from, this);
  const QualityScoreTerms* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QualityScoreTerms>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.QualityScoreTerms)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.QualityScoreTerms)
    MergeFrom(*source);
  }
}

void QualityScoreTerms::MergeFrom(const QualityScoreTerms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.QualityScoreTerms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quality_score_terms_.MergeFrom(from.quality_score_terms_);
}

void QualityScoreTerms::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.QualityScoreTerms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualityScoreTerms::CopyFrom(const QualityScoreTerms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.QualityScoreTerms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualityScoreTerms::IsInitialized() const {
  return true;
}

void QualityScoreTerms::InternalSwap(QualityScoreTerms* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  quality_score_terms_.InternalSwap(&other->quality_score_terms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QualityScoreTerms::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QualityScoreTerm::_Internal {
 public:
  using HasBits = decltype(std::declval<QualityScoreTerm>()._has_bits_);
  static const ::delivery::QualityScoreTerms& product(const QualityScoreTerm* msg);
  static void set_has_fetch_high(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fetch_low(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::delivery::TermConditionalEvaluation& term_conditional_evaluation(const QualityScoreTerm* msg);
  static void set_has_term_conditional_evaluation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::delivery::QualityScoreTerms&
QualityScoreTerm::_Internal::product(const QualityScoreTerm* msg) {
  return *msg->fetch_method_.product_;
}
const ::delivery::TermConditionalEvaluation&
QualityScoreTerm::_Internal::term_conditional_evaluation(const QualityScoreTerm* msg) {
  return *msg->term_conditional_evaluation_;
}
void QualityScoreTerm::set_allocated_product(::delivery::QualityScoreTerms* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_fetch_method();
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(product);
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    set_has_product();
    fetch_method_.product_ = product;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.QualityScoreTerm.product)
}
QualityScoreTerm::QualityScoreTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.QualityScoreTerm)
}
QualityScoreTerm::QualityScoreTerm(const QualityScoreTerm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_term_conditional_evaluation()) {
    term_conditional_evaluation_ = new ::delivery::TermConditionalEvaluation(*from.term_conditional_evaluation_);
  } else {
    term_conditional_evaluation_ = nullptr;
  }
  ::memcpy(&fetch_high_, &from.fetch_high_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&fetch_high_)) + sizeof(offset_));
  clear_has_fetch_method();
  switch (from.fetch_method_case()) {
    case kAttributeName: {
      _internal_set_attribute_name(from._internal_attribute_name());
      break;
    }
    case kProduct: {
      _internal_mutable_product()->::delivery::QualityScoreTerms::MergeFrom(from._internal_product());
      break;
    }
    case FETCH_METHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:delivery.QualityScoreTerm)
}

void QualityScoreTerm::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_conditional_evaluation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&term_conditional_evaluation_)) + sizeof(offset_));
clear_has_fetch_method();
}

QualityScoreTerm::~QualityScoreTerm() {
  // @@protoc_insertion_point(destructor:delivery.QualityScoreTerm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QualityScoreTerm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete term_conditional_evaluation_;
  if (has_fetch_method()) {
    clear_fetch_method();
  }
}

void QualityScoreTerm::ArenaDtor(void* object) {
  QualityScoreTerm* _this = reinterpret_cast< QualityScoreTerm* >(object);
  (void)_this;
}
void QualityScoreTerm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QualityScoreTerm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QualityScoreTerm::clear_fetch_method() {
// @@protoc_insertion_point(one_of_clear_start:delivery.QualityScoreTerm)
  switch (fetch_method_case()) {
    case kAttributeName: {
      fetch_method_.attribute_name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kProduct: {
      if (GetArena() == nullptr) {
        delete fetch_method_.product_;
      }
      break;
    }
    case FETCH_METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FETCH_METHOD_NOT_SET;
}


void QualityScoreTerm::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.QualityScoreTerm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && term_conditional_evaluation_ != nullptr) {
      delete term_conditional_evaluation_;
    }
    term_conditional_evaluation_ = nullptr;
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&fetch_high_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_) -
        reinterpret_cast<char*>(&fetch_high_)) + sizeof(weight_));
  }
  offset_ = 0;
  clear_fetch_method();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QualityScoreTerm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string attribute_name = 1 [json_name = "attributeName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_attribute_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.QualityScoreTerm.attribute_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.QualityScoreTerms product = 3 [json_name = "product"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fetch_high = 10 [json_name = "fetchHigh"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_fetch_high(&has_bits);
          fetch_high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fetch_low = 11 [json_name = "fetchLow"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_fetch_low(&has_bits);
          fetch_low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float weight = 12 [json_name = "weight"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float offset = 13 [json_name = "offset"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .delivery.TermConditionalEvaluation term_conditional_evaluation = 14 [json_name = "termConditionalEvaluation"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_term_conditional_evaluation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QualityScoreTerm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.QualityScoreTerm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string attribute_name = 1 [json_name = "attributeName"];
  if (_internal_has_attribute_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attribute_name().data(), static_cast<int>(this->_internal_attribute_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.QualityScoreTerm.attribute_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_attribute_name(), target);
  }

  // .delivery.QualityScoreTerms product = 3 [json_name = "product"];
  if (_internal_has_product()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::product(this), target, stream);
  }

  // float fetch_high = 10 [json_name = "fetchHigh"];
  if (_internal_has_fetch_high()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_fetch_high(), target);
  }

  // float fetch_low = 11 [json_name = "fetchLow"];
  if (_internal_has_fetch_low()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_fetch_low(), target);
  }

  // float weight = 12 [json_name = "weight"];
  if (_internal_has_weight()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_weight(), target);
  }

  // float offset = 13 [json_name = "offset"];
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_offset(), target);
  }

  // .delivery.TermConditionalEvaluation term_conditional_evaluation = 14 [json_name = "termConditionalEvaluation"];
  if (_internal_has_term_conditional_evaluation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::term_conditional_evaluation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.QualityScoreTerm)
  return target;
}

size_t QualityScoreTerm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.QualityScoreTerm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .delivery.TermConditionalEvaluation term_conditional_evaluation = 14 [json_name = "termConditionalEvaluation"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *term_conditional_evaluation_);
    }

    // float fetch_high = 10 [json_name = "fetchHigh"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // float fetch_low = 11 [json_name = "fetchLow"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // float weight = 12 [json_name = "weight"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  // float offset = 13 [json_name = "offset"];
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 4;
  }

  switch (fetch_method_case()) {
    // string attribute_name = 1 [json_name = "attributeName"];
    case kAttributeName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attribute_name());
      break;
    }
    // .delivery.QualityScoreTerms product = 3 [json_name = "product"];
    case kProduct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fetch_method_.product_);
      break;
    }
    case FETCH_METHOD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QualityScoreTerm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.QualityScoreTerm)
  GOOGLE_DCHECK_NE(&from, this);
  const QualityScoreTerm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QualityScoreTerm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.QualityScoreTerm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.QualityScoreTerm)
    MergeFrom(*source);
  }
}

void QualityScoreTerm::MergeFrom(const QualityScoreTerm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.QualityScoreTerm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_term_conditional_evaluation()->::delivery::TermConditionalEvaluation::MergeFrom(from._internal_term_conditional_evaluation());
    }
    if (cached_has_bits & 0x00000002u) {
      fetch_high_ = from.fetch_high_;
    }
    if (cached_has_bits & 0x00000004u) {
      fetch_low_ = from.fetch_low_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    _internal_set_offset(from._internal_offset());
  }
  switch (from.fetch_method_case()) {
    case kAttributeName: {
      _internal_set_attribute_name(from._internal_attribute_name());
      break;
    }
    case kProduct: {
      _internal_mutable_product()->::delivery::QualityScoreTerms::MergeFrom(from._internal_product());
      break;
    }
    case FETCH_METHOD_NOT_SET: {
      break;
    }
  }
}

void QualityScoreTerm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.QualityScoreTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualityScoreTerm::CopyFrom(const QualityScoreTerm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.QualityScoreTerm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualityScoreTerm::IsInitialized() const {
  return true;
}

void QualityScoreTerm::InternalSwap(QualityScoreTerm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QualityScoreTerm, offset_)
      + sizeof(QualityScoreTerm::offset_)
      - PROTOBUF_FIELD_OFFSET(QualityScoreTerm, term_conditional_evaluation_)>(
          reinterpret_cast<char*>(&term_conditional_evaluation_),
          reinterpret_cast<char*>(&other->term_conditional_evaluation_));
  swap(fetch_method_, other->fetch_method_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata QualityScoreTerm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TermConditionalEvaluation::_Internal {
 public:
  static const ::delivery::Flag& flag(const TermConditionalEvaluation* msg);
  static const ::delivery::GreaterThan& greater_than(const TermConditionalEvaluation* msg);
  static const ::delivery::LessThan& less_than(const TermConditionalEvaluation* msg);
  static const ::delivery::Interval& interval(const TermConditionalEvaluation* msg);
  static const ::delivery::EqualV2& equal_v2(const TermConditionalEvaluation* msg);
};

const ::delivery::Flag&
TermConditionalEvaluation::_Internal::flag(const TermConditionalEvaluation* msg) {
  return *msg->eval_method_.flag_;
}
const ::delivery::GreaterThan&
TermConditionalEvaluation::_Internal::greater_than(const TermConditionalEvaluation* msg) {
  return *msg->eval_method_.greater_than_;
}
const ::delivery::LessThan&
TermConditionalEvaluation::_Internal::less_than(const TermConditionalEvaluation* msg) {
  return *msg->eval_method_.less_than_;
}
const ::delivery::Interval&
TermConditionalEvaluation::_Internal::interval(const TermConditionalEvaluation* msg) {
  return *msg->eval_method_.interval_;
}
const ::delivery::EqualV2&
TermConditionalEvaluation::_Internal::equal_v2(const TermConditionalEvaluation* msg) {
  return *msg->eval_method_.equal_v2_;
}
void TermConditionalEvaluation::set_allocated_flag(::delivery::Flag* flag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_eval_method();
  if (flag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flag);
    if (message_arena != submessage_arena) {
      flag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flag, submessage_arena);
    }
    set_has_flag();
    eval_method_.flag_ = flag;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.TermConditionalEvaluation.flag)
}
void TermConditionalEvaluation::set_allocated_greater_than(::delivery::GreaterThan* greater_than) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_eval_method();
  if (greater_than) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(greater_than);
    if (message_arena != submessage_arena) {
      greater_than = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, greater_than, submessage_arena);
    }
    set_has_greater_than();
    eval_method_.greater_than_ = greater_than;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.TermConditionalEvaluation.greater_than)
}
void TermConditionalEvaluation::set_allocated_less_than(::delivery::LessThan* less_than) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_eval_method();
  if (less_than) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(less_than);
    if (message_arena != submessage_arena) {
      less_than = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, less_than, submessage_arena);
    }
    set_has_less_than();
    eval_method_.less_than_ = less_than;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.TermConditionalEvaluation.less_than)
}
void TermConditionalEvaluation::set_allocated_interval(::delivery::Interval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_eval_method();
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interval);
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    set_has_interval();
    eval_method_.interval_ = interval;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.TermConditionalEvaluation.interval)
}
void TermConditionalEvaluation::set_allocated_equal_v2(::delivery::EqualV2* equal_v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_eval_method();
  if (equal_v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(equal_v2);
    if (message_arena != submessage_arena) {
      equal_v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equal_v2, submessage_arena);
    }
    set_has_equal_v2();
    eval_method_.equal_v2_ = equal_v2;
  }
  // @@protoc_insertion_point(field_set_allocated:delivery.TermConditionalEvaluation.equal_v2)
}
TermConditionalEvaluation::TermConditionalEvaluation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:delivery.TermConditionalEvaluation)
}
TermConditionalEvaluation::TermConditionalEvaluation(const TermConditionalEvaluation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attribute_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attribute_name().empty()) {
    attribute_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attribute_name(), 
      GetArena());
  }
  value_if_false_ = from.value_if_false_;
  clear_has_eval_method();
  switch (from.eval_method_case()) {
    case kFlag: {
      _internal_mutable_flag()->::delivery::Flag::MergeFrom(from._internal_flag());
      break;
    }
    case kGreaterThan: {
      _internal_mutable_greater_than()->::delivery::GreaterThan::MergeFrom(from._internal_greater_than());
      break;
    }
    case kLessThan: {
      _internal_mutable_less_than()->::delivery::LessThan::MergeFrom(from._internal_less_than());
      break;
    }
    case kInterval: {
      _internal_mutable_interval()->::delivery::Interval::MergeFrom(from._internal_interval());
      break;
    }
    case kEqualV2: {
      _internal_mutable_equal_v2()->::delivery::EqualV2::MergeFrom(from._internal_equal_v2());
      break;
    }
    case EVAL_METHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:delivery.TermConditionalEvaluation)
}

void TermConditionalEvaluation::SharedCtor() {
attribute_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_if_false_ = 0;
clear_has_eval_method();
}

TermConditionalEvaluation::~TermConditionalEvaluation() {
  // @@protoc_insertion_point(destructor:delivery.TermConditionalEvaluation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TermConditionalEvaluation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  attribute_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_eval_method()) {
    clear_eval_method();
  }
}

void TermConditionalEvaluation::ArenaDtor(void* object) {
  TermConditionalEvaluation* _this = reinterpret_cast< TermConditionalEvaluation* >(object);
  (void)_this;
}
void TermConditionalEvaluation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TermConditionalEvaluation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TermConditionalEvaluation::clear_eval_method() {
// @@protoc_insertion_point(one_of_clear_start:delivery.TermConditionalEvaluation)
  switch (eval_method_case()) {
    case kFlag: {
      if (GetArena() == nullptr) {
        delete eval_method_.flag_;
      }
      break;
    }
    case kGreaterThan: {
      if (GetArena() == nullptr) {
        delete eval_method_.greater_than_;
      }
      break;
    }
    case kLessThan: {
      if (GetArena() == nullptr) {
        delete eval_method_.less_than_;
      }
      break;
    }
    case kInterval: {
      if (GetArena() == nullptr) {
        delete eval_method_.interval_;
      }
      break;
    }
    case kEqualV2: {
      if (GetArena() == nullptr) {
        delete eval_method_.equal_v2_;
      }
      break;
    }
    case EVAL_METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVAL_METHOD_NOT_SET;
}


void TermConditionalEvaluation::Clear() {
// @@protoc_insertion_point(message_clear_start:delivery.TermConditionalEvaluation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_name_.ClearToEmpty();
  value_if_false_ = 0;
  clear_eval_method();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TermConditionalEvaluation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float value_if_false = 1 [json_name = "valueIfFalse"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          value_if_false_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string attribute_name = 2 [json_name = "attributeName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_attribute_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "delivery.TermConditionalEvaluation.attribute_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.Flag flag = 4 [json_name = "flag"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_flag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.GreaterThan greater_than = 6 [json_name = "greaterThan"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_greater_than(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.LessThan less_than = 7 [json_name = "lessThan"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_less_than(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.Interval interval = 8 [json_name = "interval"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.EqualV2 equal_v2 = 10 [json_name = "equalV2"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_equal_v2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TermConditionalEvaluation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:delivery.TermConditionalEvaluation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value_if_false = 1 [json_name = "valueIfFalse"];
  if (!(this->value_if_false() <= 0 && this->value_if_false() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_value_if_false(), target);
  }

  // string attribute_name = 2 [json_name = "attributeName"];
  if (this->attribute_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attribute_name().data(), static_cast<int>(this->_internal_attribute_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "delivery.TermConditionalEvaluation.attribute_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_attribute_name(), target);
  }

  // .delivery.Flag flag = 4 [json_name = "flag"];
  if (_internal_has_flag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::flag(this), target, stream);
  }

  // .delivery.GreaterThan greater_than = 6 [json_name = "greaterThan"];
  if (_internal_has_greater_than()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::greater_than(this), target, stream);
  }

  // .delivery.LessThan less_than = 7 [json_name = "lessThan"];
  if (_internal_has_less_than()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::less_than(this), target, stream);
  }

  // .delivery.Interval interval = 8 [json_name = "interval"];
  if (_internal_has_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::interval(this), target, stream);
  }

  // .delivery.EqualV2 equal_v2 = 10 [json_name = "equalV2"];
  if (_internal_has_equal_v2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::equal_v2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:delivery.TermConditionalEvaluation)
  return target;
}

size_t TermConditionalEvaluation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:delivery.TermConditionalEvaluation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string attribute_name = 2 [json_name = "attributeName"];
  if (this->attribute_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attribute_name());
  }

  // float value_if_false = 1 [json_name = "valueIfFalse"];
  if (!(this->value_if_false() <= 0 && this->value_if_false() >= 0)) {
    total_size += 1 + 4;
  }

  switch (eval_method_case()) {
    // .delivery.Flag flag = 4 [json_name = "flag"];
    case kFlag: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eval_method_.flag_);
      break;
    }
    // .delivery.GreaterThan greater_than = 6 [json_name = "greaterThan"];
    case kGreaterThan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eval_method_.greater_than_);
      break;
    }
    // .delivery.LessThan less_than = 7 [json_name = "lessThan"];
    case kLessThan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eval_method_.less_than_);
      break;
    }
    // .delivery.Interval interval = 8 [json_name = "interval"];
    case kInterval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eval_method_.interval_);
      break;
    }
    // .delivery.EqualV2 equal_v2 = 10 [json_name = "equalV2"];
    case kEqualV2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eval_method_.equal_v2_);
      break;
    }
    case EVAL_METHOD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TermConditionalEvaluation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:delivery.TermConditionalEvaluation)
  GOOGLE_DCHECK_NE(&from, this);
  const TermConditionalEvaluation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TermConditionalEvaluation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:delivery.TermConditionalEvaluation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:delivery.TermConditionalEvaluation)
    MergeFrom(*source);
  }
}

void TermConditionalEvaluation::MergeFrom(const TermConditionalEvaluation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:delivery.TermConditionalEvaluation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attribute_name().size() > 0) {
    _internal_set_attribute_name(from._internal_attribute_name());
  }
  if (!(from.value_if_false() <= 0 && from.value_if_false() >= 0)) {
    _internal_set_value_if_false(from._internal_value_if_false());
  }
  switch (from.eval_method_case()) {
    case kFlag: {
      _internal_mutable_flag()->::delivery::Flag::MergeFrom(from._internal_flag());
      break;
    }
    case kGreaterThan: {
      _internal_mutable_greater_than()->::delivery::GreaterThan::MergeFrom(from._internal_greater_than());
      break;
    }
    case kLessThan: {
      _internal_mutable_less_than()->::delivery::LessThan::MergeFrom(from._internal_less_than());
      break;
    }
    case kInterval: {
      _internal_mutable_interval()->::delivery::Interval::MergeFrom(from._internal_interval());
      break;
    }
    case kEqualV2: {
      _internal_mutable_equal_v2()->::delivery::EqualV2::MergeFrom(from._internal_equal_v2());
      break;
    }
    case EVAL_METHOD_NOT_SET: {
      break;
    }
  }
}

void TermConditionalEvaluation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:delivery.TermConditionalEvaluation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TermConditionalEvaluation::CopyFrom(const TermConditionalEvaluation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:delivery.TermConditionalEvaluation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TermConditionalEvaluation::IsInitialized() const {
  return true;
}

void TermConditionalEvaluation::InternalSwap(TermConditionalEvaluation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attribute_name_.Swap(&other->attribute_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_if_false_, other->value_if_false_);
  swap(eval_method_, other->eval_method_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TermConditionalEvaluation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace delivery
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::delivery::BlenderConfig* Arena::CreateMaybeMessage< ::delivery::BlenderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::BlenderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::BlenderRule* Arena::CreateMaybeMessage< ::delivery::BlenderRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::BlenderRule >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::Flag* Arena::CreateMaybeMessage< ::delivery::Flag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::Flag >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::EqualV2* Arena::CreateMaybeMessage< ::delivery::EqualV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::EqualV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::Equal* Arena::CreateMaybeMessage< ::delivery::Equal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::Equal >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::StringEquality* Arena::CreateMaybeMessage< ::delivery::StringEquality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::StringEquality >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::GreaterThan* Arena::CreateMaybeMessage< ::delivery::GreaterThan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::GreaterThan >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::LessThan* Arena::CreateMaybeMessage< ::delivery::LessThan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::LessThan >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::Interval* Arena::CreateMaybeMessage< ::delivery::Interval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::Interval >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::PositiveRule* Arena::CreateMaybeMessage< ::delivery::PositiveRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::PositiveRule >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::InsertRule* Arena::CreateMaybeMessage< ::delivery::InsertRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::InsertRule >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::NegativeRule* Arena::CreateMaybeMessage< ::delivery::NegativeRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::NegativeRule >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::DiversityRule* Arena::CreateMaybeMessage< ::delivery::DiversityRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::DiversityRule >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::QualityScoreConfig* Arena::CreateMaybeMessage< ::delivery::QualityScoreConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::QualityScoreConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::QualityScoreTerms* Arena::CreateMaybeMessage< ::delivery::QualityScoreTerms >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::QualityScoreTerms >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::QualityScoreTerm* Arena::CreateMaybeMessage< ::delivery::QualityScoreTerm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::QualityScoreTerm >(arena);
}
template<> PROTOBUF_NOINLINE ::delivery::TermConditionalEvaluation* Arena::CreateMaybeMessage< ::delivery::TermConditionalEvaluation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::delivery::TermConditionalEvaluation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
