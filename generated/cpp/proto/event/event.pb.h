// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/event/event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fevent_2fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fevent_2fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/common/common.pb.h"
#include "proto/delivery/delivery.pb.h"
#include "proto/delivery/execution.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fevent_2fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fevent_2fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fevent_2fevent_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(int index);
namespace event {
class Action;
struct ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class AncestorIdHistory;
struct AncestorIdHistoryDefaultTypeInternal;
extern AncestorIdHistoryDefaultTypeInternal _AncestorIdHistory_default_instance_;
class AncestorIdHistoryItem;
struct AncestorIdHistoryItemDefaultTypeInternal;
extern AncestorIdHistoryItemDefaultTypeInternal _AncestorIdHistoryItem_default_instance_;
class AppScreenView;
struct AppScreenViewDefaultTypeInternal;
extern AppScreenViewDefaultTypeInternal _AppScreenView_default_instance_;
class Attribution;
struct AttributionDefaultTypeInternal;
extern AttributionDefaultTypeInternal _Attribution_default_instance_;
class AutoView;
struct AutoViewDefaultTypeInternal;
extern AutoViewDefaultTypeInternal _AutoView_default_instance_;
class Cart;
struct CartDefaultTypeInternal;
extern CartDefaultTypeInternal _Cart_default_instance_;
class CartContent;
struct CartContentDefaultTypeInternal;
extern CartContentDefaultTypeInternal _CartContent_default_instance_;
class CohortMembership;
struct CohortMembershipDefaultTypeInternal;
extern CohortMembershipDefaultTypeInternal _CohortMembership_default_instance_;
class Diagnostics;
struct DiagnosticsDefaultTypeInternal;
extern DiagnosticsDefaultTypeInternal _Diagnostics_default_instance_;
class ErrorHistory;
struct ErrorHistoryDefaultTypeInternal;
extern ErrorHistoryDefaultTypeInternal _ErrorHistory_default_instance_;
class IOSError;
struct IOSErrorDefaultTypeInternal;
extern IOSErrorDefaultTypeInternal _IOSError_default_instance_;
class IdentifierProvenances;
struct IdentifierProvenancesDefaultTypeInternal;
extern IdentifierProvenancesDefaultTypeInternal _IdentifierProvenances_default_instance_;
class Impression;
struct ImpressionDefaultTypeInternal;
extern ImpressionDefaultTypeInternal _Impression_default_instance_;
class IndexPath;
struct IndexPathDefaultTypeInternal;
extern IndexPathDefaultTypeInternal _IndexPath_default_instance_;
class JoinedIdentifiers;
struct JoinedIdentifiersDefaultTypeInternal;
extern JoinedIdentifiersDefaultTypeInternal _JoinedIdentifiers_default_instance_;
class LogRequest;
struct LogRequestDefaultTypeInternal;
extern LogRequestDefaultTypeInternal _LogRequest_default_instance_;
class MobileDiagnostics;
struct MobileDiagnosticsDefaultTypeInternal;
extern MobileDiagnosticsDefaultTypeInternal _MobileDiagnostics_default_instance_;
class NavigateAction;
struct NavigateActionDefaultTypeInternal;
extern NavigateActionDefaultTypeInternal _NavigateAction_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class View;
struct ViewDefaultTypeInternal;
extern ViewDefaultTypeInternal _View_default_instance_;
class WebPageView;
struct WebPageViewDefaultTypeInternal;
extern WebPageViewDefaultTypeInternal _WebPageView_default_instance_;
}  // namespace event
PROTOBUF_NAMESPACE_OPEN
template<> ::event::Action* Arena::CreateMaybeMessage<::event::Action>(Arena*);
template<> ::event::AncestorIdHistory* Arena::CreateMaybeMessage<::event::AncestorIdHistory>(Arena*);
template<> ::event::AncestorIdHistoryItem* Arena::CreateMaybeMessage<::event::AncestorIdHistoryItem>(Arena*);
template<> ::event::AppScreenView* Arena::CreateMaybeMessage<::event::AppScreenView>(Arena*);
template<> ::event::Attribution* Arena::CreateMaybeMessage<::event::Attribution>(Arena*);
template<> ::event::AutoView* Arena::CreateMaybeMessage<::event::AutoView>(Arena*);
template<> ::event::Cart* Arena::CreateMaybeMessage<::event::Cart>(Arena*);
template<> ::event::CartContent* Arena::CreateMaybeMessage<::event::CartContent>(Arena*);
template<> ::event::CohortMembership* Arena::CreateMaybeMessage<::event::CohortMembership>(Arena*);
template<> ::event::Diagnostics* Arena::CreateMaybeMessage<::event::Diagnostics>(Arena*);
template<> ::event::ErrorHistory* Arena::CreateMaybeMessage<::event::ErrorHistory>(Arena*);
template<> ::event::IOSError* Arena::CreateMaybeMessage<::event::IOSError>(Arena*);
template<> ::event::IdentifierProvenances* Arena::CreateMaybeMessage<::event::IdentifierProvenances>(Arena*);
template<> ::event::Impression* Arena::CreateMaybeMessage<::event::Impression>(Arena*);
template<> ::event::IndexPath* Arena::CreateMaybeMessage<::event::IndexPath>(Arena*);
template<> ::event::JoinedIdentifiers* Arena::CreateMaybeMessage<::event::JoinedIdentifiers>(Arena*);
template<> ::event::LogRequest* Arena::CreateMaybeMessage<::event::LogRequest>(Arena*);
template<> ::event::MobileDiagnostics* Arena::CreateMaybeMessage<::event::MobileDiagnostics>(Arena*);
template<> ::event::NavigateAction* Arena::CreateMaybeMessage<::event::NavigateAction>(Arena*);
template<> ::event::User* Arena::CreateMaybeMessage<::event::User>(Arena*);
template<> ::event::View* Arena::CreateMaybeMessage<::event::View>(Arena*);
template<> ::event::WebPageView* Arena::CreateMaybeMessage<::event::WebPageView>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace event {

enum View_ViewType : int {
  View_ViewType_UNKNOWN_VIEW_TYPE = 0,
  View_ViewType_WEB_PAGE = 1,
  View_ViewType_APP_SCREEN = 2,
  View_ViewType_View_ViewType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  View_ViewType_View_ViewType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool View_ViewType_IsValid(int value);
constexpr View_ViewType View_ViewType_ViewType_MIN = View_ViewType_UNKNOWN_VIEW_TYPE;
constexpr View_ViewType View_ViewType_ViewType_MAX = View_ViewType_APP_SCREEN;
constexpr int View_ViewType_ViewType_ARRAYSIZE = View_ViewType_ViewType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* View_ViewType_descriptor();
template<typename T>
inline const std::string& View_ViewType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, View_ViewType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function View_ViewType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    View_ViewType_descriptor(), enum_t_value);
}
inline bool View_ViewType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, View_ViewType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<View_ViewType>(
    View_ViewType_descriptor(), name, value);
}
enum IdentifierProvenance : int {
  UNKNOWN = 0,
  NULL_ = 1,
  EMPTY = 2,
  AUTOGENERATED = 3,
  PLATFORM_SPECIFIED = 4,
  IdentifierProvenance_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IdentifierProvenance_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IdentifierProvenance_IsValid(int value);
constexpr IdentifierProvenance IdentifierProvenance_MIN = UNKNOWN;
constexpr IdentifierProvenance IdentifierProvenance_MAX = PLATFORM_SPECIFIED;
constexpr int IdentifierProvenance_ARRAYSIZE = IdentifierProvenance_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IdentifierProvenance_descriptor();
template<typename T>
inline const std::string& IdentifierProvenance_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IdentifierProvenance>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IdentifierProvenance_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IdentifierProvenance_descriptor(), enum_t_value);
}
inline bool IdentifierProvenance_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IdentifierProvenance* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IdentifierProvenance>(
    IdentifierProvenance_descriptor(), name, value);
}
enum CohortArm : int {
  UNKNOWN_GROUP = 0,
  CONTROL = 1,
  TREATMENT = 2,
  TREATMENT1 = 3,
  TREATMENT2 = 4,
  TREATMENT3 = 5,
  CohortArm_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CohortArm_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CohortArm_IsValid(int value);
constexpr CohortArm CohortArm_MIN = UNKNOWN_GROUP;
constexpr CohortArm CohortArm_MAX = TREATMENT3;
constexpr int CohortArm_ARRAYSIZE = CohortArm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CohortArm_descriptor();
template<typename T>
inline const std::string& CohortArm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CohortArm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CohortArm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CohortArm_descriptor(), enum_t_value);
}
inline bool CohortArm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CohortArm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CohortArm>(
    CohortArm_descriptor(), name, value);
}
enum ImpressionSourceType : int {
  UNKNOWN_IMPRESSION_SOURCE_TYPE = 0,
  DELIVERY = 1,
  CLIENT_BACKEND = 2,
  ImpressionSourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImpressionSourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImpressionSourceType_IsValid(int value);
constexpr ImpressionSourceType ImpressionSourceType_MIN = UNKNOWN_IMPRESSION_SOURCE_TYPE;
constexpr ImpressionSourceType ImpressionSourceType_MAX = CLIENT_BACKEND;
constexpr int ImpressionSourceType_ARRAYSIZE = ImpressionSourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImpressionSourceType_descriptor();
template<typename T>
inline const std::string& ImpressionSourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImpressionSourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImpressionSourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImpressionSourceType_descriptor(), enum_t_value);
}
inline bool ImpressionSourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ImpressionSourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImpressionSourceType>(
    ImpressionSourceType_descriptor(), name, value);
}
enum ActionType : int {
  UNKNOWN_ACTION_TYPE = 0,
  CUSTOM_ACTION_TYPE = 1,
  NAVIGATE = 2,
  ADD_TO_CART = 4,
  REMOVE_FROM_CART = 10,
  CHECKOUT = 8,
  PURCHASE = 3,
  SHARE = 5,
  LIKE = 6,
  UNLIKE = 9,
  COMMENT = 7,
  MAKE_OFFER = 11,
  ASK_QUESTION = 12,
  ANSWER_QUESTION = 13,
  COMPLETE_SIGN_IN = 14,
  COMPLETE_SIGN_UP = 15,
  BOOKMARK = 16,
  REMOVE_BOOKMARK = 17,
  ADD_TO_LIST = 18,
  REMOVE_FROM_LIST = 19,
  FOLLOW = 20,
  UNFOLLOW = 21,
  ONGOING_PURCHASE = 22,
  CANCEL_PURCHASE = 23,
  REFUND_PURCHASE = 24,
  CONTENT_SELECTED = 25,
  ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActionType_IsValid(int value);
constexpr ActionType ActionType_MIN = UNKNOWN_ACTION_TYPE;
constexpr ActionType ActionType_MAX = CONTENT_SELECTED;
constexpr int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor();
template<typename T>
inline const std::string& ActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionType_descriptor(), enum_t_value);
}
inline bool ActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
// ===================================================================

class JoinedIdentifiers PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.JoinedIdentifiers) */ {
 public:
  inline JoinedIdentifiers() : JoinedIdentifiers(nullptr) {}
  virtual ~JoinedIdentifiers();
  explicit constexpr JoinedIdentifiers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinedIdentifiers(const JoinedIdentifiers& from);
  JoinedIdentifiers(JoinedIdentifiers&& from) noexcept
    : JoinedIdentifiers() {
    *this = ::std::move(from);
  }

  inline JoinedIdentifiers& operator=(const JoinedIdentifiers& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinedIdentifiers& operator=(JoinedIdentifiers&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinedIdentifiers& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinedIdentifiers* internal_default_instance() {
    return reinterpret_cast<const JoinedIdentifiers*>(
               &_JoinedIdentifiers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JoinedIdentifiers& a, JoinedIdentifiers& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinedIdentifiers* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinedIdentifiers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinedIdentifiers* New() const final {
    return CreateMaybeMessage<JoinedIdentifiers>(nullptr);
  }

  JoinedIdentifiers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinedIdentifiers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinedIdentifiers& from);
  void MergeFrom(const JoinedIdentifiers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinedIdentifiers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.JoinedIdentifiers";
  }
  protected:
  explicit JoinedIdentifiers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kLogUserIdFieldNumber = 3,
    kSessionIdFieldNumber = 4,
    kViewIdFieldNumber = 5,
    kRequestIdFieldNumber = 6,
    kInsertionIdFieldNumber = 7,
    kImpressionIdFieldNumber = 8,
    kAutoViewIdFieldNumber = 9,
    kAnonUserIdFieldNumber = 10,
    kPlatformIdFieldNumber = 1,
  };
  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string log_user_id = 3 [json_name = "logUserId"];
  void clear_log_user_id();
  const std::string& log_user_id() const;
  void set_log_user_id(const std::string& value);
  void set_log_user_id(std::string&& value);
  void set_log_user_id(const char* value);
  void set_log_user_id(const char* value, size_t size);
  std::string* mutable_log_user_id();
  std::string* release_log_user_id();
  void set_allocated_log_user_id(std::string* log_user_id);
  private:
  const std::string& _internal_log_user_id() const;
  void _internal_set_log_user_id(const std::string& value);
  std::string* _internal_mutable_log_user_id();
  public:

  // string session_id = 4 [json_name = "sessionId"];
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string view_id = 5 [json_name = "viewId"];
  void clear_view_id();
  const std::string& view_id() const;
  void set_view_id(const std::string& value);
  void set_view_id(std::string&& value);
  void set_view_id(const char* value);
  void set_view_id(const char* value, size_t size);
  std::string* mutable_view_id();
  std::string* release_view_id();
  void set_allocated_view_id(std::string* view_id);
  private:
  const std::string& _internal_view_id() const;
  void _internal_set_view_id(const std::string& value);
  std::string* _internal_mutable_view_id();
  public:

  // string request_id = 6 [json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string insertion_id = 7 [json_name = "insertionId"];
  void clear_insertion_id();
  const std::string& insertion_id() const;
  void set_insertion_id(const std::string& value);
  void set_insertion_id(std::string&& value);
  void set_insertion_id(const char* value);
  void set_insertion_id(const char* value, size_t size);
  std::string* mutable_insertion_id();
  std::string* release_insertion_id();
  void set_allocated_insertion_id(std::string* insertion_id);
  private:
  const std::string& _internal_insertion_id() const;
  void _internal_set_insertion_id(const std::string& value);
  std::string* _internal_mutable_insertion_id();
  public:

  // string impression_id = 8 [json_name = "impressionId"];
  void clear_impression_id();
  const std::string& impression_id() const;
  void set_impression_id(const std::string& value);
  void set_impression_id(std::string&& value);
  void set_impression_id(const char* value);
  void set_impression_id(const char* value, size_t size);
  std::string* mutable_impression_id();
  std::string* release_impression_id();
  void set_allocated_impression_id(std::string* impression_id);
  private:
  const std::string& _internal_impression_id() const;
  void _internal_set_impression_id(const std::string& value);
  std::string* _internal_mutable_impression_id();
  public:

  // string auto_view_id = 9 [json_name = "autoViewId"];
  void clear_auto_view_id();
  const std::string& auto_view_id() const;
  void set_auto_view_id(const std::string& value);
  void set_auto_view_id(std::string&& value);
  void set_auto_view_id(const char* value);
  void set_auto_view_id(const char* value, size_t size);
  std::string* mutable_auto_view_id();
  std::string* release_auto_view_id();
  void set_allocated_auto_view_id(std::string* auto_view_id);
  private:
  const std::string& _internal_auto_view_id() const;
  void _internal_set_auto_view_id(const std::string& value);
  std::string* _internal_mutable_auto_view_id();
  public:

  // string anon_user_id = 10 [json_name = "anonUserId"];
  void clear_anon_user_id();
  const std::string& anon_user_id() const;
  void set_anon_user_id(const std::string& value);
  void set_anon_user_id(std::string&& value);
  void set_anon_user_id(const char* value);
  void set_anon_user_id(const char* value, size_t size);
  std::string* mutable_anon_user_id();
  std::string* release_anon_user_id();
  void set_allocated_anon_user_id(std::string* anon_user_id);
  private:
  const std::string& _internal_anon_user_id() const;
  void _internal_set_anon_user_id(const std::string& value);
  std::string* _internal_mutable_anon_user_id();
  public:

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event.JoinedIdentifiers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insertion_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr impression_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_view_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anon_user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class IdentifierProvenances PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.IdentifierProvenances) */ {
 public:
  inline IdentifierProvenances() : IdentifierProvenances(nullptr) {}
  virtual ~IdentifierProvenances();
  explicit constexpr IdentifierProvenances(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdentifierProvenances(const IdentifierProvenances& from);
  IdentifierProvenances(IdentifierProvenances&& from) noexcept
    : IdentifierProvenances() {
    *this = ::std::move(from);
  }

  inline IdentifierProvenances& operator=(const IdentifierProvenances& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentifierProvenances& operator=(IdentifierProvenances&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IdentifierProvenances& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdentifierProvenances* internal_default_instance() {
    return reinterpret_cast<const IdentifierProvenances*>(
               &_IdentifierProvenances_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IdentifierProvenances& a, IdentifierProvenances& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentifierProvenances* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentifierProvenances* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdentifierProvenances* New() const final {
    return CreateMaybeMessage<IdentifierProvenances>(nullptr);
  }

  IdentifierProvenances* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdentifierProvenances>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IdentifierProvenances& from);
  void MergeFrom(const IdentifierProvenances& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentifierProvenances* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.IdentifierProvenances";
  }
  protected:
  explicit IdentifierProvenances(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdProvenanceFieldNumber = 1,
    kSessionIdProvenanceFieldNumber = 2,
    kViewIdProvenanceFieldNumber = 3,
    kImpressionIdProvenanceFieldNumber = 4,
    kActionIdProvenanceFieldNumber = 5,
    kContentIdProvenanceFieldNumber = 6,
    kRequestIdProvenanceFieldNumber = 7,
    kAutoViewIdProvenanceFieldNumber = 8,
    kLogUserIdProvenanceFieldNumber = 9,
    kInsertionIdProvenanceFieldNumber = 10,
  };
  // .event.IdentifierProvenance user_id_provenance = 1 [json_name = "userIdProvenance"];
  void clear_user_id_provenance();
  ::event::IdentifierProvenance user_id_provenance() const;
  void set_user_id_provenance(::event::IdentifierProvenance value);
  private:
  ::event::IdentifierProvenance _internal_user_id_provenance() const;
  void _internal_set_user_id_provenance(::event::IdentifierProvenance value);
  public:

  // .event.IdentifierProvenance session_id_provenance = 2 [json_name = "sessionIdProvenance"];
  void clear_session_id_provenance();
  ::event::IdentifierProvenance session_id_provenance() const;
  void set_session_id_provenance(::event::IdentifierProvenance value);
  private:
  ::event::IdentifierProvenance _internal_session_id_provenance() const;
  void _internal_set_session_id_provenance(::event::IdentifierProvenance value);
  public:

  // .event.IdentifierProvenance view_id_provenance = 3 [json_name = "viewIdProvenance"];
  void clear_view_id_provenance();
  ::event::IdentifierProvenance view_id_provenance() const;
  void set_view_id_provenance(::event::IdentifierProvenance value);
  private:
  ::event::IdentifierProvenance _internal_view_id_provenance() const;
  void _internal_set_view_id_provenance(::event::IdentifierProvenance value);
  public:

  // .event.IdentifierProvenance impression_id_provenance = 4 [json_name = "impressionIdProvenance"];
  void clear_impression_id_provenance();
  ::event::IdentifierProvenance impression_id_provenance() const;
  void set_impression_id_provenance(::event::IdentifierProvenance value);
  private:
  ::event::IdentifierProvenance _internal_impression_id_provenance() const;
  void _internal_set_impression_id_provenance(::event::IdentifierProvenance value);
  public:

  // .event.IdentifierProvenance action_id_provenance = 5 [json_name = "actionIdProvenance"];
  void clear_action_id_provenance();
  ::event::IdentifierProvenance action_id_provenance() const;
  void set_action_id_provenance(::event::IdentifierProvenance value);
  private:
  ::event::IdentifierProvenance _internal_action_id_provenance() const;
  void _internal_set_action_id_provenance(::event::IdentifierProvenance value);
  public:

  // .event.IdentifierProvenance content_id_provenance = 6 [json_name = "contentIdProvenance"];
  void clear_content_id_provenance();
  ::event::IdentifierProvenance content_id_provenance() const;
  void set_content_id_provenance(::event::IdentifierProvenance value);
  private:
  ::event::IdentifierProvenance _internal_content_id_provenance() const;
  void _internal_set_content_id_provenance(::event::IdentifierProvenance value);
  public:

  // .event.IdentifierProvenance request_id_provenance = 7 [json_name = "requestIdProvenance"];
  void clear_request_id_provenance();
  ::event::IdentifierProvenance request_id_provenance() const;
  void set_request_id_provenance(::event::IdentifierProvenance value);
  private:
  ::event::IdentifierProvenance _internal_request_id_provenance() const;
  void _internal_set_request_id_provenance(::event::IdentifierProvenance value);
  public:

  // .event.IdentifierProvenance auto_view_id_provenance = 8 [json_name = "autoViewIdProvenance"];
  void clear_auto_view_id_provenance();
  ::event::IdentifierProvenance auto_view_id_provenance() const;
  void set_auto_view_id_provenance(::event::IdentifierProvenance value);
  private:
  ::event::IdentifierProvenance _internal_auto_view_id_provenance() const;
  void _internal_set_auto_view_id_provenance(::event::IdentifierProvenance value);
  public:

  // .event.IdentifierProvenance log_user_id_provenance = 9 [json_name = "logUserIdProvenance"];
  void clear_log_user_id_provenance();
  ::event::IdentifierProvenance log_user_id_provenance() const;
  void set_log_user_id_provenance(::event::IdentifierProvenance value);
  private:
  ::event::IdentifierProvenance _internal_log_user_id_provenance() const;
  void _internal_set_log_user_id_provenance(::event::IdentifierProvenance value);
  public:

  // .event.IdentifierProvenance insertion_id_provenance = 10 [json_name = "insertionIdProvenance"];
  void clear_insertion_id_provenance();
  ::event::IdentifierProvenance insertion_id_provenance() const;
  void set_insertion_id_provenance(::event::IdentifierProvenance value);
  private:
  ::event::IdentifierProvenance _internal_insertion_id_provenance() const;
  void _internal_set_insertion_id_provenance(::event::IdentifierProvenance value);
  public:

  // @@protoc_insertion_point(class_scope:event.IdentifierProvenances)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int user_id_provenance_;
  int session_id_provenance_;
  int view_id_provenance_;
  int impression_id_provenance_;
  int action_id_provenance_;
  int content_id_provenance_;
  int request_id_provenance_;
  int auto_view_id_provenance_;
  int log_user_id_provenance_;
  int insertion_id_provenance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.User) */ {
 public:
  inline User() : User(nullptr) {}
  virtual ~User();
  explicit constexpr User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 2,
    kTimingFieldNumber = 3,
    kClientInfoFieldNumber = 4,
    kPropertiesFieldNumber = 6,
    kIdProvenancesFieldNumber = 7,
    kPlatformIdFieldNumber = 1,
  };
  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::common::UserInfo& user_info() const;
  ::common::UserInfo* release_user_info();
  ::common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::common::UserInfo* user_info);
  private:
  const ::common::UserInfo& _internal_user_info() const;
  ::common::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::common::UserInfo* user_info);
  ::common::UserInfo* unsafe_arena_release_user_info();

  // .common.Timing timing = 3 [json_name = "timing"];
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::common::Timing& timing() const;
  ::common::Timing* release_timing();
  ::common::Timing* mutable_timing();
  void set_allocated_timing(::common::Timing* timing);
  private:
  const ::common::Timing& _internal_timing() const;
  ::common::Timing* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::common::Timing* timing);
  ::common::Timing* unsafe_arena_release_timing();

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::common::ClientInfo& client_info() const;
  ::common::ClientInfo* release_client_info();
  ::common::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::common::ClientInfo* client_info);
  private:
  const ::common::ClientInfo& _internal_client_info() const;
  ::common::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::common::ClientInfo* client_info);
  ::common::ClientInfo* unsafe_arena_release_client_info();

  // .common.Properties properties = 6 [json_name = "properties"];
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::common::Properties& properties() const;
  ::common::Properties* release_properties();
  ::common::Properties* mutable_properties();
  void set_allocated_properties(::common::Properties* properties);
  private:
  const ::common::Properties& _internal_properties() const;
  ::common::Properties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::common::Properties* properties);
  ::common::Properties* unsafe_arena_release_properties();

  // .event.IdentifierProvenances id_provenances = 7 [json_name = "idProvenances"];
  bool has_id_provenances() const;
  private:
  bool _internal_has_id_provenances() const;
  public:
  void clear_id_provenances();
  const ::event::IdentifierProvenances& id_provenances() const;
  ::event::IdentifierProvenances* release_id_provenances();
  ::event::IdentifierProvenances* mutable_id_provenances();
  void set_allocated_id_provenances(::event::IdentifierProvenances* id_provenances);
  private:
  const ::event::IdentifierProvenances& _internal_id_provenances() const;
  ::event::IdentifierProvenances* _internal_mutable_id_provenances();
  public:
  void unsafe_arena_set_allocated_id_provenances(
      ::event::IdentifierProvenances* id_provenances);
  ::event::IdentifierProvenances* unsafe_arena_release_id_provenances();

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::UserInfo* user_info_;
  ::common::Timing* timing_;
  ::common::ClientInfo* client_info_;
  ::common::Properties* properties_;
  ::event::IdentifierProvenances* id_provenances_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class CohortMembership PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.CohortMembership) */ {
 public:
  inline CohortMembership() : CohortMembership(nullptr) {}
  virtual ~CohortMembership();
  explicit constexpr CohortMembership(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CohortMembership(const CohortMembership& from);
  CohortMembership(CohortMembership&& from) noexcept
    : CohortMembership() {
    *this = ::std::move(from);
  }

  inline CohortMembership& operator=(const CohortMembership& from) {
    CopyFrom(from);
    return *this;
  }
  inline CohortMembership& operator=(CohortMembership&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CohortMembership& default_instance() {
    return *internal_default_instance();
  }
  static inline const CohortMembership* internal_default_instance() {
    return reinterpret_cast<const CohortMembership*>(
               &_CohortMembership_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CohortMembership& a, CohortMembership& b) {
    a.Swap(&b);
  }
  inline void Swap(CohortMembership* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CohortMembership* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CohortMembership* New() const final {
    return CreateMaybeMessage<CohortMembership>(nullptr);
  }

  CohortMembership* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CohortMembership>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CohortMembership& from);
  void MergeFrom(const CohortMembership& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CohortMembership* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.CohortMembership";
  }
  protected:
  explicit CohortMembership(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipIdFieldNumber = 6,
    kCohortIdFieldNumber = 8,
    kUserInfoFieldNumber = 2,
    kTimingFieldNumber = 3,
    kClientInfoFieldNumber = 4,
    kPropertiesFieldNumber = 10,
    kPlatformIdFieldNumber = 1,
    kArmFieldNumber = 9,
  };
  // string membership_id = 6 [json_name = "membershipId"];
  void clear_membership_id();
  const std::string& membership_id() const;
  void set_membership_id(const std::string& value);
  void set_membership_id(std::string&& value);
  void set_membership_id(const char* value);
  void set_membership_id(const char* value, size_t size);
  std::string* mutable_membership_id();
  std::string* release_membership_id();
  void set_allocated_membership_id(std::string* membership_id);
  private:
  const std::string& _internal_membership_id() const;
  void _internal_set_membership_id(const std::string& value);
  std::string* _internal_mutable_membership_id();
  public:

  // string cohort_id = 8 [json_name = "cohortId"];
  void clear_cohort_id();
  const std::string& cohort_id() const;
  void set_cohort_id(const std::string& value);
  void set_cohort_id(std::string&& value);
  void set_cohort_id(const char* value);
  void set_cohort_id(const char* value, size_t size);
  std::string* mutable_cohort_id();
  std::string* release_cohort_id();
  void set_allocated_cohort_id(std::string* cohort_id);
  private:
  const std::string& _internal_cohort_id() const;
  void _internal_set_cohort_id(const std::string& value);
  std::string* _internal_mutable_cohort_id();
  public:

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::common::UserInfo& user_info() const;
  ::common::UserInfo* release_user_info();
  ::common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::common::UserInfo* user_info);
  private:
  const ::common::UserInfo& _internal_user_info() const;
  ::common::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::common::UserInfo* user_info);
  ::common::UserInfo* unsafe_arena_release_user_info();

  // .common.Timing timing = 3 [json_name = "timing"];
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::common::Timing& timing() const;
  ::common::Timing* release_timing();
  ::common::Timing* mutable_timing();
  void set_allocated_timing(::common::Timing* timing);
  private:
  const ::common::Timing& _internal_timing() const;
  ::common::Timing* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::common::Timing* timing);
  ::common::Timing* unsafe_arena_release_timing();

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::common::ClientInfo& client_info() const;
  ::common::ClientInfo* release_client_info();
  ::common::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::common::ClientInfo* client_info);
  private:
  const ::common::ClientInfo& _internal_client_info() const;
  ::common::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::common::ClientInfo* client_info);
  ::common::ClientInfo* unsafe_arena_release_client_info();

  // .common.Properties properties = 10 [json_name = "properties"];
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::common::Properties& properties() const;
  ::common::Properties* release_properties();
  ::common::Properties* mutable_properties();
  void set_allocated_properties(::common::Properties* properties);
  private:
  const ::common::Properties& _internal_properties() const;
  ::common::Properties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::common::Properties* properties);
  ::common::Properties* unsafe_arena_release_properties();

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event.CohortArm arm = 9 [json_name = "arm"];
  void clear_arm();
  ::event::CohortArm arm() const;
  void set_arm(::event::CohortArm value);
  private:
  ::event::CohortArm _internal_arm() const;
  void _internal_set_arm(::event::CohortArm value);
  public:

  // @@protoc_insertion_point(class_scope:event.CohortMembership)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cohort_id_;
  ::common::UserInfo* user_info_;
  ::common::Timing* timing_;
  ::common::ClientInfo* client_info_;
  ::common::Properties* properties_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  int arm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class WebPageView PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.WebPageView) */ {
 public:
  inline WebPageView() : WebPageView(nullptr) {}
  virtual ~WebPageView();
  explicit constexpr WebPageView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebPageView(const WebPageView& from);
  WebPageView(WebPageView&& from) noexcept
    : WebPageView() {
    *this = ::std::move(from);
  }

  inline WebPageView& operator=(const WebPageView& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebPageView& operator=(WebPageView&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WebPageView& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebPageView* internal_default_instance() {
    return reinterpret_cast<const WebPageView*>(
               &_WebPageView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WebPageView& a, WebPageView& b) {
    a.Swap(&b);
  }
  inline void Swap(WebPageView* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebPageView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebPageView* New() const final {
    return CreateMaybeMessage<WebPageView>(nullptr);
  }

  WebPageView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebPageView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WebPageView& from);
  void MergeFrom(const WebPageView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebPageView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.WebPageView";
  }
  protected:
  explicit WebPageView(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kReferrerFieldNumber = 3,
    kDocumentSizeFieldNumber = 4,
  };
  // string url = 1 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string referrer = 3 [json_name = "referrer"];
  void clear_referrer();
  const std::string& referrer() const;
  void set_referrer(const std::string& value);
  void set_referrer(std::string&& value);
  void set_referrer(const char* value);
  void set_referrer(const char* value, size_t size);
  std::string* mutable_referrer();
  std::string* release_referrer();
  void set_allocated_referrer(std::string* referrer);
  private:
  const std::string& _internal_referrer() const;
  void _internal_set_referrer(const std::string& value);
  std::string* _internal_mutable_referrer();
  public:

  // .common.Size document_size = 4 [json_name = "documentSize"];
  bool has_document_size() const;
  private:
  bool _internal_has_document_size() const;
  public:
  void clear_document_size();
  const ::common::Size& document_size() const;
  ::common::Size* release_document_size();
  ::common::Size* mutable_document_size();
  void set_allocated_document_size(::common::Size* document_size);
  private:
  const ::common::Size& _internal_document_size() const;
  ::common::Size* _internal_mutable_document_size();
  public:
  void unsafe_arena_set_allocated_document_size(
      ::common::Size* document_size);
  ::common::Size* unsafe_arena_release_document_size();

  // @@protoc_insertion_point(class_scope:event.WebPageView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_;
  ::common::Size* document_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class AppScreenView PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.AppScreenView) */ {
 public:
  inline AppScreenView() : AppScreenView(nullptr) {}
  virtual ~AppScreenView();
  explicit constexpr AppScreenView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppScreenView(const AppScreenView& from);
  AppScreenView(AppScreenView&& from) noexcept
    : AppScreenView() {
    *this = ::std::move(from);
  }

  inline AppScreenView& operator=(const AppScreenView& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppScreenView& operator=(AppScreenView&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppScreenView& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppScreenView* internal_default_instance() {
    return reinterpret_cast<const AppScreenView*>(
               &_AppScreenView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AppScreenView& a, AppScreenView& b) {
    a.Swap(&b);
  }
  inline void Swap(AppScreenView* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppScreenView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppScreenView* New() const final {
    return CreateMaybeMessage<AppScreenView>(nullptr);
  }

  AppScreenView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppScreenView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppScreenView& from);
  void MergeFrom(const AppScreenView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppScreenView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.AppScreenView";
  }
  protected:
  explicit AppScreenView(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event.AppScreenView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class View PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.View) */ {
 public:
  inline View() : View(nullptr) {}
  virtual ~View();
  explicit constexpr View(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  View(const View& from);
  View(View&& from) noexcept
    : View() {
    *this = ::std::move(from);
  }

  inline View& operator=(const View& from) {
    CopyFrom(from);
    return *this;
  }
  inline View& operator=(View&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const View& default_instance() {
    return *internal_default_instance();
  }
  enum UiTypeCase {
    kWebPageView = 14,
    kAppScreenView = 15,
    UI_TYPE_NOT_SET = 0,
  };

  static inline const View* internal_default_instance() {
    return reinterpret_cast<const View*>(
               &_View_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(View& a, View& b) {
    a.Swap(&b);
  }
  inline void Swap(View* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(View* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline View* New() const final {
    return CreateMaybeMessage<View>(nullptr);
  }

  View* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<View>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const View& from);
  void MergeFrom(const View& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(View* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.View";
  }
  protected:
  explicit View(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef View_ViewType ViewType;
  static constexpr ViewType UNKNOWN_VIEW_TYPE =
    View_ViewType_UNKNOWN_VIEW_TYPE;
  static constexpr ViewType WEB_PAGE =
    View_ViewType_WEB_PAGE;
  static constexpr ViewType APP_SCREEN =
    View_ViewType_APP_SCREEN;
  static inline bool ViewType_IsValid(int value) {
    return View_ViewType_IsValid(value);
  }
  static constexpr ViewType ViewType_MIN =
    View_ViewType_ViewType_MIN;
  static constexpr ViewType ViewType_MAX =
    View_ViewType_ViewType_MAX;
  static constexpr int ViewType_ARRAYSIZE =
    View_ViewType_ViewType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ViewType_descriptor() {
    return View_ViewType_descriptor();
  }
  template<typename T>
  static inline const std::string& ViewType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ViewType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ViewType_Name.");
    return View_ViewType_Name(enum_t_value);
  }
  static inline bool ViewType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ViewType* value) {
    return View_ViewType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kViewIdFieldNumber = 6,
    kSessionIdFieldNumber = 7,
    kNameFieldNumber = 8,
    kSearchQueryFieldNumber = 10,
    kAutoViewIdFieldNumber = 17,
    kContentIdFieldNumber = 19,
    kUserInfoFieldNumber = 2,
    kTimingFieldNumber = 3,
    kClientInfoFieldNumber = 4,
    kPropertiesFieldNumber = 11,
    kLocaleFieldNumber = 16,
    kIdProvenancesFieldNumber = 18,
    kPlatformIdFieldNumber = 1,
    kUseCaseFieldNumber = 9,
    kViewTypeFieldNumber = 13,
    kWebPageViewFieldNumber = 14,
    kAppScreenViewFieldNumber = 15,
  };
  // string view_id = 6 [json_name = "viewId"];
  void clear_view_id();
  const std::string& view_id() const;
  void set_view_id(const std::string& value);
  void set_view_id(std::string&& value);
  void set_view_id(const char* value);
  void set_view_id(const char* value, size_t size);
  std::string* mutable_view_id();
  std::string* release_view_id();
  void set_allocated_view_id(std::string* view_id);
  private:
  const std::string& _internal_view_id() const;
  void _internal_set_view_id(const std::string& value);
  std::string* _internal_mutable_view_id();
  public:

  // string session_id = 7 [json_name = "sessionId"];
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string name = 8 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string search_query = 10 [json_name = "searchQuery"];
  void clear_search_query();
  const std::string& search_query() const;
  void set_search_query(const std::string& value);
  void set_search_query(std::string&& value);
  void set_search_query(const char* value);
  void set_search_query(const char* value, size_t size);
  std::string* mutable_search_query();
  std::string* release_search_query();
  void set_allocated_search_query(std::string* search_query);
  private:
  const std::string& _internal_search_query() const;
  void _internal_set_search_query(const std::string& value);
  std::string* _internal_mutable_search_query();
  public:

  // string auto_view_id = 17 [json_name = "autoViewId"];
  void clear_auto_view_id();
  const std::string& auto_view_id() const;
  void set_auto_view_id(const std::string& value);
  void set_auto_view_id(std::string&& value);
  void set_auto_view_id(const char* value);
  void set_auto_view_id(const char* value, size_t size);
  std::string* mutable_auto_view_id();
  std::string* release_auto_view_id();
  void set_allocated_auto_view_id(std::string* auto_view_id);
  private:
  const std::string& _internal_auto_view_id() const;
  void _internal_set_auto_view_id(const std::string& value);
  std::string* _internal_mutable_auto_view_id();
  public:

  // string content_id = 19 [json_name = "contentId"];
  void clear_content_id();
  const std::string& content_id() const;
  void set_content_id(const std::string& value);
  void set_content_id(std::string&& value);
  void set_content_id(const char* value);
  void set_content_id(const char* value, size_t size);
  std::string* mutable_content_id();
  std::string* release_content_id();
  void set_allocated_content_id(std::string* content_id);
  private:
  const std::string& _internal_content_id() const;
  void _internal_set_content_id(const std::string& value);
  std::string* _internal_mutable_content_id();
  public:

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::common::UserInfo& user_info() const;
  ::common::UserInfo* release_user_info();
  ::common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::common::UserInfo* user_info);
  private:
  const ::common::UserInfo& _internal_user_info() const;
  ::common::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::common::UserInfo* user_info);
  ::common::UserInfo* unsafe_arena_release_user_info();

  // .common.Timing timing = 3 [json_name = "timing"];
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::common::Timing& timing() const;
  ::common::Timing* release_timing();
  ::common::Timing* mutable_timing();
  void set_allocated_timing(::common::Timing* timing);
  private:
  const ::common::Timing& _internal_timing() const;
  ::common::Timing* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::common::Timing* timing);
  ::common::Timing* unsafe_arena_release_timing();

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::common::ClientInfo& client_info() const;
  ::common::ClientInfo* release_client_info();
  ::common::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::common::ClientInfo* client_info);
  private:
  const ::common::ClientInfo& _internal_client_info() const;
  ::common::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::common::ClientInfo* client_info);
  ::common::ClientInfo* unsafe_arena_release_client_info();

  // .common.Properties properties = 11 [json_name = "properties"];
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::common::Properties& properties() const;
  ::common::Properties* release_properties();
  ::common::Properties* mutable_properties();
  void set_allocated_properties(::common::Properties* properties);
  private:
  const ::common::Properties& _internal_properties() const;
  ::common::Properties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::common::Properties* properties);
  ::common::Properties* unsafe_arena_release_properties();

  // .common.Locale locale = 16 [json_name = "locale"];
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const ::common::Locale& locale() const;
  ::common::Locale* release_locale();
  ::common::Locale* mutable_locale();
  void set_allocated_locale(::common::Locale* locale);
  private:
  const ::common::Locale& _internal_locale() const;
  ::common::Locale* _internal_mutable_locale();
  public:
  void unsafe_arena_set_allocated_locale(
      ::common::Locale* locale);
  ::common::Locale* unsafe_arena_release_locale();

  // .event.IdentifierProvenances id_provenances = 18 [json_name = "idProvenances"];
  bool has_id_provenances() const;
  private:
  bool _internal_has_id_provenances() const;
  public:
  void clear_id_provenances();
  const ::event::IdentifierProvenances& id_provenances() const;
  ::event::IdentifierProvenances* release_id_provenances();
  ::event::IdentifierProvenances* mutable_id_provenances();
  void set_allocated_id_provenances(::event::IdentifierProvenances* id_provenances);
  private:
  const ::event::IdentifierProvenances& _internal_id_provenances() const;
  ::event::IdentifierProvenances* _internal_mutable_id_provenances();
  public:
  void unsafe_arena_set_allocated_id_provenances(
      ::event::IdentifierProvenances* id_provenances);
  ::event::IdentifierProvenances* unsafe_arena_release_id_provenances();

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .delivery.UseCase use_case = 9 [json_name = "useCase"];
  void clear_use_case();
  ::delivery::UseCase use_case() const;
  void set_use_case(::delivery::UseCase value);
  private:
  ::delivery::UseCase _internal_use_case() const;
  void _internal_set_use_case(::delivery::UseCase value);
  public:

  // .event.View.ViewType view_type = 13 [json_name = "viewType"];
  void clear_view_type();
  ::event::View_ViewType view_type() const;
  void set_view_type(::event::View_ViewType value);
  private:
  ::event::View_ViewType _internal_view_type() const;
  void _internal_set_view_type(::event::View_ViewType value);
  public:

  // .event.WebPageView web_page_view = 14 [json_name = "webPageView"];
  bool has_web_page_view() const;
  private:
  bool _internal_has_web_page_view() const;
  public:
  void clear_web_page_view();
  const ::event::WebPageView& web_page_view() const;
  ::event::WebPageView* release_web_page_view();
  ::event::WebPageView* mutable_web_page_view();
  void set_allocated_web_page_view(::event::WebPageView* web_page_view);
  private:
  const ::event::WebPageView& _internal_web_page_view() const;
  ::event::WebPageView* _internal_mutable_web_page_view();
  public:
  void unsafe_arena_set_allocated_web_page_view(
      ::event::WebPageView* web_page_view);
  ::event::WebPageView* unsafe_arena_release_web_page_view();

  // .event.AppScreenView app_screen_view = 15 [json_name = "appScreenView"];
  bool has_app_screen_view() const;
  private:
  bool _internal_has_app_screen_view() const;
  public:
  void clear_app_screen_view();
  const ::event::AppScreenView& app_screen_view() const;
  ::event::AppScreenView* release_app_screen_view();
  ::event::AppScreenView* mutable_app_screen_view();
  void set_allocated_app_screen_view(::event::AppScreenView* app_screen_view);
  private:
  const ::event::AppScreenView& _internal_app_screen_view() const;
  ::event::AppScreenView* _internal_mutable_app_screen_view();
  public:
  void unsafe_arena_set_allocated_app_screen_view(
      ::event::AppScreenView* app_screen_view);
  ::event::AppScreenView* unsafe_arena_release_app_screen_view();

  void clear_ui_type();
  UiTypeCase ui_type_case() const;
  // @@protoc_insertion_point(class_scope:event.View)
 private:
  class _Internal;
  void set_has_web_page_view();
  void set_has_app_screen_view();

  inline bool has_ui_type() const;
  inline void clear_has_ui_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_view_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_id_;
  ::common::UserInfo* user_info_;
  ::common::Timing* timing_;
  ::common::ClientInfo* client_info_;
  ::common::Properties* properties_;
  ::common::Locale* locale_;
  ::event::IdentifierProvenances* id_provenances_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  int use_case_;
  int view_type_;
  union UiTypeUnion {
    constexpr UiTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::event::WebPageView* web_page_view_;
    ::event::AppScreenView* app_screen_view_;
  } ui_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class AutoView PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.AutoView) */ {
 public:
  inline AutoView() : AutoView(nullptr) {}
  virtual ~AutoView();
  explicit constexpr AutoView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoView(const AutoView& from);
  AutoView(AutoView&& from) noexcept
    : AutoView() {
    *this = ::std::move(from);
  }

  inline AutoView& operator=(const AutoView& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoView& operator=(AutoView&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoView& default_instance() {
    return *internal_default_instance();
  }
  enum UiTypeCase {
    kWebPageView = 12,
    kAppScreenView = 13,
    UI_TYPE_NOT_SET = 0,
  };

  static inline const AutoView* internal_default_instance() {
    return reinterpret_cast<const AutoView*>(
               &_AutoView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AutoView& a, AutoView& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoView* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoView* New() const final {
    return CreateMaybeMessage<AutoView>(nullptr);
  }

  AutoView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoView& from);
  void MergeFrom(const AutoView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.AutoView";
  }
  protected:
  explicit AutoView(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoViewIdFieldNumber = 6,
    kSessionIdFieldNumber = 7,
    kNameFieldNumber = 8,
    kViewIdFieldNumber = 14,
    kUserInfoFieldNumber = 2,
    kTimingFieldNumber = 3,
    kClientInfoFieldNumber = 4,
    kPropertiesFieldNumber = 10,
    kLocaleFieldNumber = 11,
    kIdProvenancesFieldNumber = 15,
    kPlatformIdFieldNumber = 1,
    kUseCaseFieldNumber = 9,
    kWebPageViewFieldNumber = 12,
    kAppScreenViewFieldNumber = 13,
  };
  // string auto_view_id = 6 [json_name = "autoViewId"];
  void clear_auto_view_id();
  const std::string& auto_view_id() const;
  void set_auto_view_id(const std::string& value);
  void set_auto_view_id(std::string&& value);
  void set_auto_view_id(const char* value);
  void set_auto_view_id(const char* value, size_t size);
  std::string* mutable_auto_view_id();
  std::string* release_auto_view_id();
  void set_allocated_auto_view_id(std::string* auto_view_id);
  private:
  const std::string& _internal_auto_view_id() const;
  void _internal_set_auto_view_id(const std::string& value);
  std::string* _internal_mutable_auto_view_id();
  public:

  // string session_id = 7 [json_name = "sessionId"];
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string name = 8 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string view_id = 14 [json_name = "viewId"];
  void clear_view_id();
  const std::string& view_id() const;
  void set_view_id(const std::string& value);
  void set_view_id(std::string&& value);
  void set_view_id(const char* value);
  void set_view_id(const char* value, size_t size);
  std::string* mutable_view_id();
  std::string* release_view_id();
  void set_allocated_view_id(std::string* view_id);
  private:
  const std::string& _internal_view_id() const;
  void _internal_set_view_id(const std::string& value);
  std::string* _internal_mutable_view_id();
  public:

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::common::UserInfo& user_info() const;
  ::common::UserInfo* release_user_info();
  ::common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::common::UserInfo* user_info);
  private:
  const ::common::UserInfo& _internal_user_info() const;
  ::common::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::common::UserInfo* user_info);
  ::common::UserInfo* unsafe_arena_release_user_info();

  // .common.Timing timing = 3 [json_name = "timing"];
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::common::Timing& timing() const;
  ::common::Timing* release_timing();
  ::common::Timing* mutable_timing();
  void set_allocated_timing(::common::Timing* timing);
  private:
  const ::common::Timing& _internal_timing() const;
  ::common::Timing* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::common::Timing* timing);
  ::common::Timing* unsafe_arena_release_timing();

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::common::ClientInfo& client_info() const;
  ::common::ClientInfo* release_client_info();
  ::common::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::common::ClientInfo* client_info);
  private:
  const ::common::ClientInfo& _internal_client_info() const;
  ::common::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::common::ClientInfo* client_info);
  ::common::ClientInfo* unsafe_arena_release_client_info();

  // .common.Properties properties = 10 [json_name = "properties"];
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::common::Properties& properties() const;
  ::common::Properties* release_properties();
  ::common::Properties* mutable_properties();
  void set_allocated_properties(::common::Properties* properties);
  private:
  const ::common::Properties& _internal_properties() const;
  ::common::Properties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::common::Properties* properties);
  ::common::Properties* unsafe_arena_release_properties();

  // .common.Locale locale = 11 [json_name = "locale"];
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const ::common::Locale& locale() const;
  ::common::Locale* release_locale();
  ::common::Locale* mutable_locale();
  void set_allocated_locale(::common::Locale* locale);
  private:
  const ::common::Locale& _internal_locale() const;
  ::common::Locale* _internal_mutable_locale();
  public:
  void unsafe_arena_set_allocated_locale(
      ::common::Locale* locale);
  ::common::Locale* unsafe_arena_release_locale();

  // .event.IdentifierProvenances id_provenances = 15 [json_name = "idProvenances"];
  bool has_id_provenances() const;
  private:
  bool _internal_has_id_provenances() const;
  public:
  void clear_id_provenances();
  const ::event::IdentifierProvenances& id_provenances() const;
  ::event::IdentifierProvenances* release_id_provenances();
  ::event::IdentifierProvenances* mutable_id_provenances();
  void set_allocated_id_provenances(::event::IdentifierProvenances* id_provenances);
  private:
  const ::event::IdentifierProvenances& _internal_id_provenances() const;
  ::event::IdentifierProvenances* _internal_mutable_id_provenances();
  public:
  void unsafe_arena_set_allocated_id_provenances(
      ::event::IdentifierProvenances* id_provenances);
  ::event::IdentifierProvenances* unsafe_arena_release_id_provenances();

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .delivery.UseCase use_case = 9 [json_name = "useCase"];
  void clear_use_case();
  ::delivery::UseCase use_case() const;
  void set_use_case(::delivery::UseCase value);
  private:
  ::delivery::UseCase _internal_use_case() const;
  void _internal_set_use_case(::delivery::UseCase value);
  public:

  // .event.WebPageView web_page_view = 12 [json_name = "webPageView"];
  bool has_web_page_view() const;
  private:
  bool _internal_has_web_page_view() const;
  public:
  void clear_web_page_view();
  const ::event::WebPageView& web_page_view() const;
  ::event::WebPageView* release_web_page_view();
  ::event::WebPageView* mutable_web_page_view();
  void set_allocated_web_page_view(::event::WebPageView* web_page_view);
  private:
  const ::event::WebPageView& _internal_web_page_view() const;
  ::event::WebPageView* _internal_mutable_web_page_view();
  public:
  void unsafe_arena_set_allocated_web_page_view(
      ::event::WebPageView* web_page_view);
  ::event::WebPageView* unsafe_arena_release_web_page_view();

  // .event.AppScreenView app_screen_view = 13 [json_name = "appScreenView"];
  bool has_app_screen_view() const;
  private:
  bool _internal_has_app_screen_view() const;
  public:
  void clear_app_screen_view();
  const ::event::AppScreenView& app_screen_view() const;
  ::event::AppScreenView* release_app_screen_view();
  ::event::AppScreenView* mutable_app_screen_view();
  void set_allocated_app_screen_view(::event::AppScreenView* app_screen_view);
  private:
  const ::event::AppScreenView& _internal_app_screen_view() const;
  ::event::AppScreenView* _internal_mutable_app_screen_view();
  public:
  void unsafe_arena_set_allocated_app_screen_view(
      ::event::AppScreenView* app_screen_view);
  ::event::AppScreenView* unsafe_arena_release_app_screen_view();

  void clear_ui_type();
  UiTypeCase ui_type_case() const;
  // @@protoc_insertion_point(class_scope:event.AutoView)
 private:
  class _Internal;
  void set_has_web_page_view();
  void set_has_app_screen_view();

  inline bool has_ui_type() const;
  inline void clear_has_ui_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_view_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_id_;
  ::common::UserInfo* user_info_;
  ::common::Timing* timing_;
  ::common::ClientInfo* client_info_;
  ::common::Properties* properties_;
  ::common::Locale* locale_;
  ::event::IdentifierProvenances* id_provenances_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  int use_case_;
  union UiTypeUnion {
    constexpr UiTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::event::WebPageView* web_page_view_;
    ::event::AppScreenView* app_screen_view_;
  } ui_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class IndexPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.IndexPath) */ {
 public:
  inline IndexPath() : IndexPath(nullptr) {}
  virtual ~IndexPath();
  explicit constexpr IndexPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexPath(const IndexPath& from);
  IndexPath(IndexPath&& from) noexcept
    : IndexPath() {
    *this = ::std::move(from);
  }

  inline IndexPath& operator=(const IndexPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexPath& operator=(IndexPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexPath* internal_default_instance() {
    return reinterpret_cast<const IndexPath*>(
               &_IndexPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IndexPath& a, IndexPath& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexPath* New() const final {
    return CreateMaybeMessage<IndexPath>(nullptr);
  }

  IndexPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexPath& from);
  void MergeFrom(const IndexPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.IndexPath";
  }
  protected:
  explicit IndexPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // repeated int32 index = 1 [json_name = "index"];
  int index_size() const;
  private:
  int _internal_index_size() const;
  public:
  void clear_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_index() const;
  void _internal_add_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 index(int index) const;
  void set_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_index();

  // @@protoc_insertion_point(class_scope:event.IndexPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > index_;
  mutable std::atomic<int> _index_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class Impression PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.Impression) */ {
 public:
  inline Impression() : Impression(nullptr) {}
  virtual ~Impression();
  explicit constexpr Impression(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Impression(const Impression& from);
  Impression(Impression&& from) noexcept
    : Impression() {
    *this = ::std::move(from);
  }

  inline Impression& operator=(const Impression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Impression& operator=(Impression&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Impression& default_instance() {
    return *internal_default_instance();
  }
  static inline const Impression* internal_default_instance() {
    return reinterpret_cast<const Impression*>(
               &_Impression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Impression& a, Impression& b) {
    a.Swap(&b);
  }
  inline void Swap(Impression* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Impression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Impression* New() const final {
    return CreateMaybeMessage<Impression>(nullptr);
  }

  Impression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Impression>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Impression& from);
  void MergeFrom(const Impression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Impression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.Impression";
  }
  protected:
  explicit Impression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpressionIdFieldNumber = 6,
    kInsertionIdFieldNumber = 7,
    kRequestIdFieldNumber = 8,
    kSessionIdFieldNumber = 9,
    kViewIdFieldNumber = 10,
    kContentIdFieldNumber = 12,
    kAutoViewIdFieldNumber = 15,
    kUserInfoFieldNumber = 2,
    kTimingFieldNumber = 3,
    kClientInfoFieldNumber = 4,
    kPropertiesFieldNumber = 11,
    kClientPositionFieldNumber = 16,
    kIdProvenancesFieldNumber = 17,
    kPlatformIdFieldNumber = 1,
    kSourceTypeFieldNumber = 13,
    kHasSuperimposedViewsFieldNumber = 14,
  };
  // string impression_id = 6 [json_name = "impressionId"];
  void clear_impression_id();
  const std::string& impression_id() const;
  void set_impression_id(const std::string& value);
  void set_impression_id(std::string&& value);
  void set_impression_id(const char* value);
  void set_impression_id(const char* value, size_t size);
  std::string* mutable_impression_id();
  std::string* release_impression_id();
  void set_allocated_impression_id(std::string* impression_id);
  private:
  const std::string& _internal_impression_id() const;
  void _internal_set_impression_id(const std::string& value);
  std::string* _internal_mutable_impression_id();
  public:

  // string insertion_id = 7 [json_name = "insertionId"];
  void clear_insertion_id();
  const std::string& insertion_id() const;
  void set_insertion_id(const std::string& value);
  void set_insertion_id(std::string&& value);
  void set_insertion_id(const char* value);
  void set_insertion_id(const char* value, size_t size);
  std::string* mutable_insertion_id();
  std::string* release_insertion_id();
  void set_allocated_insertion_id(std::string* insertion_id);
  private:
  const std::string& _internal_insertion_id() const;
  void _internal_set_insertion_id(const std::string& value);
  std::string* _internal_mutable_insertion_id();
  public:

  // string request_id = 8 [json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string session_id = 9 [json_name = "sessionId"];
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string view_id = 10 [json_name = "viewId"];
  void clear_view_id();
  const std::string& view_id() const;
  void set_view_id(const std::string& value);
  void set_view_id(std::string&& value);
  void set_view_id(const char* value);
  void set_view_id(const char* value, size_t size);
  std::string* mutable_view_id();
  std::string* release_view_id();
  void set_allocated_view_id(std::string* view_id);
  private:
  const std::string& _internal_view_id() const;
  void _internal_set_view_id(const std::string& value);
  std::string* _internal_mutable_view_id();
  public:

  // string content_id = 12 [json_name = "contentId"];
  void clear_content_id();
  const std::string& content_id() const;
  void set_content_id(const std::string& value);
  void set_content_id(std::string&& value);
  void set_content_id(const char* value);
  void set_content_id(const char* value, size_t size);
  std::string* mutable_content_id();
  std::string* release_content_id();
  void set_allocated_content_id(std::string* content_id);
  private:
  const std::string& _internal_content_id() const;
  void _internal_set_content_id(const std::string& value);
  std::string* _internal_mutable_content_id();
  public:

  // string auto_view_id = 15 [json_name = "autoViewId"];
  void clear_auto_view_id();
  const std::string& auto_view_id() const;
  void set_auto_view_id(const std::string& value);
  void set_auto_view_id(std::string&& value);
  void set_auto_view_id(const char* value);
  void set_auto_view_id(const char* value, size_t size);
  std::string* mutable_auto_view_id();
  std::string* release_auto_view_id();
  void set_allocated_auto_view_id(std::string* auto_view_id);
  private:
  const std::string& _internal_auto_view_id() const;
  void _internal_set_auto_view_id(const std::string& value);
  std::string* _internal_mutable_auto_view_id();
  public:

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::common::UserInfo& user_info() const;
  ::common::UserInfo* release_user_info();
  ::common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::common::UserInfo* user_info);
  private:
  const ::common::UserInfo& _internal_user_info() const;
  ::common::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::common::UserInfo* user_info);
  ::common::UserInfo* unsafe_arena_release_user_info();

  // .common.Timing timing = 3 [json_name = "timing"];
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::common::Timing& timing() const;
  ::common::Timing* release_timing();
  ::common::Timing* mutable_timing();
  void set_allocated_timing(::common::Timing* timing);
  private:
  const ::common::Timing& _internal_timing() const;
  ::common::Timing* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::common::Timing* timing);
  ::common::Timing* unsafe_arena_release_timing();

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::common::ClientInfo& client_info() const;
  ::common::ClientInfo* release_client_info();
  ::common::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::common::ClientInfo* client_info);
  private:
  const ::common::ClientInfo& _internal_client_info() const;
  ::common::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::common::ClientInfo* client_info);
  ::common::ClientInfo* unsafe_arena_release_client_info();

  // .common.Properties properties = 11 [json_name = "properties"];
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::common::Properties& properties() const;
  ::common::Properties* release_properties();
  ::common::Properties* mutable_properties();
  void set_allocated_properties(::common::Properties* properties);
  private:
  const ::common::Properties& _internal_properties() const;
  ::common::Properties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::common::Properties* properties);
  ::common::Properties* unsafe_arena_release_properties();

  // .event.IndexPath client_position = 16 [json_name = "clientPosition"];
  bool has_client_position() const;
  private:
  bool _internal_has_client_position() const;
  public:
  void clear_client_position();
  const ::event::IndexPath& client_position() const;
  ::event::IndexPath* release_client_position();
  ::event::IndexPath* mutable_client_position();
  void set_allocated_client_position(::event::IndexPath* client_position);
  private:
  const ::event::IndexPath& _internal_client_position() const;
  ::event::IndexPath* _internal_mutable_client_position();
  public:
  void unsafe_arena_set_allocated_client_position(
      ::event::IndexPath* client_position);
  ::event::IndexPath* unsafe_arena_release_client_position();

  // .event.IdentifierProvenances id_provenances = 17 [json_name = "idProvenances"];
  bool has_id_provenances() const;
  private:
  bool _internal_has_id_provenances() const;
  public:
  void clear_id_provenances();
  const ::event::IdentifierProvenances& id_provenances() const;
  ::event::IdentifierProvenances* release_id_provenances();
  ::event::IdentifierProvenances* mutable_id_provenances();
  void set_allocated_id_provenances(::event::IdentifierProvenances* id_provenances);
  private:
  const ::event::IdentifierProvenances& _internal_id_provenances() const;
  ::event::IdentifierProvenances* _internal_mutable_id_provenances();
  public:
  void unsafe_arena_set_allocated_id_provenances(
      ::event::IdentifierProvenances* id_provenances);
  ::event::IdentifierProvenances* unsafe_arena_release_id_provenances();

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event.ImpressionSourceType source_type = 13 [json_name = "sourceType"];
  void clear_source_type();
  ::event::ImpressionSourceType source_type() const;
  void set_source_type(::event::ImpressionSourceType value);
  private:
  ::event::ImpressionSourceType _internal_source_type() const;
  void _internal_set_source_type(::event::ImpressionSourceType value);
  public:

  // bool has_superimposed_views = 14 [json_name = "hasSuperimposedViews"];
  void clear_has_superimposed_views();
  bool has_superimposed_views() const;
  void set_has_superimposed_views(bool value);
  private:
  bool _internal_has_superimposed_views() const;
  void _internal_set_has_superimposed_views(bool value);
  public:

  // @@protoc_insertion_point(class_scope:event.Impression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr impression_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insertion_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_view_id_;
  ::common::UserInfo* user_info_;
  ::common::Timing* timing_;
  ::common::ClientInfo* client_info_;
  ::common::Properties* properties_;
  ::event::IndexPath* client_position_;
  ::event::IdentifierProvenances* id_provenances_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  int source_type_;
  bool has_superimposed_views_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class NavigateAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.NavigateAction) */ {
 public:
  inline NavigateAction() : NavigateAction(nullptr) {}
  virtual ~NavigateAction();
  explicit constexpr NavigateAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NavigateAction(const NavigateAction& from);
  NavigateAction(NavigateAction&& from) noexcept
    : NavigateAction() {
    *this = ::std::move(from);
  }

  inline NavigateAction& operator=(const NavigateAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigateAction& operator=(NavigateAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigateAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const NavigateAction* internal_default_instance() {
    return reinterpret_cast<const NavigateAction*>(
               &_NavigateAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NavigateAction& a, NavigateAction& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigateAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigateAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigateAction* New() const final {
    return CreateMaybeMessage<NavigateAction>(nullptr);
  }

  NavigateAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigateAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigateAction& from);
  void MergeFrom(const NavigateAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigateAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.NavigateAction";
  }
  protected:
  explicit NavigateAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetUrlFieldNumber = 1,
  };
  // string target_url = 1 [json_name = "targetUrl"];
  void clear_target_url();
  const std::string& target_url() const;
  void set_target_url(const std::string& value);
  void set_target_url(std::string&& value);
  void set_target_url(const char* value);
  void set_target_url(const char* value, size_t size);
  std::string* mutable_target_url();
  std::string* release_target_url();
  void set_allocated_target_url(std::string* target_url);
  private:
  const std::string& _internal_target_url() const;
  void _internal_set_target_url(const std::string& value);
  std::string* _internal_mutable_target_url();
  public:

  // @@protoc_insertion_point(class_scope:event.NavigateAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class Action PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.Action) */ {
 public:
  inline Action() : Action(nullptr) {}
  virtual ~Action();
  explicit constexpr Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action& default_instance() {
    return *internal_default_instance();
  }
  enum ActionCase {
    kNavigateAction = 18,
    ACTION_NOT_SET = 0,
  };

  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIdFieldNumber = 6,
    kImpressionIdFieldNumber = 7,
    kInsertionIdFieldNumber = 8,
    kRequestIdFieldNumber = 9,
    kSessionIdFieldNumber = 10,
    kViewIdFieldNumber = 11,
    kNameFieldNumber = 12,
    kCustomActionTypeFieldNumber = 15,
    kElementIdFieldNumber = 17,
    kContentIdFieldNumber = 21,
    kAutoViewIdFieldNumber = 23,
    kUserInfoFieldNumber = 2,
    kTimingFieldNumber = 3,
    kClientInfoFieldNumber = 4,
    kPropertiesFieldNumber = 20,
    kClientPositionFieldNumber = 24,
    kIdProvenancesFieldNumber = 25,
    kDeviceFieldNumber = 26,
    kCartFieldNumber = 28,
    kPlatformIdFieldNumber = 1,
    kActionTypeFieldNumber = 14,
    kHasSuperimposedViewsFieldNumber = 22,
    kNavigateActionFieldNumber = 18,
  };
  // string action_id = 6 [json_name = "actionId"];
  void clear_action_id();
  const std::string& action_id() const;
  void set_action_id(const std::string& value);
  void set_action_id(std::string&& value);
  void set_action_id(const char* value);
  void set_action_id(const char* value, size_t size);
  std::string* mutable_action_id();
  std::string* release_action_id();
  void set_allocated_action_id(std::string* action_id);
  private:
  const std::string& _internal_action_id() const;
  void _internal_set_action_id(const std::string& value);
  std::string* _internal_mutable_action_id();
  public:

  // string impression_id = 7 [json_name = "impressionId"];
  void clear_impression_id();
  const std::string& impression_id() const;
  void set_impression_id(const std::string& value);
  void set_impression_id(std::string&& value);
  void set_impression_id(const char* value);
  void set_impression_id(const char* value, size_t size);
  std::string* mutable_impression_id();
  std::string* release_impression_id();
  void set_allocated_impression_id(std::string* impression_id);
  private:
  const std::string& _internal_impression_id() const;
  void _internal_set_impression_id(const std::string& value);
  std::string* _internal_mutable_impression_id();
  public:

  // string insertion_id = 8 [json_name = "insertionId"];
  void clear_insertion_id();
  const std::string& insertion_id() const;
  void set_insertion_id(const std::string& value);
  void set_insertion_id(std::string&& value);
  void set_insertion_id(const char* value);
  void set_insertion_id(const char* value, size_t size);
  std::string* mutable_insertion_id();
  std::string* release_insertion_id();
  void set_allocated_insertion_id(std::string* insertion_id);
  private:
  const std::string& _internal_insertion_id() const;
  void _internal_set_insertion_id(const std::string& value);
  std::string* _internal_mutable_insertion_id();
  public:

  // string request_id = 9 [json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string session_id = 10 [json_name = "sessionId"];
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string view_id = 11 [json_name = "viewId"];
  void clear_view_id();
  const std::string& view_id() const;
  void set_view_id(const std::string& value);
  void set_view_id(std::string&& value);
  void set_view_id(const char* value);
  void set_view_id(const char* value, size_t size);
  std::string* mutable_view_id();
  std::string* release_view_id();
  void set_allocated_view_id(std::string* view_id);
  private:
  const std::string& _internal_view_id() const;
  void _internal_set_view_id(const std::string& value);
  std::string* _internal_mutable_view_id();
  public:

  // string name = 12 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string custom_action_type = 15 [json_name = "customActionType"];
  void clear_custom_action_type();
  const std::string& custom_action_type() const;
  void set_custom_action_type(const std::string& value);
  void set_custom_action_type(std::string&& value);
  void set_custom_action_type(const char* value);
  void set_custom_action_type(const char* value, size_t size);
  std::string* mutable_custom_action_type();
  std::string* release_custom_action_type();
  void set_allocated_custom_action_type(std::string* custom_action_type);
  private:
  const std::string& _internal_custom_action_type() const;
  void _internal_set_custom_action_type(const std::string& value);
  std::string* _internal_mutable_custom_action_type();
  public:

  // string element_id = 17 [json_name = "elementId"];
  void clear_element_id();
  const std::string& element_id() const;
  void set_element_id(const std::string& value);
  void set_element_id(std::string&& value);
  void set_element_id(const char* value);
  void set_element_id(const char* value, size_t size);
  std::string* mutable_element_id();
  std::string* release_element_id();
  void set_allocated_element_id(std::string* element_id);
  private:
  const std::string& _internal_element_id() const;
  void _internal_set_element_id(const std::string& value);
  std::string* _internal_mutable_element_id();
  public:

  // string content_id = 21 [json_name = "contentId"];
  void clear_content_id();
  const std::string& content_id() const;
  void set_content_id(const std::string& value);
  void set_content_id(std::string&& value);
  void set_content_id(const char* value);
  void set_content_id(const char* value, size_t size);
  std::string* mutable_content_id();
  std::string* release_content_id();
  void set_allocated_content_id(std::string* content_id);
  private:
  const std::string& _internal_content_id() const;
  void _internal_set_content_id(const std::string& value);
  std::string* _internal_mutable_content_id();
  public:

  // string auto_view_id = 23 [json_name = "autoViewId"];
  void clear_auto_view_id();
  const std::string& auto_view_id() const;
  void set_auto_view_id(const std::string& value);
  void set_auto_view_id(std::string&& value);
  void set_auto_view_id(const char* value);
  void set_auto_view_id(const char* value, size_t size);
  std::string* mutable_auto_view_id();
  std::string* release_auto_view_id();
  void set_allocated_auto_view_id(std::string* auto_view_id);
  private:
  const std::string& _internal_auto_view_id() const;
  void _internal_set_auto_view_id(const std::string& value);
  std::string* _internal_mutable_auto_view_id();
  public:

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::common::UserInfo& user_info() const;
  ::common::UserInfo* release_user_info();
  ::common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::common::UserInfo* user_info);
  private:
  const ::common::UserInfo& _internal_user_info() const;
  ::common::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::common::UserInfo* user_info);
  ::common::UserInfo* unsafe_arena_release_user_info();

  // .common.Timing timing = 3 [json_name = "timing"];
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::common::Timing& timing() const;
  ::common::Timing* release_timing();
  ::common::Timing* mutable_timing();
  void set_allocated_timing(::common::Timing* timing);
  private:
  const ::common::Timing& _internal_timing() const;
  ::common::Timing* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::common::Timing* timing);
  ::common::Timing* unsafe_arena_release_timing();

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::common::ClientInfo& client_info() const;
  ::common::ClientInfo* release_client_info();
  ::common::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::common::ClientInfo* client_info);
  private:
  const ::common::ClientInfo& _internal_client_info() const;
  ::common::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::common::ClientInfo* client_info);
  ::common::ClientInfo* unsafe_arena_release_client_info();

  // .common.Properties properties = 20 [json_name = "properties"];
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::common::Properties& properties() const;
  ::common::Properties* release_properties();
  ::common::Properties* mutable_properties();
  void set_allocated_properties(::common::Properties* properties);
  private:
  const ::common::Properties& _internal_properties() const;
  ::common::Properties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::common::Properties* properties);
  ::common::Properties* unsafe_arena_release_properties();

  // .event.IndexPath client_position = 24 [json_name = "clientPosition"];
  bool has_client_position() const;
  private:
  bool _internal_has_client_position() const;
  public:
  void clear_client_position();
  const ::event::IndexPath& client_position() const;
  ::event::IndexPath* release_client_position();
  ::event::IndexPath* mutable_client_position();
  void set_allocated_client_position(::event::IndexPath* client_position);
  private:
  const ::event::IndexPath& _internal_client_position() const;
  ::event::IndexPath* _internal_mutable_client_position();
  public:
  void unsafe_arena_set_allocated_client_position(
      ::event::IndexPath* client_position);
  ::event::IndexPath* unsafe_arena_release_client_position();

  // .event.IdentifierProvenances id_provenances = 25 [json_name = "idProvenances"];
  bool has_id_provenances() const;
  private:
  bool _internal_has_id_provenances() const;
  public:
  void clear_id_provenances();
  const ::event::IdentifierProvenances& id_provenances() const;
  ::event::IdentifierProvenances* release_id_provenances();
  ::event::IdentifierProvenances* mutable_id_provenances();
  void set_allocated_id_provenances(::event::IdentifierProvenances* id_provenances);
  private:
  const ::event::IdentifierProvenances& _internal_id_provenances() const;
  ::event::IdentifierProvenances* _internal_mutable_id_provenances();
  public:
  void unsafe_arena_set_allocated_id_provenances(
      ::event::IdentifierProvenances* id_provenances);
  ::event::IdentifierProvenances* unsafe_arena_release_id_provenances();

  // .common.Device device = 26 [json_name = "device"];
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::common::Device& device() const;
  ::common::Device* release_device();
  ::common::Device* mutable_device();
  void set_allocated_device(::common::Device* device);
  private:
  const ::common::Device& _internal_device() const;
  ::common::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::common::Device* device);
  ::common::Device* unsafe_arena_release_device();

  // .event.Cart cart = 28 [json_name = "cart"];
  bool has_cart() const;
  private:
  bool _internal_has_cart() const;
  public:
  void clear_cart();
  const ::event::Cart& cart() const;
  ::event::Cart* release_cart();
  ::event::Cart* mutable_cart();
  void set_allocated_cart(::event::Cart* cart);
  private:
  const ::event::Cart& _internal_cart() const;
  ::event::Cart* _internal_mutable_cart();
  public:
  void unsafe_arena_set_allocated_cart(
      ::event::Cart* cart);
  ::event::Cart* unsafe_arena_release_cart();

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event.ActionType action_type = 14 [json_name = "actionType"];
  void clear_action_type();
  ::event::ActionType action_type() const;
  void set_action_type(::event::ActionType value);
  private:
  ::event::ActionType _internal_action_type() const;
  void _internal_set_action_type(::event::ActionType value);
  public:

  // bool has_superimposed_views = 22 [json_name = "hasSuperimposedViews"];
  void clear_has_superimposed_views();
  bool has_superimposed_views() const;
  void set_has_superimposed_views(bool value);
  private:
  bool _internal_has_superimposed_views() const;
  void _internal_set_has_superimposed_views(bool value);
  public:

  // .event.NavigateAction navigate_action = 18 [json_name = "navigateAction"];
  bool has_navigate_action() const;
  private:
  bool _internal_has_navigate_action() const;
  public:
  void clear_navigate_action();
  const ::event::NavigateAction& navigate_action() const;
  ::event::NavigateAction* release_navigate_action();
  ::event::NavigateAction* mutable_navigate_action();
  void set_allocated_navigate_action(::event::NavigateAction* navigate_action);
  private:
  const ::event::NavigateAction& _internal_navigate_action() const;
  ::event::NavigateAction* _internal_mutable_navigate_action();
  public:
  void unsafe_arena_set_allocated_navigate_action(
      ::event::NavigateAction* navigate_action);
  ::event::NavigateAction* unsafe_arena_release_navigate_action();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:event.Action)
 private:
  class _Internal;
  void set_has_navigate_action();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr impression_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insertion_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_action_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr element_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_view_id_;
  ::common::UserInfo* user_info_;
  ::common::Timing* timing_;
  ::common::ClientInfo* client_info_;
  ::common::Properties* properties_;
  ::event::IndexPath* client_position_;
  ::event::IdentifierProvenances* id_provenances_;
  ::common::Device* device_;
  ::event::Cart* cart_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  int action_type_;
  bool has_superimposed_views_;
  union ActionUnion {
    constexpr ActionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::event::NavigateAction* navigate_action_;
  } action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class Cart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.Cart) */ {
 public:
  inline Cart() : Cart(nullptr) {}
  virtual ~Cart();
  explicit constexpr Cart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cart(const Cart& from);
  Cart(Cart&& from) noexcept
    : Cart() {
    *this = ::std::move(from);
  }

  inline Cart& operator=(const Cart& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cart& operator=(Cart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cart& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cart* internal_default_instance() {
    return reinterpret_cast<const Cart*>(
               &_Cart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Cart& a, Cart& b) {
    a.Swap(&b);
  }
  inline void Swap(Cart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cart* New() const final {
    return CreateMaybeMessage<Cart>(nullptr);
  }

  Cart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cart& from);
  void MergeFrom(const Cart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.Cart";
  }
  protected:
  explicit Cart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 1,
  };
  // repeated .event.CartContent contents = 1 [json_name = "contents"];
  int contents_size() const;
  private:
  int _internal_contents_size() const;
  public:
  void clear_contents();
  ::event::CartContent* mutable_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::CartContent >*
      mutable_contents();
  private:
  const ::event::CartContent& _internal_contents(int index) const;
  ::event::CartContent* _internal_add_contents();
  public:
  const ::event::CartContent& contents(int index) const;
  ::event::CartContent* add_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::CartContent >&
      contents() const;

  // @@protoc_insertion_point(class_scope:event.Cart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::CartContent > contents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class CartContent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.CartContent) */ {
 public:
  inline CartContent() : CartContent(nullptr) {}
  virtual ~CartContent();
  explicit constexpr CartContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CartContent(const CartContent& from);
  CartContent(CartContent&& from) noexcept
    : CartContent() {
    *this = ::std::move(from);
  }

  inline CartContent& operator=(const CartContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartContent& operator=(CartContent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CartContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CartContent* internal_default_instance() {
    return reinterpret_cast<const CartContent*>(
               &_CartContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CartContent& a, CartContent& b) {
    a.Swap(&b);
  }
  inline void Swap(CartContent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartContent* New() const final {
    return CreateMaybeMessage<CartContent>(nullptr);
  }

  CartContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartContent& from);
  void MergeFrom(const CartContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.CartContent";
  }
  protected:
  explicit CartContent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentIdFieldNumber = 1,
    kPricePerUnitFieldNumber = 3,
    kQuantityFieldNumber = 2,
  };
  // string content_id = 1 [json_name = "contentId"];
  void clear_content_id();
  const std::string& content_id() const;
  void set_content_id(const std::string& value);
  void set_content_id(std::string&& value);
  void set_content_id(const char* value);
  void set_content_id(const char* value, size_t size);
  std::string* mutable_content_id();
  std::string* release_content_id();
  void set_allocated_content_id(std::string* content_id);
  private:
  const std::string& _internal_content_id() const;
  void _internal_set_content_id(const std::string& value);
  std::string* _internal_mutable_content_id();
  public:

  // .common.Money price_per_unit = 3 [json_name = "pricePerUnit"];
  bool has_price_per_unit() const;
  private:
  bool _internal_has_price_per_unit() const;
  public:
  void clear_price_per_unit();
  const ::common::Money& price_per_unit() const;
  ::common::Money* release_price_per_unit();
  ::common::Money* mutable_price_per_unit();
  void set_allocated_price_per_unit(::common::Money* price_per_unit);
  private:
  const ::common::Money& _internal_price_per_unit() const;
  ::common::Money* _internal_mutable_price_per_unit();
  public:
  void unsafe_arena_set_allocated_price_per_unit(
      ::common::Money* price_per_unit);
  ::common::Money* unsafe_arena_release_price_per_unit();

  // int64 quantity = 2 [json_name = "quantity"];
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:event.CartContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_id_;
  ::common::Money* price_per_unit_;
  ::PROTOBUF_NAMESPACE_ID::int64 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class Attribution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.Attribution) */ {
 public:
  inline Attribution() : Attribution(nullptr) {}
  virtual ~Attribution();
  explicit constexpr Attribution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attribution(const Attribution& from);
  Attribution(Attribution&& from) noexcept
    : Attribution() {
    *this = ::std::move(from);
  }

  inline Attribution& operator=(const Attribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribution& operator=(Attribution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attribution* internal_default_instance() {
    return reinterpret_cast<const Attribution*>(
               &_Attribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Attribution& a, Attribution& b) {
    a.Swap(&b);
  }
  inline void Swap(Attribution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attribution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attribution* New() const final {
    return CreateMaybeMessage<Attribution>(nullptr);
  }

  Attribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attribution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attribution& from);
  void MergeFrom(const Attribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.Attribution";
  }
  protected:
  explicit Attribution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 1,
    kCreditMillisFieldNumber = 2,
  };
  // uint64 model_id = 1 [json_name = "modelId"];
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 credit_millis = 2 [json_name = "creditMillis"];
  void clear_credit_millis();
  ::PROTOBUF_NAMESPACE_ID::int32 credit_millis() const;
  void set_credit_millis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_credit_millis() const;
  void _internal_set_credit_millis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event.Attribution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 model_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 credit_millis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class IOSError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.IOSError) */ {
 public:
  inline IOSError() : IOSError(nullptr) {}
  virtual ~IOSError();
  explicit constexpr IOSError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IOSError(const IOSError& from);
  IOSError(IOSError&& from) noexcept
    : IOSError() {
    *this = ::std::move(from);
  }

  inline IOSError& operator=(const IOSError& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOSError& operator=(IOSError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IOSError& default_instance() {
    return *internal_default_instance();
  }
  static inline const IOSError* internal_default_instance() {
    return reinterpret_cast<const IOSError*>(
               &_IOSError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(IOSError& a, IOSError& b) {
    a.Swap(&b);
  }
  inline void Swap(IOSError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IOSError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IOSError* New() const final {
    return CreateMaybeMessage<IOSError>(nullptr);
  }

  IOSError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOSError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IOSError& from);
  void MergeFrom(const IOSError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOSError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.IOSError";
  }
  protected:
  explicit IOSError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 1,
    kBatchNumberFieldNumber = 4,
  };
  // string domain = 2 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string description = 3 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int32 code = 1 [json_name = "code"];
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 batch_number = 4 [json_name = "batchNumber"];
  void clear_batch_number();
  ::PROTOBUF_NAMESPACE_ID::int32 batch_number() const;
  void set_batch_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batch_number() const;
  void _internal_set_batch_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event.IOSError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 batch_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class ErrorHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.ErrorHistory) */ {
 public:
  inline ErrorHistory() : ErrorHistory(nullptr) {}
  virtual ~ErrorHistory();
  explicit constexpr ErrorHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorHistory(const ErrorHistory& from);
  ErrorHistory(ErrorHistory&& from) noexcept
    : ErrorHistory() {
    *this = ::std::move(from);
  }

  inline ErrorHistory& operator=(const ErrorHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorHistory& operator=(ErrorHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorHistory* internal_default_instance() {
    return reinterpret_cast<const ErrorHistory*>(
               &_ErrorHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ErrorHistory& a, ErrorHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorHistory* New() const final {
    return CreateMaybeMessage<ErrorHistory>(nullptr);
  }

  ErrorHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorHistory& from);
  void MergeFrom(const ErrorHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.ErrorHistory";
  }
  protected:
  explicit ErrorHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIosErrorsFieldNumber = 1,
    kTotalErrorsFieldNumber = 2,
  };
  // repeated .event.IOSError ios_errors = 1 [json_name = "iosErrors"];
  int ios_errors_size() const;
  private:
  int _internal_ios_errors_size() const;
  public:
  void clear_ios_errors();
  ::event::IOSError* mutable_ios_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::IOSError >*
      mutable_ios_errors();
  private:
  const ::event::IOSError& _internal_ios_errors(int index) const;
  ::event::IOSError* _internal_add_ios_errors();
  public:
  const ::event::IOSError& ios_errors(int index) const;
  ::event::IOSError* add_ios_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::IOSError >&
      ios_errors() const;

  // int32 total_errors = 2 [json_name = "totalErrors"];
  void clear_total_errors();
  ::PROTOBUF_NAMESPACE_ID::int32 total_errors() const;
  void set_total_errors(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_errors() const;
  void _internal_set_total_errors(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event.ErrorHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::IOSError > ios_errors_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class AncestorIdHistoryItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.AncestorIdHistoryItem) */ {
 public:
  inline AncestorIdHistoryItem() : AncestorIdHistoryItem(nullptr) {}
  virtual ~AncestorIdHistoryItem();
  explicit constexpr AncestorIdHistoryItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AncestorIdHistoryItem(const AncestorIdHistoryItem& from);
  AncestorIdHistoryItem(AncestorIdHistoryItem&& from) noexcept
    : AncestorIdHistoryItem() {
    *this = ::std::move(from);
  }

  inline AncestorIdHistoryItem& operator=(const AncestorIdHistoryItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline AncestorIdHistoryItem& operator=(AncestorIdHistoryItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AncestorIdHistoryItem& default_instance() {
    return *internal_default_instance();
  }
  enum LoggedEventCase {
    kUserEvent = 2,
    kSessionIdFromUserEvent = 3,
    kViewEvent = 4,
    kAutoViewEvent = 6,
    LOGGED_EVENT_NOT_SET = 0,
  };

  static inline const AncestorIdHistoryItem* internal_default_instance() {
    return reinterpret_cast<const AncestorIdHistoryItem*>(
               &_AncestorIdHistoryItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AncestorIdHistoryItem& a, AncestorIdHistoryItem& b) {
    a.Swap(&b);
  }
  inline void Swap(AncestorIdHistoryItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AncestorIdHistoryItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AncestorIdHistoryItem* New() const final {
    return CreateMaybeMessage<AncestorIdHistoryItem>(nullptr);
  }

  AncestorIdHistoryItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AncestorIdHistoryItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AncestorIdHistoryItem& from);
  void MergeFrom(const AncestorIdHistoryItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AncestorIdHistoryItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.AncestorIdHistoryItem";
  }
  protected:
  explicit AncestorIdHistoryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAncestorIdFieldNumber = 1,
    kBatchNumberFieldNumber = 5,
    kUserEventFieldNumber = 2,
    kSessionIdFromUserEventFieldNumber = 3,
    kViewEventFieldNumber = 4,
    kAutoViewEventFieldNumber = 6,
  };
  // string ancestor_id = 1 [json_name = "ancestorId"];
  void clear_ancestor_id();
  const std::string& ancestor_id() const;
  void set_ancestor_id(const std::string& value);
  void set_ancestor_id(std::string&& value);
  void set_ancestor_id(const char* value);
  void set_ancestor_id(const char* value, size_t size);
  std::string* mutable_ancestor_id();
  std::string* release_ancestor_id();
  void set_allocated_ancestor_id(std::string* ancestor_id);
  private:
  const std::string& _internal_ancestor_id() const;
  void _internal_set_ancestor_id(const std::string& value);
  std::string* _internal_mutable_ancestor_id();
  public:

  // int32 batch_number = 5 [json_name = "batchNumber"];
  void clear_batch_number();
  ::PROTOBUF_NAMESPACE_ID::int32 batch_number() const;
  void set_batch_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batch_number() const;
  void _internal_set_batch_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .event.User user_event = 2 [json_name = "userEvent"];
  bool has_user_event() const;
  private:
  bool _internal_has_user_event() const;
  public:
  void clear_user_event();
  const ::event::User& user_event() const;
  ::event::User* release_user_event();
  ::event::User* mutable_user_event();
  void set_allocated_user_event(::event::User* user_event);
  private:
  const ::event::User& _internal_user_event() const;
  ::event::User* _internal_mutable_user_event();
  public:
  void unsafe_arena_set_allocated_user_event(
      ::event::User* user_event);
  ::event::User* unsafe_arena_release_user_event();

  // string session_id_from_user_event = 3 [json_name = "sessionIdFromUserEvent"];
  bool has_session_id_from_user_event() const;
  private:
  bool _internal_has_session_id_from_user_event() const;
  public:
  void clear_session_id_from_user_event();
  const std::string& session_id_from_user_event() const;
  void set_session_id_from_user_event(const std::string& value);
  void set_session_id_from_user_event(std::string&& value);
  void set_session_id_from_user_event(const char* value);
  void set_session_id_from_user_event(const char* value, size_t size);
  std::string* mutable_session_id_from_user_event();
  std::string* release_session_id_from_user_event();
  void set_allocated_session_id_from_user_event(std::string* session_id_from_user_event);
  private:
  const std::string& _internal_session_id_from_user_event() const;
  void _internal_set_session_id_from_user_event(const std::string& value);
  std::string* _internal_mutable_session_id_from_user_event();
  public:

  // .event.View view_event = 4 [json_name = "viewEvent"];
  bool has_view_event() const;
  private:
  bool _internal_has_view_event() const;
  public:
  void clear_view_event();
  const ::event::View& view_event() const;
  ::event::View* release_view_event();
  ::event::View* mutable_view_event();
  void set_allocated_view_event(::event::View* view_event);
  private:
  const ::event::View& _internal_view_event() const;
  ::event::View* _internal_mutable_view_event();
  public:
  void unsafe_arena_set_allocated_view_event(
      ::event::View* view_event);
  ::event::View* unsafe_arena_release_view_event();

  // .event.AutoView auto_view_event = 6 [json_name = "autoViewEvent"];
  bool has_auto_view_event() const;
  private:
  bool _internal_has_auto_view_event() const;
  public:
  void clear_auto_view_event();
  const ::event::AutoView& auto_view_event() const;
  ::event::AutoView* release_auto_view_event();
  ::event::AutoView* mutable_auto_view_event();
  void set_allocated_auto_view_event(::event::AutoView* auto_view_event);
  private:
  const ::event::AutoView& _internal_auto_view_event() const;
  ::event::AutoView* _internal_mutable_auto_view_event();
  public:
  void unsafe_arena_set_allocated_auto_view_event(
      ::event::AutoView* auto_view_event);
  ::event::AutoView* unsafe_arena_release_auto_view_event();

  void clear_logged_event();
  LoggedEventCase logged_event_case() const;
  // @@protoc_insertion_point(class_scope:event.AncestorIdHistoryItem)
 private:
  class _Internal;
  void set_has_user_event();
  void set_has_session_id_from_user_event();
  void set_has_view_event();
  void set_has_auto_view_event();

  inline bool has_logged_event() const;
  inline void clear_has_logged_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ancestor_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 batch_number_;
  union LoggedEventUnion {
    constexpr LoggedEventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::event::User* user_event_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_from_user_event_;
    ::event::View* view_event_;
    ::event::AutoView* auto_view_event_;
  } logged_event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class AncestorIdHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.AncestorIdHistory) */ {
 public:
  inline AncestorIdHistory() : AncestorIdHistory(nullptr) {}
  virtual ~AncestorIdHistory();
  explicit constexpr AncestorIdHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AncestorIdHistory(const AncestorIdHistory& from);
  AncestorIdHistory(AncestorIdHistory&& from) noexcept
    : AncestorIdHistory() {
    *this = ::std::move(from);
  }

  inline AncestorIdHistory& operator=(const AncestorIdHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline AncestorIdHistory& operator=(AncestorIdHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AncestorIdHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const AncestorIdHistory* internal_default_instance() {
    return reinterpret_cast<const AncestorIdHistory*>(
               &_AncestorIdHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AncestorIdHistory& a, AncestorIdHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(AncestorIdHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AncestorIdHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AncestorIdHistory* New() const final {
    return CreateMaybeMessage<AncestorIdHistory>(nullptr);
  }

  AncestorIdHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AncestorIdHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AncestorIdHistory& from);
  void MergeFrom(const AncestorIdHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AncestorIdHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.AncestorIdHistory";
  }
  protected:
  explicit AncestorIdHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogUserIdHistoryFieldNumber = 1,
    kSessionIdHistoryFieldNumber = 3,
    kViewIdHistoryFieldNumber = 5,
    kAutoViewIdHistoryFieldNumber = 7,
    kTotalLogUserIdsLoggedFieldNumber = 2,
    kTotalSessionIdsLoggedFieldNumber = 4,
    kTotalViewIdsLoggedFieldNumber = 6,
    kTotalAutoViewIdsLoggedFieldNumber = 8,
  };
  // repeated .event.AncestorIdHistoryItem log_user_id_history = 1 [json_name = "logUserIdHistory"];
  int log_user_id_history_size() const;
  private:
  int _internal_log_user_id_history_size() const;
  public:
  void clear_log_user_id_history();
  ::event::AncestorIdHistoryItem* mutable_log_user_id_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >*
      mutable_log_user_id_history();
  private:
  const ::event::AncestorIdHistoryItem& _internal_log_user_id_history(int index) const;
  ::event::AncestorIdHistoryItem* _internal_add_log_user_id_history();
  public:
  const ::event::AncestorIdHistoryItem& log_user_id_history(int index) const;
  ::event::AncestorIdHistoryItem* add_log_user_id_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >&
      log_user_id_history() const;

  // repeated .event.AncestorIdHistoryItem session_id_history = 3 [json_name = "sessionIdHistory"];
  int session_id_history_size() const;
  private:
  int _internal_session_id_history_size() const;
  public:
  void clear_session_id_history();
  ::event::AncestorIdHistoryItem* mutable_session_id_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >*
      mutable_session_id_history();
  private:
  const ::event::AncestorIdHistoryItem& _internal_session_id_history(int index) const;
  ::event::AncestorIdHistoryItem* _internal_add_session_id_history();
  public:
  const ::event::AncestorIdHistoryItem& session_id_history(int index) const;
  ::event::AncestorIdHistoryItem* add_session_id_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >&
      session_id_history() const;

  // repeated .event.AncestorIdHistoryItem view_id_history = 5 [json_name = "viewIdHistory"];
  int view_id_history_size() const;
  private:
  int _internal_view_id_history_size() const;
  public:
  void clear_view_id_history();
  ::event::AncestorIdHistoryItem* mutable_view_id_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >*
      mutable_view_id_history();
  private:
  const ::event::AncestorIdHistoryItem& _internal_view_id_history(int index) const;
  ::event::AncestorIdHistoryItem* _internal_add_view_id_history();
  public:
  const ::event::AncestorIdHistoryItem& view_id_history(int index) const;
  ::event::AncestorIdHistoryItem* add_view_id_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >&
      view_id_history() const;

  // repeated .event.AncestorIdHistoryItem auto_view_id_history = 7 [json_name = "autoViewIdHistory"];
  int auto_view_id_history_size() const;
  private:
  int _internal_auto_view_id_history_size() const;
  public:
  void clear_auto_view_id_history();
  ::event::AncestorIdHistoryItem* mutable_auto_view_id_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >*
      mutable_auto_view_id_history();
  private:
  const ::event::AncestorIdHistoryItem& _internal_auto_view_id_history(int index) const;
  ::event::AncestorIdHistoryItem* _internal_add_auto_view_id_history();
  public:
  const ::event::AncestorIdHistoryItem& auto_view_id_history(int index) const;
  ::event::AncestorIdHistoryItem* add_auto_view_id_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >&
      auto_view_id_history() const;

  // int32 total_log_user_ids_logged = 2 [json_name = "totalLogUserIdsLogged"];
  void clear_total_log_user_ids_logged();
  ::PROTOBUF_NAMESPACE_ID::int32 total_log_user_ids_logged() const;
  void set_total_log_user_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_log_user_ids_logged() const;
  void _internal_set_total_log_user_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_session_ids_logged = 4 [json_name = "totalSessionIdsLogged"];
  void clear_total_session_ids_logged();
  ::PROTOBUF_NAMESPACE_ID::int32 total_session_ids_logged() const;
  void set_total_session_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_session_ids_logged() const;
  void _internal_set_total_session_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_view_ids_logged = 6 [json_name = "totalViewIdsLogged"];
  void clear_total_view_ids_logged();
  ::PROTOBUF_NAMESPACE_ID::int32 total_view_ids_logged() const;
  void set_total_view_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_view_ids_logged() const;
  void _internal_set_total_view_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_auto_view_ids_logged = 8 [json_name = "totalAutoViewIdsLogged"];
  void clear_total_auto_view_ids_logged();
  ::PROTOBUF_NAMESPACE_ID::int32 total_auto_view_ids_logged() const;
  void set_total_auto_view_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_auto_view_ids_logged() const;
  void _internal_set_total_auto_view_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event.AncestorIdHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem > log_user_id_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem > session_id_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem > view_id_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem > auto_view_id_history_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_log_user_ids_logged_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_session_ids_logged_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_view_ids_logged_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_auto_view_ids_logged_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class MobileDiagnostics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.MobileDiagnostics) */ {
 public:
  inline MobileDiagnostics() : MobileDiagnostics(nullptr) {}
  virtual ~MobileDiagnostics();
  explicit constexpr MobileDiagnostics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MobileDiagnostics(const MobileDiagnostics& from);
  MobileDiagnostics(MobileDiagnostics&& from) noexcept
    : MobileDiagnostics() {
    *this = ::std::move(from);
  }

  inline MobileDiagnostics& operator=(const MobileDiagnostics& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobileDiagnostics& operator=(MobileDiagnostics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MobileDiagnostics& default_instance() {
    return *internal_default_instance();
  }
  static inline const MobileDiagnostics* internal_default_instance() {
    return reinterpret_cast<const MobileDiagnostics*>(
               &_MobileDiagnostics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MobileDiagnostics& a, MobileDiagnostics& b) {
    a.Swap(&b);
  }
  inline void Swap(MobileDiagnostics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MobileDiagnostics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MobileDiagnostics* New() const final {
    return CreateMaybeMessage<MobileDiagnostics>(nullptr);
  }

  MobileDiagnostics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MobileDiagnostics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MobileDiagnostics& from);
  void MergeFrom(const MobileDiagnostics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobileDiagnostics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.MobileDiagnostics";
  }
  protected:
  explicit MobileDiagnostics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdentifierFieldNumber = 1,
    kClientVersionFieldNumber = 2,
    kPromotedLibraryVersionFieldNumber = 3,
    kErrorHistoryFieldNumber = 7,
    kAncestorIdHistoryFieldNumber = 8,
    kBatchesAttemptedFieldNumber = 4,
    kBatchesSentSuccessfullyFieldNumber = 5,
    kBatchesWithErrorsFieldNumber = 6,
  };
  // string device_identifier = 1 [json_name = "deviceIdentifier"];
  void clear_device_identifier();
  const std::string& device_identifier() const;
  void set_device_identifier(const std::string& value);
  void set_device_identifier(std::string&& value);
  void set_device_identifier(const char* value);
  void set_device_identifier(const char* value, size_t size);
  std::string* mutable_device_identifier();
  std::string* release_device_identifier();
  void set_allocated_device_identifier(std::string* device_identifier);
  private:
  const std::string& _internal_device_identifier() const;
  void _internal_set_device_identifier(const std::string& value);
  std::string* _internal_mutable_device_identifier();
  public:

  // string client_version = 2 [json_name = "clientVersion", deprecated = true];
  PROTOBUF_DEPRECATED void clear_client_version();
  PROTOBUF_DEPRECATED const std::string& client_version() const;
  PROTOBUF_DEPRECATED void set_client_version(const std::string& value);
  PROTOBUF_DEPRECATED void set_client_version(std::string&& value);
  PROTOBUF_DEPRECATED void set_client_version(const char* value);
  PROTOBUF_DEPRECATED void set_client_version(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_client_version();
  PROTOBUF_DEPRECATED std::string* release_client_version();
  PROTOBUF_DEPRECATED void set_allocated_client_version(std::string* client_version);
  private:
  const std::string& _internal_client_version() const;
  void _internal_set_client_version(const std::string& value);
  std::string* _internal_mutable_client_version();
  public:

  // string promoted_library_version = 3 [json_name = "promotedLibraryVersion", deprecated = true];
  PROTOBUF_DEPRECATED void clear_promoted_library_version();
  PROTOBUF_DEPRECATED const std::string& promoted_library_version() const;
  PROTOBUF_DEPRECATED void set_promoted_library_version(const std::string& value);
  PROTOBUF_DEPRECATED void set_promoted_library_version(std::string&& value);
  PROTOBUF_DEPRECATED void set_promoted_library_version(const char* value);
  PROTOBUF_DEPRECATED void set_promoted_library_version(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_promoted_library_version();
  PROTOBUF_DEPRECATED std::string* release_promoted_library_version();
  PROTOBUF_DEPRECATED void set_allocated_promoted_library_version(std::string* promoted_library_version);
  private:
  const std::string& _internal_promoted_library_version() const;
  void _internal_set_promoted_library_version(const std::string& value);
  std::string* _internal_mutable_promoted_library_version();
  public:

  // .event.ErrorHistory error_history = 7 [json_name = "errorHistory"];
  bool has_error_history() const;
  private:
  bool _internal_has_error_history() const;
  public:
  void clear_error_history();
  const ::event::ErrorHistory& error_history() const;
  ::event::ErrorHistory* release_error_history();
  ::event::ErrorHistory* mutable_error_history();
  void set_allocated_error_history(::event::ErrorHistory* error_history);
  private:
  const ::event::ErrorHistory& _internal_error_history() const;
  ::event::ErrorHistory* _internal_mutable_error_history();
  public:
  void unsafe_arena_set_allocated_error_history(
      ::event::ErrorHistory* error_history);
  ::event::ErrorHistory* unsafe_arena_release_error_history();

  // .event.AncestorIdHistory ancestor_id_history = 8 [json_name = "ancestorIdHistory"];
  bool has_ancestor_id_history() const;
  private:
  bool _internal_has_ancestor_id_history() const;
  public:
  void clear_ancestor_id_history();
  const ::event::AncestorIdHistory& ancestor_id_history() const;
  ::event::AncestorIdHistory* release_ancestor_id_history();
  ::event::AncestorIdHistory* mutable_ancestor_id_history();
  void set_allocated_ancestor_id_history(::event::AncestorIdHistory* ancestor_id_history);
  private:
  const ::event::AncestorIdHistory& _internal_ancestor_id_history() const;
  ::event::AncestorIdHistory* _internal_mutable_ancestor_id_history();
  public:
  void unsafe_arena_set_allocated_ancestor_id_history(
      ::event::AncestorIdHistory* ancestor_id_history);
  ::event::AncestorIdHistory* unsafe_arena_release_ancestor_id_history();

  // int32 batches_attempted = 4 [json_name = "batchesAttempted"];
  void clear_batches_attempted();
  ::PROTOBUF_NAMESPACE_ID::int32 batches_attempted() const;
  void set_batches_attempted(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batches_attempted() const;
  void _internal_set_batches_attempted(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 batches_sent_successfully = 5 [json_name = "batchesSentSuccessfully"];
  void clear_batches_sent_successfully();
  ::PROTOBUF_NAMESPACE_ID::int32 batches_sent_successfully() const;
  void set_batches_sent_successfully(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batches_sent_successfully() const;
  void _internal_set_batches_sent_successfully(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 batches_with_errors = 6 [json_name = "batchesWithErrors"];
  void clear_batches_with_errors();
  ::PROTOBUF_NAMESPACE_ID::int32 batches_with_errors() const;
  void set_batches_with_errors(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batches_with_errors() const;
  void _internal_set_batches_with_errors(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:event.MobileDiagnostics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr promoted_library_version_;
  ::event::ErrorHistory* error_history_;
  ::event::AncestorIdHistory* ancestor_id_history_;
  ::PROTOBUF_NAMESPACE_ID::int32 batches_attempted_;
  ::PROTOBUF_NAMESPACE_ID::int32 batches_sent_successfully_;
  ::PROTOBUF_NAMESPACE_ID::int32 batches_with_errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class Diagnostics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.Diagnostics) */ {
 public:
  inline Diagnostics() : Diagnostics(nullptr) {}
  virtual ~Diagnostics();
  explicit constexpr Diagnostics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Diagnostics(const Diagnostics& from);
  Diagnostics(Diagnostics&& from) noexcept
    : Diagnostics() {
    *this = ::std::move(from);
  }

  inline Diagnostics& operator=(const Diagnostics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Diagnostics& operator=(Diagnostics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Diagnostics& default_instance() {
    return *internal_default_instance();
  }
  enum DiagnosticsMessageCase {
    kMobileDiagnostics = 5,
    DIAGNOSTICS_MESSAGE_NOT_SET = 0,
  };

  static inline const Diagnostics* internal_default_instance() {
    return reinterpret_cast<const Diagnostics*>(
               &_Diagnostics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Diagnostics& a, Diagnostics& b) {
    a.Swap(&b);
  }
  inline void Swap(Diagnostics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Diagnostics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Diagnostics* New() const final {
    return CreateMaybeMessage<Diagnostics>(nullptr);
  }

  Diagnostics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Diagnostics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Diagnostics& from);
  void MergeFrom(const Diagnostics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Diagnostics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.Diagnostics";
  }
  protected:
  explicit Diagnostics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 2,
    kTimingFieldNumber = 3,
    kClientInfoFieldNumber = 4,
    kPlatformIdFieldNumber = 1,
    kMobileDiagnosticsFieldNumber = 5,
  };
  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::common::UserInfo& user_info() const;
  ::common::UserInfo* release_user_info();
  ::common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::common::UserInfo* user_info);
  private:
  const ::common::UserInfo& _internal_user_info() const;
  ::common::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::common::UserInfo* user_info);
  ::common::UserInfo* unsafe_arena_release_user_info();

  // .common.Timing timing = 3 [json_name = "timing"];
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::common::Timing& timing() const;
  ::common::Timing* release_timing();
  ::common::Timing* mutable_timing();
  void set_allocated_timing(::common::Timing* timing);
  private:
  const ::common::Timing& _internal_timing() const;
  ::common::Timing* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::common::Timing* timing);
  ::common::Timing* unsafe_arena_release_timing();

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::common::ClientInfo& client_info() const;
  ::common::ClientInfo* release_client_info();
  ::common::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::common::ClientInfo* client_info);
  private:
  const ::common::ClientInfo& _internal_client_info() const;
  ::common::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::common::ClientInfo* client_info);
  ::common::ClientInfo* unsafe_arena_release_client_info();

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .event.MobileDiagnostics mobile_diagnostics = 5 [json_name = "mobileDiagnostics"];
  bool has_mobile_diagnostics() const;
  private:
  bool _internal_has_mobile_diagnostics() const;
  public:
  void clear_mobile_diagnostics();
  const ::event::MobileDiagnostics& mobile_diagnostics() const;
  ::event::MobileDiagnostics* release_mobile_diagnostics();
  ::event::MobileDiagnostics* mutable_mobile_diagnostics();
  void set_allocated_mobile_diagnostics(::event::MobileDiagnostics* mobile_diagnostics);
  private:
  const ::event::MobileDiagnostics& _internal_mobile_diagnostics() const;
  ::event::MobileDiagnostics* _internal_mutable_mobile_diagnostics();
  public:
  void unsafe_arena_set_allocated_mobile_diagnostics(
      ::event::MobileDiagnostics* mobile_diagnostics);
  ::event::MobileDiagnostics* unsafe_arena_release_mobile_diagnostics();

  void clear_diagnostics_message();
  DiagnosticsMessageCase diagnostics_message_case() const;
  // @@protoc_insertion_point(class_scope:event.Diagnostics)
 private:
  class _Internal;
  void set_has_mobile_diagnostics();

  inline bool has_diagnostics_message() const;
  inline void clear_has_diagnostics_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::UserInfo* user_info_;
  ::common::Timing* timing_;
  ::common::ClientInfo* client_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  union DiagnosticsMessageUnion {
    constexpr DiagnosticsMessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::event::MobileDiagnostics* mobile_diagnostics_;
  } diagnostics_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// -------------------------------------------------------------------

class LogRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event.LogRequest) */ {
 public:
  inline LogRequest() : LogRequest(nullptr) {}
  virtual ~LogRequest();
  explicit constexpr LogRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogRequest(const LogRequest& from);
  LogRequest(LogRequest&& from) noexcept
    : LogRequest() {
    *this = ::std::move(from);
  }

  inline LogRequest& operator=(const LogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRequest& operator=(LogRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogRequest* internal_default_instance() {
    return reinterpret_cast<const LogRequest*>(
               &_LogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(LogRequest& a, LogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogRequest* New() const final {
    return CreateMaybeMessage<LogRequest>(nullptr);
  }

  LogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogRequest& from);
  void MergeFrom(const LogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event.LogRequest";
  }
  protected:
  explicit LogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 7,
    kCohortMembershipFieldNumber = 8,
    kViewFieldNumber = 11,
    kRequestFieldNumber = 12,
    kInsertionFieldNumber = 13,
    kImpressionFieldNumber = 14,
    kActionFieldNumber = 15,
    kDeliveryLogFieldNumber = 18,
    kDiagnosticsFieldNumber = 23,
    kAutoViewFieldNumber = 25,
    kUserInfoFieldNumber = 2,
    kTimingFieldNumber = 3,
    kClientInfoFieldNumber = 4,
    kDeviceFieldNumber = 24,
    kPlatformIdFieldNumber = 1,
  };
  // repeated .event.User user = 7 [json_name = "user"];
  int user_size() const;
  private:
  int _internal_user_size() const;
  public:
  void clear_user();
  ::event::User* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::User >*
      mutable_user();
  private:
  const ::event::User& _internal_user(int index) const;
  ::event::User* _internal_add_user();
  public:
  const ::event::User& user(int index) const;
  ::event::User* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::User >&
      user() const;

  // repeated .event.CohortMembership cohort_membership = 8 [json_name = "cohortMembership"];
  int cohort_membership_size() const;
  private:
  int _internal_cohort_membership_size() const;
  public:
  void clear_cohort_membership();
  ::event::CohortMembership* mutable_cohort_membership(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::CohortMembership >*
      mutable_cohort_membership();
  private:
  const ::event::CohortMembership& _internal_cohort_membership(int index) const;
  ::event::CohortMembership* _internal_add_cohort_membership();
  public:
  const ::event::CohortMembership& cohort_membership(int index) const;
  ::event::CohortMembership* add_cohort_membership();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::CohortMembership >&
      cohort_membership() const;

  // repeated .event.View view = 11 [json_name = "view"];
  int view_size() const;
  private:
  int _internal_view_size() const;
  public:
  void clear_view();
  ::event::View* mutable_view(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::View >*
      mutable_view();
  private:
  const ::event::View& _internal_view(int index) const;
  ::event::View* _internal_add_view();
  public:
  const ::event::View& view(int index) const;
  ::event::View* add_view();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::View >&
      view() const;

  // repeated .delivery.Request request = 12 [json_name = "request"];
  int request_size() const;
  private:
  int _internal_request_size() const;
  public:
  void clear_request();
  ::delivery::Request* mutable_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Request >*
      mutable_request();
  private:
  const ::delivery::Request& _internal_request(int index) const;
  ::delivery::Request* _internal_add_request();
  public:
  const ::delivery::Request& request(int index) const;
  ::delivery::Request* add_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Request >&
      request() const;

  // repeated .delivery.Insertion insertion = 13 [json_name = "insertion"];
  int insertion_size() const;
  private:
  int _internal_insertion_size() const;
  public:
  void clear_insertion();
  ::delivery::Insertion* mutable_insertion(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion >*
      mutable_insertion();
  private:
  const ::delivery::Insertion& _internal_insertion(int index) const;
  ::delivery::Insertion* _internal_add_insertion();
  public:
  const ::delivery::Insertion& insertion(int index) const;
  ::delivery::Insertion* add_insertion();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion >&
      insertion() const;

  // repeated .event.Impression impression = 14 [json_name = "impression"];
  int impression_size() const;
  private:
  int _internal_impression_size() const;
  public:
  void clear_impression();
  ::event::Impression* mutable_impression(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Impression >*
      mutable_impression();
  private:
  const ::event::Impression& _internal_impression(int index) const;
  ::event::Impression* _internal_add_impression();
  public:
  const ::event::Impression& impression(int index) const;
  ::event::Impression* add_impression();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Impression >&
      impression() const;

  // repeated .event.Action action = 15 [json_name = "action"];
  int action_size() const;
  private:
  int _internal_action_size() const;
  public:
  void clear_action();
  ::event::Action* mutable_action(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Action >*
      mutable_action();
  private:
  const ::event::Action& _internal_action(int index) const;
  ::event::Action* _internal_add_action();
  public:
  const ::event::Action& action(int index) const;
  ::event::Action* add_action();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Action >&
      action() const;

  // repeated .delivery.DeliveryLog delivery_log = 18 [json_name = "deliveryLog"];
  int delivery_log_size() const;
  private:
  int _internal_delivery_log_size() const;
  public:
  void clear_delivery_log();
  ::delivery::DeliveryLog* mutable_delivery_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::DeliveryLog >*
      mutable_delivery_log();
  private:
  const ::delivery::DeliveryLog& _internal_delivery_log(int index) const;
  ::delivery::DeliveryLog* _internal_add_delivery_log();
  public:
  const ::delivery::DeliveryLog& delivery_log(int index) const;
  ::delivery::DeliveryLog* add_delivery_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::DeliveryLog >&
      delivery_log() const;

  // repeated .event.Diagnostics diagnostics = 23 [json_name = "diagnostics"];
  int diagnostics_size() const;
  private:
  int _internal_diagnostics_size() const;
  public:
  void clear_diagnostics();
  ::event::Diagnostics* mutable_diagnostics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Diagnostics >*
      mutable_diagnostics();
  private:
  const ::event::Diagnostics& _internal_diagnostics(int index) const;
  ::event::Diagnostics* _internal_add_diagnostics();
  public:
  const ::event::Diagnostics& diagnostics(int index) const;
  ::event::Diagnostics* add_diagnostics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Diagnostics >&
      diagnostics() const;

  // repeated .event.AutoView auto_view = 25 [json_name = "autoView"];
  int auto_view_size() const;
  private:
  int _internal_auto_view_size() const;
  public:
  void clear_auto_view();
  ::event::AutoView* mutable_auto_view(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AutoView >*
      mutable_auto_view();
  private:
  const ::event::AutoView& _internal_auto_view(int index) const;
  ::event::AutoView* _internal_add_auto_view();
  public:
  const ::event::AutoView& auto_view(int index) const;
  ::event::AutoView* add_auto_view();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AutoView >&
      auto_view() const;

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::common::UserInfo& user_info() const;
  ::common::UserInfo* release_user_info();
  ::common::UserInfo* mutable_user_info();
  void set_allocated_user_info(::common::UserInfo* user_info);
  private:
  const ::common::UserInfo& _internal_user_info() const;
  ::common::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::common::UserInfo* user_info);
  ::common::UserInfo* unsafe_arena_release_user_info();

  // .common.Timing timing = 3 [json_name = "timing"];
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::common::Timing& timing() const;
  ::common::Timing* release_timing();
  ::common::Timing* mutable_timing();
  void set_allocated_timing(::common::Timing* timing);
  private:
  const ::common::Timing& _internal_timing() const;
  ::common::Timing* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::common::Timing* timing);
  ::common::Timing* unsafe_arena_release_timing();

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::common::ClientInfo& client_info() const;
  ::common::ClientInfo* release_client_info();
  ::common::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::common::ClientInfo* client_info);
  private:
  const ::common::ClientInfo& _internal_client_info() const;
  ::common::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::common::ClientInfo* client_info);
  ::common::ClientInfo* unsafe_arena_release_client_info();

  // .common.Device device = 24 [json_name = "device"];
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::common::Device& device() const;
  ::common::Device* release_device();
  ::common::Device* mutable_device();
  void set_allocated_device(::common::Device* device);
  private:
  const ::common::Device& _internal_device() const;
  ::common::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::common::Device* device);
  ::common::Device* unsafe_arena_release_device();

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:event.LogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::User > user_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::CohortMembership > cohort_membership_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::View > view_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Request > request_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion > insertion_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Impression > impression_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Action > action_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::DeliveryLog > delivery_log_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Diagnostics > diagnostics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AutoView > auto_view_;
  ::common::UserInfo* user_info_;
  ::common::Timing* timing_;
  ::common::ClientInfo* client_info_;
  ::common::Device* device_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fevent_2fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JoinedIdentifiers

// uint64 platform_id = 1 [json_name = "platformId"];
inline void JoinedIdentifiers::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JoinedIdentifiers::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JoinedIdentifiers::platform_id() const {
  // @@protoc_insertion_point(field_get:event.JoinedIdentifiers.platform_id)
  return _internal_platform_id();
}
inline void JoinedIdentifiers::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void JoinedIdentifiers::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:event.JoinedIdentifiers.platform_id)
}

// string user_id = 2 [json_name = "userId"];
inline void JoinedIdentifiers::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& JoinedIdentifiers::user_id() const {
  // @@protoc_insertion_point(field_get:event.JoinedIdentifiers.user_id)
  return _internal_user_id();
}
inline void JoinedIdentifiers::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:event.JoinedIdentifiers.user_id)
}
inline std::string* JoinedIdentifiers::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:event.JoinedIdentifiers.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& JoinedIdentifiers::_internal_user_id() const {
  return user_id_.Get();
}
inline void JoinedIdentifiers::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinedIdentifiers::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.JoinedIdentifiers.user_id)
}
inline void JoinedIdentifiers::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.JoinedIdentifiers.user_id)
}
inline void JoinedIdentifiers::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.JoinedIdentifiers.user_id)
}
inline std::string* JoinedIdentifiers::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinedIdentifiers::release_user_id() {
  // @@protoc_insertion_point(field_release:event.JoinedIdentifiers.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinedIdentifiers::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.JoinedIdentifiers.user_id)
}

// string log_user_id = 3 [json_name = "logUserId"];
inline void JoinedIdentifiers::clear_log_user_id() {
  log_user_id_.ClearToEmpty();
}
inline const std::string& JoinedIdentifiers::log_user_id() const {
  // @@protoc_insertion_point(field_get:event.JoinedIdentifiers.log_user_id)
  return _internal_log_user_id();
}
inline void JoinedIdentifiers::set_log_user_id(const std::string& value) {
  _internal_set_log_user_id(value);
  // @@protoc_insertion_point(field_set:event.JoinedIdentifiers.log_user_id)
}
inline std::string* JoinedIdentifiers::mutable_log_user_id() {
  // @@protoc_insertion_point(field_mutable:event.JoinedIdentifiers.log_user_id)
  return _internal_mutable_log_user_id();
}
inline const std::string& JoinedIdentifiers::_internal_log_user_id() const {
  return log_user_id_.Get();
}
inline void JoinedIdentifiers::_internal_set_log_user_id(const std::string& value) {
  
  log_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinedIdentifiers::set_log_user_id(std::string&& value) {
  
  log_user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.JoinedIdentifiers.log_user_id)
}
inline void JoinedIdentifiers::set_log_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.JoinedIdentifiers.log_user_id)
}
inline void JoinedIdentifiers::set_log_user_id(const char* value,
    size_t size) {
  
  log_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.JoinedIdentifiers.log_user_id)
}
inline std::string* JoinedIdentifiers::_internal_mutable_log_user_id() {
  
  return log_user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinedIdentifiers::release_log_user_id() {
  // @@protoc_insertion_point(field_release:event.JoinedIdentifiers.log_user_id)
  return log_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinedIdentifiers::set_allocated_log_user_id(std::string* log_user_id) {
  if (log_user_id != nullptr) {
    
  } else {
    
  }
  log_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.JoinedIdentifiers.log_user_id)
}

// string anon_user_id = 10 [json_name = "anonUserId"];
inline void JoinedIdentifiers::clear_anon_user_id() {
  anon_user_id_.ClearToEmpty();
}
inline const std::string& JoinedIdentifiers::anon_user_id() const {
  // @@protoc_insertion_point(field_get:event.JoinedIdentifiers.anon_user_id)
  return _internal_anon_user_id();
}
inline void JoinedIdentifiers::set_anon_user_id(const std::string& value) {
  _internal_set_anon_user_id(value);
  // @@protoc_insertion_point(field_set:event.JoinedIdentifiers.anon_user_id)
}
inline std::string* JoinedIdentifiers::mutable_anon_user_id() {
  // @@protoc_insertion_point(field_mutable:event.JoinedIdentifiers.anon_user_id)
  return _internal_mutable_anon_user_id();
}
inline const std::string& JoinedIdentifiers::_internal_anon_user_id() const {
  return anon_user_id_.Get();
}
inline void JoinedIdentifiers::_internal_set_anon_user_id(const std::string& value) {
  
  anon_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinedIdentifiers::set_anon_user_id(std::string&& value) {
  
  anon_user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.JoinedIdentifiers.anon_user_id)
}
inline void JoinedIdentifiers::set_anon_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  anon_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.JoinedIdentifiers.anon_user_id)
}
inline void JoinedIdentifiers::set_anon_user_id(const char* value,
    size_t size) {
  
  anon_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.JoinedIdentifiers.anon_user_id)
}
inline std::string* JoinedIdentifiers::_internal_mutable_anon_user_id() {
  
  return anon_user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinedIdentifiers::release_anon_user_id() {
  // @@protoc_insertion_point(field_release:event.JoinedIdentifiers.anon_user_id)
  return anon_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinedIdentifiers::set_allocated_anon_user_id(std::string* anon_user_id) {
  if (anon_user_id != nullptr) {
    
  } else {
    
  }
  anon_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anon_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.JoinedIdentifiers.anon_user_id)
}

// string session_id = 4 [json_name = "sessionId"];
inline void JoinedIdentifiers::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& JoinedIdentifiers::session_id() const {
  // @@protoc_insertion_point(field_get:event.JoinedIdentifiers.session_id)
  return _internal_session_id();
}
inline void JoinedIdentifiers::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:event.JoinedIdentifiers.session_id)
}
inline std::string* JoinedIdentifiers::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:event.JoinedIdentifiers.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& JoinedIdentifiers::_internal_session_id() const {
  return session_id_.Get();
}
inline void JoinedIdentifiers::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinedIdentifiers::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.JoinedIdentifiers.session_id)
}
inline void JoinedIdentifiers::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.JoinedIdentifiers.session_id)
}
inline void JoinedIdentifiers::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.JoinedIdentifiers.session_id)
}
inline std::string* JoinedIdentifiers::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinedIdentifiers::release_session_id() {
  // @@protoc_insertion_point(field_release:event.JoinedIdentifiers.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinedIdentifiers::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.JoinedIdentifiers.session_id)
}

// string view_id = 5 [json_name = "viewId"];
inline void JoinedIdentifiers::clear_view_id() {
  view_id_.ClearToEmpty();
}
inline const std::string& JoinedIdentifiers::view_id() const {
  // @@protoc_insertion_point(field_get:event.JoinedIdentifiers.view_id)
  return _internal_view_id();
}
inline void JoinedIdentifiers::set_view_id(const std::string& value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:event.JoinedIdentifiers.view_id)
}
inline std::string* JoinedIdentifiers::mutable_view_id() {
  // @@protoc_insertion_point(field_mutable:event.JoinedIdentifiers.view_id)
  return _internal_mutable_view_id();
}
inline const std::string& JoinedIdentifiers::_internal_view_id() const {
  return view_id_.Get();
}
inline void JoinedIdentifiers::_internal_set_view_id(const std::string& value) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinedIdentifiers::set_view_id(std::string&& value) {
  
  view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.JoinedIdentifiers.view_id)
}
inline void JoinedIdentifiers::set_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.JoinedIdentifiers.view_id)
}
inline void JoinedIdentifiers::set_view_id(const char* value,
    size_t size) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.JoinedIdentifiers.view_id)
}
inline std::string* JoinedIdentifiers::_internal_mutable_view_id() {
  
  return view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinedIdentifiers::release_view_id() {
  // @@protoc_insertion_point(field_release:event.JoinedIdentifiers.view_id)
  return view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinedIdentifiers::set_allocated_view_id(std::string* view_id) {
  if (view_id != nullptr) {
    
  } else {
    
  }
  view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.JoinedIdentifiers.view_id)
}

// string auto_view_id = 9 [json_name = "autoViewId"];
inline void JoinedIdentifiers::clear_auto_view_id() {
  auto_view_id_.ClearToEmpty();
}
inline const std::string& JoinedIdentifiers::auto_view_id() const {
  // @@protoc_insertion_point(field_get:event.JoinedIdentifiers.auto_view_id)
  return _internal_auto_view_id();
}
inline void JoinedIdentifiers::set_auto_view_id(const std::string& value) {
  _internal_set_auto_view_id(value);
  // @@protoc_insertion_point(field_set:event.JoinedIdentifiers.auto_view_id)
}
inline std::string* JoinedIdentifiers::mutable_auto_view_id() {
  // @@protoc_insertion_point(field_mutable:event.JoinedIdentifiers.auto_view_id)
  return _internal_mutable_auto_view_id();
}
inline const std::string& JoinedIdentifiers::_internal_auto_view_id() const {
  return auto_view_id_.Get();
}
inline void JoinedIdentifiers::_internal_set_auto_view_id(const std::string& value) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinedIdentifiers::set_auto_view_id(std::string&& value) {
  
  auto_view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.JoinedIdentifiers.auto_view_id)
}
inline void JoinedIdentifiers::set_auto_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.JoinedIdentifiers.auto_view_id)
}
inline void JoinedIdentifiers::set_auto_view_id(const char* value,
    size_t size) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.JoinedIdentifiers.auto_view_id)
}
inline std::string* JoinedIdentifiers::_internal_mutable_auto_view_id() {
  
  return auto_view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinedIdentifiers::release_auto_view_id() {
  // @@protoc_insertion_point(field_release:event.JoinedIdentifiers.auto_view_id)
  return auto_view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinedIdentifiers::set_allocated_auto_view_id(std::string* auto_view_id) {
  if (auto_view_id != nullptr) {
    
  } else {
    
  }
  auto_view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.JoinedIdentifiers.auto_view_id)
}

// string request_id = 6 [json_name = "requestId"];
inline void JoinedIdentifiers::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& JoinedIdentifiers::request_id() const {
  // @@protoc_insertion_point(field_get:event.JoinedIdentifiers.request_id)
  return _internal_request_id();
}
inline void JoinedIdentifiers::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:event.JoinedIdentifiers.request_id)
}
inline std::string* JoinedIdentifiers::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:event.JoinedIdentifiers.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& JoinedIdentifiers::_internal_request_id() const {
  return request_id_.Get();
}
inline void JoinedIdentifiers::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinedIdentifiers::set_request_id(std::string&& value) {
  
  request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.JoinedIdentifiers.request_id)
}
inline void JoinedIdentifiers::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.JoinedIdentifiers.request_id)
}
inline void JoinedIdentifiers::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.JoinedIdentifiers.request_id)
}
inline std::string* JoinedIdentifiers::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinedIdentifiers::release_request_id() {
  // @@protoc_insertion_point(field_release:event.JoinedIdentifiers.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinedIdentifiers::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.JoinedIdentifiers.request_id)
}

// string insertion_id = 7 [json_name = "insertionId"];
inline void JoinedIdentifiers::clear_insertion_id() {
  insertion_id_.ClearToEmpty();
}
inline const std::string& JoinedIdentifiers::insertion_id() const {
  // @@protoc_insertion_point(field_get:event.JoinedIdentifiers.insertion_id)
  return _internal_insertion_id();
}
inline void JoinedIdentifiers::set_insertion_id(const std::string& value) {
  _internal_set_insertion_id(value);
  // @@protoc_insertion_point(field_set:event.JoinedIdentifiers.insertion_id)
}
inline std::string* JoinedIdentifiers::mutable_insertion_id() {
  // @@protoc_insertion_point(field_mutable:event.JoinedIdentifiers.insertion_id)
  return _internal_mutable_insertion_id();
}
inline const std::string& JoinedIdentifiers::_internal_insertion_id() const {
  return insertion_id_.Get();
}
inline void JoinedIdentifiers::_internal_set_insertion_id(const std::string& value) {
  
  insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinedIdentifiers::set_insertion_id(std::string&& value) {
  
  insertion_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.JoinedIdentifiers.insertion_id)
}
inline void JoinedIdentifiers::set_insertion_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.JoinedIdentifiers.insertion_id)
}
inline void JoinedIdentifiers::set_insertion_id(const char* value,
    size_t size) {
  
  insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.JoinedIdentifiers.insertion_id)
}
inline std::string* JoinedIdentifiers::_internal_mutable_insertion_id() {
  
  return insertion_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinedIdentifiers::release_insertion_id() {
  // @@protoc_insertion_point(field_release:event.JoinedIdentifiers.insertion_id)
  return insertion_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinedIdentifiers::set_allocated_insertion_id(std::string* insertion_id) {
  if (insertion_id != nullptr) {
    
  } else {
    
  }
  insertion_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insertion_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.JoinedIdentifiers.insertion_id)
}

// string impression_id = 8 [json_name = "impressionId"];
inline void JoinedIdentifiers::clear_impression_id() {
  impression_id_.ClearToEmpty();
}
inline const std::string& JoinedIdentifiers::impression_id() const {
  // @@protoc_insertion_point(field_get:event.JoinedIdentifiers.impression_id)
  return _internal_impression_id();
}
inline void JoinedIdentifiers::set_impression_id(const std::string& value) {
  _internal_set_impression_id(value);
  // @@protoc_insertion_point(field_set:event.JoinedIdentifiers.impression_id)
}
inline std::string* JoinedIdentifiers::mutable_impression_id() {
  // @@protoc_insertion_point(field_mutable:event.JoinedIdentifiers.impression_id)
  return _internal_mutable_impression_id();
}
inline const std::string& JoinedIdentifiers::_internal_impression_id() const {
  return impression_id_.Get();
}
inline void JoinedIdentifiers::_internal_set_impression_id(const std::string& value) {
  
  impression_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinedIdentifiers::set_impression_id(std::string&& value) {
  
  impression_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.JoinedIdentifiers.impression_id)
}
inline void JoinedIdentifiers::set_impression_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  impression_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.JoinedIdentifiers.impression_id)
}
inline void JoinedIdentifiers::set_impression_id(const char* value,
    size_t size) {
  
  impression_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.JoinedIdentifiers.impression_id)
}
inline std::string* JoinedIdentifiers::_internal_mutable_impression_id() {
  
  return impression_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinedIdentifiers::release_impression_id() {
  // @@protoc_insertion_point(field_release:event.JoinedIdentifiers.impression_id)
  return impression_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinedIdentifiers::set_allocated_impression_id(std::string* impression_id) {
  if (impression_id != nullptr) {
    
  } else {
    
  }
  impression_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), impression_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.JoinedIdentifiers.impression_id)
}

// -------------------------------------------------------------------

// IdentifierProvenances

// .event.IdentifierProvenance user_id_provenance = 1 [json_name = "userIdProvenance"];
inline void IdentifierProvenances::clear_user_id_provenance() {
  user_id_provenance_ = 0;
}
inline ::event::IdentifierProvenance IdentifierProvenances::_internal_user_id_provenance() const {
  return static_cast< ::event::IdentifierProvenance >(user_id_provenance_);
}
inline ::event::IdentifierProvenance IdentifierProvenances::user_id_provenance() const {
  // @@protoc_insertion_point(field_get:event.IdentifierProvenances.user_id_provenance)
  return _internal_user_id_provenance();
}
inline void IdentifierProvenances::_internal_set_user_id_provenance(::event::IdentifierProvenance value) {
  
  user_id_provenance_ = value;
}
inline void IdentifierProvenances::set_user_id_provenance(::event::IdentifierProvenance value) {
  _internal_set_user_id_provenance(value);
  // @@protoc_insertion_point(field_set:event.IdentifierProvenances.user_id_provenance)
}

// .event.IdentifierProvenance log_user_id_provenance = 9 [json_name = "logUserIdProvenance"];
inline void IdentifierProvenances::clear_log_user_id_provenance() {
  log_user_id_provenance_ = 0;
}
inline ::event::IdentifierProvenance IdentifierProvenances::_internal_log_user_id_provenance() const {
  return static_cast< ::event::IdentifierProvenance >(log_user_id_provenance_);
}
inline ::event::IdentifierProvenance IdentifierProvenances::log_user_id_provenance() const {
  // @@protoc_insertion_point(field_get:event.IdentifierProvenances.log_user_id_provenance)
  return _internal_log_user_id_provenance();
}
inline void IdentifierProvenances::_internal_set_log_user_id_provenance(::event::IdentifierProvenance value) {
  
  log_user_id_provenance_ = value;
}
inline void IdentifierProvenances::set_log_user_id_provenance(::event::IdentifierProvenance value) {
  _internal_set_log_user_id_provenance(value);
  // @@protoc_insertion_point(field_set:event.IdentifierProvenances.log_user_id_provenance)
}

// .event.IdentifierProvenance session_id_provenance = 2 [json_name = "sessionIdProvenance"];
inline void IdentifierProvenances::clear_session_id_provenance() {
  session_id_provenance_ = 0;
}
inline ::event::IdentifierProvenance IdentifierProvenances::_internal_session_id_provenance() const {
  return static_cast< ::event::IdentifierProvenance >(session_id_provenance_);
}
inline ::event::IdentifierProvenance IdentifierProvenances::session_id_provenance() const {
  // @@protoc_insertion_point(field_get:event.IdentifierProvenances.session_id_provenance)
  return _internal_session_id_provenance();
}
inline void IdentifierProvenances::_internal_set_session_id_provenance(::event::IdentifierProvenance value) {
  
  session_id_provenance_ = value;
}
inline void IdentifierProvenances::set_session_id_provenance(::event::IdentifierProvenance value) {
  _internal_set_session_id_provenance(value);
  // @@protoc_insertion_point(field_set:event.IdentifierProvenances.session_id_provenance)
}

// .event.IdentifierProvenance view_id_provenance = 3 [json_name = "viewIdProvenance"];
inline void IdentifierProvenances::clear_view_id_provenance() {
  view_id_provenance_ = 0;
}
inline ::event::IdentifierProvenance IdentifierProvenances::_internal_view_id_provenance() const {
  return static_cast< ::event::IdentifierProvenance >(view_id_provenance_);
}
inline ::event::IdentifierProvenance IdentifierProvenances::view_id_provenance() const {
  // @@protoc_insertion_point(field_get:event.IdentifierProvenances.view_id_provenance)
  return _internal_view_id_provenance();
}
inline void IdentifierProvenances::_internal_set_view_id_provenance(::event::IdentifierProvenance value) {
  
  view_id_provenance_ = value;
}
inline void IdentifierProvenances::set_view_id_provenance(::event::IdentifierProvenance value) {
  _internal_set_view_id_provenance(value);
  // @@protoc_insertion_point(field_set:event.IdentifierProvenances.view_id_provenance)
}

// .event.IdentifierProvenance auto_view_id_provenance = 8 [json_name = "autoViewIdProvenance"];
inline void IdentifierProvenances::clear_auto_view_id_provenance() {
  auto_view_id_provenance_ = 0;
}
inline ::event::IdentifierProvenance IdentifierProvenances::_internal_auto_view_id_provenance() const {
  return static_cast< ::event::IdentifierProvenance >(auto_view_id_provenance_);
}
inline ::event::IdentifierProvenance IdentifierProvenances::auto_view_id_provenance() const {
  // @@protoc_insertion_point(field_get:event.IdentifierProvenances.auto_view_id_provenance)
  return _internal_auto_view_id_provenance();
}
inline void IdentifierProvenances::_internal_set_auto_view_id_provenance(::event::IdentifierProvenance value) {
  
  auto_view_id_provenance_ = value;
}
inline void IdentifierProvenances::set_auto_view_id_provenance(::event::IdentifierProvenance value) {
  _internal_set_auto_view_id_provenance(value);
  // @@protoc_insertion_point(field_set:event.IdentifierProvenances.auto_view_id_provenance)
}

// .event.IdentifierProvenance insertion_id_provenance = 10 [json_name = "insertionIdProvenance"];
inline void IdentifierProvenances::clear_insertion_id_provenance() {
  insertion_id_provenance_ = 0;
}
inline ::event::IdentifierProvenance IdentifierProvenances::_internal_insertion_id_provenance() const {
  return static_cast< ::event::IdentifierProvenance >(insertion_id_provenance_);
}
inline ::event::IdentifierProvenance IdentifierProvenances::insertion_id_provenance() const {
  // @@protoc_insertion_point(field_get:event.IdentifierProvenances.insertion_id_provenance)
  return _internal_insertion_id_provenance();
}
inline void IdentifierProvenances::_internal_set_insertion_id_provenance(::event::IdentifierProvenance value) {
  
  insertion_id_provenance_ = value;
}
inline void IdentifierProvenances::set_insertion_id_provenance(::event::IdentifierProvenance value) {
  _internal_set_insertion_id_provenance(value);
  // @@protoc_insertion_point(field_set:event.IdentifierProvenances.insertion_id_provenance)
}

// .event.IdentifierProvenance impression_id_provenance = 4 [json_name = "impressionIdProvenance"];
inline void IdentifierProvenances::clear_impression_id_provenance() {
  impression_id_provenance_ = 0;
}
inline ::event::IdentifierProvenance IdentifierProvenances::_internal_impression_id_provenance() const {
  return static_cast< ::event::IdentifierProvenance >(impression_id_provenance_);
}
inline ::event::IdentifierProvenance IdentifierProvenances::impression_id_provenance() const {
  // @@protoc_insertion_point(field_get:event.IdentifierProvenances.impression_id_provenance)
  return _internal_impression_id_provenance();
}
inline void IdentifierProvenances::_internal_set_impression_id_provenance(::event::IdentifierProvenance value) {
  
  impression_id_provenance_ = value;
}
inline void IdentifierProvenances::set_impression_id_provenance(::event::IdentifierProvenance value) {
  _internal_set_impression_id_provenance(value);
  // @@protoc_insertion_point(field_set:event.IdentifierProvenances.impression_id_provenance)
}

// .event.IdentifierProvenance action_id_provenance = 5 [json_name = "actionIdProvenance"];
inline void IdentifierProvenances::clear_action_id_provenance() {
  action_id_provenance_ = 0;
}
inline ::event::IdentifierProvenance IdentifierProvenances::_internal_action_id_provenance() const {
  return static_cast< ::event::IdentifierProvenance >(action_id_provenance_);
}
inline ::event::IdentifierProvenance IdentifierProvenances::action_id_provenance() const {
  // @@protoc_insertion_point(field_get:event.IdentifierProvenances.action_id_provenance)
  return _internal_action_id_provenance();
}
inline void IdentifierProvenances::_internal_set_action_id_provenance(::event::IdentifierProvenance value) {
  
  action_id_provenance_ = value;
}
inline void IdentifierProvenances::set_action_id_provenance(::event::IdentifierProvenance value) {
  _internal_set_action_id_provenance(value);
  // @@protoc_insertion_point(field_set:event.IdentifierProvenances.action_id_provenance)
}

// .event.IdentifierProvenance content_id_provenance = 6 [json_name = "contentIdProvenance"];
inline void IdentifierProvenances::clear_content_id_provenance() {
  content_id_provenance_ = 0;
}
inline ::event::IdentifierProvenance IdentifierProvenances::_internal_content_id_provenance() const {
  return static_cast< ::event::IdentifierProvenance >(content_id_provenance_);
}
inline ::event::IdentifierProvenance IdentifierProvenances::content_id_provenance() const {
  // @@protoc_insertion_point(field_get:event.IdentifierProvenances.content_id_provenance)
  return _internal_content_id_provenance();
}
inline void IdentifierProvenances::_internal_set_content_id_provenance(::event::IdentifierProvenance value) {
  
  content_id_provenance_ = value;
}
inline void IdentifierProvenances::set_content_id_provenance(::event::IdentifierProvenance value) {
  _internal_set_content_id_provenance(value);
  // @@protoc_insertion_point(field_set:event.IdentifierProvenances.content_id_provenance)
}

// .event.IdentifierProvenance request_id_provenance = 7 [json_name = "requestIdProvenance"];
inline void IdentifierProvenances::clear_request_id_provenance() {
  request_id_provenance_ = 0;
}
inline ::event::IdentifierProvenance IdentifierProvenances::_internal_request_id_provenance() const {
  return static_cast< ::event::IdentifierProvenance >(request_id_provenance_);
}
inline ::event::IdentifierProvenance IdentifierProvenances::request_id_provenance() const {
  // @@protoc_insertion_point(field_get:event.IdentifierProvenances.request_id_provenance)
  return _internal_request_id_provenance();
}
inline void IdentifierProvenances::_internal_set_request_id_provenance(::event::IdentifierProvenance value) {
  
  request_id_provenance_ = value;
}
inline void IdentifierProvenances::set_request_id_provenance(::event::IdentifierProvenance value) {
  _internal_set_request_id_provenance(value);
  // @@protoc_insertion_point(field_set:event.IdentifierProvenances.request_id_provenance)
}

// -------------------------------------------------------------------

// User

// uint64 platform_id = 1 [json_name = "platformId"];
inline void User::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::platform_id() const {
  // @@protoc_insertion_point(field_get:event.User.platform_id)
  return _internal_platform_id();
}
inline void User::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void User::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:event.User.platform_id)
}

// .common.UserInfo user_info = 2 [json_name = "userInfo"];
inline bool User::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool User::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::common::UserInfo& User::_internal_user_info() const {
  const ::common::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UserInfo&>(
      ::common::_UserInfo_default_instance_);
}
inline const ::common::UserInfo& User::user_info() const {
  // @@protoc_insertion_point(field_get:event.User.user_info)
  return _internal_user_info();
}
inline void User::unsafe_arena_set_allocated_user_info(
    ::common::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.User.user_info)
}
inline ::common::UserInfo* User::release_user_info() {
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::UserInfo* User::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:event.User.user_info)
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::common::UserInfo* User::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::common::UserInfo* User::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:event.User.user_info)
  return _internal_mutable_user_info();
}
inline void User::set_allocated_user_info(::common::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:event.User.user_info)
}

// .common.Timing timing = 3 [json_name = "timing"];
inline bool User::_internal_has_timing() const {
  return this != internal_default_instance() && timing_ != nullptr;
}
inline bool User::has_timing() const {
  return _internal_has_timing();
}
inline const ::common::Timing& User::_internal_timing() const {
  const ::common::Timing* p = timing_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Timing&>(
      ::common::_Timing_default_instance_);
}
inline const ::common::Timing& User::timing() const {
  // @@protoc_insertion_point(field_get:event.User.timing)
  return _internal_timing();
}
inline void User::unsafe_arena_set_allocated_timing(
    ::common::Timing* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.User.timing)
}
inline ::common::Timing* User::release_timing() {
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Timing* User::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:event.User.timing)
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::common::Timing* User::_internal_mutable_timing() {
  
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Timing>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::common::Timing* User::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:event.User.timing)
  return _internal_mutable_timing();
}
inline void User::set_allocated_timing(::common::Timing* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing)->GetArena();
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:event.User.timing)
}

// .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
inline bool User::_internal_has_client_info() const {
  return this != internal_default_instance() && client_info_ != nullptr;
}
inline bool User::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::common::ClientInfo& User::_internal_client_info() const {
  const ::common::ClientInfo* p = client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientInfo&>(
      ::common::_ClientInfo_default_instance_);
}
inline const ::common::ClientInfo& User::client_info() const {
  // @@protoc_insertion_point(field_get:event.User.client_info)
  return _internal_client_info();
}
inline void User::unsafe_arena_set_allocated_client_info(
    ::common::ClientInfo* client_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.User.client_info)
}
inline ::common::ClientInfo* User::release_client_info() {
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ClientInfo* User::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:event.User.client_info)
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::common::ClientInfo* User::_internal_mutable_client_info() {
  
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientInfo>(GetArena());
    client_info_ = p;
  }
  return client_info_;
}
inline ::common::ClientInfo* User::mutable_client_info() {
  // @@protoc_insertion_point(field_mutable:event.User.client_info)
  return _internal_mutable_client_info();
}
inline void User::set_allocated_client_info(::common::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info)->GetArena();
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:event.User.client_info)
}

// .event.IdentifierProvenances id_provenances = 7 [json_name = "idProvenances"];
inline bool User::_internal_has_id_provenances() const {
  return this != internal_default_instance() && id_provenances_ != nullptr;
}
inline bool User::has_id_provenances() const {
  return _internal_has_id_provenances();
}
inline void User::clear_id_provenances() {
  if (GetArena() == nullptr && id_provenances_ != nullptr) {
    delete id_provenances_;
  }
  id_provenances_ = nullptr;
}
inline const ::event::IdentifierProvenances& User::_internal_id_provenances() const {
  const ::event::IdentifierProvenances* p = id_provenances_;
  return p != nullptr ? *p : reinterpret_cast<const ::event::IdentifierProvenances&>(
      ::event::_IdentifierProvenances_default_instance_);
}
inline const ::event::IdentifierProvenances& User::id_provenances() const {
  // @@protoc_insertion_point(field_get:event.User.id_provenances)
  return _internal_id_provenances();
}
inline void User::unsafe_arena_set_allocated_id_provenances(
    ::event::IdentifierProvenances* id_provenances) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_provenances_);
  }
  id_provenances_ = id_provenances;
  if (id_provenances) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.User.id_provenances)
}
inline ::event::IdentifierProvenances* User::release_id_provenances() {
  
  ::event::IdentifierProvenances* temp = id_provenances_;
  id_provenances_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event::IdentifierProvenances* User::unsafe_arena_release_id_provenances() {
  // @@protoc_insertion_point(field_release:event.User.id_provenances)
  
  ::event::IdentifierProvenances* temp = id_provenances_;
  id_provenances_ = nullptr;
  return temp;
}
inline ::event::IdentifierProvenances* User::_internal_mutable_id_provenances() {
  
  if (id_provenances_ == nullptr) {
    auto* p = CreateMaybeMessage<::event::IdentifierProvenances>(GetArena());
    id_provenances_ = p;
  }
  return id_provenances_;
}
inline ::event::IdentifierProvenances* User::mutable_id_provenances() {
  // @@protoc_insertion_point(field_mutable:event.User.id_provenances)
  return _internal_mutable_id_provenances();
}
inline void User::set_allocated_id_provenances(::event::IdentifierProvenances* id_provenances) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_provenances_;
  }
  if (id_provenances) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id_provenances);
    if (message_arena != submessage_arena) {
      id_provenances = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_provenances, submessage_arena);
    }
    
  } else {
    
  }
  id_provenances_ = id_provenances;
  // @@protoc_insertion_point(field_set_allocated:event.User.id_provenances)
}

// .common.Properties properties = 6 [json_name = "properties"];
inline bool User::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool User::has_properties() const {
  return _internal_has_properties();
}
inline const ::common::Properties& User::_internal_properties() const {
  const ::common::Properties* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Properties&>(
      ::common::_Properties_default_instance_);
}
inline const ::common::Properties& User::properties() const {
  // @@protoc_insertion_point(field_get:event.User.properties)
  return _internal_properties();
}
inline void User::unsafe_arena_set_allocated_properties(
    ::common::Properties* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.User.properties)
}
inline ::common::Properties* User::release_properties() {
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Properties* User::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:event.User.properties)
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::common::Properties* User::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Properties>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline ::common::Properties* User::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:event.User.properties)
  return _internal_mutable_properties();
}
inline void User::set_allocated_properties(::common::Properties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties)->GetArena();
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:event.User.properties)
}

// -------------------------------------------------------------------

// CohortMembership

// uint64 platform_id = 1 [json_name = "platformId"];
inline void CohortMembership::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CohortMembership::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CohortMembership::platform_id() const {
  // @@protoc_insertion_point(field_get:event.CohortMembership.platform_id)
  return _internal_platform_id();
}
inline void CohortMembership::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void CohortMembership::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:event.CohortMembership.platform_id)
}

// .common.UserInfo user_info = 2 [json_name = "userInfo"];
inline bool CohortMembership::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool CohortMembership::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::common::UserInfo& CohortMembership::_internal_user_info() const {
  const ::common::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UserInfo&>(
      ::common::_UserInfo_default_instance_);
}
inline const ::common::UserInfo& CohortMembership::user_info() const {
  // @@protoc_insertion_point(field_get:event.CohortMembership.user_info)
  return _internal_user_info();
}
inline void CohortMembership::unsafe_arena_set_allocated_user_info(
    ::common::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.CohortMembership.user_info)
}
inline ::common::UserInfo* CohortMembership::release_user_info() {
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::UserInfo* CohortMembership::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:event.CohortMembership.user_info)
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::common::UserInfo* CohortMembership::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::common::UserInfo* CohortMembership::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:event.CohortMembership.user_info)
  return _internal_mutable_user_info();
}
inline void CohortMembership::set_allocated_user_info(::common::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:event.CohortMembership.user_info)
}

// .common.Timing timing = 3 [json_name = "timing"];
inline bool CohortMembership::_internal_has_timing() const {
  return this != internal_default_instance() && timing_ != nullptr;
}
inline bool CohortMembership::has_timing() const {
  return _internal_has_timing();
}
inline const ::common::Timing& CohortMembership::_internal_timing() const {
  const ::common::Timing* p = timing_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Timing&>(
      ::common::_Timing_default_instance_);
}
inline const ::common::Timing& CohortMembership::timing() const {
  // @@protoc_insertion_point(field_get:event.CohortMembership.timing)
  return _internal_timing();
}
inline void CohortMembership::unsafe_arena_set_allocated_timing(
    ::common::Timing* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.CohortMembership.timing)
}
inline ::common::Timing* CohortMembership::release_timing() {
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Timing* CohortMembership::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:event.CohortMembership.timing)
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::common::Timing* CohortMembership::_internal_mutable_timing() {
  
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Timing>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::common::Timing* CohortMembership::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:event.CohortMembership.timing)
  return _internal_mutable_timing();
}
inline void CohortMembership::set_allocated_timing(::common::Timing* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing)->GetArena();
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:event.CohortMembership.timing)
}

// .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
inline bool CohortMembership::_internal_has_client_info() const {
  return this != internal_default_instance() && client_info_ != nullptr;
}
inline bool CohortMembership::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::common::ClientInfo& CohortMembership::_internal_client_info() const {
  const ::common::ClientInfo* p = client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientInfo&>(
      ::common::_ClientInfo_default_instance_);
}
inline const ::common::ClientInfo& CohortMembership::client_info() const {
  // @@protoc_insertion_point(field_get:event.CohortMembership.client_info)
  return _internal_client_info();
}
inline void CohortMembership::unsafe_arena_set_allocated_client_info(
    ::common::ClientInfo* client_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.CohortMembership.client_info)
}
inline ::common::ClientInfo* CohortMembership::release_client_info() {
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ClientInfo* CohortMembership::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:event.CohortMembership.client_info)
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::common::ClientInfo* CohortMembership::_internal_mutable_client_info() {
  
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientInfo>(GetArena());
    client_info_ = p;
  }
  return client_info_;
}
inline ::common::ClientInfo* CohortMembership::mutable_client_info() {
  // @@protoc_insertion_point(field_mutable:event.CohortMembership.client_info)
  return _internal_mutable_client_info();
}
inline void CohortMembership::set_allocated_client_info(::common::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info)->GetArena();
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:event.CohortMembership.client_info)
}

// string membership_id = 6 [json_name = "membershipId"];
inline void CohortMembership::clear_membership_id() {
  membership_id_.ClearToEmpty();
}
inline const std::string& CohortMembership::membership_id() const {
  // @@protoc_insertion_point(field_get:event.CohortMembership.membership_id)
  return _internal_membership_id();
}
inline void CohortMembership::set_membership_id(const std::string& value) {
  _internal_set_membership_id(value);
  // @@protoc_insertion_point(field_set:event.CohortMembership.membership_id)
}
inline std::string* CohortMembership::mutable_membership_id() {
  // @@protoc_insertion_point(field_mutable:event.CohortMembership.membership_id)
  return _internal_mutable_membership_id();
}
inline const std::string& CohortMembership::_internal_membership_id() const {
  return membership_id_.Get();
}
inline void CohortMembership::_internal_set_membership_id(const std::string& value) {
  
  membership_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CohortMembership::set_membership_id(std::string&& value) {
  
  membership_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.CohortMembership.membership_id)
}
inline void CohortMembership::set_membership_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  membership_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.CohortMembership.membership_id)
}
inline void CohortMembership::set_membership_id(const char* value,
    size_t size) {
  
  membership_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.CohortMembership.membership_id)
}
inline std::string* CohortMembership::_internal_mutable_membership_id() {
  
  return membership_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CohortMembership::release_membership_id() {
  // @@protoc_insertion_point(field_release:event.CohortMembership.membership_id)
  return membership_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CohortMembership::set_allocated_membership_id(std::string* membership_id) {
  if (membership_id != nullptr) {
    
  } else {
    
  }
  membership_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), membership_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.CohortMembership.membership_id)
}

// string cohort_id = 8 [json_name = "cohortId"];
inline void CohortMembership::clear_cohort_id() {
  cohort_id_.ClearToEmpty();
}
inline const std::string& CohortMembership::cohort_id() const {
  // @@protoc_insertion_point(field_get:event.CohortMembership.cohort_id)
  return _internal_cohort_id();
}
inline void CohortMembership::set_cohort_id(const std::string& value) {
  _internal_set_cohort_id(value);
  // @@protoc_insertion_point(field_set:event.CohortMembership.cohort_id)
}
inline std::string* CohortMembership::mutable_cohort_id() {
  // @@protoc_insertion_point(field_mutable:event.CohortMembership.cohort_id)
  return _internal_mutable_cohort_id();
}
inline const std::string& CohortMembership::_internal_cohort_id() const {
  return cohort_id_.Get();
}
inline void CohortMembership::_internal_set_cohort_id(const std::string& value) {
  
  cohort_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CohortMembership::set_cohort_id(std::string&& value) {
  
  cohort_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.CohortMembership.cohort_id)
}
inline void CohortMembership::set_cohort_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cohort_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.CohortMembership.cohort_id)
}
inline void CohortMembership::set_cohort_id(const char* value,
    size_t size) {
  
  cohort_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.CohortMembership.cohort_id)
}
inline std::string* CohortMembership::_internal_mutable_cohort_id() {
  
  return cohort_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CohortMembership::release_cohort_id() {
  // @@protoc_insertion_point(field_release:event.CohortMembership.cohort_id)
  return cohort_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CohortMembership::set_allocated_cohort_id(std::string* cohort_id) {
  if (cohort_id != nullptr) {
    
  } else {
    
  }
  cohort_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cohort_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.CohortMembership.cohort_id)
}

// .event.CohortArm arm = 9 [json_name = "arm"];
inline void CohortMembership::clear_arm() {
  arm_ = 0;
}
inline ::event::CohortArm CohortMembership::_internal_arm() const {
  return static_cast< ::event::CohortArm >(arm_);
}
inline ::event::CohortArm CohortMembership::arm() const {
  // @@protoc_insertion_point(field_get:event.CohortMembership.arm)
  return _internal_arm();
}
inline void CohortMembership::_internal_set_arm(::event::CohortArm value) {
  
  arm_ = value;
}
inline void CohortMembership::set_arm(::event::CohortArm value) {
  _internal_set_arm(value);
  // @@protoc_insertion_point(field_set:event.CohortMembership.arm)
}

// .common.Properties properties = 10 [json_name = "properties"];
inline bool CohortMembership::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool CohortMembership::has_properties() const {
  return _internal_has_properties();
}
inline const ::common::Properties& CohortMembership::_internal_properties() const {
  const ::common::Properties* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Properties&>(
      ::common::_Properties_default_instance_);
}
inline const ::common::Properties& CohortMembership::properties() const {
  // @@protoc_insertion_point(field_get:event.CohortMembership.properties)
  return _internal_properties();
}
inline void CohortMembership::unsafe_arena_set_allocated_properties(
    ::common::Properties* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.CohortMembership.properties)
}
inline ::common::Properties* CohortMembership::release_properties() {
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Properties* CohortMembership::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:event.CohortMembership.properties)
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::common::Properties* CohortMembership::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Properties>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline ::common::Properties* CohortMembership::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:event.CohortMembership.properties)
  return _internal_mutable_properties();
}
inline void CohortMembership::set_allocated_properties(::common::Properties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties)->GetArena();
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:event.CohortMembership.properties)
}

// -------------------------------------------------------------------

// WebPageView

// string url = 1 [json_name = "url"];
inline void WebPageView::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& WebPageView::url() const {
  // @@protoc_insertion_point(field_get:event.WebPageView.url)
  return _internal_url();
}
inline void WebPageView::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:event.WebPageView.url)
}
inline std::string* WebPageView::mutable_url() {
  // @@protoc_insertion_point(field_mutable:event.WebPageView.url)
  return _internal_mutable_url();
}
inline const std::string& WebPageView::_internal_url() const {
  return url_.Get();
}
inline void WebPageView::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WebPageView::set_url(std::string&& value) {
  
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.WebPageView.url)
}
inline void WebPageView::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.WebPageView.url)
}
inline void WebPageView::set_url(const char* value,
    size_t size) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.WebPageView.url)
}
inline std::string* WebPageView::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WebPageView::release_url() {
  // @@protoc_insertion_point(field_release:event.WebPageView.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WebPageView::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.WebPageView.url)
}

// string referrer = 3 [json_name = "referrer"];
inline void WebPageView::clear_referrer() {
  referrer_.ClearToEmpty();
}
inline const std::string& WebPageView::referrer() const {
  // @@protoc_insertion_point(field_get:event.WebPageView.referrer)
  return _internal_referrer();
}
inline void WebPageView::set_referrer(const std::string& value) {
  _internal_set_referrer(value);
  // @@protoc_insertion_point(field_set:event.WebPageView.referrer)
}
inline std::string* WebPageView::mutable_referrer() {
  // @@protoc_insertion_point(field_mutable:event.WebPageView.referrer)
  return _internal_mutable_referrer();
}
inline const std::string& WebPageView::_internal_referrer() const {
  return referrer_.Get();
}
inline void WebPageView::_internal_set_referrer(const std::string& value) {
  
  referrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WebPageView::set_referrer(std::string&& value) {
  
  referrer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.WebPageView.referrer)
}
inline void WebPageView::set_referrer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  referrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.WebPageView.referrer)
}
inline void WebPageView::set_referrer(const char* value,
    size_t size) {
  
  referrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.WebPageView.referrer)
}
inline std::string* WebPageView::_internal_mutable_referrer() {
  
  return referrer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WebPageView::release_referrer() {
  // @@protoc_insertion_point(field_release:event.WebPageView.referrer)
  return referrer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WebPageView::set_allocated_referrer(std::string* referrer) {
  if (referrer != nullptr) {
    
  } else {
    
  }
  referrer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.WebPageView.referrer)
}

// .common.Size document_size = 4 [json_name = "documentSize"];
inline bool WebPageView::_internal_has_document_size() const {
  return this != internal_default_instance() && document_size_ != nullptr;
}
inline bool WebPageView::has_document_size() const {
  return _internal_has_document_size();
}
inline const ::common::Size& WebPageView::_internal_document_size() const {
  const ::common::Size* p = document_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Size&>(
      ::common::_Size_default_instance_);
}
inline const ::common::Size& WebPageView::document_size() const {
  // @@protoc_insertion_point(field_get:event.WebPageView.document_size)
  return _internal_document_size();
}
inline void WebPageView::unsafe_arena_set_allocated_document_size(
    ::common::Size* document_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_size_);
  }
  document_size_ = document_size;
  if (document_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.WebPageView.document_size)
}
inline ::common::Size* WebPageView::release_document_size() {
  
  ::common::Size* temp = document_size_;
  document_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Size* WebPageView::unsafe_arena_release_document_size() {
  // @@protoc_insertion_point(field_release:event.WebPageView.document_size)
  
  ::common::Size* temp = document_size_;
  document_size_ = nullptr;
  return temp;
}
inline ::common::Size* WebPageView::_internal_mutable_document_size() {
  
  if (document_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Size>(GetArena());
    document_size_ = p;
  }
  return document_size_;
}
inline ::common::Size* WebPageView::mutable_document_size() {
  // @@protoc_insertion_point(field_mutable:event.WebPageView.document_size)
  return _internal_mutable_document_size();
}
inline void WebPageView::set_allocated_document_size(::common::Size* document_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_size_);
  }
  if (document_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_size)->GetArena();
    if (message_arena != submessage_arena) {
      document_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_size, submessage_arena);
    }
    
  } else {
    
  }
  document_size_ = document_size;
  // @@protoc_insertion_point(field_set_allocated:event.WebPageView.document_size)
}

// -------------------------------------------------------------------

// AppScreenView

// -------------------------------------------------------------------

// View

// uint64 platform_id = 1 [json_name = "platformId"];
inline void View::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 View::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 View::platform_id() const {
  // @@protoc_insertion_point(field_get:event.View.platform_id)
  return _internal_platform_id();
}
inline void View::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void View::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:event.View.platform_id)
}

// .common.UserInfo user_info = 2 [json_name = "userInfo"];
inline bool View::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool View::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::common::UserInfo& View::_internal_user_info() const {
  const ::common::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UserInfo&>(
      ::common::_UserInfo_default_instance_);
}
inline const ::common::UserInfo& View::user_info() const {
  // @@protoc_insertion_point(field_get:event.View.user_info)
  return _internal_user_info();
}
inline void View::unsafe_arena_set_allocated_user_info(
    ::common::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.View.user_info)
}
inline ::common::UserInfo* View::release_user_info() {
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::UserInfo* View::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:event.View.user_info)
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::common::UserInfo* View::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::common::UserInfo* View::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:event.View.user_info)
  return _internal_mutable_user_info();
}
inline void View::set_allocated_user_info(::common::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:event.View.user_info)
}

// .common.Timing timing = 3 [json_name = "timing"];
inline bool View::_internal_has_timing() const {
  return this != internal_default_instance() && timing_ != nullptr;
}
inline bool View::has_timing() const {
  return _internal_has_timing();
}
inline const ::common::Timing& View::_internal_timing() const {
  const ::common::Timing* p = timing_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Timing&>(
      ::common::_Timing_default_instance_);
}
inline const ::common::Timing& View::timing() const {
  // @@protoc_insertion_point(field_get:event.View.timing)
  return _internal_timing();
}
inline void View::unsafe_arena_set_allocated_timing(
    ::common::Timing* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.View.timing)
}
inline ::common::Timing* View::release_timing() {
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Timing* View::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:event.View.timing)
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::common::Timing* View::_internal_mutable_timing() {
  
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Timing>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::common::Timing* View::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:event.View.timing)
  return _internal_mutable_timing();
}
inline void View::set_allocated_timing(::common::Timing* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing)->GetArena();
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:event.View.timing)
}

// .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
inline bool View::_internal_has_client_info() const {
  return this != internal_default_instance() && client_info_ != nullptr;
}
inline bool View::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::common::ClientInfo& View::_internal_client_info() const {
  const ::common::ClientInfo* p = client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientInfo&>(
      ::common::_ClientInfo_default_instance_);
}
inline const ::common::ClientInfo& View::client_info() const {
  // @@protoc_insertion_point(field_get:event.View.client_info)
  return _internal_client_info();
}
inline void View::unsafe_arena_set_allocated_client_info(
    ::common::ClientInfo* client_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.View.client_info)
}
inline ::common::ClientInfo* View::release_client_info() {
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ClientInfo* View::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:event.View.client_info)
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::common::ClientInfo* View::_internal_mutable_client_info() {
  
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientInfo>(GetArena());
    client_info_ = p;
  }
  return client_info_;
}
inline ::common::ClientInfo* View::mutable_client_info() {
  // @@protoc_insertion_point(field_mutable:event.View.client_info)
  return _internal_mutable_client_info();
}
inline void View::set_allocated_client_info(::common::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info)->GetArena();
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:event.View.client_info)
}

// string view_id = 6 [json_name = "viewId"];
inline void View::clear_view_id() {
  view_id_.ClearToEmpty();
}
inline const std::string& View::view_id() const {
  // @@protoc_insertion_point(field_get:event.View.view_id)
  return _internal_view_id();
}
inline void View::set_view_id(const std::string& value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:event.View.view_id)
}
inline std::string* View::mutable_view_id() {
  // @@protoc_insertion_point(field_mutable:event.View.view_id)
  return _internal_mutable_view_id();
}
inline const std::string& View::_internal_view_id() const {
  return view_id_.Get();
}
inline void View::_internal_set_view_id(const std::string& value) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void View::set_view_id(std::string&& value) {
  
  view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.View.view_id)
}
inline void View::set_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.View.view_id)
}
inline void View::set_view_id(const char* value,
    size_t size) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.View.view_id)
}
inline std::string* View::_internal_mutable_view_id() {
  
  return view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* View::release_view_id() {
  // @@protoc_insertion_point(field_release:event.View.view_id)
  return view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void View::set_allocated_view_id(std::string* view_id) {
  if (view_id != nullptr) {
    
  } else {
    
  }
  view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.View.view_id)
}

// string auto_view_id = 17 [json_name = "autoViewId"];
inline void View::clear_auto_view_id() {
  auto_view_id_.ClearToEmpty();
}
inline const std::string& View::auto_view_id() const {
  // @@protoc_insertion_point(field_get:event.View.auto_view_id)
  return _internal_auto_view_id();
}
inline void View::set_auto_view_id(const std::string& value) {
  _internal_set_auto_view_id(value);
  // @@protoc_insertion_point(field_set:event.View.auto_view_id)
}
inline std::string* View::mutable_auto_view_id() {
  // @@protoc_insertion_point(field_mutable:event.View.auto_view_id)
  return _internal_mutable_auto_view_id();
}
inline const std::string& View::_internal_auto_view_id() const {
  return auto_view_id_.Get();
}
inline void View::_internal_set_auto_view_id(const std::string& value) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void View::set_auto_view_id(std::string&& value) {
  
  auto_view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.View.auto_view_id)
}
inline void View::set_auto_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.View.auto_view_id)
}
inline void View::set_auto_view_id(const char* value,
    size_t size) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.View.auto_view_id)
}
inline std::string* View::_internal_mutable_auto_view_id() {
  
  return auto_view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* View::release_auto_view_id() {
  // @@protoc_insertion_point(field_release:event.View.auto_view_id)
  return auto_view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void View::set_allocated_auto_view_id(std::string* auto_view_id) {
  if (auto_view_id != nullptr) {
    
  } else {
    
  }
  auto_view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.View.auto_view_id)
}

// string session_id = 7 [json_name = "sessionId"];
inline void View::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& View::session_id() const {
  // @@protoc_insertion_point(field_get:event.View.session_id)
  return _internal_session_id();
}
inline void View::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:event.View.session_id)
}
inline std::string* View::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:event.View.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& View::_internal_session_id() const {
  return session_id_.Get();
}
inline void View::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void View::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.View.session_id)
}
inline void View::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.View.session_id)
}
inline void View::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.View.session_id)
}
inline std::string* View::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* View::release_session_id() {
  // @@protoc_insertion_point(field_release:event.View.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void View::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.View.session_id)
}

// string content_id = 19 [json_name = "contentId"];
inline void View::clear_content_id() {
  content_id_.ClearToEmpty();
}
inline const std::string& View::content_id() const {
  // @@protoc_insertion_point(field_get:event.View.content_id)
  return _internal_content_id();
}
inline void View::set_content_id(const std::string& value) {
  _internal_set_content_id(value);
  // @@protoc_insertion_point(field_set:event.View.content_id)
}
inline std::string* View::mutable_content_id() {
  // @@protoc_insertion_point(field_mutable:event.View.content_id)
  return _internal_mutable_content_id();
}
inline const std::string& View::_internal_content_id() const {
  return content_id_.Get();
}
inline void View::_internal_set_content_id(const std::string& value) {
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void View::set_content_id(std::string&& value) {
  
  content_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.View.content_id)
}
inline void View::set_content_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.View.content_id)
}
inline void View::set_content_id(const char* value,
    size_t size) {
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.View.content_id)
}
inline std::string* View::_internal_mutable_content_id() {
  
  return content_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* View::release_content_id() {
  // @@protoc_insertion_point(field_release:event.View.content_id)
  return content_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void View::set_allocated_content_id(std::string* content_id) {
  if (content_id != nullptr) {
    
  } else {
    
  }
  content_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.View.content_id)
}

// string name = 8 [json_name = "name"];
inline void View::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& View::name() const {
  // @@protoc_insertion_point(field_get:event.View.name)
  return _internal_name();
}
inline void View::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event.View.name)
}
inline std::string* View::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event.View.name)
  return _internal_mutable_name();
}
inline const std::string& View::_internal_name() const {
  return name_.Get();
}
inline void View::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void View::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.View.name)
}
inline void View::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.View.name)
}
inline void View::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.View.name)
}
inline std::string* View::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* View::release_name() {
  // @@protoc_insertion_point(field_release:event.View.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void View::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.View.name)
}

// .delivery.UseCase use_case = 9 [json_name = "useCase"];
inline void View::clear_use_case() {
  use_case_ = 0;
}
inline ::delivery::UseCase View::_internal_use_case() const {
  return static_cast< ::delivery::UseCase >(use_case_);
}
inline ::delivery::UseCase View::use_case() const {
  // @@protoc_insertion_point(field_get:event.View.use_case)
  return _internal_use_case();
}
inline void View::_internal_set_use_case(::delivery::UseCase value) {
  
  use_case_ = value;
}
inline void View::set_use_case(::delivery::UseCase value) {
  _internal_set_use_case(value);
  // @@protoc_insertion_point(field_set:event.View.use_case)
}

// string search_query = 10 [json_name = "searchQuery"];
inline void View::clear_search_query() {
  search_query_.ClearToEmpty();
}
inline const std::string& View::search_query() const {
  // @@protoc_insertion_point(field_get:event.View.search_query)
  return _internal_search_query();
}
inline void View::set_search_query(const std::string& value) {
  _internal_set_search_query(value);
  // @@protoc_insertion_point(field_set:event.View.search_query)
}
inline std::string* View::mutable_search_query() {
  // @@protoc_insertion_point(field_mutable:event.View.search_query)
  return _internal_mutable_search_query();
}
inline const std::string& View::_internal_search_query() const {
  return search_query_.Get();
}
inline void View::_internal_set_search_query(const std::string& value) {
  
  search_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void View::set_search_query(std::string&& value) {
  
  search_query_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.View.search_query)
}
inline void View::set_search_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.View.search_query)
}
inline void View::set_search_query(const char* value,
    size_t size) {
  
  search_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.View.search_query)
}
inline std::string* View::_internal_mutable_search_query() {
  
  return search_query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* View::release_search_query() {
  // @@protoc_insertion_point(field_release:event.View.search_query)
  return search_query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void View::set_allocated_search_query(std::string* search_query) {
  if (search_query != nullptr) {
    
  } else {
    
  }
  search_query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.View.search_query)
}

// .common.Properties properties = 11 [json_name = "properties"];
inline bool View::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool View::has_properties() const {
  return _internal_has_properties();
}
inline const ::common::Properties& View::_internal_properties() const {
  const ::common::Properties* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Properties&>(
      ::common::_Properties_default_instance_);
}
inline const ::common::Properties& View::properties() const {
  // @@protoc_insertion_point(field_get:event.View.properties)
  return _internal_properties();
}
inline void View::unsafe_arena_set_allocated_properties(
    ::common::Properties* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.View.properties)
}
inline ::common::Properties* View::release_properties() {
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Properties* View::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:event.View.properties)
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::common::Properties* View::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Properties>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline ::common::Properties* View::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:event.View.properties)
  return _internal_mutable_properties();
}
inline void View::set_allocated_properties(::common::Properties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties)->GetArena();
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:event.View.properties)
}

// .common.Locale locale = 16 [json_name = "locale"];
inline bool View::_internal_has_locale() const {
  return this != internal_default_instance() && locale_ != nullptr;
}
inline bool View::has_locale() const {
  return _internal_has_locale();
}
inline const ::common::Locale& View::_internal_locale() const {
  const ::common::Locale* p = locale_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Locale&>(
      ::common::_Locale_default_instance_);
}
inline const ::common::Locale& View::locale() const {
  // @@protoc_insertion_point(field_get:event.View.locale)
  return _internal_locale();
}
inline void View::unsafe_arena_set_allocated_locale(
    ::common::Locale* locale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locale_);
  }
  locale_ = locale;
  if (locale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.View.locale)
}
inline ::common::Locale* View::release_locale() {
  
  ::common::Locale* temp = locale_;
  locale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Locale* View::unsafe_arena_release_locale() {
  // @@protoc_insertion_point(field_release:event.View.locale)
  
  ::common::Locale* temp = locale_;
  locale_ = nullptr;
  return temp;
}
inline ::common::Locale* View::_internal_mutable_locale() {
  
  if (locale_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Locale>(GetArena());
    locale_ = p;
  }
  return locale_;
}
inline ::common::Locale* View::mutable_locale() {
  // @@protoc_insertion_point(field_mutable:event.View.locale)
  return _internal_mutable_locale();
}
inline void View::set_allocated_locale(::common::Locale* locale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(locale_);
  }
  if (locale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locale)->GetArena();
    if (message_arena != submessage_arena) {
      locale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locale, submessage_arena);
    }
    
  } else {
    
  }
  locale_ = locale;
  // @@protoc_insertion_point(field_set_allocated:event.View.locale)
}

// .event.View.ViewType view_type = 13 [json_name = "viewType"];
inline void View::clear_view_type() {
  view_type_ = 0;
}
inline ::event::View_ViewType View::_internal_view_type() const {
  return static_cast< ::event::View_ViewType >(view_type_);
}
inline ::event::View_ViewType View::view_type() const {
  // @@protoc_insertion_point(field_get:event.View.view_type)
  return _internal_view_type();
}
inline void View::_internal_set_view_type(::event::View_ViewType value) {
  
  view_type_ = value;
}
inline void View::set_view_type(::event::View_ViewType value) {
  _internal_set_view_type(value);
  // @@protoc_insertion_point(field_set:event.View.view_type)
}

// .event.WebPageView web_page_view = 14 [json_name = "webPageView"];
inline bool View::_internal_has_web_page_view() const {
  return ui_type_case() == kWebPageView;
}
inline bool View::has_web_page_view() const {
  return _internal_has_web_page_view();
}
inline void View::set_has_web_page_view() {
  _oneof_case_[0] = kWebPageView;
}
inline void View::clear_web_page_view() {
  if (_internal_has_web_page_view()) {
    if (GetArena() == nullptr) {
      delete ui_type_.web_page_view_;
    }
    clear_has_ui_type();
  }
}
inline ::event::WebPageView* View::release_web_page_view() {
  // @@protoc_insertion_point(field_release:event.View.web_page_view)
  if (_internal_has_web_page_view()) {
    clear_has_ui_type();
      ::event::WebPageView* temp = ui_type_.web_page_view_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ui_type_.web_page_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event::WebPageView& View::_internal_web_page_view() const {
  return _internal_has_web_page_view()
      ? *ui_type_.web_page_view_
      : reinterpret_cast< ::event::WebPageView&>(::event::_WebPageView_default_instance_);
}
inline const ::event::WebPageView& View::web_page_view() const {
  // @@protoc_insertion_point(field_get:event.View.web_page_view)
  return _internal_web_page_view();
}
inline ::event::WebPageView* View::unsafe_arena_release_web_page_view() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event.View.web_page_view)
  if (_internal_has_web_page_view()) {
    clear_has_ui_type();
    ::event::WebPageView* temp = ui_type_.web_page_view_;
    ui_type_.web_page_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void View::unsafe_arena_set_allocated_web_page_view(::event::WebPageView* web_page_view) {
  clear_ui_type();
  if (web_page_view) {
    set_has_web_page_view();
    ui_type_.web_page_view_ = web_page_view;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.View.web_page_view)
}
inline ::event::WebPageView* View::_internal_mutable_web_page_view() {
  if (!_internal_has_web_page_view()) {
    clear_ui_type();
    set_has_web_page_view();
    ui_type_.web_page_view_ = CreateMaybeMessage< ::event::WebPageView >(GetArena());
  }
  return ui_type_.web_page_view_;
}
inline ::event::WebPageView* View::mutable_web_page_view() {
  // @@protoc_insertion_point(field_mutable:event.View.web_page_view)
  return _internal_mutable_web_page_view();
}

// .event.AppScreenView app_screen_view = 15 [json_name = "appScreenView"];
inline bool View::_internal_has_app_screen_view() const {
  return ui_type_case() == kAppScreenView;
}
inline bool View::has_app_screen_view() const {
  return _internal_has_app_screen_view();
}
inline void View::set_has_app_screen_view() {
  _oneof_case_[0] = kAppScreenView;
}
inline void View::clear_app_screen_view() {
  if (_internal_has_app_screen_view()) {
    if (GetArena() == nullptr) {
      delete ui_type_.app_screen_view_;
    }
    clear_has_ui_type();
  }
}
inline ::event::AppScreenView* View::release_app_screen_view() {
  // @@protoc_insertion_point(field_release:event.View.app_screen_view)
  if (_internal_has_app_screen_view()) {
    clear_has_ui_type();
      ::event::AppScreenView* temp = ui_type_.app_screen_view_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ui_type_.app_screen_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event::AppScreenView& View::_internal_app_screen_view() const {
  return _internal_has_app_screen_view()
      ? *ui_type_.app_screen_view_
      : reinterpret_cast< ::event::AppScreenView&>(::event::_AppScreenView_default_instance_);
}
inline const ::event::AppScreenView& View::app_screen_view() const {
  // @@protoc_insertion_point(field_get:event.View.app_screen_view)
  return _internal_app_screen_view();
}
inline ::event::AppScreenView* View::unsafe_arena_release_app_screen_view() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event.View.app_screen_view)
  if (_internal_has_app_screen_view()) {
    clear_has_ui_type();
    ::event::AppScreenView* temp = ui_type_.app_screen_view_;
    ui_type_.app_screen_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void View::unsafe_arena_set_allocated_app_screen_view(::event::AppScreenView* app_screen_view) {
  clear_ui_type();
  if (app_screen_view) {
    set_has_app_screen_view();
    ui_type_.app_screen_view_ = app_screen_view;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.View.app_screen_view)
}
inline ::event::AppScreenView* View::_internal_mutable_app_screen_view() {
  if (!_internal_has_app_screen_view()) {
    clear_ui_type();
    set_has_app_screen_view();
    ui_type_.app_screen_view_ = CreateMaybeMessage< ::event::AppScreenView >(GetArena());
  }
  return ui_type_.app_screen_view_;
}
inline ::event::AppScreenView* View::mutable_app_screen_view() {
  // @@protoc_insertion_point(field_mutable:event.View.app_screen_view)
  return _internal_mutable_app_screen_view();
}

// .event.IdentifierProvenances id_provenances = 18 [json_name = "idProvenances"];
inline bool View::_internal_has_id_provenances() const {
  return this != internal_default_instance() && id_provenances_ != nullptr;
}
inline bool View::has_id_provenances() const {
  return _internal_has_id_provenances();
}
inline void View::clear_id_provenances() {
  if (GetArena() == nullptr && id_provenances_ != nullptr) {
    delete id_provenances_;
  }
  id_provenances_ = nullptr;
}
inline const ::event::IdentifierProvenances& View::_internal_id_provenances() const {
  const ::event::IdentifierProvenances* p = id_provenances_;
  return p != nullptr ? *p : reinterpret_cast<const ::event::IdentifierProvenances&>(
      ::event::_IdentifierProvenances_default_instance_);
}
inline const ::event::IdentifierProvenances& View::id_provenances() const {
  // @@protoc_insertion_point(field_get:event.View.id_provenances)
  return _internal_id_provenances();
}
inline void View::unsafe_arena_set_allocated_id_provenances(
    ::event::IdentifierProvenances* id_provenances) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_provenances_);
  }
  id_provenances_ = id_provenances;
  if (id_provenances) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.View.id_provenances)
}
inline ::event::IdentifierProvenances* View::release_id_provenances() {
  
  ::event::IdentifierProvenances* temp = id_provenances_;
  id_provenances_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event::IdentifierProvenances* View::unsafe_arena_release_id_provenances() {
  // @@protoc_insertion_point(field_release:event.View.id_provenances)
  
  ::event::IdentifierProvenances* temp = id_provenances_;
  id_provenances_ = nullptr;
  return temp;
}
inline ::event::IdentifierProvenances* View::_internal_mutable_id_provenances() {
  
  if (id_provenances_ == nullptr) {
    auto* p = CreateMaybeMessage<::event::IdentifierProvenances>(GetArena());
    id_provenances_ = p;
  }
  return id_provenances_;
}
inline ::event::IdentifierProvenances* View::mutable_id_provenances() {
  // @@protoc_insertion_point(field_mutable:event.View.id_provenances)
  return _internal_mutable_id_provenances();
}
inline void View::set_allocated_id_provenances(::event::IdentifierProvenances* id_provenances) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_provenances_;
  }
  if (id_provenances) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id_provenances);
    if (message_arena != submessage_arena) {
      id_provenances = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_provenances, submessage_arena);
    }
    
  } else {
    
  }
  id_provenances_ = id_provenances;
  // @@protoc_insertion_point(field_set_allocated:event.View.id_provenances)
}

inline bool View::has_ui_type() const {
  return ui_type_case() != UI_TYPE_NOT_SET;
}
inline void View::clear_has_ui_type() {
  _oneof_case_[0] = UI_TYPE_NOT_SET;
}
inline View::UiTypeCase View::ui_type_case() const {
  return View::UiTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AutoView

// uint64 platform_id = 1 [json_name = "platformId"];
inline void AutoView::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AutoView::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AutoView::platform_id() const {
  // @@protoc_insertion_point(field_get:event.AutoView.platform_id)
  return _internal_platform_id();
}
inline void AutoView::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void AutoView::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:event.AutoView.platform_id)
}

// .common.UserInfo user_info = 2 [json_name = "userInfo"];
inline bool AutoView::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool AutoView::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::common::UserInfo& AutoView::_internal_user_info() const {
  const ::common::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UserInfo&>(
      ::common::_UserInfo_default_instance_);
}
inline const ::common::UserInfo& AutoView::user_info() const {
  // @@protoc_insertion_point(field_get:event.AutoView.user_info)
  return _internal_user_info();
}
inline void AutoView::unsafe_arena_set_allocated_user_info(
    ::common::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.AutoView.user_info)
}
inline ::common::UserInfo* AutoView::release_user_info() {
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::UserInfo* AutoView::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:event.AutoView.user_info)
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::common::UserInfo* AutoView::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::common::UserInfo* AutoView::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:event.AutoView.user_info)
  return _internal_mutable_user_info();
}
inline void AutoView::set_allocated_user_info(::common::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:event.AutoView.user_info)
}

// .common.Timing timing = 3 [json_name = "timing"];
inline bool AutoView::_internal_has_timing() const {
  return this != internal_default_instance() && timing_ != nullptr;
}
inline bool AutoView::has_timing() const {
  return _internal_has_timing();
}
inline const ::common::Timing& AutoView::_internal_timing() const {
  const ::common::Timing* p = timing_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Timing&>(
      ::common::_Timing_default_instance_);
}
inline const ::common::Timing& AutoView::timing() const {
  // @@protoc_insertion_point(field_get:event.AutoView.timing)
  return _internal_timing();
}
inline void AutoView::unsafe_arena_set_allocated_timing(
    ::common::Timing* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.AutoView.timing)
}
inline ::common::Timing* AutoView::release_timing() {
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Timing* AutoView::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:event.AutoView.timing)
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::common::Timing* AutoView::_internal_mutable_timing() {
  
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Timing>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::common::Timing* AutoView::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:event.AutoView.timing)
  return _internal_mutable_timing();
}
inline void AutoView::set_allocated_timing(::common::Timing* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing)->GetArena();
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:event.AutoView.timing)
}

// .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
inline bool AutoView::_internal_has_client_info() const {
  return this != internal_default_instance() && client_info_ != nullptr;
}
inline bool AutoView::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::common::ClientInfo& AutoView::_internal_client_info() const {
  const ::common::ClientInfo* p = client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientInfo&>(
      ::common::_ClientInfo_default_instance_);
}
inline const ::common::ClientInfo& AutoView::client_info() const {
  // @@protoc_insertion_point(field_get:event.AutoView.client_info)
  return _internal_client_info();
}
inline void AutoView::unsafe_arena_set_allocated_client_info(
    ::common::ClientInfo* client_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.AutoView.client_info)
}
inline ::common::ClientInfo* AutoView::release_client_info() {
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ClientInfo* AutoView::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:event.AutoView.client_info)
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::common::ClientInfo* AutoView::_internal_mutable_client_info() {
  
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientInfo>(GetArena());
    client_info_ = p;
  }
  return client_info_;
}
inline ::common::ClientInfo* AutoView::mutable_client_info() {
  // @@protoc_insertion_point(field_mutable:event.AutoView.client_info)
  return _internal_mutable_client_info();
}
inline void AutoView::set_allocated_client_info(::common::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info)->GetArena();
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:event.AutoView.client_info)
}

// string auto_view_id = 6 [json_name = "autoViewId"];
inline void AutoView::clear_auto_view_id() {
  auto_view_id_.ClearToEmpty();
}
inline const std::string& AutoView::auto_view_id() const {
  // @@protoc_insertion_point(field_get:event.AutoView.auto_view_id)
  return _internal_auto_view_id();
}
inline void AutoView::set_auto_view_id(const std::string& value) {
  _internal_set_auto_view_id(value);
  // @@protoc_insertion_point(field_set:event.AutoView.auto_view_id)
}
inline std::string* AutoView::mutable_auto_view_id() {
  // @@protoc_insertion_point(field_mutable:event.AutoView.auto_view_id)
  return _internal_mutable_auto_view_id();
}
inline const std::string& AutoView::_internal_auto_view_id() const {
  return auto_view_id_.Get();
}
inline void AutoView::_internal_set_auto_view_id(const std::string& value) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AutoView::set_auto_view_id(std::string&& value) {
  
  auto_view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.AutoView.auto_view_id)
}
inline void AutoView::set_auto_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.AutoView.auto_view_id)
}
inline void AutoView::set_auto_view_id(const char* value,
    size_t size) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.AutoView.auto_view_id)
}
inline std::string* AutoView::_internal_mutable_auto_view_id() {
  
  return auto_view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AutoView::release_auto_view_id() {
  // @@protoc_insertion_point(field_release:event.AutoView.auto_view_id)
  return auto_view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutoView::set_allocated_auto_view_id(std::string* auto_view_id) {
  if (auto_view_id != nullptr) {
    
  } else {
    
  }
  auto_view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.AutoView.auto_view_id)
}

// string view_id = 14 [json_name = "viewId"];
inline void AutoView::clear_view_id() {
  view_id_.ClearToEmpty();
}
inline const std::string& AutoView::view_id() const {
  // @@protoc_insertion_point(field_get:event.AutoView.view_id)
  return _internal_view_id();
}
inline void AutoView::set_view_id(const std::string& value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:event.AutoView.view_id)
}
inline std::string* AutoView::mutable_view_id() {
  // @@protoc_insertion_point(field_mutable:event.AutoView.view_id)
  return _internal_mutable_view_id();
}
inline const std::string& AutoView::_internal_view_id() const {
  return view_id_.Get();
}
inline void AutoView::_internal_set_view_id(const std::string& value) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AutoView::set_view_id(std::string&& value) {
  
  view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.AutoView.view_id)
}
inline void AutoView::set_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.AutoView.view_id)
}
inline void AutoView::set_view_id(const char* value,
    size_t size) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.AutoView.view_id)
}
inline std::string* AutoView::_internal_mutable_view_id() {
  
  return view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AutoView::release_view_id() {
  // @@protoc_insertion_point(field_release:event.AutoView.view_id)
  return view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutoView::set_allocated_view_id(std::string* view_id) {
  if (view_id != nullptr) {
    
  } else {
    
  }
  view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.AutoView.view_id)
}

// string session_id = 7 [json_name = "sessionId"];
inline void AutoView::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& AutoView::session_id() const {
  // @@protoc_insertion_point(field_get:event.AutoView.session_id)
  return _internal_session_id();
}
inline void AutoView::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:event.AutoView.session_id)
}
inline std::string* AutoView::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:event.AutoView.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& AutoView::_internal_session_id() const {
  return session_id_.Get();
}
inline void AutoView::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AutoView::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.AutoView.session_id)
}
inline void AutoView::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.AutoView.session_id)
}
inline void AutoView::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.AutoView.session_id)
}
inline std::string* AutoView::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AutoView::release_session_id() {
  // @@protoc_insertion_point(field_release:event.AutoView.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutoView::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.AutoView.session_id)
}

// string name = 8 [json_name = "name"];
inline void AutoView::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AutoView::name() const {
  // @@protoc_insertion_point(field_get:event.AutoView.name)
  return _internal_name();
}
inline void AutoView::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event.AutoView.name)
}
inline std::string* AutoView::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event.AutoView.name)
  return _internal_mutable_name();
}
inline const std::string& AutoView::_internal_name() const {
  return name_.Get();
}
inline void AutoView::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AutoView::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.AutoView.name)
}
inline void AutoView::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.AutoView.name)
}
inline void AutoView::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.AutoView.name)
}
inline std::string* AutoView::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AutoView::release_name() {
  // @@protoc_insertion_point(field_release:event.AutoView.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AutoView::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.AutoView.name)
}

// .delivery.UseCase use_case = 9 [json_name = "useCase"];
inline void AutoView::clear_use_case() {
  use_case_ = 0;
}
inline ::delivery::UseCase AutoView::_internal_use_case() const {
  return static_cast< ::delivery::UseCase >(use_case_);
}
inline ::delivery::UseCase AutoView::use_case() const {
  // @@protoc_insertion_point(field_get:event.AutoView.use_case)
  return _internal_use_case();
}
inline void AutoView::_internal_set_use_case(::delivery::UseCase value) {
  
  use_case_ = value;
}
inline void AutoView::set_use_case(::delivery::UseCase value) {
  _internal_set_use_case(value);
  // @@protoc_insertion_point(field_set:event.AutoView.use_case)
}

// .common.Properties properties = 10 [json_name = "properties"];
inline bool AutoView::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool AutoView::has_properties() const {
  return _internal_has_properties();
}
inline const ::common::Properties& AutoView::_internal_properties() const {
  const ::common::Properties* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Properties&>(
      ::common::_Properties_default_instance_);
}
inline const ::common::Properties& AutoView::properties() const {
  // @@protoc_insertion_point(field_get:event.AutoView.properties)
  return _internal_properties();
}
inline void AutoView::unsafe_arena_set_allocated_properties(
    ::common::Properties* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.AutoView.properties)
}
inline ::common::Properties* AutoView::release_properties() {
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Properties* AutoView::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:event.AutoView.properties)
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::common::Properties* AutoView::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Properties>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline ::common::Properties* AutoView::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:event.AutoView.properties)
  return _internal_mutable_properties();
}
inline void AutoView::set_allocated_properties(::common::Properties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties)->GetArena();
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:event.AutoView.properties)
}

// .common.Locale locale = 11 [json_name = "locale"];
inline bool AutoView::_internal_has_locale() const {
  return this != internal_default_instance() && locale_ != nullptr;
}
inline bool AutoView::has_locale() const {
  return _internal_has_locale();
}
inline const ::common::Locale& AutoView::_internal_locale() const {
  const ::common::Locale* p = locale_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Locale&>(
      ::common::_Locale_default_instance_);
}
inline const ::common::Locale& AutoView::locale() const {
  // @@protoc_insertion_point(field_get:event.AutoView.locale)
  return _internal_locale();
}
inline void AutoView::unsafe_arena_set_allocated_locale(
    ::common::Locale* locale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locale_);
  }
  locale_ = locale;
  if (locale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.AutoView.locale)
}
inline ::common::Locale* AutoView::release_locale() {
  
  ::common::Locale* temp = locale_;
  locale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Locale* AutoView::unsafe_arena_release_locale() {
  // @@protoc_insertion_point(field_release:event.AutoView.locale)
  
  ::common::Locale* temp = locale_;
  locale_ = nullptr;
  return temp;
}
inline ::common::Locale* AutoView::_internal_mutable_locale() {
  
  if (locale_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Locale>(GetArena());
    locale_ = p;
  }
  return locale_;
}
inline ::common::Locale* AutoView::mutable_locale() {
  // @@protoc_insertion_point(field_mutable:event.AutoView.locale)
  return _internal_mutable_locale();
}
inline void AutoView::set_allocated_locale(::common::Locale* locale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(locale_);
  }
  if (locale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locale)->GetArena();
    if (message_arena != submessage_arena) {
      locale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locale, submessage_arena);
    }
    
  } else {
    
  }
  locale_ = locale;
  // @@protoc_insertion_point(field_set_allocated:event.AutoView.locale)
}

// .event.WebPageView web_page_view = 12 [json_name = "webPageView"];
inline bool AutoView::_internal_has_web_page_view() const {
  return ui_type_case() == kWebPageView;
}
inline bool AutoView::has_web_page_view() const {
  return _internal_has_web_page_view();
}
inline void AutoView::set_has_web_page_view() {
  _oneof_case_[0] = kWebPageView;
}
inline void AutoView::clear_web_page_view() {
  if (_internal_has_web_page_view()) {
    if (GetArena() == nullptr) {
      delete ui_type_.web_page_view_;
    }
    clear_has_ui_type();
  }
}
inline ::event::WebPageView* AutoView::release_web_page_view() {
  // @@protoc_insertion_point(field_release:event.AutoView.web_page_view)
  if (_internal_has_web_page_view()) {
    clear_has_ui_type();
      ::event::WebPageView* temp = ui_type_.web_page_view_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ui_type_.web_page_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event::WebPageView& AutoView::_internal_web_page_view() const {
  return _internal_has_web_page_view()
      ? *ui_type_.web_page_view_
      : reinterpret_cast< ::event::WebPageView&>(::event::_WebPageView_default_instance_);
}
inline const ::event::WebPageView& AutoView::web_page_view() const {
  // @@protoc_insertion_point(field_get:event.AutoView.web_page_view)
  return _internal_web_page_view();
}
inline ::event::WebPageView* AutoView::unsafe_arena_release_web_page_view() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event.AutoView.web_page_view)
  if (_internal_has_web_page_view()) {
    clear_has_ui_type();
    ::event::WebPageView* temp = ui_type_.web_page_view_;
    ui_type_.web_page_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AutoView::unsafe_arena_set_allocated_web_page_view(::event::WebPageView* web_page_view) {
  clear_ui_type();
  if (web_page_view) {
    set_has_web_page_view();
    ui_type_.web_page_view_ = web_page_view;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.AutoView.web_page_view)
}
inline ::event::WebPageView* AutoView::_internal_mutable_web_page_view() {
  if (!_internal_has_web_page_view()) {
    clear_ui_type();
    set_has_web_page_view();
    ui_type_.web_page_view_ = CreateMaybeMessage< ::event::WebPageView >(GetArena());
  }
  return ui_type_.web_page_view_;
}
inline ::event::WebPageView* AutoView::mutable_web_page_view() {
  // @@protoc_insertion_point(field_mutable:event.AutoView.web_page_view)
  return _internal_mutable_web_page_view();
}

// .event.AppScreenView app_screen_view = 13 [json_name = "appScreenView"];
inline bool AutoView::_internal_has_app_screen_view() const {
  return ui_type_case() == kAppScreenView;
}
inline bool AutoView::has_app_screen_view() const {
  return _internal_has_app_screen_view();
}
inline void AutoView::set_has_app_screen_view() {
  _oneof_case_[0] = kAppScreenView;
}
inline void AutoView::clear_app_screen_view() {
  if (_internal_has_app_screen_view()) {
    if (GetArena() == nullptr) {
      delete ui_type_.app_screen_view_;
    }
    clear_has_ui_type();
  }
}
inline ::event::AppScreenView* AutoView::release_app_screen_view() {
  // @@protoc_insertion_point(field_release:event.AutoView.app_screen_view)
  if (_internal_has_app_screen_view()) {
    clear_has_ui_type();
      ::event::AppScreenView* temp = ui_type_.app_screen_view_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ui_type_.app_screen_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event::AppScreenView& AutoView::_internal_app_screen_view() const {
  return _internal_has_app_screen_view()
      ? *ui_type_.app_screen_view_
      : reinterpret_cast< ::event::AppScreenView&>(::event::_AppScreenView_default_instance_);
}
inline const ::event::AppScreenView& AutoView::app_screen_view() const {
  // @@protoc_insertion_point(field_get:event.AutoView.app_screen_view)
  return _internal_app_screen_view();
}
inline ::event::AppScreenView* AutoView::unsafe_arena_release_app_screen_view() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event.AutoView.app_screen_view)
  if (_internal_has_app_screen_view()) {
    clear_has_ui_type();
    ::event::AppScreenView* temp = ui_type_.app_screen_view_;
    ui_type_.app_screen_view_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AutoView::unsafe_arena_set_allocated_app_screen_view(::event::AppScreenView* app_screen_view) {
  clear_ui_type();
  if (app_screen_view) {
    set_has_app_screen_view();
    ui_type_.app_screen_view_ = app_screen_view;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.AutoView.app_screen_view)
}
inline ::event::AppScreenView* AutoView::_internal_mutable_app_screen_view() {
  if (!_internal_has_app_screen_view()) {
    clear_ui_type();
    set_has_app_screen_view();
    ui_type_.app_screen_view_ = CreateMaybeMessage< ::event::AppScreenView >(GetArena());
  }
  return ui_type_.app_screen_view_;
}
inline ::event::AppScreenView* AutoView::mutable_app_screen_view() {
  // @@protoc_insertion_point(field_mutable:event.AutoView.app_screen_view)
  return _internal_mutable_app_screen_view();
}

// .event.IdentifierProvenances id_provenances = 15 [json_name = "idProvenances"];
inline bool AutoView::_internal_has_id_provenances() const {
  return this != internal_default_instance() && id_provenances_ != nullptr;
}
inline bool AutoView::has_id_provenances() const {
  return _internal_has_id_provenances();
}
inline void AutoView::clear_id_provenances() {
  if (GetArena() == nullptr && id_provenances_ != nullptr) {
    delete id_provenances_;
  }
  id_provenances_ = nullptr;
}
inline const ::event::IdentifierProvenances& AutoView::_internal_id_provenances() const {
  const ::event::IdentifierProvenances* p = id_provenances_;
  return p != nullptr ? *p : reinterpret_cast<const ::event::IdentifierProvenances&>(
      ::event::_IdentifierProvenances_default_instance_);
}
inline const ::event::IdentifierProvenances& AutoView::id_provenances() const {
  // @@protoc_insertion_point(field_get:event.AutoView.id_provenances)
  return _internal_id_provenances();
}
inline void AutoView::unsafe_arena_set_allocated_id_provenances(
    ::event::IdentifierProvenances* id_provenances) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_provenances_);
  }
  id_provenances_ = id_provenances;
  if (id_provenances) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.AutoView.id_provenances)
}
inline ::event::IdentifierProvenances* AutoView::release_id_provenances() {
  
  ::event::IdentifierProvenances* temp = id_provenances_;
  id_provenances_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event::IdentifierProvenances* AutoView::unsafe_arena_release_id_provenances() {
  // @@protoc_insertion_point(field_release:event.AutoView.id_provenances)
  
  ::event::IdentifierProvenances* temp = id_provenances_;
  id_provenances_ = nullptr;
  return temp;
}
inline ::event::IdentifierProvenances* AutoView::_internal_mutable_id_provenances() {
  
  if (id_provenances_ == nullptr) {
    auto* p = CreateMaybeMessage<::event::IdentifierProvenances>(GetArena());
    id_provenances_ = p;
  }
  return id_provenances_;
}
inline ::event::IdentifierProvenances* AutoView::mutable_id_provenances() {
  // @@protoc_insertion_point(field_mutable:event.AutoView.id_provenances)
  return _internal_mutable_id_provenances();
}
inline void AutoView::set_allocated_id_provenances(::event::IdentifierProvenances* id_provenances) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_provenances_;
  }
  if (id_provenances) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id_provenances);
    if (message_arena != submessage_arena) {
      id_provenances = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_provenances, submessage_arena);
    }
    
  } else {
    
  }
  id_provenances_ = id_provenances;
  // @@protoc_insertion_point(field_set_allocated:event.AutoView.id_provenances)
}

inline bool AutoView::has_ui_type() const {
  return ui_type_case() != UI_TYPE_NOT_SET;
}
inline void AutoView::clear_has_ui_type() {
  _oneof_case_[0] = UI_TYPE_NOT_SET;
}
inline AutoView::UiTypeCase AutoView::ui_type_case() const {
  return AutoView::UiTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// IndexPath

// repeated int32 index = 1 [json_name = "index"];
inline int IndexPath::_internal_index_size() const {
  return index_.size();
}
inline int IndexPath::index_size() const {
  return _internal_index_size();
}
inline void IndexPath::clear_index() {
  index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexPath::_internal_index(int index) const {
  return index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexPath::index(int index) const {
  // @@protoc_insertion_point(field_get:event.IndexPath.index)
  return _internal_index(index);
}
inline void IndexPath::set_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:event.IndexPath.index)
}
inline void IndexPath::_internal_add_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  index_.Add(value);
}
inline void IndexPath::add_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_index(value);
  // @@protoc_insertion_point(field_add:event.IndexPath.index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IndexPath::_internal_index() const {
  return index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IndexPath::index() const {
  // @@protoc_insertion_point(field_list:event.IndexPath.index)
  return _internal_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IndexPath::_internal_mutable_index() {
  return &index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IndexPath::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:event.IndexPath.index)
  return _internal_mutable_index();
}

// -------------------------------------------------------------------

// Impression

// uint64 platform_id = 1 [json_name = "platformId"];
inline void Impression::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Impression::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Impression::platform_id() const {
  // @@protoc_insertion_point(field_get:event.Impression.platform_id)
  return _internal_platform_id();
}
inline void Impression::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void Impression::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:event.Impression.platform_id)
}

// .common.UserInfo user_info = 2 [json_name = "userInfo"];
inline bool Impression::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool Impression::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::common::UserInfo& Impression::_internal_user_info() const {
  const ::common::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UserInfo&>(
      ::common::_UserInfo_default_instance_);
}
inline const ::common::UserInfo& Impression::user_info() const {
  // @@protoc_insertion_point(field_get:event.Impression.user_info)
  return _internal_user_info();
}
inline void Impression::unsafe_arena_set_allocated_user_info(
    ::common::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Impression.user_info)
}
inline ::common::UserInfo* Impression::release_user_info() {
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::UserInfo* Impression::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:event.Impression.user_info)
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::common::UserInfo* Impression::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::common::UserInfo* Impression::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:event.Impression.user_info)
  return _internal_mutable_user_info();
}
inline void Impression::set_allocated_user_info(::common::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:event.Impression.user_info)
}

// .common.Timing timing = 3 [json_name = "timing"];
inline bool Impression::_internal_has_timing() const {
  return this != internal_default_instance() && timing_ != nullptr;
}
inline bool Impression::has_timing() const {
  return _internal_has_timing();
}
inline const ::common::Timing& Impression::_internal_timing() const {
  const ::common::Timing* p = timing_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Timing&>(
      ::common::_Timing_default_instance_);
}
inline const ::common::Timing& Impression::timing() const {
  // @@protoc_insertion_point(field_get:event.Impression.timing)
  return _internal_timing();
}
inline void Impression::unsafe_arena_set_allocated_timing(
    ::common::Timing* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Impression.timing)
}
inline ::common::Timing* Impression::release_timing() {
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Timing* Impression::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:event.Impression.timing)
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::common::Timing* Impression::_internal_mutable_timing() {
  
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Timing>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::common::Timing* Impression::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:event.Impression.timing)
  return _internal_mutable_timing();
}
inline void Impression::set_allocated_timing(::common::Timing* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing)->GetArena();
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:event.Impression.timing)
}

// .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
inline bool Impression::_internal_has_client_info() const {
  return this != internal_default_instance() && client_info_ != nullptr;
}
inline bool Impression::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::common::ClientInfo& Impression::_internal_client_info() const {
  const ::common::ClientInfo* p = client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientInfo&>(
      ::common::_ClientInfo_default_instance_);
}
inline const ::common::ClientInfo& Impression::client_info() const {
  // @@protoc_insertion_point(field_get:event.Impression.client_info)
  return _internal_client_info();
}
inline void Impression::unsafe_arena_set_allocated_client_info(
    ::common::ClientInfo* client_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Impression.client_info)
}
inline ::common::ClientInfo* Impression::release_client_info() {
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ClientInfo* Impression::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:event.Impression.client_info)
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::common::ClientInfo* Impression::_internal_mutable_client_info() {
  
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientInfo>(GetArena());
    client_info_ = p;
  }
  return client_info_;
}
inline ::common::ClientInfo* Impression::mutable_client_info() {
  // @@protoc_insertion_point(field_mutable:event.Impression.client_info)
  return _internal_mutable_client_info();
}
inline void Impression::set_allocated_client_info(::common::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info)->GetArena();
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:event.Impression.client_info)
}

// string impression_id = 6 [json_name = "impressionId"];
inline void Impression::clear_impression_id() {
  impression_id_.ClearToEmpty();
}
inline const std::string& Impression::impression_id() const {
  // @@protoc_insertion_point(field_get:event.Impression.impression_id)
  return _internal_impression_id();
}
inline void Impression::set_impression_id(const std::string& value) {
  _internal_set_impression_id(value);
  // @@protoc_insertion_point(field_set:event.Impression.impression_id)
}
inline std::string* Impression::mutable_impression_id() {
  // @@protoc_insertion_point(field_mutable:event.Impression.impression_id)
  return _internal_mutable_impression_id();
}
inline const std::string& Impression::_internal_impression_id() const {
  return impression_id_.Get();
}
inline void Impression::_internal_set_impression_id(const std::string& value) {
  
  impression_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Impression::set_impression_id(std::string&& value) {
  
  impression_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Impression.impression_id)
}
inline void Impression::set_impression_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  impression_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Impression.impression_id)
}
inline void Impression::set_impression_id(const char* value,
    size_t size) {
  
  impression_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Impression.impression_id)
}
inline std::string* Impression::_internal_mutable_impression_id() {
  
  return impression_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Impression::release_impression_id() {
  // @@protoc_insertion_point(field_release:event.Impression.impression_id)
  return impression_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Impression::set_allocated_impression_id(std::string* impression_id) {
  if (impression_id != nullptr) {
    
  } else {
    
  }
  impression_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), impression_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Impression.impression_id)
}

// string insertion_id = 7 [json_name = "insertionId"];
inline void Impression::clear_insertion_id() {
  insertion_id_.ClearToEmpty();
}
inline const std::string& Impression::insertion_id() const {
  // @@protoc_insertion_point(field_get:event.Impression.insertion_id)
  return _internal_insertion_id();
}
inline void Impression::set_insertion_id(const std::string& value) {
  _internal_set_insertion_id(value);
  // @@protoc_insertion_point(field_set:event.Impression.insertion_id)
}
inline std::string* Impression::mutable_insertion_id() {
  // @@protoc_insertion_point(field_mutable:event.Impression.insertion_id)
  return _internal_mutable_insertion_id();
}
inline const std::string& Impression::_internal_insertion_id() const {
  return insertion_id_.Get();
}
inline void Impression::_internal_set_insertion_id(const std::string& value) {
  
  insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Impression::set_insertion_id(std::string&& value) {
  
  insertion_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Impression.insertion_id)
}
inline void Impression::set_insertion_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Impression.insertion_id)
}
inline void Impression::set_insertion_id(const char* value,
    size_t size) {
  
  insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Impression.insertion_id)
}
inline std::string* Impression::_internal_mutable_insertion_id() {
  
  return insertion_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Impression::release_insertion_id() {
  // @@protoc_insertion_point(field_release:event.Impression.insertion_id)
  return insertion_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Impression::set_allocated_insertion_id(std::string* insertion_id) {
  if (insertion_id != nullptr) {
    
  } else {
    
  }
  insertion_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insertion_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Impression.insertion_id)
}

// string request_id = 8 [json_name = "requestId"];
inline void Impression::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& Impression::request_id() const {
  // @@protoc_insertion_point(field_get:event.Impression.request_id)
  return _internal_request_id();
}
inline void Impression::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:event.Impression.request_id)
}
inline std::string* Impression::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:event.Impression.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& Impression::_internal_request_id() const {
  return request_id_.Get();
}
inline void Impression::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Impression::set_request_id(std::string&& value) {
  
  request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Impression.request_id)
}
inline void Impression::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Impression.request_id)
}
inline void Impression::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Impression.request_id)
}
inline std::string* Impression::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Impression::release_request_id() {
  // @@protoc_insertion_point(field_release:event.Impression.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Impression::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Impression.request_id)
}

// string view_id = 10 [json_name = "viewId"];
inline void Impression::clear_view_id() {
  view_id_.ClearToEmpty();
}
inline const std::string& Impression::view_id() const {
  // @@protoc_insertion_point(field_get:event.Impression.view_id)
  return _internal_view_id();
}
inline void Impression::set_view_id(const std::string& value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:event.Impression.view_id)
}
inline std::string* Impression::mutable_view_id() {
  // @@protoc_insertion_point(field_mutable:event.Impression.view_id)
  return _internal_mutable_view_id();
}
inline const std::string& Impression::_internal_view_id() const {
  return view_id_.Get();
}
inline void Impression::_internal_set_view_id(const std::string& value) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Impression::set_view_id(std::string&& value) {
  
  view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Impression.view_id)
}
inline void Impression::set_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Impression.view_id)
}
inline void Impression::set_view_id(const char* value,
    size_t size) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Impression.view_id)
}
inline std::string* Impression::_internal_mutable_view_id() {
  
  return view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Impression::release_view_id() {
  // @@protoc_insertion_point(field_release:event.Impression.view_id)
  return view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Impression::set_allocated_view_id(std::string* view_id) {
  if (view_id != nullptr) {
    
  } else {
    
  }
  view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Impression.view_id)
}

// string auto_view_id = 15 [json_name = "autoViewId"];
inline void Impression::clear_auto_view_id() {
  auto_view_id_.ClearToEmpty();
}
inline const std::string& Impression::auto_view_id() const {
  // @@protoc_insertion_point(field_get:event.Impression.auto_view_id)
  return _internal_auto_view_id();
}
inline void Impression::set_auto_view_id(const std::string& value) {
  _internal_set_auto_view_id(value);
  // @@protoc_insertion_point(field_set:event.Impression.auto_view_id)
}
inline std::string* Impression::mutable_auto_view_id() {
  // @@protoc_insertion_point(field_mutable:event.Impression.auto_view_id)
  return _internal_mutable_auto_view_id();
}
inline const std::string& Impression::_internal_auto_view_id() const {
  return auto_view_id_.Get();
}
inline void Impression::_internal_set_auto_view_id(const std::string& value) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Impression::set_auto_view_id(std::string&& value) {
  
  auto_view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Impression.auto_view_id)
}
inline void Impression::set_auto_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Impression.auto_view_id)
}
inline void Impression::set_auto_view_id(const char* value,
    size_t size) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Impression.auto_view_id)
}
inline std::string* Impression::_internal_mutable_auto_view_id() {
  
  return auto_view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Impression::release_auto_view_id() {
  // @@protoc_insertion_point(field_release:event.Impression.auto_view_id)
  return auto_view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Impression::set_allocated_auto_view_id(std::string* auto_view_id) {
  if (auto_view_id != nullptr) {
    
  } else {
    
  }
  auto_view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Impression.auto_view_id)
}

// string session_id = 9 [json_name = "sessionId"];
inline void Impression::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& Impression::session_id() const {
  // @@protoc_insertion_point(field_get:event.Impression.session_id)
  return _internal_session_id();
}
inline void Impression::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:event.Impression.session_id)
}
inline std::string* Impression::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:event.Impression.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& Impression::_internal_session_id() const {
  return session_id_.Get();
}
inline void Impression::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Impression::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Impression.session_id)
}
inline void Impression::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Impression.session_id)
}
inline void Impression::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Impression.session_id)
}
inline std::string* Impression::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Impression::release_session_id() {
  // @@protoc_insertion_point(field_release:event.Impression.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Impression::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Impression.session_id)
}

// string content_id = 12 [json_name = "contentId"];
inline void Impression::clear_content_id() {
  content_id_.ClearToEmpty();
}
inline const std::string& Impression::content_id() const {
  // @@protoc_insertion_point(field_get:event.Impression.content_id)
  return _internal_content_id();
}
inline void Impression::set_content_id(const std::string& value) {
  _internal_set_content_id(value);
  // @@protoc_insertion_point(field_set:event.Impression.content_id)
}
inline std::string* Impression::mutable_content_id() {
  // @@protoc_insertion_point(field_mutable:event.Impression.content_id)
  return _internal_mutable_content_id();
}
inline const std::string& Impression::_internal_content_id() const {
  return content_id_.Get();
}
inline void Impression::_internal_set_content_id(const std::string& value) {
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Impression::set_content_id(std::string&& value) {
  
  content_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Impression.content_id)
}
inline void Impression::set_content_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Impression.content_id)
}
inline void Impression::set_content_id(const char* value,
    size_t size) {
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Impression.content_id)
}
inline std::string* Impression::_internal_mutable_content_id() {
  
  return content_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Impression::release_content_id() {
  // @@protoc_insertion_point(field_release:event.Impression.content_id)
  return content_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Impression::set_allocated_content_id(std::string* content_id) {
  if (content_id != nullptr) {
    
  } else {
    
  }
  content_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Impression.content_id)
}

// .event.ImpressionSourceType source_type = 13 [json_name = "sourceType"];
inline void Impression::clear_source_type() {
  source_type_ = 0;
}
inline ::event::ImpressionSourceType Impression::_internal_source_type() const {
  return static_cast< ::event::ImpressionSourceType >(source_type_);
}
inline ::event::ImpressionSourceType Impression::source_type() const {
  // @@protoc_insertion_point(field_get:event.Impression.source_type)
  return _internal_source_type();
}
inline void Impression::_internal_set_source_type(::event::ImpressionSourceType value) {
  
  source_type_ = value;
}
inline void Impression::set_source_type(::event::ImpressionSourceType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:event.Impression.source_type)
}

// bool has_superimposed_views = 14 [json_name = "hasSuperimposedViews"];
inline void Impression::clear_has_superimposed_views() {
  has_superimposed_views_ = false;
}
inline bool Impression::_internal_has_superimposed_views() const {
  return has_superimposed_views_;
}
inline bool Impression::has_superimposed_views() const {
  // @@protoc_insertion_point(field_get:event.Impression.has_superimposed_views)
  return _internal_has_superimposed_views();
}
inline void Impression::_internal_set_has_superimposed_views(bool value) {
  
  has_superimposed_views_ = value;
}
inline void Impression::set_has_superimposed_views(bool value) {
  _internal_set_has_superimposed_views(value);
  // @@protoc_insertion_point(field_set:event.Impression.has_superimposed_views)
}

// .event.IndexPath client_position = 16 [json_name = "clientPosition"];
inline bool Impression::_internal_has_client_position() const {
  return this != internal_default_instance() && client_position_ != nullptr;
}
inline bool Impression::has_client_position() const {
  return _internal_has_client_position();
}
inline void Impression::clear_client_position() {
  if (GetArena() == nullptr && client_position_ != nullptr) {
    delete client_position_;
  }
  client_position_ = nullptr;
}
inline const ::event::IndexPath& Impression::_internal_client_position() const {
  const ::event::IndexPath* p = client_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::event::IndexPath&>(
      ::event::_IndexPath_default_instance_);
}
inline const ::event::IndexPath& Impression::client_position() const {
  // @@protoc_insertion_point(field_get:event.Impression.client_position)
  return _internal_client_position();
}
inline void Impression::unsafe_arena_set_allocated_client_position(
    ::event::IndexPath* client_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_position_);
  }
  client_position_ = client_position;
  if (client_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Impression.client_position)
}
inline ::event::IndexPath* Impression::release_client_position() {
  
  ::event::IndexPath* temp = client_position_;
  client_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event::IndexPath* Impression::unsafe_arena_release_client_position() {
  // @@protoc_insertion_point(field_release:event.Impression.client_position)
  
  ::event::IndexPath* temp = client_position_;
  client_position_ = nullptr;
  return temp;
}
inline ::event::IndexPath* Impression::_internal_mutable_client_position() {
  
  if (client_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::event::IndexPath>(GetArena());
    client_position_ = p;
  }
  return client_position_;
}
inline ::event::IndexPath* Impression::mutable_client_position() {
  // @@protoc_insertion_point(field_mutable:event.Impression.client_position)
  return _internal_mutable_client_position();
}
inline void Impression::set_allocated_client_position(::event::IndexPath* client_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete client_position_;
  }
  if (client_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client_position);
    if (message_arena != submessage_arena) {
      client_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_position, submessage_arena);
    }
    
  } else {
    
  }
  client_position_ = client_position;
  // @@protoc_insertion_point(field_set_allocated:event.Impression.client_position)
}

// .event.IdentifierProvenances id_provenances = 17 [json_name = "idProvenances"];
inline bool Impression::_internal_has_id_provenances() const {
  return this != internal_default_instance() && id_provenances_ != nullptr;
}
inline bool Impression::has_id_provenances() const {
  return _internal_has_id_provenances();
}
inline void Impression::clear_id_provenances() {
  if (GetArena() == nullptr && id_provenances_ != nullptr) {
    delete id_provenances_;
  }
  id_provenances_ = nullptr;
}
inline const ::event::IdentifierProvenances& Impression::_internal_id_provenances() const {
  const ::event::IdentifierProvenances* p = id_provenances_;
  return p != nullptr ? *p : reinterpret_cast<const ::event::IdentifierProvenances&>(
      ::event::_IdentifierProvenances_default_instance_);
}
inline const ::event::IdentifierProvenances& Impression::id_provenances() const {
  // @@protoc_insertion_point(field_get:event.Impression.id_provenances)
  return _internal_id_provenances();
}
inline void Impression::unsafe_arena_set_allocated_id_provenances(
    ::event::IdentifierProvenances* id_provenances) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_provenances_);
  }
  id_provenances_ = id_provenances;
  if (id_provenances) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Impression.id_provenances)
}
inline ::event::IdentifierProvenances* Impression::release_id_provenances() {
  
  ::event::IdentifierProvenances* temp = id_provenances_;
  id_provenances_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event::IdentifierProvenances* Impression::unsafe_arena_release_id_provenances() {
  // @@protoc_insertion_point(field_release:event.Impression.id_provenances)
  
  ::event::IdentifierProvenances* temp = id_provenances_;
  id_provenances_ = nullptr;
  return temp;
}
inline ::event::IdentifierProvenances* Impression::_internal_mutable_id_provenances() {
  
  if (id_provenances_ == nullptr) {
    auto* p = CreateMaybeMessage<::event::IdentifierProvenances>(GetArena());
    id_provenances_ = p;
  }
  return id_provenances_;
}
inline ::event::IdentifierProvenances* Impression::mutable_id_provenances() {
  // @@protoc_insertion_point(field_mutable:event.Impression.id_provenances)
  return _internal_mutable_id_provenances();
}
inline void Impression::set_allocated_id_provenances(::event::IdentifierProvenances* id_provenances) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_provenances_;
  }
  if (id_provenances) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id_provenances);
    if (message_arena != submessage_arena) {
      id_provenances = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_provenances, submessage_arena);
    }
    
  } else {
    
  }
  id_provenances_ = id_provenances;
  // @@protoc_insertion_point(field_set_allocated:event.Impression.id_provenances)
}

// .common.Properties properties = 11 [json_name = "properties"];
inline bool Impression::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool Impression::has_properties() const {
  return _internal_has_properties();
}
inline const ::common::Properties& Impression::_internal_properties() const {
  const ::common::Properties* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Properties&>(
      ::common::_Properties_default_instance_);
}
inline const ::common::Properties& Impression::properties() const {
  // @@protoc_insertion_point(field_get:event.Impression.properties)
  return _internal_properties();
}
inline void Impression::unsafe_arena_set_allocated_properties(
    ::common::Properties* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Impression.properties)
}
inline ::common::Properties* Impression::release_properties() {
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Properties* Impression::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:event.Impression.properties)
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::common::Properties* Impression::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Properties>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline ::common::Properties* Impression::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:event.Impression.properties)
  return _internal_mutable_properties();
}
inline void Impression::set_allocated_properties(::common::Properties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties)->GetArena();
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:event.Impression.properties)
}

// -------------------------------------------------------------------

// NavigateAction

// string target_url = 1 [json_name = "targetUrl"];
inline void NavigateAction::clear_target_url() {
  target_url_.ClearToEmpty();
}
inline const std::string& NavigateAction::target_url() const {
  // @@protoc_insertion_point(field_get:event.NavigateAction.target_url)
  return _internal_target_url();
}
inline void NavigateAction::set_target_url(const std::string& value) {
  _internal_set_target_url(value);
  // @@protoc_insertion_point(field_set:event.NavigateAction.target_url)
}
inline std::string* NavigateAction::mutable_target_url() {
  // @@protoc_insertion_point(field_mutable:event.NavigateAction.target_url)
  return _internal_mutable_target_url();
}
inline const std::string& NavigateAction::_internal_target_url() const {
  return target_url_.Get();
}
inline void NavigateAction::_internal_set_target_url(const std::string& value) {
  
  target_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NavigateAction::set_target_url(std::string&& value) {
  
  target_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.NavigateAction.target_url)
}
inline void NavigateAction::set_target_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.NavigateAction.target_url)
}
inline void NavigateAction::set_target_url(const char* value,
    size_t size) {
  
  target_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.NavigateAction.target_url)
}
inline std::string* NavigateAction::_internal_mutable_target_url() {
  
  return target_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NavigateAction::release_target_url() {
  // @@protoc_insertion_point(field_release:event.NavigateAction.target_url)
  return target_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NavigateAction::set_allocated_target_url(std::string* target_url) {
  if (target_url != nullptr) {
    
  } else {
    
  }
  target_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.NavigateAction.target_url)
}

// -------------------------------------------------------------------

// Action

// uint64 platform_id = 1 [json_name = "platformId"];
inline void Action::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Action::platform_id() const {
  // @@protoc_insertion_point(field_get:event.Action.platform_id)
  return _internal_platform_id();
}
inline void Action::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void Action::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:event.Action.platform_id)
}

// .common.UserInfo user_info = 2 [json_name = "userInfo"];
inline bool Action::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool Action::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::common::UserInfo& Action::_internal_user_info() const {
  const ::common::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UserInfo&>(
      ::common::_UserInfo_default_instance_);
}
inline const ::common::UserInfo& Action::user_info() const {
  // @@protoc_insertion_point(field_get:event.Action.user_info)
  return _internal_user_info();
}
inline void Action::unsafe_arena_set_allocated_user_info(
    ::common::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Action.user_info)
}
inline ::common::UserInfo* Action::release_user_info() {
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::UserInfo* Action::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:event.Action.user_info)
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::common::UserInfo* Action::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::common::UserInfo* Action::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:event.Action.user_info)
  return _internal_mutable_user_info();
}
inline void Action::set_allocated_user_info(::common::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:event.Action.user_info)
}

// .common.Timing timing = 3 [json_name = "timing"];
inline bool Action::_internal_has_timing() const {
  return this != internal_default_instance() && timing_ != nullptr;
}
inline bool Action::has_timing() const {
  return _internal_has_timing();
}
inline const ::common::Timing& Action::_internal_timing() const {
  const ::common::Timing* p = timing_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Timing&>(
      ::common::_Timing_default_instance_);
}
inline const ::common::Timing& Action::timing() const {
  // @@protoc_insertion_point(field_get:event.Action.timing)
  return _internal_timing();
}
inline void Action::unsafe_arena_set_allocated_timing(
    ::common::Timing* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Action.timing)
}
inline ::common::Timing* Action::release_timing() {
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Timing* Action::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:event.Action.timing)
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::common::Timing* Action::_internal_mutable_timing() {
  
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Timing>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::common::Timing* Action::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:event.Action.timing)
  return _internal_mutable_timing();
}
inline void Action::set_allocated_timing(::common::Timing* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing)->GetArena();
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:event.Action.timing)
}

// .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
inline bool Action::_internal_has_client_info() const {
  return this != internal_default_instance() && client_info_ != nullptr;
}
inline bool Action::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::common::ClientInfo& Action::_internal_client_info() const {
  const ::common::ClientInfo* p = client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientInfo&>(
      ::common::_ClientInfo_default_instance_);
}
inline const ::common::ClientInfo& Action::client_info() const {
  // @@protoc_insertion_point(field_get:event.Action.client_info)
  return _internal_client_info();
}
inline void Action::unsafe_arena_set_allocated_client_info(
    ::common::ClientInfo* client_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Action.client_info)
}
inline ::common::ClientInfo* Action::release_client_info() {
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ClientInfo* Action::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:event.Action.client_info)
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::common::ClientInfo* Action::_internal_mutable_client_info() {
  
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientInfo>(GetArena());
    client_info_ = p;
  }
  return client_info_;
}
inline ::common::ClientInfo* Action::mutable_client_info() {
  // @@protoc_insertion_point(field_mutable:event.Action.client_info)
  return _internal_mutable_client_info();
}
inline void Action::set_allocated_client_info(::common::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info)->GetArena();
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:event.Action.client_info)
}

// string action_id = 6 [json_name = "actionId"];
inline void Action::clear_action_id() {
  action_id_.ClearToEmpty();
}
inline const std::string& Action::action_id() const {
  // @@protoc_insertion_point(field_get:event.Action.action_id)
  return _internal_action_id();
}
inline void Action::set_action_id(const std::string& value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:event.Action.action_id)
}
inline std::string* Action::mutable_action_id() {
  // @@protoc_insertion_point(field_mutable:event.Action.action_id)
  return _internal_mutable_action_id();
}
inline const std::string& Action::_internal_action_id() const {
  return action_id_.Get();
}
inline void Action::_internal_set_action_id(const std::string& value) {
  
  action_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_action_id(std::string&& value) {
  
  action_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Action.action_id)
}
inline void Action::set_action_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Action.action_id)
}
inline void Action::set_action_id(const char* value,
    size_t size) {
  
  action_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Action.action_id)
}
inline std::string* Action::_internal_mutable_action_id() {
  
  return action_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_action_id() {
  // @@protoc_insertion_point(field_release:event.Action.action_id)
  return action_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_action_id(std::string* action_id) {
  if (action_id != nullptr) {
    
  } else {
    
  }
  action_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Action.action_id)
}

// string impression_id = 7 [json_name = "impressionId"];
inline void Action::clear_impression_id() {
  impression_id_.ClearToEmpty();
}
inline const std::string& Action::impression_id() const {
  // @@protoc_insertion_point(field_get:event.Action.impression_id)
  return _internal_impression_id();
}
inline void Action::set_impression_id(const std::string& value) {
  _internal_set_impression_id(value);
  // @@protoc_insertion_point(field_set:event.Action.impression_id)
}
inline std::string* Action::mutable_impression_id() {
  // @@protoc_insertion_point(field_mutable:event.Action.impression_id)
  return _internal_mutable_impression_id();
}
inline const std::string& Action::_internal_impression_id() const {
  return impression_id_.Get();
}
inline void Action::_internal_set_impression_id(const std::string& value) {
  
  impression_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_impression_id(std::string&& value) {
  
  impression_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Action.impression_id)
}
inline void Action::set_impression_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  impression_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Action.impression_id)
}
inline void Action::set_impression_id(const char* value,
    size_t size) {
  
  impression_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Action.impression_id)
}
inline std::string* Action::_internal_mutable_impression_id() {
  
  return impression_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_impression_id() {
  // @@protoc_insertion_point(field_release:event.Action.impression_id)
  return impression_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_impression_id(std::string* impression_id) {
  if (impression_id != nullptr) {
    
  } else {
    
  }
  impression_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), impression_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Action.impression_id)
}

// string insertion_id = 8 [json_name = "insertionId"];
inline void Action::clear_insertion_id() {
  insertion_id_.ClearToEmpty();
}
inline const std::string& Action::insertion_id() const {
  // @@protoc_insertion_point(field_get:event.Action.insertion_id)
  return _internal_insertion_id();
}
inline void Action::set_insertion_id(const std::string& value) {
  _internal_set_insertion_id(value);
  // @@protoc_insertion_point(field_set:event.Action.insertion_id)
}
inline std::string* Action::mutable_insertion_id() {
  // @@protoc_insertion_point(field_mutable:event.Action.insertion_id)
  return _internal_mutable_insertion_id();
}
inline const std::string& Action::_internal_insertion_id() const {
  return insertion_id_.Get();
}
inline void Action::_internal_set_insertion_id(const std::string& value) {
  
  insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_insertion_id(std::string&& value) {
  
  insertion_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Action.insertion_id)
}
inline void Action::set_insertion_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Action.insertion_id)
}
inline void Action::set_insertion_id(const char* value,
    size_t size) {
  
  insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Action.insertion_id)
}
inline std::string* Action::_internal_mutable_insertion_id() {
  
  return insertion_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_insertion_id() {
  // @@protoc_insertion_point(field_release:event.Action.insertion_id)
  return insertion_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_insertion_id(std::string* insertion_id) {
  if (insertion_id != nullptr) {
    
  } else {
    
  }
  insertion_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insertion_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Action.insertion_id)
}

// string request_id = 9 [json_name = "requestId"];
inline void Action::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& Action::request_id() const {
  // @@protoc_insertion_point(field_get:event.Action.request_id)
  return _internal_request_id();
}
inline void Action::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:event.Action.request_id)
}
inline std::string* Action::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:event.Action.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& Action::_internal_request_id() const {
  return request_id_.Get();
}
inline void Action::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_request_id(std::string&& value) {
  
  request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Action.request_id)
}
inline void Action::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Action.request_id)
}
inline void Action::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Action.request_id)
}
inline std::string* Action::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_request_id() {
  // @@protoc_insertion_point(field_release:event.Action.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Action.request_id)
}

// string view_id = 11 [json_name = "viewId"];
inline void Action::clear_view_id() {
  view_id_.ClearToEmpty();
}
inline const std::string& Action::view_id() const {
  // @@protoc_insertion_point(field_get:event.Action.view_id)
  return _internal_view_id();
}
inline void Action::set_view_id(const std::string& value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:event.Action.view_id)
}
inline std::string* Action::mutable_view_id() {
  // @@protoc_insertion_point(field_mutable:event.Action.view_id)
  return _internal_mutable_view_id();
}
inline const std::string& Action::_internal_view_id() const {
  return view_id_.Get();
}
inline void Action::_internal_set_view_id(const std::string& value) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_view_id(std::string&& value) {
  
  view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Action.view_id)
}
inline void Action::set_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Action.view_id)
}
inline void Action::set_view_id(const char* value,
    size_t size) {
  
  view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Action.view_id)
}
inline std::string* Action::_internal_mutable_view_id() {
  
  return view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_view_id() {
  // @@protoc_insertion_point(field_release:event.Action.view_id)
  return view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_view_id(std::string* view_id) {
  if (view_id != nullptr) {
    
  } else {
    
  }
  view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Action.view_id)
}

// string auto_view_id = 23 [json_name = "autoViewId"];
inline void Action::clear_auto_view_id() {
  auto_view_id_.ClearToEmpty();
}
inline const std::string& Action::auto_view_id() const {
  // @@protoc_insertion_point(field_get:event.Action.auto_view_id)
  return _internal_auto_view_id();
}
inline void Action::set_auto_view_id(const std::string& value) {
  _internal_set_auto_view_id(value);
  // @@protoc_insertion_point(field_set:event.Action.auto_view_id)
}
inline std::string* Action::mutable_auto_view_id() {
  // @@protoc_insertion_point(field_mutable:event.Action.auto_view_id)
  return _internal_mutable_auto_view_id();
}
inline const std::string& Action::_internal_auto_view_id() const {
  return auto_view_id_.Get();
}
inline void Action::_internal_set_auto_view_id(const std::string& value) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_auto_view_id(std::string&& value) {
  
  auto_view_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Action.auto_view_id)
}
inline void Action::set_auto_view_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Action.auto_view_id)
}
inline void Action::set_auto_view_id(const char* value,
    size_t size) {
  
  auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Action.auto_view_id)
}
inline std::string* Action::_internal_mutable_auto_view_id() {
  
  return auto_view_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_auto_view_id() {
  // @@protoc_insertion_point(field_release:event.Action.auto_view_id)
  return auto_view_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_auto_view_id(std::string* auto_view_id) {
  if (auto_view_id != nullptr) {
    
  } else {
    
  }
  auto_view_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_view_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Action.auto_view_id)
}

// string session_id = 10 [json_name = "sessionId"];
inline void Action::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& Action::session_id() const {
  // @@protoc_insertion_point(field_get:event.Action.session_id)
  return _internal_session_id();
}
inline void Action::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:event.Action.session_id)
}
inline std::string* Action::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:event.Action.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& Action::_internal_session_id() const {
  return session_id_.Get();
}
inline void Action::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Action.session_id)
}
inline void Action::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Action.session_id)
}
inline void Action::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Action.session_id)
}
inline std::string* Action::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_session_id() {
  // @@protoc_insertion_point(field_release:event.Action.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Action.session_id)
}

// string content_id = 21 [json_name = "contentId"];
inline void Action::clear_content_id() {
  content_id_.ClearToEmpty();
}
inline const std::string& Action::content_id() const {
  // @@protoc_insertion_point(field_get:event.Action.content_id)
  return _internal_content_id();
}
inline void Action::set_content_id(const std::string& value) {
  _internal_set_content_id(value);
  // @@protoc_insertion_point(field_set:event.Action.content_id)
}
inline std::string* Action::mutable_content_id() {
  // @@protoc_insertion_point(field_mutable:event.Action.content_id)
  return _internal_mutable_content_id();
}
inline const std::string& Action::_internal_content_id() const {
  return content_id_.Get();
}
inline void Action::_internal_set_content_id(const std::string& value) {
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_content_id(std::string&& value) {
  
  content_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Action.content_id)
}
inline void Action::set_content_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Action.content_id)
}
inline void Action::set_content_id(const char* value,
    size_t size) {
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Action.content_id)
}
inline std::string* Action::_internal_mutable_content_id() {
  
  return content_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_content_id() {
  // @@protoc_insertion_point(field_release:event.Action.content_id)
  return content_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_content_id(std::string* content_id) {
  if (content_id != nullptr) {
    
  } else {
    
  }
  content_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Action.content_id)
}

// string name = 12 [json_name = "name"];
inline void Action::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Action::name() const {
  // @@protoc_insertion_point(field_get:event.Action.name)
  return _internal_name();
}
inline void Action::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:event.Action.name)
}
inline std::string* Action::mutable_name() {
  // @@protoc_insertion_point(field_mutable:event.Action.name)
  return _internal_mutable_name();
}
inline const std::string& Action::_internal_name() const {
  return name_.Get();
}
inline void Action::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Action.name)
}
inline void Action::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Action.name)
}
inline void Action::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Action.name)
}
inline std::string* Action::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_name() {
  // @@protoc_insertion_point(field_release:event.Action.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Action.name)
}

// .event.ActionType action_type = 14 [json_name = "actionType"];
inline void Action::clear_action_type() {
  action_type_ = 0;
}
inline ::event::ActionType Action::_internal_action_type() const {
  return static_cast< ::event::ActionType >(action_type_);
}
inline ::event::ActionType Action::action_type() const {
  // @@protoc_insertion_point(field_get:event.Action.action_type)
  return _internal_action_type();
}
inline void Action::_internal_set_action_type(::event::ActionType value) {
  
  action_type_ = value;
}
inline void Action::set_action_type(::event::ActionType value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:event.Action.action_type)
}

// string custom_action_type = 15 [json_name = "customActionType"];
inline void Action::clear_custom_action_type() {
  custom_action_type_.ClearToEmpty();
}
inline const std::string& Action::custom_action_type() const {
  // @@protoc_insertion_point(field_get:event.Action.custom_action_type)
  return _internal_custom_action_type();
}
inline void Action::set_custom_action_type(const std::string& value) {
  _internal_set_custom_action_type(value);
  // @@protoc_insertion_point(field_set:event.Action.custom_action_type)
}
inline std::string* Action::mutable_custom_action_type() {
  // @@protoc_insertion_point(field_mutable:event.Action.custom_action_type)
  return _internal_mutable_custom_action_type();
}
inline const std::string& Action::_internal_custom_action_type() const {
  return custom_action_type_.Get();
}
inline void Action::_internal_set_custom_action_type(const std::string& value) {
  
  custom_action_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_custom_action_type(std::string&& value) {
  
  custom_action_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Action.custom_action_type)
}
inline void Action::set_custom_action_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_action_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Action.custom_action_type)
}
inline void Action::set_custom_action_type(const char* value,
    size_t size) {
  
  custom_action_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Action.custom_action_type)
}
inline std::string* Action::_internal_mutable_custom_action_type() {
  
  return custom_action_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_custom_action_type() {
  // @@protoc_insertion_point(field_release:event.Action.custom_action_type)
  return custom_action_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_custom_action_type(std::string* custom_action_type) {
  if (custom_action_type != nullptr) {
    
  } else {
    
  }
  custom_action_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_action_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Action.custom_action_type)
}

// string element_id = 17 [json_name = "elementId"];
inline void Action::clear_element_id() {
  element_id_.ClearToEmpty();
}
inline const std::string& Action::element_id() const {
  // @@protoc_insertion_point(field_get:event.Action.element_id)
  return _internal_element_id();
}
inline void Action::set_element_id(const std::string& value) {
  _internal_set_element_id(value);
  // @@protoc_insertion_point(field_set:event.Action.element_id)
}
inline std::string* Action::mutable_element_id() {
  // @@protoc_insertion_point(field_mutable:event.Action.element_id)
  return _internal_mutable_element_id();
}
inline const std::string& Action::_internal_element_id() const {
  return element_id_.Get();
}
inline void Action::_internal_set_element_id(const std::string& value) {
  
  element_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_element_id(std::string&& value) {
  
  element_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.Action.element_id)
}
inline void Action::set_element_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  element_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.Action.element_id)
}
inline void Action::set_element_id(const char* value,
    size_t size) {
  
  element_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.Action.element_id)
}
inline std::string* Action::_internal_mutable_element_id() {
  
  return element_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_element_id() {
  // @@protoc_insertion_point(field_release:event.Action.element_id)
  return element_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_element_id(std::string* element_id) {
  if (element_id != nullptr) {
    
  } else {
    
  }
  element_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), element_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.Action.element_id)
}

// .event.NavigateAction navigate_action = 18 [json_name = "navigateAction"];
inline bool Action::_internal_has_navigate_action() const {
  return action_case() == kNavigateAction;
}
inline bool Action::has_navigate_action() const {
  return _internal_has_navigate_action();
}
inline void Action::set_has_navigate_action() {
  _oneof_case_[0] = kNavigateAction;
}
inline void Action::clear_navigate_action() {
  if (_internal_has_navigate_action()) {
    if (GetArena() == nullptr) {
      delete action_.navigate_action_;
    }
    clear_has_action();
  }
}
inline ::event::NavigateAction* Action::release_navigate_action() {
  // @@protoc_insertion_point(field_release:event.Action.navigate_action)
  if (_internal_has_navigate_action()) {
    clear_has_action();
      ::event::NavigateAction* temp = action_.navigate_action_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.navigate_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event::NavigateAction& Action::_internal_navigate_action() const {
  return _internal_has_navigate_action()
      ? *action_.navigate_action_
      : reinterpret_cast< ::event::NavigateAction&>(::event::_NavigateAction_default_instance_);
}
inline const ::event::NavigateAction& Action::navigate_action() const {
  // @@protoc_insertion_point(field_get:event.Action.navigate_action)
  return _internal_navigate_action();
}
inline ::event::NavigateAction* Action::unsafe_arena_release_navigate_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event.Action.navigate_action)
  if (_internal_has_navigate_action()) {
    clear_has_action();
    ::event::NavigateAction* temp = action_.navigate_action_;
    action_.navigate_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Action::unsafe_arena_set_allocated_navigate_action(::event::NavigateAction* navigate_action) {
  clear_action();
  if (navigate_action) {
    set_has_navigate_action();
    action_.navigate_action_ = navigate_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Action.navigate_action)
}
inline ::event::NavigateAction* Action::_internal_mutable_navigate_action() {
  if (!_internal_has_navigate_action()) {
    clear_action();
    set_has_navigate_action();
    action_.navigate_action_ = CreateMaybeMessage< ::event::NavigateAction >(GetArena());
  }
  return action_.navigate_action_;
}
inline ::event::NavigateAction* Action::mutable_navigate_action() {
  // @@protoc_insertion_point(field_mutable:event.Action.navigate_action)
  return _internal_mutable_navigate_action();
}

// bool has_superimposed_views = 22 [json_name = "hasSuperimposedViews"];
inline void Action::clear_has_superimposed_views() {
  has_superimposed_views_ = false;
}
inline bool Action::_internal_has_superimposed_views() const {
  return has_superimposed_views_;
}
inline bool Action::has_superimposed_views() const {
  // @@protoc_insertion_point(field_get:event.Action.has_superimposed_views)
  return _internal_has_superimposed_views();
}
inline void Action::_internal_set_has_superimposed_views(bool value) {
  
  has_superimposed_views_ = value;
}
inline void Action::set_has_superimposed_views(bool value) {
  _internal_set_has_superimposed_views(value);
  // @@protoc_insertion_point(field_set:event.Action.has_superimposed_views)
}

// .event.IndexPath client_position = 24 [json_name = "clientPosition"];
inline bool Action::_internal_has_client_position() const {
  return this != internal_default_instance() && client_position_ != nullptr;
}
inline bool Action::has_client_position() const {
  return _internal_has_client_position();
}
inline void Action::clear_client_position() {
  if (GetArena() == nullptr && client_position_ != nullptr) {
    delete client_position_;
  }
  client_position_ = nullptr;
}
inline const ::event::IndexPath& Action::_internal_client_position() const {
  const ::event::IndexPath* p = client_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::event::IndexPath&>(
      ::event::_IndexPath_default_instance_);
}
inline const ::event::IndexPath& Action::client_position() const {
  // @@protoc_insertion_point(field_get:event.Action.client_position)
  return _internal_client_position();
}
inline void Action::unsafe_arena_set_allocated_client_position(
    ::event::IndexPath* client_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_position_);
  }
  client_position_ = client_position;
  if (client_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Action.client_position)
}
inline ::event::IndexPath* Action::release_client_position() {
  
  ::event::IndexPath* temp = client_position_;
  client_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event::IndexPath* Action::unsafe_arena_release_client_position() {
  // @@protoc_insertion_point(field_release:event.Action.client_position)
  
  ::event::IndexPath* temp = client_position_;
  client_position_ = nullptr;
  return temp;
}
inline ::event::IndexPath* Action::_internal_mutable_client_position() {
  
  if (client_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::event::IndexPath>(GetArena());
    client_position_ = p;
  }
  return client_position_;
}
inline ::event::IndexPath* Action::mutable_client_position() {
  // @@protoc_insertion_point(field_mutable:event.Action.client_position)
  return _internal_mutable_client_position();
}
inline void Action::set_allocated_client_position(::event::IndexPath* client_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete client_position_;
  }
  if (client_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client_position);
    if (message_arena != submessage_arena) {
      client_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_position, submessage_arena);
    }
    
  } else {
    
  }
  client_position_ = client_position;
  // @@protoc_insertion_point(field_set_allocated:event.Action.client_position)
}

// .event.IdentifierProvenances id_provenances = 25 [json_name = "idProvenances"];
inline bool Action::_internal_has_id_provenances() const {
  return this != internal_default_instance() && id_provenances_ != nullptr;
}
inline bool Action::has_id_provenances() const {
  return _internal_has_id_provenances();
}
inline void Action::clear_id_provenances() {
  if (GetArena() == nullptr && id_provenances_ != nullptr) {
    delete id_provenances_;
  }
  id_provenances_ = nullptr;
}
inline const ::event::IdentifierProvenances& Action::_internal_id_provenances() const {
  const ::event::IdentifierProvenances* p = id_provenances_;
  return p != nullptr ? *p : reinterpret_cast<const ::event::IdentifierProvenances&>(
      ::event::_IdentifierProvenances_default_instance_);
}
inline const ::event::IdentifierProvenances& Action::id_provenances() const {
  // @@protoc_insertion_point(field_get:event.Action.id_provenances)
  return _internal_id_provenances();
}
inline void Action::unsafe_arena_set_allocated_id_provenances(
    ::event::IdentifierProvenances* id_provenances) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_provenances_);
  }
  id_provenances_ = id_provenances;
  if (id_provenances) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Action.id_provenances)
}
inline ::event::IdentifierProvenances* Action::release_id_provenances() {
  
  ::event::IdentifierProvenances* temp = id_provenances_;
  id_provenances_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event::IdentifierProvenances* Action::unsafe_arena_release_id_provenances() {
  // @@protoc_insertion_point(field_release:event.Action.id_provenances)
  
  ::event::IdentifierProvenances* temp = id_provenances_;
  id_provenances_ = nullptr;
  return temp;
}
inline ::event::IdentifierProvenances* Action::_internal_mutable_id_provenances() {
  
  if (id_provenances_ == nullptr) {
    auto* p = CreateMaybeMessage<::event::IdentifierProvenances>(GetArena());
    id_provenances_ = p;
  }
  return id_provenances_;
}
inline ::event::IdentifierProvenances* Action::mutable_id_provenances() {
  // @@protoc_insertion_point(field_mutable:event.Action.id_provenances)
  return _internal_mutable_id_provenances();
}
inline void Action::set_allocated_id_provenances(::event::IdentifierProvenances* id_provenances) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_provenances_;
  }
  if (id_provenances) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id_provenances);
    if (message_arena != submessage_arena) {
      id_provenances = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id_provenances, submessage_arena);
    }
    
  } else {
    
  }
  id_provenances_ = id_provenances;
  // @@protoc_insertion_point(field_set_allocated:event.Action.id_provenances)
}

// .common.Properties properties = 20 [json_name = "properties"];
inline bool Action::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool Action::has_properties() const {
  return _internal_has_properties();
}
inline const ::common::Properties& Action::_internal_properties() const {
  const ::common::Properties* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Properties&>(
      ::common::_Properties_default_instance_);
}
inline const ::common::Properties& Action::properties() const {
  // @@protoc_insertion_point(field_get:event.Action.properties)
  return _internal_properties();
}
inline void Action::unsafe_arena_set_allocated_properties(
    ::common::Properties* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Action.properties)
}
inline ::common::Properties* Action::release_properties() {
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Properties* Action::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:event.Action.properties)
  
  ::common::Properties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::common::Properties* Action::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Properties>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline ::common::Properties* Action::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:event.Action.properties)
  return _internal_mutable_properties();
}
inline void Action::set_allocated_properties(::common::Properties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties)->GetArena();
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:event.Action.properties)
}

// .common.Device device = 26 [json_name = "device"];
inline bool Action::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool Action::has_device() const {
  return _internal_has_device();
}
inline const ::common::Device& Action::_internal_device() const {
  const ::common::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Device&>(
      ::common::_Device_default_instance_);
}
inline const ::common::Device& Action::device() const {
  // @@protoc_insertion_point(field_get:event.Action.device)
  return _internal_device();
}
inline void Action::unsafe_arena_set_allocated_device(
    ::common::Device* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Action.device)
}
inline ::common::Device* Action::release_device() {
  
  ::common::Device* temp = device_;
  device_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Device* Action::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:event.Action.device)
  
  ::common::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::common::Device* Action::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Device>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::common::Device* Action::mutable_device() {
  // @@protoc_insertion_point(field_mutable:event.Action.device)
  return _internal_mutable_device();
}
inline void Action::set_allocated_device(::common::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device)->GetArena();
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:event.Action.device)
}

// .event.Cart cart = 28 [json_name = "cart"];
inline bool Action::_internal_has_cart() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cart_ != nullptr);
  return value;
}
inline bool Action::has_cart() const {
  return _internal_has_cart();
}
inline void Action::clear_cart() {
  if (GetArena() == nullptr && cart_ != nullptr) {
    delete cart_;
  }
  cart_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::event::Cart& Action::_internal_cart() const {
  const ::event::Cart* p = cart_;
  return p != nullptr ? *p : reinterpret_cast<const ::event::Cart&>(
      ::event::_Cart_default_instance_);
}
inline const ::event::Cart& Action::cart() const {
  // @@protoc_insertion_point(field_get:event.Action.cart)
  return _internal_cart();
}
inline void Action::unsafe_arena_set_allocated_cart(
    ::event::Cart* cart) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cart_);
  }
  cart_ = cart;
  if (cart) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Action.cart)
}
inline ::event::Cart* Action::release_cart() {
  _has_bits_[0] &= ~0x00000001u;
  ::event::Cart* temp = cart_;
  cart_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event::Cart* Action::unsafe_arena_release_cart() {
  // @@protoc_insertion_point(field_release:event.Action.cart)
  _has_bits_[0] &= ~0x00000001u;
  ::event::Cart* temp = cart_;
  cart_ = nullptr;
  return temp;
}
inline ::event::Cart* Action::_internal_mutable_cart() {
  _has_bits_[0] |= 0x00000001u;
  if (cart_ == nullptr) {
    auto* p = CreateMaybeMessage<::event::Cart>(GetArena());
    cart_ = p;
  }
  return cart_;
}
inline ::event::Cart* Action::mutable_cart() {
  // @@protoc_insertion_point(field_mutable:event.Action.cart)
  return _internal_mutable_cart();
}
inline void Action::set_allocated_cart(::event::Cart* cart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cart_;
  }
  if (cart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cart);
    if (message_arena != submessage_arena) {
      cart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cart, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cart_ = cart;
  // @@protoc_insertion_point(field_set_allocated:event.Action.cart)
}

inline bool Action::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void Action::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline Action::ActionCase Action::action_case() const {
  return Action::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Cart

// repeated .event.CartContent contents = 1 [json_name = "contents"];
inline int Cart::_internal_contents_size() const {
  return contents_.size();
}
inline int Cart::contents_size() const {
  return _internal_contents_size();
}
inline void Cart::clear_contents() {
  contents_.Clear();
}
inline ::event::CartContent* Cart::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:event.Cart.contents)
  return contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::CartContent >*
Cart::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:event.Cart.contents)
  return &contents_;
}
inline const ::event::CartContent& Cart::_internal_contents(int index) const {
  return contents_.Get(index);
}
inline const ::event::CartContent& Cart::contents(int index) const {
  // @@protoc_insertion_point(field_get:event.Cart.contents)
  return _internal_contents(index);
}
inline ::event::CartContent* Cart::_internal_add_contents() {
  return contents_.Add();
}
inline ::event::CartContent* Cart::add_contents() {
  // @@protoc_insertion_point(field_add:event.Cart.contents)
  return _internal_add_contents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::CartContent >&
Cart::contents() const {
  // @@protoc_insertion_point(field_list:event.Cart.contents)
  return contents_;
}

// -------------------------------------------------------------------

// CartContent

// string content_id = 1 [json_name = "contentId"];
inline void CartContent::clear_content_id() {
  content_id_.ClearToEmpty();
}
inline const std::string& CartContent::content_id() const {
  // @@protoc_insertion_point(field_get:event.CartContent.content_id)
  return _internal_content_id();
}
inline void CartContent::set_content_id(const std::string& value) {
  _internal_set_content_id(value);
  // @@protoc_insertion_point(field_set:event.CartContent.content_id)
}
inline std::string* CartContent::mutable_content_id() {
  // @@protoc_insertion_point(field_mutable:event.CartContent.content_id)
  return _internal_mutable_content_id();
}
inline const std::string& CartContent::_internal_content_id() const {
  return content_id_.Get();
}
inline void CartContent::_internal_set_content_id(const std::string& value) {
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CartContent::set_content_id(std::string&& value) {
  
  content_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.CartContent.content_id)
}
inline void CartContent::set_content_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.CartContent.content_id)
}
inline void CartContent::set_content_id(const char* value,
    size_t size) {
  
  content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.CartContent.content_id)
}
inline std::string* CartContent::_internal_mutable_content_id() {
  
  return content_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CartContent::release_content_id() {
  // @@protoc_insertion_point(field_release:event.CartContent.content_id)
  return content_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CartContent::set_allocated_content_id(std::string* content_id) {
  if (content_id != nullptr) {
    
  } else {
    
  }
  content_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.CartContent.content_id)
}

// int64 quantity = 2 [json_name = "quantity"];
inline void CartContent::clear_quantity() {
  quantity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CartContent::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CartContent::quantity() const {
  // @@protoc_insertion_point(field_get:event.CartContent.quantity)
  return _internal_quantity();
}
inline void CartContent::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  quantity_ = value;
}
inline void CartContent::set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:event.CartContent.quantity)
}

// .common.Money price_per_unit = 3 [json_name = "pricePerUnit"];
inline bool CartContent::_internal_has_price_per_unit() const {
  return this != internal_default_instance() && price_per_unit_ != nullptr;
}
inline bool CartContent::has_price_per_unit() const {
  return _internal_has_price_per_unit();
}
inline const ::common::Money& CartContent::_internal_price_per_unit() const {
  const ::common::Money* p = price_per_unit_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Money&>(
      ::common::_Money_default_instance_);
}
inline const ::common::Money& CartContent::price_per_unit() const {
  // @@protoc_insertion_point(field_get:event.CartContent.price_per_unit)
  return _internal_price_per_unit();
}
inline void CartContent::unsafe_arena_set_allocated_price_per_unit(
    ::common::Money* price_per_unit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_per_unit_);
  }
  price_per_unit_ = price_per_unit;
  if (price_per_unit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.CartContent.price_per_unit)
}
inline ::common::Money* CartContent::release_price_per_unit() {
  
  ::common::Money* temp = price_per_unit_;
  price_per_unit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Money* CartContent::unsafe_arena_release_price_per_unit() {
  // @@protoc_insertion_point(field_release:event.CartContent.price_per_unit)
  
  ::common::Money* temp = price_per_unit_;
  price_per_unit_ = nullptr;
  return temp;
}
inline ::common::Money* CartContent::_internal_mutable_price_per_unit() {
  
  if (price_per_unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Money>(GetArena());
    price_per_unit_ = p;
  }
  return price_per_unit_;
}
inline ::common::Money* CartContent::mutable_price_per_unit() {
  // @@protoc_insertion_point(field_mutable:event.CartContent.price_per_unit)
  return _internal_mutable_price_per_unit();
}
inline void CartContent::set_allocated_price_per_unit(::common::Money* price_per_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_per_unit_);
  }
  if (price_per_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_per_unit)->GetArena();
    if (message_arena != submessage_arena) {
      price_per_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price_per_unit, submessage_arena);
    }
    
  } else {
    
  }
  price_per_unit_ = price_per_unit;
  // @@protoc_insertion_point(field_set_allocated:event.CartContent.price_per_unit)
}

// -------------------------------------------------------------------

// Attribution

// uint64 model_id = 1 [json_name = "modelId"];
inline void Attribution::clear_model_id() {
  model_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Attribution::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Attribution::model_id() const {
  // @@protoc_insertion_point(field_get:event.Attribution.model_id)
  return _internal_model_id();
}
inline void Attribution::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  model_id_ = value;
}
inline void Attribution::set_model_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:event.Attribution.model_id)
}

// int32 credit_millis = 2 [json_name = "creditMillis"];
inline void Attribution::clear_credit_millis() {
  credit_millis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attribution::_internal_credit_millis() const {
  return credit_millis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attribution::credit_millis() const {
  // @@protoc_insertion_point(field_get:event.Attribution.credit_millis)
  return _internal_credit_millis();
}
inline void Attribution::_internal_set_credit_millis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  credit_millis_ = value;
}
inline void Attribution::set_credit_millis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_credit_millis(value);
  // @@protoc_insertion_point(field_set:event.Attribution.credit_millis)
}

// -------------------------------------------------------------------

// IOSError

// int32 code = 1 [json_name = "code"];
inline void IOSError::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOSError::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOSError::code() const {
  // @@protoc_insertion_point(field_get:event.IOSError.code)
  return _internal_code();
}
inline void IOSError::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void IOSError::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:event.IOSError.code)
}

// string domain = 2 [json_name = "domain"];
inline void IOSError::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& IOSError::domain() const {
  // @@protoc_insertion_point(field_get:event.IOSError.domain)
  return _internal_domain();
}
inline void IOSError::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:event.IOSError.domain)
}
inline std::string* IOSError::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:event.IOSError.domain)
  return _internal_mutable_domain();
}
inline const std::string& IOSError::_internal_domain() const {
  return domain_.Get();
}
inline void IOSError::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IOSError::set_domain(std::string&& value) {
  
  domain_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.IOSError.domain)
}
inline void IOSError::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.IOSError.domain)
}
inline void IOSError::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.IOSError.domain)
}
inline std::string* IOSError::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IOSError::release_domain() {
  // @@protoc_insertion_point(field_release:event.IOSError.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IOSError::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.IOSError.domain)
}

// string description = 3 [json_name = "description"];
inline void IOSError::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& IOSError::description() const {
  // @@protoc_insertion_point(field_get:event.IOSError.description)
  return _internal_description();
}
inline void IOSError::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:event.IOSError.description)
}
inline std::string* IOSError::mutable_description() {
  // @@protoc_insertion_point(field_mutable:event.IOSError.description)
  return _internal_mutable_description();
}
inline const std::string& IOSError::_internal_description() const {
  return description_.Get();
}
inline void IOSError::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IOSError::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.IOSError.description)
}
inline void IOSError::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.IOSError.description)
}
inline void IOSError::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.IOSError.description)
}
inline std::string* IOSError::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IOSError::release_description() {
  // @@protoc_insertion_point(field_release:event.IOSError.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IOSError::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.IOSError.description)
}

// int32 batch_number = 4 [json_name = "batchNumber"];
inline void IOSError::clear_batch_number() {
  batch_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOSError::_internal_batch_number() const {
  return batch_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOSError::batch_number() const {
  // @@protoc_insertion_point(field_get:event.IOSError.batch_number)
  return _internal_batch_number();
}
inline void IOSError::_internal_set_batch_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batch_number_ = value;
}
inline void IOSError::set_batch_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batch_number(value);
  // @@protoc_insertion_point(field_set:event.IOSError.batch_number)
}

// -------------------------------------------------------------------

// ErrorHistory

// repeated .event.IOSError ios_errors = 1 [json_name = "iosErrors"];
inline int ErrorHistory::_internal_ios_errors_size() const {
  return ios_errors_.size();
}
inline int ErrorHistory::ios_errors_size() const {
  return _internal_ios_errors_size();
}
inline void ErrorHistory::clear_ios_errors() {
  ios_errors_.Clear();
}
inline ::event::IOSError* ErrorHistory::mutable_ios_errors(int index) {
  // @@protoc_insertion_point(field_mutable:event.ErrorHistory.ios_errors)
  return ios_errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::IOSError >*
ErrorHistory::mutable_ios_errors() {
  // @@protoc_insertion_point(field_mutable_list:event.ErrorHistory.ios_errors)
  return &ios_errors_;
}
inline const ::event::IOSError& ErrorHistory::_internal_ios_errors(int index) const {
  return ios_errors_.Get(index);
}
inline const ::event::IOSError& ErrorHistory::ios_errors(int index) const {
  // @@protoc_insertion_point(field_get:event.ErrorHistory.ios_errors)
  return _internal_ios_errors(index);
}
inline ::event::IOSError* ErrorHistory::_internal_add_ios_errors() {
  return ios_errors_.Add();
}
inline ::event::IOSError* ErrorHistory::add_ios_errors() {
  // @@protoc_insertion_point(field_add:event.ErrorHistory.ios_errors)
  return _internal_add_ios_errors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::IOSError >&
ErrorHistory::ios_errors() const {
  // @@protoc_insertion_point(field_list:event.ErrorHistory.ios_errors)
  return ios_errors_;
}

// int32 total_errors = 2 [json_name = "totalErrors"];
inline void ErrorHistory::clear_total_errors() {
  total_errors_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorHistory::_internal_total_errors() const {
  return total_errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorHistory::total_errors() const {
  // @@protoc_insertion_point(field_get:event.ErrorHistory.total_errors)
  return _internal_total_errors();
}
inline void ErrorHistory::_internal_set_total_errors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_errors_ = value;
}
inline void ErrorHistory::set_total_errors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_errors(value);
  // @@protoc_insertion_point(field_set:event.ErrorHistory.total_errors)
}

// -------------------------------------------------------------------

// AncestorIdHistoryItem

// string ancestor_id = 1 [json_name = "ancestorId"];
inline void AncestorIdHistoryItem::clear_ancestor_id() {
  ancestor_id_.ClearToEmpty();
}
inline const std::string& AncestorIdHistoryItem::ancestor_id() const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistoryItem.ancestor_id)
  return _internal_ancestor_id();
}
inline void AncestorIdHistoryItem::set_ancestor_id(const std::string& value) {
  _internal_set_ancestor_id(value);
  // @@protoc_insertion_point(field_set:event.AncestorIdHistoryItem.ancestor_id)
}
inline std::string* AncestorIdHistoryItem::mutable_ancestor_id() {
  // @@protoc_insertion_point(field_mutable:event.AncestorIdHistoryItem.ancestor_id)
  return _internal_mutable_ancestor_id();
}
inline const std::string& AncestorIdHistoryItem::_internal_ancestor_id() const {
  return ancestor_id_.Get();
}
inline void AncestorIdHistoryItem::_internal_set_ancestor_id(const std::string& value) {
  
  ancestor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AncestorIdHistoryItem::set_ancestor_id(std::string&& value) {
  
  ancestor_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.AncestorIdHistoryItem.ancestor_id)
}
inline void AncestorIdHistoryItem::set_ancestor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ancestor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.AncestorIdHistoryItem.ancestor_id)
}
inline void AncestorIdHistoryItem::set_ancestor_id(const char* value,
    size_t size) {
  
  ancestor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.AncestorIdHistoryItem.ancestor_id)
}
inline std::string* AncestorIdHistoryItem::_internal_mutable_ancestor_id() {
  
  return ancestor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AncestorIdHistoryItem::release_ancestor_id() {
  // @@protoc_insertion_point(field_release:event.AncestorIdHistoryItem.ancestor_id)
  return ancestor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AncestorIdHistoryItem::set_allocated_ancestor_id(std::string* ancestor_id) {
  if (ancestor_id != nullptr) {
    
  } else {
    
  }
  ancestor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ancestor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.AncestorIdHistoryItem.ancestor_id)
}

// .event.User user_event = 2 [json_name = "userEvent"];
inline bool AncestorIdHistoryItem::_internal_has_user_event() const {
  return logged_event_case() == kUserEvent;
}
inline bool AncestorIdHistoryItem::has_user_event() const {
  return _internal_has_user_event();
}
inline void AncestorIdHistoryItem::set_has_user_event() {
  _oneof_case_[0] = kUserEvent;
}
inline void AncestorIdHistoryItem::clear_user_event() {
  if (_internal_has_user_event()) {
    if (GetArena() == nullptr) {
      delete logged_event_.user_event_;
    }
    clear_has_logged_event();
  }
}
inline ::event::User* AncestorIdHistoryItem::release_user_event() {
  // @@protoc_insertion_point(field_release:event.AncestorIdHistoryItem.user_event)
  if (_internal_has_user_event()) {
    clear_has_logged_event();
      ::event::User* temp = logged_event_.user_event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    logged_event_.user_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event::User& AncestorIdHistoryItem::_internal_user_event() const {
  return _internal_has_user_event()
      ? *logged_event_.user_event_
      : reinterpret_cast< ::event::User&>(::event::_User_default_instance_);
}
inline const ::event::User& AncestorIdHistoryItem::user_event() const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistoryItem.user_event)
  return _internal_user_event();
}
inline ::event::User* AncestorIdHistoryItem::unsafe_arena_release_user_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event.AncestorIdHistoryItem.user_event)
  if (_internal_has_user_event()) {
    clear_has_logged_event();
    ::event::User* temp = logged_event_.user_event_;
    logged_event_.user_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AncestorIdHistoryItem::unsafe_arena_set_allocated_user_event(::event::User* user_event) {
  clear_logged_event();
  if (user_event) {
    set_has_user_event();
    logged_event_.user_event_ = user_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.AncestorIdHistoryItem.user_event)
}
inline ::event::User* AncestorIdHistoryItem::_internal_mutable_user_event() {
  if (!_internal_has_user_event()) {
    clear_logged_event();
    set_has_user_event();
    logged_event_.user_event_ = CreateMaybeMessage< ::event::User >(GetArena());
  }
  return logged_event_.user_event_;
}
inline ::event::User* AncestorIdHistoryItem::mutable_user_event() {
  // @@protoc_insertion_point(field_mutable:event.AncestorIdHistoryItem.user_event)
  return _internal_mutable_user_event();
}

// string session_id_from_user_event = 3 [json_name = "sessionIdFromUserEvent"];
inline bool AncestorIdHistoryItem::_internal_has_session_id_from_user_event() const {
  return logged_event_case() == kSessionIdFromUserEvent;
}
inline bool AncestorIdHistoryItem::has_session_id_from_user_event() const {
  return _internal_has_session_id_from_user_event();
}
inline void AncestorIdHistoryItem::set_has_session_id_from_user_event() {
  _oneof_case_[0] = kSessionIdFromUserEvent;
}
inline void AncestorIdHistoryItem::clear_session_id_from_user_event() {
  if (_internal_has_session_id_from_user_event()) {
    logged_event_.session_id_from_user_event_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_logged_event();
  }
}
inline const std::string& AncestorIdHistoryItem::session_id_from_user_event() const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistoryItem.session_id_from_user_event)
  return _internal_session_id_from_user_event();
}
inline void AncestorIdHistoryItem::set_session_id_from_user_event(const std::string& value) {
  _internal_set_session_id_from_user_event(value);
  // @@protoc_insertion_point(field_set:event.AncestorIdHistoryItem.session_id_from_user_event)
}
inline std::string* AncestorIdHistoryItem::mutable_session_id_from_user_event() {
  // @@protoc_insertion_point(field_mutable:event.AncestorIdHistoryItem.session_id_from_user_event)
  return _internal_mutable_session_id_from_user_event();
}
inline const std::string& AncestorIdHistoryItem::_internal_session_id_from_user_event() const {
  if (_internal_has_session_id_from_user_event()) {
    return logged_event_.session_id_from_user_event_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AncestorIdHistoryItem::_internal_set_session_id_from_user_event(const std::string& value) {
  if (!_internal_has_session_id_from_user_event()) {
    clear_logged_event();
    set_has_session_id_from_user_event();
    logged_event_.session_id_from_user_event_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  logged_event_.session_id_from_user_event_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AncestorIdHistoryItem::set_session_id_from_user_event(std::string&& value) {
  // @@protoc_insertion_point(field_set:event.AncestorIdHistoryItem.session_id_from_user_event)
  if (!_internal_has_session_id_from_user_event()) {
    clear_logged_event();
    set_has_session_id_from_user_event();
    logged_event_.session_id_from_user_event_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  logged_event_.session_id_from_user_event_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.AncestorIdHistoryItem.session_id_from_user_event)
}
inline void AncestorIdHistoryItem::set_session_id_from_user_event(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_session_id_from_user_event()) {
    clear_logged_event();
    set_has_session_id_from_user_event();
    logged_event_.session_id_from_user_event_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  logged_event_.session_id_from_user_event_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.AncestorIdHistoryItem.session_id_from_user_event)
}
inline void AncestorIdHistoryItem::set_session_id_from_user_event(const char* value,
                             size_t size) {
  if (!_internal_has_session_id_from_user_event()) {
    clear_logged_event();
    set_has_session_id_from_user_event();
    logged_event_.session_id_from_user_event_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  logged_event_.session_id_from_user_event_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.AncestorIdHistoryItem.session_id_from_user_event)
}
inline std::string* AncestorIdHistoryItem::_internal_mutable_session_id_from_user_event() {
  if (!_internal_has_session_id_from_user_event()) {
    clear_logged_event();
    set_has_session_id_from_user_event();
    logged_event_.session_id_from_user_event_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return logged_event_.session_id_from_user_event_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AncestorIdHistoryItem::release_session_id_from_user_event() {
  // @@protoc_insertion_point(field_release:event.AncestorIdHistoryItem.session_id_from_user_event)
  if (_internal_has_session_id_from_user_event()) {
    clear_has_logged_event();
    return logged_event_.session_id_from_user_event_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AncestorIdHistoryItem::set_allocated_session_id_from_user_event(std::string* session_id_from_user_event) {
  if (has_logged_event()) {
    clear_logged_event();
  }
  if (session_id_from_user_event != nullptr) {
    set_has_session_id_from_user_event();
    logged_event_.session_id_from_user_event_.UnsafeSetDefault(session_id_from_user_event);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(session_id_from_user_event);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:event.AncestorIdHistoryItem.session_id_from_user_event)
}

// .event.View view_event = 4 [json_name = "viewEvent"];
inline bool AncestorIdHistoryItem::_internal_has_view_event() const {
  return logged_event_case() == kViewEvent;
}
inline bool AncestorIdHistoryItem::has_view_event() const {
  return _internal_has_view_event();
}
inline void AncestorIdHistoryItem::set_has_view_event() {
  _oneof_case_[0] = kViewEvent;
}
inline void AncestorIdHistoryItem::clear_view_event() {
  if (_internal_has_view_event()) {
    if (GetArena() == nullptr) {
      delete logged_event_.view_event_;
    }
    clear_has_logged_event();
  }
}
inline ::event::View* AncestorIdHistoryItem::release_view_event() {
  // @@protoc_insertion_point(field_release:event.AncestorIdHistoryItem.view_event)
  if (_internal_has_view_event()) {
    clear_has_logged_event();
      ::event::View* temp = logged_event_.view_event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    logged_event_.view_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event::View& AncestorIdHistoryItem::_internal_view_event() const {
  return _internal_has_view_event()
      ? *logged_event_.view_event_
      : reinterpret_cast< ::event::View&>(::event::_View_default_instance_);
}
inline const ::event::View& AncestorIdHistoryItem::view_event() const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistoryItem.view_event)
  return _internal_view_event();
}
inline ::event::View* AncestorIdHistoryItem::unsafe_arena_release_view_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event.AncestorIdHistoryItem.view_event)
  if (_internal_has_view_event()) {
    clear_has_logged_event();
    ::event::View* temp = logged_event_.view_event_;
    logged_event_.view_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AncestorIdHistoryItem::unsafe_arena_set_allocated_view_event(::event::View* view_event) {
  clear_logged_event();
  if (view_event) {
    set_has_view_event();
    logged_event_.view_event_ = view_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.AncestorIdHistoryItem.view_event)
}
inline ::event::View* AncestorIdHistoryItem::_internal_mutable_view_event() {
  if (!_internal_has_view_event()) {
    clear_logged_event();
    set_has_view_event();
    logged_event_.view_event_ = CreateMaybeMessage< ::event::View >(GetArena());
  }
  return logged_event_.view_event_;
}
inline ::event::View* AncestorIdHistoryItem::mutable_view_event() {
  // @@protoc_insertion_point(field_mutable:event.AncestorIdHistoryItem.view_event)
  return _internal_mutable_view_event();
}

// .event.AutoView auto_view_event = 6 [json_name = "autoViewEvent"];
inline bool AncestorIdHistoryItem::_internal_has_auto_view_event() const {
  return logged_event_case() == kAutoViewEvent;
}
inline bool AncestorIdHistoryItem::has_auto_view_event() const {
  return _internal_has_auto_view_event();
}
inline void AncestorIdHistoryItem::set_has_auto_view_event() {
  _oneof_case_[0] = kAutoViewEvent;
}
inline void AncestorIdHistoryItem::clear_auto_view_event() {
  if (_internal_has_auto_view_event()) {
    if (GetArena() == nullptr) {
      delete logged_event_.auto_view_event_;
    }
    clear_has_logged_event();
  }
}
inline ::event::AutoView* AncestorIdHistoryItem::release_auto_view_event() {
  // @@protoc_insertion_point(field_release:event.AncestorIdHistoryItem.auto_view_event)
  if (_internal_has_auto_view_event()) {
    clear_has_logged_event();
      ::event::AutoView* temp = logged_event_.auto_view_event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    logged_event_.auto_view_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event::AutoView& AncestorIdHistoryItem::_internal_auto_view_event() const {
  return _internal_has_auto_view_event()
      ? *logged_event_.auto_view_event_
      : reinterpret_cast< ::event::AutoView&>(::event::_AutoView_default_instance_);
}
inline const ::event::AutoView& AncestorIdHistoryItem::auto_view_event() const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistoryItem.auto_view_event)
  return _internal_auto_view_event();
}
inline ::event::AutoView* AncestorIdHistoryItem::unsafe_arena_release_auto_view_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event.AncestorIdHistoryItem.auto_view_event)
  if (_internal_has_auto_view_event()) {
    clear_has_logged_event();
    ::event::AutoView* temp = logged_event_.auto_view_event_;
    logged_event_.auto_view_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AncestorIdHistoryItem::unsafe_arena_set_allocated_auto_view_event(::event::AutoView* auto_view_event) {
  clear_logged_event();
  if (auto_view_event) {
    set_has_auto_view_event();
    logged_event_.auto_view_event_ = auto_view_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.AncestorIdHistoryItem.auto_view_event)
}
inline ::event::AutoView* AncestorIdHistoryItem::_internal_mutable_auto_view_event() {
  if (!_internal_has_auto_view_event()) {
    clear_logged_event();
    set_has_auto_view_event();
    logged_event_.auto_view_event_ = CreateMaybeMessage< ::event::AutoView >(GetArena());
  }
  return logged_event_.auto_view_event_;
}
inline ::event::AutoView* AncestorIdHistoryItem::mutable_auto_view_event() {
  // @@protoc_insertion_point(field_mutable:event.AncestorIdHistoryItem.auto_view_event)
  return _internal_mutable_auto_view_event();
}

// int32 batch_number = 5 [json_name = "batchNumber"];
inline void AncestorIdHistoryItem::clear_batch_number() {
  batch_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AncestorIdHistoryItem::_internal_batch_number() const {
  return batch_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AncestorIdHistoryItem::batch_number() const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistoryItem.batch_number)
  return _internal_batch_number();
}
inline void AncestorIdHistoryItem::_internal_set_batch_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batch_number_ = value;
}
inline void AncestorIdHistoryItem::set_batch_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batch_number(value);
  // @@protoc_insertion_point(field_set:event.AncestorIdHistoryItem.batch_number)
}

inline bool AncestorIdHistoryItem::has_logged_event() const {
  return logged_event_case() != LOGGED_EVENT_NOT_SET;
}
inline void AncestorIdHistoryItem::clear_has_logged_event() {
  _oneof_case_[0] = LOGGED_EVENT_NOT_SET;
}
inline AncestorIdHistoryItem::LoggedEventCase AncestorIdHistoryItem::logged_event_case() const {
  return AncestorIdHistoryItem::LoggedEventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AncestorIdHistory

// repeated .event.AncestorIdHistoryItem log_user_id_history = 1 [json_name = "logUserIdHistory"];
inline int AncestorIdHistory::_internal_log_user_id_history_size() const {
  return log_user_id_history_.size();
}
inline int AncestorIdHistory::log_user_id_history_size() const {
  return _internal_log_user_id_history_size();
}
inline void AncestorIdHistory::clear_log_user_id_history() {
  log_user_id_history_.Clear();
}
inline ::event::AncestorIdHistoryItem* AncestorIdHistory::mutable_log_user_id_history(int index) {
  // @@protoc_insertion_point(field_mutable:event.AncestorIdHistory.log_user_id_history)
  return log_user_id_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >*
AncestorIdHistory::mutable_log_user_id_history() {
  // @@protoc_insertion_point(field_mutable_list:event.AncestorIdHistory.log_user_id_history)
  return &log_user_id_history_;
}
inline const ::event::AncestorIdHistoryItem& AncestorIdHistory::_internal_log_user_id_history(int index) const {
  return log_user_id_history_.Get(index);
}
inline const ::event::AncestorIdHistoryItem& AncestorIdHistory::log_user_id_history(int index) const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistory.log_user_id_history)
  return _internal_log_user_id_history(index);
}
inline ::event::AncestorIdHistoryItem* AncestorIdHistory::_internal_add_log_user_id_history() {
  return log_user_id_history_.Add();
}
inline ::event::AncestorIdHistoryItem* AncestorIdHistory::add_log_user_id_history() {
  // @@protoc_insertion_point(field_add:event.AncestorIdHistory.log_user_id_history)
  return _internal_add_log_user_id_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >&
AncestorIdHistory::log_user_id_history() const {
  // @@protoc_insertion_point(field_list:event.AncestorIdHistory.log_user_id_history)
  return log_user_id_history_;
}

// int32 total_log_user_ids_logged = 2 [json_name = "totalLogUserIdsLogged"];
inline void AncestorIdHistory::clear_total_log_user_ids_logged() {
  total_log_user_ids_logged_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AncestorIdHistory::_internal_total_log_user_ids_logged() const {
  return total_log_user_ids_logged_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AncestorIdHistory::total_log_user_ids_logged() const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistory.total_log_user_ids_logged)
  return _internal_total_log_user_ids_logged();
}
inline void AncestorIdHistory::_internal_set_total_log_user_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_log_user_ids_logged_ = value;
}
inline void AncestorIdHistory::set_total_log_user_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_log_user_ids_logged(value);
  // @@protoc_insertion_point(field_set:event.AncestorIdHistory.total_log_user_ids_logged)
}

// repeated .event.AncestorIdHistoryItem session_id_history = 3 [json_name = "sessionIdHistory"];
inline int AncestorIdHistory::_internal_session_id_history_size() const {
  return session_id_history_.size();
}
inline int AncestorIdHistory::session_id_history_size() const {
  return _internal_session_id_history_size();
}
inline void AncestorIdHistory::clear_session_id_history() {
  session_id_history_.Clear();
}
inline ::event::AncestorIdHistoryItem* AncestorIdHistory::mutable_session_id_history(int index) {
  // @@protoc_insertion_point(field_mutable:event.AncestorIdHistory.session_id_history)
  return session_id_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >*
AncestorIdHistory::mutable_session_id_history() {
  // @@protoc_insertion_point(field_mutable_list:event.AncestorIdHistory.session_id_history)
  return &session_id_history_;
}
inline const ::event::AncestorIdHistoryItem& AncestorIdHistory::_internal_session_id_history(int index) const {
  return session_id_history_.Get(index);
}
inline const ::event::AncestorIdHistoryItem& AncestorIdHistory::session_id_history(int index) const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistory.session_id_history)
  return _internal_session_id_history(index);
}
inline ::event::AncestorIdHistoryItem* AncestorIdHistory::_internal_add_session_id_history() {
  return session_id_history_.Add();
}
inline ::event::AncestorIdHistoryItem* AncestorIdHistory::add_session_id_history() {
  // @@protoc_insertion_point(field_add:event.AncestorIdHistory.session_id_history)
  return _internal_add_session_id_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >&
AncestorIdHistory::session_id_history() const {
  // @@protoc_insertion_point(field_list:event.AncestorIdHistory.session_id_history)
  return session_id_history_;
}

// int32 total_session_ids_logged = 4 [json_name = "totalSessionIdsLogged"];
inline void AncestorIdHistory::clear_total_session_ids_logged() {
  total_session_ids_logged_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AncestorIdHistory::_internal_total_session_ids_logged() const {
  return total_session_ids_logged_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AncestorIdHistory::total_session_ids_logged() const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistory.total_session_ids_logged)
  return _internal_total_session_ids_logged();
}
inline void AncestorIdHistory::_internal_set_total_session_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_session_ids_logged_ = value;
}
inline void AncestorIdHistory::set_total_session_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_session_ids_logged(value);
  // @@protoc_insertion_point(field_set:event.AncestorIdHistory.total_session_ids_logged)
}

// repeated .event.AncestorIdHistoryItem view_id_history = 5 [json_name = "viewIdHistory"];
inline int AncestorIdHistory::_internal_view_id_history_size() const {
  return view_id_history_.size();
}
inline int AncestorIdHistory::view_id_history_size() const {
  return _internal_view_id_history_size();
}
inline void AncestorIdHistory::clear_view_id_history() {
  view_id_history_.Clear();
}
inline ::event::AncestorIdHistoryItem* AncestorIdHistory::mutable_view_id_history(int index) {
  // @@protoc_insertion_point(field_mutable:event.AncestorIdHistory.view_id_history)
  return view_id_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >*
AncestorIdHistory::mutable_view_id_history() {
  // @@protoc_insertion_point(field_mutable_list:event.AncestorIdHistory.view_id_history)
  return &view_id_history_;
}
inline const ::event::AncestorIdHistoryItem& AncestorIdHistory::_internal_view_id_history(int index) const {
  return view_id_history_.Get(index);
}
inline const ::event::AncestorIdHistoryItem& AncestorIdHistory::view_id_history(int index) const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistory.view_id_history)
  return _internal_view_id_history(index);
}
inline ::event::AncestorIdHistoryItem* AncestorIdHistory::_internal_add_view_id_history() {
  return view_id_history_.Add();
}
inline ::event::AncestorIdHistoryItem* AncestorIdHistory::add_view_id_history() {
  // @@protoc_insertion_point(field_add:event.AncestorIdHistory.view_id_history)
  return _internal_add_view_id_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >&
AncestorIdHistory::view_id_history() const {
  // @@protoc_insertion_point(field_list:event.AncestorIdHistory.view_id_history)
  return view_id_history_;
}

// int32 total_view_ids_logged = 6 [json_name = "totalViewIdsLogged"];
inline void AncestorIdHistory::clear_total_view_ids_logged() {
  total_view_ids_logged_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AncestorIdHistory::_internal_total_view_ids_logged() const {
  return total_view_ids_logged_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AncestorIdHistory::total_view_ids_logged() const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistory.total_view_ids_logged)
  return _internal_total_view_ids_logged();
}
inline void AncestorIdHistory::_internal_set_total_view_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_view_ids_logged_ = value;
}
inline void AncestorIdHistory::set_total_view_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_view_ids_logged(value);
  // @@protoc_insertion_point(field_set:event.AncestorIdHistory.total_view_ids_logged)
}

// repeated .event.AncestorIdHistoryItem auto_view_id_history = 7 [json_name = "autoViewIdHistory"];
inline int AncestorIdHistory::_internal_auto_view_id_history_size() const {
  return auto_view_id_history_.size();
}
inline int AncestorIdHistory::auto_view_id_history_size() const {
  return _internal_auto_view_id_history_size();
}
inline void AncestorIdHistory::clear_auto_view_id_history() {
  auto_view_id_history_.Clear();
}
inline ::event::AncestorIdHistoryItem* AncestorIdHistory::mutable_auto_view_id_history(int index) {
  // @@protoc_insertion_point(field_mutable:event.AncestorIdHistory.auto_view_id_history)
  return auto_view_id_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >*
AncestorIdHistory::mutable_auto_view_id_history() {
  // @@protoc_insertion_point(field_mutable_list:event.AncestorIdHistory.auto_view_id_history)
  return &auto_view_id_history_;
}
inline const ::event::AncestorIdHistoryItem& AncestorIdHistory::_internal_auto_view_id_history(int index) const {
  return auto_view_id_history_.Get(index);
}
inline const ::event::AncestorIdHistoryItem& AncestorIdHistory::auto_view_id_history(int index) const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistory.auto_view_id_history)
  return _internal_auto_view_id_history(index);
}
inline ::event::AncestorIdHistoryItem* AncestorIdHistory::_internal_add_auto_view_id_history() {
  return auto_view_id_history_.Add();
}
inline ::event::AncestorIdHistoryItem* AncestorIdHistory::add_auto_view_id_history() {
  // @@protoc_insertion_point(field_add:event.AncestorIdHistory.auto_view_id_history)
  return _internal_add_auto_view_id_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AncestorIdHistoryItem >&
AncestorIdHistory::auto_view_id_history() const {
  // @@protoc_insertion_point(field_list:event.AncestorIdHistory.auto_view_id_history)
  return auto_view_id_history_;
}

// int32 total_auto_view_ids_logged = 8 [json_name = "totalAutoViewIdsLogged"];
inline void AncestorIdHistory::clear_total_auto_view_ids_logged() {
  total_auto_view_ids_logged_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AncestorIdHistory::_internal_total_auto_view_ids_logged() const {
  return total_auto_view_ids_logged_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AncestorIdHistory::total_auto_view_ids_logged() const {
  // @@protoc_insertion_point(field_get:event.AncestorIdHistory.total_auto_view_ids_logged)
  return _internal_total_auto_view_ids_logged();
}
inline void AncestorIdHistory::_internal_set_total_auto_view_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_auto_view_ids_logged_ = value;
}
inline void AncestorIdHistory::set_total_auto_view_ids_logged(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_auto_view_ids_logged(value);
  // @@protoc_insertion_point(field_set:event.AncestorIdHistory.total_auto_view_ids_logged)
}

// -------------------------------------------------------------------

// MobileDiagnostics

// string device_identifier = 1 [json_name = "deviceIdentifier"];
inline void MobileDiagnostics::clear_device_identifier() {
  device_identifier_.ClearToEmpty();
}
inline const std::string& MobileDiagnostics::device_identifier() const {
  // @@protoc_insertion_point(field_get:event.MobileDiagnostics.device_identifier)
  return _internal_device_identifier();
}
inline void MobileDiagnostics::set_device_identifier(const std::string& value) {
  _internal_set_device_identifier(value);
  // @@protoc_insertion_point(field_set:event.MobileDiagnostics.device_identifier)
}
inline std::string* MobileDiagnostics::mutable_device_identifier() {
  // @@protoc_insertion_point(field_mutable:event.MobileDiagnostics.device_identifier)
  return _internal_mutable_device_identifier();
}
inline const std::string& MobileDiagnostics::_internal_device_identifier() const {
  return device_identifier_.Get();
}
inline void MobileDiagnostics::_internal_set_device_identifier(const std::string& value) {
  
  device_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MobileDiagnostics::set_device_identifier(std::string&& value) {
  
  device_identifier_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.MobileDiagnostics.device_identifier)
}
inline void MobileDiagnostics::set_device_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.MobileDiagnostics.device_identifier)
}
inline void MobileDiagnostics::set_device_identifier(const char* value,
    size_t size) {
  
  device_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.MobileDiagnostics.device_identifier)
}
inline std::string* MobileDiagnostics::_internal_mutable_device_identifier() {
  
  return device_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MobileDiagnostics::release_device_identifier() {
  // @@protoc_insertion_point(field_release:event.MobileDiagnostics.device_identifier)
  return device_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MobileDiagnostics::set_allocated_device_identifier(std::string* device_identifier) {
  if (device_identifier != nullptr) {
    
  } else {
    
  }
  device_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.MobileDiagnostics.device_identifier)
}

// string client_version = 2 [json_name = "clientVersion", deprecated = true];
inline void MobileDiagnostics::clear_client_version() {
  client_version_.ClearToEmpty();
}
inline const std::string& MobileDiagnostics::client_version() const {
  // @@protoc_insertion_point(field_get:event.MobileDiagnostics.client_version)
  return _internal_client_version();
}
inline void MobileDiagnostics::set_client_version(const std::string& value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:event.MobileDiagnostics.client_version)
}
inline std::string* MobileDiagnostics::mutable_client_version() {
  // @@protoc_insertion_point(field_mutable:event.MobileDiagnostics.client_version)
  return _internal_mutable_client_version();
}
inline const std::string& MobileDiagnostics::_internal_client_version() const {
  return client_version_.Get();
}
inline void MobileDiagnostics::_internal_set_client_version(const std::string& value) {
  
  client_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MobileDiagnostics::set_client_version(std::string&& value) {
  
  client_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.MobileDiagnostics.client_version)
}
inline void MobileDiagnostics::set_client_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.MobileDiagnostics.client_version)
}
inline void MobileDiagnostics::set_client_version(const char* value,
    size_t size) {
  
  client_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.MobileDiagnostics.client_version)
}
inline std::string* MobileDiagnostics::_internal_mutable_client_version() {
  
  return client_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MobileDiagnostics::release_client_version() {
  // @@protoc_insertion_point(field_release:event.MobileDiagnostics.client_version)
  return client_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MobileDiagnostics::set_allocated_client_version(std::string* client_version) {
  if (client_version != nullptr) {
    
  } else {
    
  }
  client_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.MobileDiagnostics.client_version)
}

// string promoted_library_version = 3 [json_name = "promotedLibraryVersion", deprecated = true];
inline void MobileDiagnostics::clear_promoted_library_version() {
  promoted_library_version_.ClearToEmpty();
}
inline const std::string& MobileDiagnostics::promoted_library_version() const {
  // @@protoc_insertion_point(field_get:event.MobileDiagnostics.promoted_library_version)
  return _internal_promoted_library_version();
}
inline void MobileDiagnostics::set_promoted_library_version(const std::string& value) {
  _internal_set_promoted_library_version(value);
  // @@protoc_insertion_point(field_set:event.MobileDiagnostics.promoted_library_version)
}
inline std::string* MobileDiagnostics::mutable_promoted_library_version() {
  // @@protoc_insertion_point(field_mutable:event.MobileDiagnostics.promoted_library_version)
  return _internal_mutable_promoted_library_version();
}
inline const std::string& MobileDiagnostics::_internal_promoted_library_version() const {
  return promoted_library_version_.Get();
}
inline void MobileDiagnostics::_internal_set_promoted_library_version(const std::string& value) {
  
  promoted_library_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MobileDiagnostics::set_promoted_library_version(std::string&& value) {
  
  promoted_library_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:event.MobileDiagnostics.promoted_library_version)
}
inline void MobileDiagnostics::set_promoted_library_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  promoted_library_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:event.MobileDiagnostics.promoted_library_version)
}
inline void MobileDiagnostics::set_promoted_library_version(const char* value,
    size_t size) {
  
  promoted_library_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:event.MobileDiagnostics.promoted_library_version)
}
inline std::string* MobileDiagnostics::_internal_mutable_promoted_library_version() {
  
  return promoted_library_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MobileDiagnostics::release_promoted_library_version() {
  // @@protoc_insertion_point(field_release:event.MobileDiagnostics.promoted_library_version)
  return promoted_library_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MobileDiagnostics::set_allocated_promoted_library_version(std::string* promoted_library_version) {
  if (promoted_library_version != nullptr) {
    
  } else {
    
  }
  promoted_library_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), promoted_library_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:event.MobileDiagnostics.promoted_library_version)
}

// int32 batches_attempted = 4 [json_name = "batchesAttempted"];
inline void MobileDiagnostics::clear_batches_attempted() {
  batches_attempted_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MobileDiagnostics::_internal_batches_attempted() const {
  return batches_attempted_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MobileDiagnostics::batches_attempted() const {
  // @@protoc_insertion_point(field_get:event.MobileDiagnostics.batches_attempted)
  return _internal_batches_attempted();
}
inline void MobileDiagnostics::_internal_set_batches_attempted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batches_attempted_ = value;
}
inline void MobileDiagnostics::set_batches_attempted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batches_attempted(value);
  // @@protoc_insertion_point(field_set:event.MobileDiagnostics.batches_attempted)
}

// int32 batches_sent_successfully = 5 [json_name = "batchesSentSuccessfully"];
inline void MobileDiagnostics::clear_batches_sent_successfully() {
  batches_sent_successfully_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MobileDiagnostics::_internal_batches_sent_successfully() const {
  return batches_sent_successfully_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MobileDiagnostics::batches_sent_successfully() const {
  // @@protoc_insertion_point(field_get:event.MobileDiagnostics.batches_sent_successfully)
  return _internal_batches_sent_successfully();
}
inline void MobileDiagnostics::_internal_set_batches_sent_successfully(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batches_sent_successfully_ = value;
}
inline void MobileDiagnostics::set_batches_sent_successfully(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batches_sent_successfully(value);
  // @@protoc_insertion_point(field_set:event.MobileDiagnostics.batches_sent_successfully)
}

// int32 batches_with_errors = 6 [json_name = "batchesWithErrors"];
inline void MobileDiagnostics::clear_batches_with_errors() {
  batches_with_errors_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MobileDiagnostics::_internal_batches_with_errors() const {
  return batches_with_errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MobileDiagnostics::batches_with_errors() const {
  // @@protoc_insertion_point(field_get:event.MobileDiagnostics.batches_with_errors)
  return _internal_batches_with_errors();
}
inline void MobileDiagnostics::_internal_set_batches_with_errors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batches_with_errors_ = value;
}
inline void MobileDiagnostics::set_batches_with_errors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batches_with_errors(value);
  // @@protoc_insertion_point(field_set:event.MobileDiagnostics.batches_with_errors)
}

// .event.ErrorHistory error_history = 7 [json_name = "errorHistory"];
inline bool MobileDiagnostics::_internal_has_error_history() const {
  return this != internal_default_instance() && error_history_ != nullptr;
}
inline bool MobileDiagnostics::has_error_history() const {
  return _internal_has_error_history();
}
inline void MobileDiagnostics::clear_error_history() {
  if (GetArena() == nullptr && error_history_ != nullptr) {
    delete error_history_;
  }
  error_history_ = nullptr;
}
inline const ::event::ErrorHistory& MobileDiagnostics::_internal_error_history() const {
  const ::event::ErrorHistory* p = error_history_;
  return p != nullptr ? *p : reinterpret_cast<const ::event::ErrorHistory&>(
      ::event::_ErrorHistory_default_instance_);
}
inline const ::event::ErrorHistory& MobileDiagnostics::error_history() const {
  // @@protoc_insertion_point(field_get:event.MobileDiagnostics.error_history)
  return _internal_error_history();
}
inline void MobileDiagnostics::unsafe_arena_set_allocated_error_history(
    ::event::ErrorHistory* error_history) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_history_);
  }
  error_history_ = error_history;
  if (error_history) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.MobileDiagnostics.error_history)
}
inline ::event::ErrorHistory* MobileDiagnostics::release_error_history() {
  
  ::event::ErrorHistory* temp = error_history_;
  error_history_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event::ErrorHistory* MobileDiagnostics::unsafe_arena_release_error_history() {
  // @@protoc_insertion_point(field_release:event.MobileDiagnostics.error_history)
  
  ::event::ErrorHistory* temp = error_history_;
  error_history_ = nullptr;
  return temp;
}
inline ::event::ErrorHistory* MobileDiagnostics::_internal_mutable_error_history() {
  
  if (error_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::event::ErrorHistory>(GetArena());
    error_history_ = p;
  }
  return error_history_;
}
inline ::event::ErrorHistory* MobileDiagnostics::mutable_error_history() {
  // @@protoc_insertion_point(field_mutable:event.MobileDiagnostics.error_history)
  return _internal_mutable_error_history();
}
inline void MobileDiagnostics::set_allocated_error_history(::event::ErrorHistory* error_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete error_history_;
  }
  if (error_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error_history);
    if (message_arena != submessage_arena) {
      error_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_history, submessage_arena);
    }
    
  } else {
    
  }
  error_history_ = error_history;
  // @@protoc_insertion_point(field_set_allocated:event.MobileDiagnostics.error_history)
}

// .event.AncestorIdHistory ancestor_id_history = 8 [json_name = "ancestorIdHistory"];
inline bool MobileDiagnostics::_internal_has_ancestor_id_history() const {
  return this != internal_default_instance() && ancestor_id_history_ != nullptr;
}
inline bool MobileDiagnostics::has_ancestor_id_history() const {
  return _internal_has_ancestor_id_history();
}
inline void MobileDiagnostics::clear_ancestor_id_history() {
  if (GetArena() == nullptr && ancestor_id_history_ != nullptr) {
    delete ancestor_id_history_;
  }
  ancestor_id_history_ = nullptr;
}
inline const ::event::AncestorIdHistory& MobileDiagnostics::_internal_ancestor_id_history() const {
  const ::event::AncestorIdHistory* p = ancestor_id_history_;
  return p != nullptr ? *p : reinterpret_cast<const ::event::AncestorIdHistory&>(
      ::event::_AncestorIdHistory_default_instance_);
}
inline const ::event::AncestorIdHistory& MobileDiagnostics::ancestor_id_history() const {
  // @@protoc_insertion_point(field_get:event.MobileDiagnostics.ancestor_id_history)
  return _internal_ancestor_id_history();
}
inline void MobileDiagnostics::unsafe_arena_set_allocated_ancestor_id_history(
    ::event::AncestorIdHistory* ancestor_id_history) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ancestor_id_history_);
  }
  ancestor_id_history_ = ancestor_id_history;
  if (ancestor_id_history) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.MobileDiagnostics.ancestor_id_history)
}
inline ::event::AncestorIdHistory* MobileDiagnostics::release_ancestor_id_history() {
  
  ::event::AncestorIdHistory* temp = ancestor_id_history_;
  ancestor_id_history_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::event::AncestorIdHistory* MobileDiagnostics::unsafe_arena_release_ancestor_id_history() {
  // @@protoc_insertion_point(field_release:event.MobileDiagnostics.ancestor_id_history)
  
  ::event::AncestorIdHistory* temp = ancestor_id_history_;
  ancestor_id_history_ = nullptr;
  return temp;
}
inline ::event::AncestorIdHistory* MobileDiagnostics::_internal_mutable_ancestor_id_history() {
  
  if (ancestor_id_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::event::AncestorIdHistory>(GetArena());
    ancestor_id_history_ = p;
  }
  return ancestor_id_history_;
}
inline ::event::AncestorIdHistory* MobileDiagnostics::mutable_ancestor_id_history() {
  // @@protoc_insertion_point(field_mutable:event.MobileDiagnostics.ancestor_id_history)
  return _internal_mutable_ancestor_id_history();
}
inline void MobileDiagnostics::set_allocated_ancestor_id_history(::event::AncestorIdHistory* ancestor_id_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ancestor_id_history_;
  }
  if (ancestor_id_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ancestor_id_history);
    if (message_arena != submessage_arena) {
      ancestor_id_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ancestor_id_history, submessage_arena);
    }
    
  } else {
    
  }
  ancestor_id_history_ = ancestor_id_history;
  // @@protoc_insertion_point(field_set_allocated:event.MobileDiagnostics.ancestor_id_history)
}

// -------------------------------------------------------------------

// Diagnostics

// uint64 platform_id = 1 [json_name = "platformId"];
inline void Diagnostics::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Diagnostics::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Diagnostics::platform_id() const {
  // @@protoc_insertion_point(field_get:event.Diagnostics.platform_id)
  return _internal_platform_id();
}
inline void Diagnostics::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void Diagnostics::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:event.Diagnostics.platform_id)
}

// .common.UserInfo user_info = 2 [json_name = "userInfo"];
inline bool Diagnostics::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool Diagnostics::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::common::UserInfo& Diagnostics::_internal_user_info() const {
  const ::common::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UserInfo&>(
      ::common::_UserInfo_default_instance_);
}
inline const ::common::UserInfo& Diagnostics::user_info() const {
  // @@protoc_insertion_point(field_get:event.Diagnostics.user_info)
  return _internal_user_info();
}
inline void Diagnostics::unsafe_arena_set_allocated_user_info(
    ::common::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Diagnostics.user_info)
}
inline ::common::UserInfo* Diagnostics::release_user_info() {
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::UserInfo* Diagnostics::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:event.Diagnostics.user_info)
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::common::UserInfo* Diagnostics::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::common::UserInfo* Diagnostics::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:event.Diagnostics.user_info)
  return _internal_mutable_user_info();
}
inline void Diagnostics::set_allocated_user_info(::common::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:event.Diagnostics.user_info)
}

// .common.Timing timing = 3 [json_name = "timing"];
inline bool Diagnostics::_internal_has_timing() const {
  return this != internal_default_instance() && timing_ != nullptr;
}
inline bool Diagnostics::has_timing() const {
  return _internal_has_timing();
}
inline const ::common::Timing& Diagnostics::_internal_timing() const {
  const ::common::Timing* p = timing_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Timing&>(
      ::common::_Timing_default_instance_);
}
inline const ::common::Timing& Diagnostics::timing() const {
  // @@protoc_insertion_point(field_get:event.Diagnostics.timing)
  return _internal_timing();
}
inline void Diagnostics::unsafe_arena_set_allocated_timing(
    ::common::Timing* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Diagnostics.timing)
}
inline ::common::Timing* Diagnostics::release_timing() {
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Timing* Diagnostics::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:event.Diagnostics.timing)
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::common::Timing* Diagnostics::_internal_mutable_timing() {
  
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Timing>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::common::Timing* Diagnostics::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:event.Diagnostics.timing)
  return _internal_mutable_timing();
}
inline void Diagnostics::set_allocated_timing(::common::Timing* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing)->GetArena();
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:event.Diagnostics.timing)
}

// .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
inline bool Diagnostics::_internal_has_client_info() const {
  return this != internal_default_instance() && client_info_ != nullptr;
}
inline bool Diagnostics::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::common::ClientInfo& Diagnostics::_internal_client_info() const {
  const ::common::ClientInfo* p = client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientInfo&>(
      ::common::_ClientInfo_default_instance_);
}
inline const ::common::ClientInfo& Diagnostics::client_info() const {
  // @@protoc_insertion_point(field_get:event.Diagnostics.client_info)
  return _internal_client_info();
}
inline void Diagnostics::unsafe_arena_set_allocated_client_info(
    ::common::ClientInfo* client_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Diagnostics.client_info)
}
inline ::common::ClientInfo* Diagnostics::release_client_info() {
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ClientInfo* Diagnostics::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:event.Diagnostics.client_info)
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::common::ClientInfo* Diagnostics::_internal_mutable_client_info() {
  
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientInfo>(GetArena());
    client_info_ = p;
  }
  return client_info_;
}
inline ::common::ClientInfo* Diagnostics::mutable_client_info() {
  // @@protoc_insertion_point(field_mutable:event.Diagnostics.client_info)
  return _internal_mutable_client_info();
}
inline void Diagnostics::set_allocated_client_info(::common::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info)->GetArena();
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:event.Diagnostics.client_info)
}

// .event.MobileDiagnostics mobile_diagnostics = 5 [json_name = "mobileDiagnostics"];
inline bool Diagnostics::_internal_has_mobile_diagnostics() const {
  return diagnostics_message_case() == kMobileDiagnostics;
}
inline bool Diagnostics::has_mobile_diagnostics() const {
  return _internal_has_mobile_diagnostics();
}
inline void Diagnostics::set_has_mobile_diagnostics() {
  _oneof_case_[0] = kMobileDiagnostics;
}
inline void Diagnostics::clear_mobile_diagnostics() {
  if (_internal_has_mobile_diagnostics()) {
    if (GetArena() == nullptr) {
      delete diagnostics_message_.mobile_diagnostics_;
    }
    clear_has_diagnostics_message();
  }
}
inline ::event::MobileDiagnostics* Diagnostics::release_mobile_diagnostics() {
  // @@protoc_insertion_point(field_release:event.Diagnostics.mobile_diagnostics)
  if (_internal_has_mobile_diagnostics()) {
    clear_has_diagnostics_message();
      ::event::MobileDiagnostics* temp = diagnostics_message_.mobile_diagnostics_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    diagnostics_message_.mobile_diagnostics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event::MobileDiagnostics& Diagnostics::_internal_mobile_diagnostics() const {
  return _internal_has_mobile_diagnostics()
      ? *diagnostics_message_.mobile_diagnostics_
      : reinterpret_cast< ::event::MobileDiagnostics&>(::event::_MobileDiagnostics_default_instance_);
}
inline const ::event::MobileDiagnostics& Diagnostics::mobile_diagnostics() const {
  // @@protoc_insertion_point(field_get:event.Diagnostics.mobile_diagnostics)
  return _internal_mobile_diagnostics();
}
inline ::event::MobileDiagnostics* Diagnostics::unsafe_arena_release_mobile_diagnostics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event.Diagnostics.mobile_diagnostics)
  if (_internal_has_mobile_diagnostics()) {
    clear_has_diagnostics_message();
    ::event::MobileDiagnostics* temp = diagnostics_message_.mobile_diagnostics_;
    diagnostics_message_.mobile_diagnostics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Diagnostics::unsafe_arena_set_allocated_mobile_diagnostics(::event::MobileDiagnostics* mobile_diagnostics) {
  clear_diagnostics_message();
  if (mobile_diagnostics) {
    set_has_mobile_diagnostics();
    diagnostics_message_.mobile_diagnostics_ = mobile_diagnostics;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.Diagnostics.mobile_diagnostics)
}
inline ::event::MobileDiagnostics* Diagnostics::_internal_mutable_mobile_diagnostics() {
  if (!_internal_has_mobile_diagnostics()) {
    clear_diagnostics_message();
    set_has_mobile_diagnostics();
    diagnostics_message_.mobile_diagnostics_ = CreateMaybeMessage< ::event::MobileDiagnostics >(GetArena());
  }
  return diagnostics_message_.mobile_diagnostics_;
}
inline ::event::MobileDiagnostics* Diagnostics::mutable_mobile_diagnostics() {
  // @@protoc_insertion_point(field_mutable:event.Diagnostics.mobile_diagnostics)
  return _internal_mutable_mobile_diagnostics();
}

inline bool Diagnostics::has_diagnostics_message() const {
  return diagnostics_message_case() != DIAGNOSTICS_MESSAGE_NOT_SET;
}
inline void Diagnostics::clear_has_diagnostics_message() {
  _oneof_case_[0] = DIAGNOSTICS_MESSAGE_NOT_SET;
}
inline Diagnostics::DiagnosticsMessageCase Diagnostics::diagnostics_message_case() const {
  return Diagnostics::DiagnosticsMessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LogRequest

// uint64 platform_id = 1 [json_name = "platformId"];
inline void LogRequest::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogRequest::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogRequest::platform_id() const {
  // @@protoc_insertion_point(field_get:event.LogRequest.platform_id)
  return _internal_platform_id();
}
inline void LogRequest::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void LogRequest::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:event.LogRequest.platform_id)
}

// .common.UserInfo user_info = 2 [json_name = "userInfo"];
inline bool LogRequest::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool LogRequest::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::common::UserInfo& LogRequest::_internal_user_info() const {
  const ::common::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::UserInfo&>(
      ::common::_UserInfo_default_instance_);
}
inline const ::common::UserInfo& LogRequest::user_info() const {
  // @@protoc_insertion_point(field_get:event.LogRequest.user_info)
  return _internal_user_info();
}
inline void LogRequest::unsafe_arena_set_allocated_user_info(
    ::common::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.LogRequest.user_info)
}
inline ::common::UserInfo* LogRequest::release_user_info() {
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::UserInfo* LogRequest::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:event.LogRequest.user_info)
  
  ::common::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::common::UserInfo* LogRequest::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::common::UserInfo* LogRequest::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.user_info)
  return _internal_mutable_user_info();
}
inline void LogRequest::set_allocated_user_info(::common::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:event.LogRequest.user_info)
}

// .common.Timing timing = 3 [json_name = "timing"];
inline bool LogRequest::_internal_has_timing() const {
  return this != internal_default_instance() && timing_ != nullptr;
}
inline bool LogRequest::has_timing() const {
  return _internal_has_timing();
}
inline const ::common::Timing& LogRequest::_internal_timing() const {
  const ::common::Timing* p = timing_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Timing&>(
      ::common::_Timing_default_instance_);
}
inline const ::common::Timing& LogRequest::timing() const {
  // @@protoc_insertion_point(field_get:event.LogRequest.timing)
  return _internal_timing();
}
inline void LogRequest::unsafe_arena_set_allocated_timing(
    ::common::Timing* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.LogRequest.timing)
}
inline ::common::Timing* LogRequest::release_timing() {
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Timing* LogRequest::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:event.LogRequest.timing)
  
  ::common::Timing* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::common::Timing* LogRequest::_internal_mutable_timing() {
  
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Timing>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::common::Timing* LogRequest::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.timing)
  return _internal_mutable_timing();
}
inline void LogRequest::set_allocated_timing(::common::Timing* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing)->GetArena();
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:event.LogRequest.timing)
}

// .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
inline bool LogRequest::_internal_has_client_info() const {
  return this != internal_default_instance() && client_info_ != nullptr;
}
inline bool LogRequest::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::common::ClientInfo& LogRequest::_internal_client_info() const {
  const ::common::ClientInfo* p = client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientInfo&>(
      ::common::_ClientInfo_default_instance_);
}
inline const ::common::ClientInfo& LogRequest::client_info() const {
  // @@protoc_insertion_point(field_get:event.LogRequest.client_info)
  return _internal_client_info();
}
inline void LogRequest::unsafe_arena_set_allocated_client_info(
    ::common::ClientInfo* client_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.LogRequest.client_info)
}
inline ::common::ClientInfo* LogRequest::release_client_info() {
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ClientInfo* LogRequest::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:event.LogRequest.client_info)
  
  ::common::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::common::ClientInfo* LogRequest::_internal_mutable_client_info() {
  
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientInfo>(GetArena());
    client_info_ = p;
  }
  return client_info_;
}
inline ::common::ClientInfo* LogRequest::mutable_client_info() {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.client_info)
  return _internal_mutable_client_info();
}
inline void LogRequest::set_allocated_client_info(::common::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info)->GetArena();
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:event.LogRequest.client_info)
}

// .common.Device device = 24 [json_name = "device"];
inline bool LogRequest::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool LogRequest::has_device() const {
  return _internal_has_device();
}
inline const ::common::Device& LogRequest::_internal_device() const {
  const ::common::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Device&>(
      ::common::_Device_default_instance_);
}
inline const ::common::Device& LogRequest::device() const {
  // @@protoc_insertion_point(field_get:event.LogRequest.device)
  return _internal_device();
}
inline void LogRequest::unsafe_arena_set_allocated_device(
    ::common::Device* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event.LogRequest.device)
}
inline ::common::Device* LogRequest::release_device() {
  
  ::common::Device* temp = device_;
  device_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Device* LogRequest::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:event.LogRequest.device)
  
  ::common::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::common::Device* LogRequest::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Device>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::common::Device* LogRequest::mutable_device() {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.device)
  return _internal_mutable_device();
}
inline void LogRequest::set_allocated_device(::common::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device)->GetArena();
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:event.LogRequest.device)
}

// repeated .event.User user = 7 [json_name = "user"];
inline int LogRequest::_internal_user_size() const {
  return user_.size();
}
inline int LogRequest::user_size() const {
  return _internal_user_size();
}
inline void LogRequest::clear_user() {
  user_.Clear();
}
inline ::event::User* LogRequest::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.user)
  return user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::User >*
LogRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:event.LogRequest.user)
  return &user_;
}
inline const ::event::User& LogRequest::_internal_user(int index) const {
  return user_.Get(index);
}
inline const ::event::User& LogRequest::user(int index) const {
  // @@protoc_insertion_point(field_get:event.LogRequest.user)
  return _internal_user(index);
}
inline ::event::User* LogRequest::_internal_add_user() {
  return user_.Add();
}
inline ::event::User* LogRequest::add_user() {
  // @@protoc_insertion_point(field_add:event.LogRequest.user)
  return _internal_add_user();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::User >&
LogRequest::user() const {
  // @@protoc_insertion_point(field_list:event.LogRequest.user)
  return user_;
}

// repeated .event.CohortMembership cohort_membership = 8 [json_name = "cohortMembership"];
inline int LogRequest::_internal_cohort_membership_size() const {
  return cohort_membership_.size();
}
inline int LogRequest::cohort_membership_size() const {
  return _internal_cohort_membership_size();
}
inline void LogRequest::clear_cohort_membership() {
  cohort_membership_.Clear();
}
inline ::event::CohortMembership* LogRequest::mutable_cohort_membership(int index) {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.cohort_membership)
  return cohort_membership_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::CohortMembership >*
LogRequest::mutable_cohort_membership() {
  // @@protoc_insertion_point(field_mutable_list:event.LogRequest.cohort_membership)
  return &cohort_membership_;
}
inline const ::event::CohortMembership& LogRequest::_internal_cohort_membership(int index) const {
  return cohort_membership_.Get(index);
}
inline const ::event::CohortMembership& LogRequest::cohort_membership(int index) const {
  // @@protoc_insertion_point(field_get:event.LogRequest.cohort_membership)
  return _internal_cohort_membership(index);
}
inline ::event::CohortMembership* LogRequest::_internal_add_cohort_membership() {
  return cohort_membership_.Add();
}
inline ::event::CohortMembership* LogRequest::add_cohort_membership() {
  // @@protoc_insertion_point(field_add:event.LogRequest.cohort_membership)
  return _internal_add_cohort_membership();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::CohortMembership >&
LogRequest::cohort_membership() const {
  // @@protoc_insertion_point(field_list:event.LogRequest.cohort_membership)
  return cohort_membership_;
}

// repeated .event.View view = 11 [json_name = "view"];
inline int LogRequest::_internal_view_size() const {
  return view_.size();
}
inline int LogRequest::view_size() const {
  return _internal_view_size();
}
inline void LogRequest::clear_view() {
  view_.Clear();
}
inline ::event::View* LogRequest::mutable_view(int index) {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.view)
  return view_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::View >*
LogRequest::mutable_view() {
  // @@protoc_insertion_point(field_mutable_list:event.LogRequest.view)
  return &view_;
}
inline const ::event::View& LogRequest::_internal_view(int index) const {
  return view_.Get(index);
}
inline const ::event::View& LogRequest::view(int index) const {
  // @@protoc_insertion_point(field_get:event.LogRequest.view)
  return _internal_view(index);
}
inline ::event::View* LogRequest::_internal_add_view() {
  return view_.Add();
}
inline ::event::View* LogRequest::add_view() {
  // @@protoc_insertion_point(field_add:event.LogRequest.view)
  return _internal_add_view();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::View >&
LogRequest::view() const {
  // @@protoc_insertion_point(field_list:event.LogRequest.view)
  return view_;
}

// repeated .event.AutoView auto_view = 25 [json_name = "autoView"];
inline int LogRequest::_internal_auto_view_size() const {
  return auto_view_.size();
}
inline int LogRequest::auto_view_size() const {
  return _internal_auto_view_size();
}
inline void LogRequest::clear_auto_view() {
  auto_view_.Clear();
}
inline ::event::AutoView* LogRequest::mutable_auto_view(int index) {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.auto_view)
  return auto_view_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AutoView >*
LogRequest::mutable_auto_view() {
  // @@protoc_insertion_point(field_mutable_list:event.LogRequest.auto_view)
  return &auto_view_;
}
inline const ::event::AutoView& LogRequest::_internal_auto_view(int index) const {
  return auto_view_.Get(index);
}
inline const ::event::AutoView& LogRequest::auto_view(int index) const {
  // @@protoc_insertion_point(field_get:event.LogRequest.auto_view)
  return _internal_auto_view(index);
}
inline ::event::AutoView* LogRequest::_internal_add_auto_view() {
  return auto_view_.Add();
}
inline ::event::AutoView* LogRequest::add_auto_view() {
  // @@protoc_insertion_point(field_add:event.LogRequest.auto_view)
  return _internal_add_auto_view();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::AutoView >&
LogRequest::auto_view() const {
  // @@protoc_insertion_point(field_list:event.LogRequest.auto_view)
  return auto_view_;
}

// repeated .delivery.Request request = 12 [json_name = "request"];
inline int LogRequest::_internal_request_size() const {
  return request_.size();
}
inline int LogRequest::request_size() const {
  return _internal_request_size();
}
inline ::delivery::Request* LogRequest::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.request)
  return request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Request >*
LogRequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:event.LogRequest.request)
  return &request_;
}
inline const ::delivery::Request& LogRequest::_internal_request(int index) const {
  return request_.Get(index);
}
inline const ::delivery::Request& LogRequest::request(int index) const {
  // @@protoc_insertion_point(field_get:event.LogRequest.request)
  return _internal_request(index);
}
inline ::delivery::Request* LogRequest::_internal_add_request() {
  return request_.Add();
}
inline ::delivery::Request* LogRequest::add_request() {
  // @@protoc_insertion_point(field_add:event.LogRequest.request)
  return _internal_add_request();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Request >&
LogRequest::request() const {
  // @@protoc_insertion_point(field_list:event.LogRequest.request)
  return request_;
}

// repeated .delivery.Insertion insertion = 13 [json_name = "insertion"];
inline int LogRequest::_internal_insertion_size() const {
  return insertion_.size();
}
inline int LogRequest::insertion_size() const {
  return _internal_insertion_size();
}
inline ::delivery::Insertion* LogRequest::mutable_insertion(int index) {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.insertion)
  return insertion_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion >*
LogRequest::mutable_insertion() {
  // @@protoc_insertion_point(field_mutable_list:event.LogRequest.insertion)
  return &insertion_;
}
inline const ::delivery::Insertion& LogRequest::_internal_insertion(int index) const {
  return insertion_.Get(index);
}
inline const ::delivery::Insertion& LogRequest::insertion(int index) const {
  // @@protoc_insertion_point(field_get:event.LogRequest.insertion)
  return _internal_insertion(index);
}
inline ::delivery::Insertion* LogRequest::_internal_add_insertion() {
  return insertion_.Add();
}
inline ::delivery::Insertion* LogRequest::add_insertion() {
  // @@protoc_insertion_point(field_add:event.LogRequest.insertion)
  return _internal_add_insertion();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::Insertion >&
LogRequest::insertion() const {
  // @@protoc_insertion_point(field_list:event.LogRequest.insertion)
  return insertion_;
}

// repeated .event.Impression impression = 14 [json_name = "impression"];
inline int LogRequest::_internal_impression_size() const {
  return impression_.size();
}
inline int LogRequest::impression_size() const {
  return _internal_impression_size();
}
inline void LogRequest::clear_impression() {
  impression_.Clear();
}
inline ::event::Impression* LogRequest::mutable_impression(int index) {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.impression)
  return impression_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Impression >*
LogRequest::mutable_impression() {
  // @@protoc_insertion_point(field_mutable_list:event.LogRequest.impression)
  return &impression_;
}
inline const ::event::Impression& LogRequest::_internal_impression(int index) const {
  return impression_.Get(index);
}
inline const ::event::Impression& LogRequest::impression(int index) const {
  // @@protoc_insertion_point(field_get:event.LogRequest.impression)
  return _internal_impression(index);
}
inline ::event::Impression* LogRequest::_internal_add_impression() {
  return impression_.Add();
}
inline ::event::Impression* LogRequest::add_impression() {
  // @@protoc_insertion_point(field_add:event.LogRequest.impression)
  return _internal_add_impression();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Impression >&
LogRequest::impression() const {
  // @@protoc_insertion_point(field_list:event.LogRequest.impression)
  return impression_;
}

// repeated .event.Action action = 15 [json_name = "action"];
inline int LogRequest::_internal_action_size() const {
  return action_.size();
}
inline int LogRequest::action_size() const {
  return _internal_action_size();
}
inline void LogRequest::clear_action() {
  action_.Clear();
}
inline ::event::Action* LogRequest::mutable_action(int index) {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.action)
  return action_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Action >*
LogRequest::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:event.LogRequest.action)
  return &action_;
}
inline const ::event::Action& LogRequest::_internal_action(int index) const {
  return action_.Get(index);
}
inline const ::event::Action& LogRequest::action(int index) const {
  // @@protoc_insertion_point(field_get:event.LogRequest.action)
  return _internal_action(index);
}
inline ::event::Action* LogRequest::_internal_add_action() {
  return action_.Add();
}
inline ::event::Action* LogRequest::add_action() {
  // @@protoc_insertion_point(field_add:event.LogRequest.action)
  return _internal_add_action();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Action >&
LogRequest::action() const {
  // @@protoc_insertion_point(field_list:event.LogRequest.action)
  return action_;
}

// repeated .delivery.DeliveryLog delivery_log = 18 [json_name = "deliveryLog"];
inline int LogRequest::_internal_delivery_log_size() const {
  return delivery_log_.size();
}
inline int LogRequest::delivery_log_size() const {
  return _internal_delivery_log_size();
}
inline ::delivery::DeliveryLog* LogRequest::mutable_delivery_log(int index) {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.delivery_log)
  return delivery_log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::DeliveryLog >*
LogRequest::mutable_delivery_log() {
  // @@protoc_insertion_point(field_mutable_list:event.LogRequest.delivery_log)
  return &delivery_log_;
}
inline const ::delivery::DeliveryLog& LogRequest::_internal_delivery_log(int index) const {
  return delivery_log_.Get(index);
}
inline const ::delivery::DeliveryLog& LogRequest::delivery_log(int index) const {
  // @@protoc_insertion_point(field_get:event.LogRequest.delivery_log)
  return _internal_delivery_log(index);
}
inline ::delivery::DeliveryLog* LogRequest::_internal_add_delivery_log() {
  return delivery_log_.Add();
}
inline ::delivery::DeliveryLog* LogRequest::add_delivery_log() {
  // @@protoc_insertion_point(field_add:event.LogRequest.delivery_log)
  return _internal_add_delivery_log();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::delivery::DeliveryLog >&
LogRequest::delivery_log() const {
  // @@protoc_insertion_point(field_list:event.LogRequest.delivery_log)
  return delivery_log_;
}

// repeated .event.Diagnostics diagnostics = 23 [json_name = "diagnostics"];
inline int LogRequest::_internal_diagnostics_size() const {
  return diagnostics_.size();
}
inline int LogRequest::diagnostics_size() const {
  return _internal_diagnostics_size();
}
inline void LogRequest::clear_diagnostics() {
  diagnostics_.Clear();
}
inline ::event::Diagnostics* LogRequest::mutable_diagnostics(int index) {
  // @@protoc_insertion_point(field_mutable:event.LogRequest.diagnostics)
  return diagnostics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Diagnostics >*
LogRequest::mutable_diagnostics() {
  // @@protoc_insertion_point(field_mutable_list:event.LogRequest.diagnostics)
  return &diagnostics_;
}
inline const ::event::Diagnostics& LogRequest::_internal_diagnostics(int index) const {
  return diagnostics_.Get(index);
}
inline const ::event::Diagnostics& LogRequest::diagnostics(int index) const {
  // @@protoc_insertion_point(field_get:event.LogRequest.diagnostics)
  return _internal_diagnostics(index);
}
inline ::event::Diagnostics* LogRequest::_internal_add_diagnostics() {
  return diagnostics_.Add();
}
inline ::event::Diagnostics* LogRequest::add_diagnostics() {
  // @@protoc_insertion_point(field_add:event.LogRequest.diagnostics)
  return _internal_add_diagnostics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event::Diagnostics >&
LogRequest::diagnostics() const {
  // @@protoc_insertion_point(field_list:event.LogRequest.diagnostics)
  return diagnostics_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace event

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::event::View_ViewType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::event::View_ViewType>() {
  return ::event::View_ViewType_descriptor();
}
template <> struct is_proto_enum< ::event::IdentifierProvenance> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::event::IdentifierProvenance>() {
  return ::event::IdentifierProvenance_descriptor();
}
template <> struct is_proto_enum< ::event::CohortArm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::event::CohortArm>() {
  return ::event::CohortArm_descriptor();
}
template <> struct is_proto_enum< ::event::ImpressionSourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::event::ImpressionSourceType>() {
  return ::event::ImpressionSourceType_descriptor();
}
template <> struct is_proto_enum< ::event::ActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::event::ActionType>() {
  return ::event::ActionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fevent_2fevent_2eproto
