// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/event/event.proto

#include "proto/event/event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace event {
constexpr JoinedIdentifiers::JoinedIdentifiers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , log_user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , insertion_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , impression_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auto_view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , anon_user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , platform_id_(PROTOBUF_ULONGLONG(0)){}
struct JoinedIdentifiersDefaultTypeInternal {
  constexpr JoinedIdentifiersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinedIdentifiersDefaultTypeInternal() {}
  union {
    JoinedIdentifiers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinedIdentifiersDefaultTypeInternal _JoinedIdentifiers_default_instance_;
constexpr IdentifierProvenances::IdentifierProvenances(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_provenance_(0)

  , session_id_provenance_(0)

  , view_id_provenance_(0)

  , impression_id_provenance_(0)

  , action_id_provenance_(0)

  , content_id_provenance_(0)

  , request_id_provenance_(0)

  , auto_view_id_provenance_(0)

  , log_user_id_provenance_(0)

  , insertion_id_provenance_(0)
{}
struct IdentifierProvenancesDefaultTypeInternal {
  constexpr IdentifierProvenancesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdentifierProvenancesDefaultTypeInternal() {}
  union {
    IdentifierProvenances _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdentifierProvenancesDefaultTypeInternal _IdentifierProvenances_default_instance_;
constexpr User::User(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_info_(nullptr)
  , timing_(nullptr)
  , client_info_(nullptr)
  , properties_(nullptr)
  , id_provenances_(nullptr)
  , platform_id_(PROTOBUF_ULONGLONG(0)){}
struct UserDefaultTypeInternal {
  constexpr UserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserDefaultTypeInternal _User_default_instance_;
constexpr CohortMembership::CohortMembership(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : membership_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cohort_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_info_(nullptr)
  , timing_(nullptr)
  , client_info_(nullptr)
  , properties_(nullptr)
  , platform_id_(PROTOBUF_ULONGLONG(0))
  , arm_(0)
{}
struct CohortMembershipDefaultTypeInternal {
  constexpr CohortMembershipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CohortMembershipDefaultTypeInternal() {}
  union {
    CohortMembership _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CohortMembershipDefaultTypeInternal _CohortMembership_default_instance_;
constexpr WebPageView::WebPageView(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , referrer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , document_size_(nullptr){}
struct WebPageViewDefaultTypeInternal {
  constexpr WebPageViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WebPageViewDefaultTypeInternal() {}
  union {
    WebPageView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WebPageViewDefaultTypeInternal _WebPageView_default_instance_;
constexpr AppScreenView::AppScreenView(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AppScreenViewDefaultTypeInternal {
  constexpr AppScreenViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppScreenViewDefaultTypeInternal() {}
  union {
    AppScreenView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppScreenViewDefaultTypeInternal _AppScreenView_default_instance_;
constexpr View::View(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , search_query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auto_view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_info_(nullptr)
  , timing_(nullptr)
  , client_info_(nullptr)
  , properties_(nullptr)
  , locale_(nullptr)
  , id_provenances_(nullptr)
  , platform_id_(PROTOBUF_ULONGLONG(0))
  , use_case_(0)

  , view_type_(0)

  , _oneof_case_{}{}
struct ViewDefaultTypeInternal {
  constexpr ViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewDefaultTypeInternal() {}
  union {
    View _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewDefaultTypeInternal _View_default_instance_;
constexpr AutoView::AutoView(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auto_view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_info_(nullptr)
  , timing_(nullptr)
  , client_info_(nullptr)
  , properties_(nullptr)
  , locale_(nullptr)
  , id_provenances_(nullptr)
  , platform_id_(PROTOBUF_ULONGLONG(0))
  , use_case_(0)

  , _oneof_case_{}{}
struct AutoViewDefaultTypeInternal {
  constexpr AutoViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutoViewDefaultTypeInternal() {}
  union {
    AutoView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutoViewDefaultTypeInternal _AutoView_default_instance_;
constexpr IndexPath::IndexPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_()
  , _index_cached_byte_size_(){}
struct IndexPathDefaultTypeInternal {
  constexpr IndexPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexPathDefaultTypeInternal() {}
  union {
    IndexPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexPathDefaultTypeInternal _IndexPath_default_instance_;
constexpr Impression::Impression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : impression_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , insertion_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auto_view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_info_(nullptr)
  , timing_(nullptr)
  , client_info_(nullptr)
  , properties_(nullptr)
  , client_position_(nullptr)
  , id_provenances_(nullptr)
  , platform_id_(PROTOBUF_ULONGLONG(0))
  , source_type_(0)

  , has_superimposed_views_(false){}
struct ImpressionDefaultTypeInternal {
  constexpr ImpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImpressionDefaultTypeInternal() {}
  union {
    Impression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImpressionDefaultTypeInternal _Impression_default_instance_;
constexpr NavigateAction::NavigateAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NavigateActionDefaultTypeInternal {
  constexpr NavigateActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NavigateActionDefaultTypeInternal() {}
  union {
    NavigateAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NavigateActionDefaultTypeInternal _NavigateAction_default_instance_;
constexpr Action::Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , impression_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , insertion_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_action_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , element_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auto_view_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_info_(nullptr)
  , timing_(nullptr)
  , client_info_(nullptr)
  , properties_(nullptr)
  , client_position_(nullptr)
  , id_provenances_(nullptr)
  , device_(nullptr)
  , cart_(nullptr)
  , platform_id_(PROTOBUF_ULONGLONG(0))
  , action_type_(0)

  , has_superimposed_views_(false)
  , _oneof_case_{}{}
struct ActionDefaultTypeInternal {
  constexpr ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionDefaultTypeInternal _Action_default_instance_;
constexpr Cart::Cart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contents_(){}
struct CartDefaultTypeInternal {
  constexpr CartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CartDefaultTypeInternal() {}
  union {
    Cart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CartDefaultTypeInternal _Cart_default_instance_;
constexpr CartContent::CartContent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_per_unit_(nullptr)
  , quantity_(PROTOBUF_LONGLONG(0)){}
struct CartContentDefaultTypeInternal {
  constexpr CartContentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CartContentDefaultTypeInternal() {}
  union {
    CartContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CartContentDefaultTypeInternal _CartContent_default_instance_;
constexpr Attribution::Attribution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_id_(PROTOBUF_ULONGLONG(0))
  , credit_millis_(0){}
struct AttributionDefaultTypeInternal {
  constexpr AttributionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AttributionDefaultTypeInternal() {}
  union {
    Attribution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AttributionDefaultTypeInternal _Attribution_default_instance_;
constexpr IOSError::IOSError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0)
  , batch_number_(0){}
struct IOSErrorDefaultTypeInternal {
  constexpr IOSErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IOSErrorDefaultTypeInternal() {}
  union {
    IOSError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IOSErrorDefaultTypeInternal _IOSError_default_instance_;
constexpr ErrorHistory::ErrorHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ios_errors_()
  , total_errors_(0){}
struct ErrorHistoryDefaultTypeInternal {
  constexpr ErrorHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorHistoryDefaultTypeInternal() {}
  union {
    ErrorHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorHistoryDefaultTypeInternal _ErrorHistory_default_instance_;
constexpr AncestorIdHistoryItem::AncestorIdHistoryItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ancestor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , batch_number_(0)
  , _oneof_case_{}{}
struct AncestorIdHistoryItemDefaultTypeInternal {
  constexpr AncestorIdHistoryItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AncestorIdHistoryItemDefaultTypeInternal() {}
  union {
    AncestorIdHistoryItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AncestorIdHistoryItemDefaultTypeInternal _AncestorIdHistoryItem_default_instance_;
constexpr AncestorIdHistory::AncestorIdHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_user_id_history_()
  , session_id_history_()
  , view_id_history_()
  , auto_view_id_history_()
  , total_log_user_ids_logged_(0)
  , total_session_ids_logged_(0)
  , total_view_ids_logged_(0)
  , total_auto_view_ids_logged_(0){}
struct AncestorIdHistoryDefaultTypeInternal {
  constexpr AncestorIdHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AncestorIdHistoryDefaultTypeInternal() {}
  union {
    AncestorIdHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AncestorIdHistoryDefaultTypeInternal _AncestorIdHistory_default_instance_;
constexpr MobileDiagnostics::MobileDiagnostics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , promoted_library_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_history_(nullptr)
  , ancestor_id_history_(nullptr)
  , batches_attempted_(0)
  , batches_sent_successfully_(0)
  , batches_with_errors_(0){}
struct MobileDiagnosticsDefaultTypeInternal {
  constexpr MobileDiagnosticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MobileDiagnosticsDefaultTypeInternal() {}
  union {
    MobileDiagnostics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MobileDiagnosticsDefaultTypeInternal _MobileDiagnostics_default_instance_;
constexpr Diagnostics::Diagnostics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_info_(nullptr)
  , timing_(nullptr)
  , client_info_(nullptr)
  , platform_id_(PROTOBUF_ULONGLONG(0))
  , _oneof_case_{}{}
struct DiagnosticsDefaultTypeInternal {
  constexpr DiagnosticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiagnosticsDefaultTypeInternal() {}
  union {
    Diagnostics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiagnosticsDefaultTypeInternal _Diagnostics_default_instance_;
constexpr LogRequest::LogRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_()
  , cohort_membership_()
  , view_()
  , request_()
  , insertion_()
  , impression_()
  , action_()
  , delivery_log_()
  , diagnostics_()
  , auto_view_()
  , user_info_(nullptr)
  , timing_(nullptr)
  , client_info_(nullptr)
  , device_(nullptr)
  , platform_id_(PROTOBUF_ULONGLONG(0)){}
struct LogRequestDefaultTypeInternal {
  constexpr LogRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogRequestDefaultTypeInternal() {}
  union {
    LogRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogRequestDefaultTypeInternal _LogRequest_default_instance_;
}  // namespace event
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fevent_2fevent_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fevent_2fevent_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fevent_2fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fevent_2fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::JoinedIdentifiers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::JoinedIdentifiers, platform_id_),
  PROTOBUF_FIELD_OFFSET(::event::JoinedIdentifiers, user_id_),
  PROTOBUF_FIELD_OFFSET(::event::JoinedIdentifiers, log_user_id_),
  PROTOBUF_FIELD_OFFSET(::event::JoinedIdentifiers, anon_user_id_),
  PROTOBUF_FIELD_OFFSET(::event::JoinedIdentifiers, session_id_),
  PROTOBUF_FIELD_OFFSET(::event::JoinedIdentifiers, view_id_),
  PROTOBUF_FIELD_OFFSET(::event::JoinedIdentifiers, auto_view_id_),
  PROTOBUF_FIELD_OFFSET(::event::JoinedIdentifiers, request_id_),
  PROTOBUF_FIELD_OFFSET(::event::JoinedIdentifiers, insertion_id_),
  PROTOBUF_FIELD_OFFSET(::event::JoinedIdentifiers, impression_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::IdentifierProvenances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::IdentifierProvenances, user_id_provenance_),
  PROTOBUF_FIELD_OFFSET(::event::IdentifierProvenances, log_user_id_provenance_),
  PROTOBUF_FIELD_OFFSET(::event::IdentifierProvenances, session_id_provenance_),
  PROTOBUF_FIELD_OFFSET(::event::IdentifierProvenances, view_id_provenance_),
  PROTOBUF_FIELD_OFFSET(::event::IdentifierProvenances, auto_view_id_provenance_),
  PROTOBUF_FIELD_OFFSET(::event::IdentifierProvenances, insertion_id_provenance_),
  PROTOBUF_FIELD_OFFSET(::event::IdentifierProvenances, impression_id_provenance_),
  PROTOBUF_FIELD_OFFSET(::event::IdentifierProvenances, action_id_provenance_),
  PROTOBUF_FIELD_OFFSET(::event::IdentifierProvenances, content_id_provenance_),
  PROTOBUF_FIELD_OFFSET(::event::IdentifierProvenances, request_id_provenance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::User, platform_id_),
  PROTOBUF_FIELD_OFFSET(::event::User, user_info_),
  PROTOBUF_FIELD_OFFSET(::event::User, timing_),
  PROTOBUF_FIELD_OFFSET(::event::User, client_info_),
  PROTOBUF_FIELD_OFFSET(::event::User, id_provenances_),
  PROTOBUF_FIELD_OFFSET(::event::User, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::CohortMembership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::CohortMembership, platform_id_),
  PROTOBUF_FIELD_OFFSET(::event::CohortMembership, user_info_),
  PROTOBUF_FIELD_OFFSET(::event::CohortMembership, timing_),
  PROTOBUF_FIELD_OFFSET(::event::CohortMembership, client_info_),
  PROTOBUF_FIELD_OFFSET(::event::CohortMembership, membership_id_),
  PROTOBUF_FIELD_OFFSET(::event::CohortMembership, cohort_id_),
  PROTOBUF_FIELD_OFFSET(::event::CohortMembership, arm_),
  PROTOBUF_FIELD_OFFSET(::event::CohortMembership, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::WebPageView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::WebPageView, url_),
  PROTOBUF_FIELD_OFFSET(::event::WebPageView, referrer_),
  PROTOBUF_FIELD_OFFSET(::event::WebPageView, document_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::AppScreenView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::View, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event::View, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::View, platform_id_),
  PROTOBUF_FIELD_OFFSET(::event::View, user_info_),
  PROTOBUF_FIELD_OFFSET(::event::View, timing_),
  PROTOBUF_FIELD_OFFSET(::event::View, client_info_),
  PROTOBUF_FIELD_OFFSET(::event::View, view_id_),
  PROTOBUF_FIELD_OFFSET(::event::View, auto_view_id_),
  PROTOBUF_FIELD_OFFSET(::event::View, session_id_),
  PROTOBUF_FIELD_OFFSET(::event::View, content_id_),
  PROTOBUF_FIELD_OFFSET(::event::View, name_),
  PROTOBUF_FIELD_OFFSET(::event::View, use_case_),
  PROTOBUF_FIELD_OFFSET(::event::View, search_query_),
  PROTOBUF_FIELD_OFFSET(::event::View, properties_),
  PROTOBUF_FIELD_OFFSET(::event::View, locale_),
  PROTOBUF_FIELD_OFFSET(::event::View, view_type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::event::View, id_provenances_),
  PROTOBUF_FIELD_OFFSET(::event::View, ui_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::AutoView, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event::AutoView, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::AutoView, platform_id_),
  PROTOBUF_FIELD_OFFSET(::event::AutoView, user_info_),
  PROTOBUF_FIELD_OFFSET(::event::AutoView, timing_),
  PROTOBUF_FIELD_OFFSET(::event::AutoView, client_info_),
  PROTOBUF_FIELD_OFFSET(::event::AutoView, auto_view_id_),
  PROTOBUF_FIELD_OFFSET(::event::AutoView, view_id_),
  PROTOBUF_FIELD_OFFSET(::event::AutoView, session_id_),
  PROTOBUF_FIELD_OFFSET(::event::AutoView, name_),
  PROTOBUF_FIELD_OFFSET(::event::AutoView, use_case_),
  PROTOBUF_FIELD_OFFSET(::event::AutoView, properties_),
  PROTOBUF_FIELD_OFFSET(::event::AutoView, locale_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::event::AutoView, id_provenances_),
  PROTOBUF_FIELD_OFFSET(::event::AutoView, ui_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::IndexPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::IndexPath, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::Impression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::Impression, platform_id_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, user_info_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, timing_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, client_info_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, impression_id_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, insertion_id_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, request_id_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, view_id_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, auto_view_id_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, session_id_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, content_id_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, source_type_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, has_superimposed_views_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, client_position_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, id_provenances_),
  PROTOBUF_FIELD_OFFSET(::event::Impression, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::NavigateAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::NavigateAction, target_url_),
  PROTOBUF_FIELD_OFFSET(::event::Action, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::event::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event::Action, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::Action, platform_id_),
  PROTOBUF_FIELD_OFFSET(::event::Action, user_info_),
  PROTOBUF_FIELD_OFFSET(::event::Action, timing_),
  PROTOBUF_FIELD_OFFSET(::event::Action, client_info_),
  PROTOBUF_FIELD_OFFSET(::event::Action, action_id_),
  PROTOBUF_FIELD_OFFSET(::event::Action, impression_id_),
  PROTOBUF_FIELD_OFFSET(::event::Action, insertion_id_),
  PROTOBUF_FIELD_OFFSET(::event::Action, request_id_),
  PROTOBUF_FIELD_OFFSET(::event::Action, view_id_),
  PROTOBUF_FIELD_OFFSET(::event::Action, auto_view_id_),
  PROTOBUF_FIELD_OFFSET(::event::Action, session_id_),
  PROTOBUF_FIELD_OFFSET(::event::Action, content_id_),
  PROTOBUF_FIELD_OFFSET(::event::Action, name_),
  PROTOBUF_FIELD_OFFSET(::event::Action, action_type_),
  PROTOBUF_FIELD_OFFSET(::event::Action, custom_action_type_),
  PROTOBUF_FIELD_OFFSET(::event::Action, element_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::event::Action, has_superimposed_views_),
  PROTOBUF_FIELD_OFFSET(::event::Action, client_position_),
  PROTOBUF_FIELD_OFFSET(::event::Action, id_provenances_),
  PROTOBUF_FIELD_OFFSET(::event::Action, properties_),
  PROTOBUF_FIELD_OFFSET(::event::Action, device_),
  PROTOBUF_FIELD_OFFSET(::event::Action, cart_),
  PROTOBUF_FIELD_OFFSET(::event::Action, action_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::Cart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::Cart, contents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::CartContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::CartContent, content_id_),
  PROTOBUF_FIELD_OFFSET(::event::CartContent, quantity_),
  PROTOBUF_FIELD_OFFSET(::event::CartContent, price_per_unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::Attribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::Attribution, model_id_),
  PROTOBUF_FIELD_OFFSET(::event::Attribution, credit_millis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::IOSError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::IOSError, code_),
  PROTOBUF_FIELD_OFFSET(::event::IOSError, domain_),
  PROTOBUF_FIELD_OFFSET(::event::IOSError, description_),
  PROTOBUF_FIELD_OFFSET(::event::IOSError, batch_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::ErrorHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::ErrorHistory, ios_errors_),
  PROTOBUF_FIELD_OFFSET(::event::ErrorHistory, total_errors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistoryItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistoryItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistoryItem, ancestor_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistoryItem, batch_number_),
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistoryItem, logged_event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistory, log_user_id_history_),
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistory, total_log_user_ids_logged_),
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistory, session_id_history_),
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistory, total_session_ids_logged_),
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistory, view_id_history_),
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistory, total_view_ids_logged_),
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistory, auto_view_id_history_),
  PROTOBUF_FIELD_OFFSET(::event::AncestorIdHistory, total_auto_view_ids_logged_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::MobileDiagnostics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::MobileDiagnostics, device_identifier_),
  PROTOBUF_FIELD_OFFSET(::event::MobileDiagnostics, client_version_),
  PROTOBUF_FIELD_OFFSET(::event::MobileDiagnostics, promoted_library_version_),
  PROTOBUF_FIELD_OFFSET(::event::MobileDiagnostics, batches_attempted_),
  PROTOBUF_FIELD_OFFSET(::event::MobileDiagnostics, batches_sent_successfully_),
  PROTOBUF_FIELD_OFFSET(::event::MobileDiagnostics, batches_with_errors_),
  PROTOBUF_FIELD_OFFSET(::event::MobileDiagnostics, error_history_),
  PROTOBUF_FIELD_OFFSET(::event::MobileDiagnostics, ancestor_id_history_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::Diagnostics, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event::Diagnostics, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::Diagnostics, platform_id_),
  PROTOBUF_FIELD_OFFSET(::event::Diagnostics, user_info_),
  PROTOBUF_FIELD_OFFSET(::event::Diagnostics, timing_),
  PROTOBUF_FIELD_OFFSET(::event::Diagnostics, client_info_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::event::Diagnostics, diagnostics_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, platform_id_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, user_info_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, timing_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, client_info_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, device_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, user_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, cohort_membership_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, view_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, auto_view_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, request_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, insertion_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, impression_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, action_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, delivery_log_),
  PROTOBUF_FIELD_OFFSET(::event::LogRequest, diagnostics_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::event::JoinedIdentifiers)},
  { 15, -1, sizeof(::event::IdentifierProvenances)},
  { 30, -1, sizeof(::event::User)},
  { 41, -1, sizeof(::event::CohortMembership)},
  { 54, -1, sizeof(::event::WebPageView)},
  { 62, -1, sizeof(::event::AppScreenView)},
  { 67, -1, sizeof(::event::View)},
  { 90, -1, sizeof(::event::AutoView)},
  { 110, -1, sizeof(::event::IndexPath)},
  { 116, -1, sizeof(::event::Impression)},
  { 137, -1, sizeof(::event::NavigateAction)},
  { 143, 172, sizeof(::event::Action)},
  { 195, -1, sizeof(::event::Cart)},
  { 201, -1, sizeof(::event::CartContent)},
  { 209, -1, sizeof(::event::Attribution)},
  { 216, -1, sizeof(::event::IOSError)},
  { 225, -1, sizeof(::event::ErrorHistory)},
  { 232, -1, sizeof(::event::AncestorIdHistoryItem)},
  { 244, -1, sizeof(::event::AncestorIdHistory)},
  { 257, -1, sizeof(::event::MobileDiagnostics)},
  { 270, -1, sizeof(::event::Diagnostics)},
  { 281, -1, sizeof(::event::LogRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_JoinedIdentifiers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_IdentifierProvenances_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_CohortMembership_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_WebPageView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_AppScreenView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_View_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_AutoView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_IndexPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_Impression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_NavigateAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_Cart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_CartContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_Attribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_IOSError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_ErrorHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_AncestorIdHistoryItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_AncestorIdHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_MobileDiagnostics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_Diagnostics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::event::_LogRequest_default_instance_),
};

const char descriptor_table_protodef_proto_2fevent_2fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027proto/event/event.proto\022\005event\032\031proto/"
  "common/common.proto\032\035proto/delivery/deli"
  "very.proto\032\036proto/delivery/execution.pro"
  "to\"\320\002\n\021JoinedIdentifiers\022\037\n\013platform_id\030"
  "\001 \001(\004R\nplatformId\022\027\n\007user_id\030\002 \001(\tR\006user"
  "Id\022\036\n\013log_user_id\030\003 \001(\tR\tlogUserId\022 \n\014an"
  "on_user_id\030\n \001(\tR\nanonUserId\022\035\n\nsession_"
  "id\030\004 \001(\tR\tsessionId\022\027\n\007view_id\030\005 \001(\tR\006vi"
  "ewId\022 \n\014auto_view_id\030\t \001(\tR\nautoViewId\022\035"
  "\n\nrequest_id\030\006 \001(\tR\trequestId\022!\n\014inserti"
  "on_id\030\007 \001(\tR\013insertionId\022#\n\rimpression_i"
  "d\030\010 \001(\tR\014impressionId\"\301\006\n\025IdentifierProv"
  "enances\022I\n\022user_id_provenance\030\001 \001(\0162\033.ev"
  "ent.IdentifierProvenanceR\020userIdProvenan"
  "ce\022P\n\026log_user_id_provenance\030\t \001(\0162\033.eve"
  "nt.IdentifierProvenanceR\023logUserIdProven"
  "ance\022O\n\025session_id_provenance\030\002 \001(\0162\033.ev"
  "ent.IdentifierProvenanceR\023sessionIdProve"
  "nance\022I\n\022view_id_provenance\030\003 \001(\0162\033.even"
  "t.IdentifierProvenanceR\020viewIdProvenance"
  "\022R\n\027auto_view_id_provenance\030\010 \001(\0162\033.even"
  "t.IdentifierProvenanceR\024autoViewIdProven"
  "ance\022S\n\027insertion_id_provenance\030\n \001(\0162\033."
  "event.IdentifierProvenanceR\025insertionIdP"
  "rovenance\022U\n\030impression_id_provenance\030\004 "
  "\001(\0162\033.event.IdentifierProvenanceR\026impres"
  "sionIdProvenance\022M\n\024action_id_provenance"
  "\030\005 \001(\0162\033.event.IdentifierProvenanceR\022act"
  "ionIdProvenance\022O\n\025content_id_provenance"
  "\030\006 \001(\0162\033.event.IdentifierProvenanceR\023con"
  "tentIdProvenance\022O\n\025request_id_provenanc"
  "e\030\007 \001(\0162\033.event.IdentifierProvenanceR\023re"
  "questIdProvenance\"\262\002\n\004User\022\037\n\013platform_i"
  "d\030\001 \001(\004R\nplatformId\022-\n\tuser_info\030\002 \001(\0132\020"
  ".common.UserInfoR\010userInfo\022&\n\006timing\030\003 \001"
  "(\0132\016.common.TimingR\006timing\0223\n\013client_inf"
  "o\030\004 \001(\0132\022.common.ClientInfoR\nclientInfo\022"
  "C\n\016id_provenances\030\007 \001(\0132\034.event.Identifi"
  "erProvenancesR\ridProvenances\0222\n\nproperti"
  "es\030\006 \001(\0132\022.common.PropertiesR\nproperties"
  "J\004\010\005\020\006\"\345\002\n\020CohortMembership\022\037\n\013platform_"
  "id\030\001 \001(\004R\nplatformId\022-\n\tuser_info\030\002 \001(\0132"
  "\020.common.UserInfoR\010userInfo\022&\n\006timing\030\003 "
  "\001(\0132\016.common.TimingR\006timing\0223\n\013client_in"
  "fo\030\004 \001(\0132\022.common.ClientInfoR\nclientInfo"
  "\022#\n\rmembership_id\030\006 \001(\tR\014membershipId\022\033\n"
  "\tcohort_id\030\010 \001(\tR\010cohortId\022\"\n\003arm\030\t \001(\0162"
  "\020.event.CohortArmR\003arm\0222\n\nproperties\030\n \001"
  "(\0132\022.common.PropertiesR\npropertiesJ\004\010\005\020\006"
  "J\004\010\007\020\010\"t\n\013WebPageView\022\020\n\003url\030\001 \001(\tR\003url\022"
  "\032\n\010referrer\030\003 \001(\tR\010referrer\0221\n\rdocument_"
  "size\030\004 \001(\0132\014.common.SizeR\014documentSizeJ\004"
  "\010\002\020\003\"\025\n\rAppScreenViewJ\004\010\001\020\002\"\267\006\n\004View\022\037\n\013"
  "platform_id\030\001 \001(\004R\nplatformId\022-\n\tuser_in"
  "fo\030\002 \001(\0132\020.common.UserInfoR\010userInfo\022&\n\006"
  "timing\030\003 \001(\0132\016.common.TimingR\006timing\0223\n\013"
  "client_info\030\004 \001(\0132\022.common.ClientInfoR\nc"
  "lientInfo\022\027\n\007view_id\030\006 \001(\tR\006viewId\022 \n\014au"
  "to_view_id\030\021 \001(\tR\nautoViewId\022\035\n\nsession_"
  "id\030\007 \001(\tR\tsessionId\022\035\n\ncontent_id\030\023 \001(\tR"
  "\tcontentId\022\022\n\004name\030\010 \001(\tR\004name\022,\n\010use_ca"
  "se\030\t \001(\0162\021.delivery.UseCaseR\007useCase\022!\n\014"
  "search_query\030\n \001(\tR\013searchQuery\0222\n\nprope"
  "rties\030\013 \001(\0132\022.common.PropertiesR\npropert"
  "ies\022&\n\006locale\030\020 \001(\0132\016.common.LocaleR\006loc"
  "ale\0221\n\tview_type\030\r \001(\0162\024.event.View.View"
  "TypeR\010viewType\0228\n\rweb_page_view\030\016 \001(\0132\022."
  "event.WebPageViewH\000R\013webPageView\022>\n\017app_"
  "screen_view\030\017 \001(\0132\024.event.AppScreenViewH"
  "\000R\rappScreenView\022C\n\016id_provenances\030\022 \001(\013"
  "2\034.event.IdentifierProvenancesR\ridProven"
  "ances\"\?\n\010ViewType\022\025\n\021UNKNOWN_VIEW_TYPE\020\000"
  "\022\014\n\010WEB_PAGE\020\001\022\016\n\nAPP_SCREEN\020\002B\t\n\007ui_typ"
  "eJ\004\010\005\020\006J\004\010\014\020\r\"\377\004\n\010AutoView\022\037\n\013platform_i"
  "d\030\001 \001(\004R\nplatformId\022-\n\tuser_info\030\002 \001(\0132\020"
  ".common.UserInfoR\010userInfo\022&\n\006timing\030\003 \001"
  "(\0132\016.common.TimingR\006timing\0223\n\013client_inf"
  "o\030\004 \001(\0132\022.common.ClientInfoR\nclientInfo\022"
  " \n\014auto_view_id\030\006 \001(\tR\nautoViewId\022\027\n\007vie"
  "w_id\030\016 \001(\tR\006viewId\022\035\n\nsession_id\030\007 \001(\tR\t"
  "sessionId\022\022\n\004name\030\010 \001(\tR\004name\022,\n\010use_cas"
  "e\030\t \001(\0162\021.delivery.UseCaseR\007useCase\0222\n\np"
  "roperties\030\n \001(\0132\022.common.PropertiesR\npro"
  "perties\022&\n\006locale\030\013 \001(\0132\016.common.LocaleR"
  "\006locale\0228\n\rweb_page_view\030\014 \001(\0132\022.event.W"
  "ebPageViewH\000R\013webPageView\022>\n\017app_screen_"
  "view\030\r \001(\0132\024.event.AppScreenViewH\000R\rappS"
  "creenView\022C\n\016id_provenances\030\017 \001(\0132\034.even"
  "t.IdentifierProvenancesR\ridProvenancesB\t"
  "\n\007ui_typeJ\004\010\005\020\006\"!\n\tIndexPath\022\024\n\005index\030\001 "
  "\003(\005R\005index\"\307\005\n\nImpression\022\037\n\013platform_id"
  "\030\001 \001(\004R\nplatformId\022-\n\tuser_info\030\002 \001(\0132\020."
  "common.UserInfoR\010userInfo\022&\n\006timing\030\003 \001("
  "\0132\016.common.TimingR\006timing\0223\n\013client_info"
  "\030\004 \001(\0132\022.common.ClientInfoR\nclientInfo\022#"
  "\n\rimpression_id\030\006 \001(\tR\014impressionId\022!\n\014i"
  "nsertion_id\030\007 \001(\tR\013insertionId\022\035\n\nreques"
  "t_id\030\010 \001(\tR\trequestId\022\027\n\007view_id\030\n \001(\tR\006"
  "viewId\022 \n\014auto_view_id\030\017 \001(\tR\nautoViewId"
  "\022\035\n\nsession_id\030\t \001(\tR\tsessionId\022\035\n\nconte"
  "nt_id\030\014 \001(\tR\tcontentId\022<\n\013source_type\030\r "
  "\001(\0162\033.event.ImpressionSourceTypeR\nsource"
  "Type\0224\n\026has_superimposed_views\030\016 \001(\010R\024ha"
  "sSuperimposedViews\0229\n\017client_position\030\020 "
  "\001(\0132\020.event.IndexPathR\016clientPosition\022C\n"
  "\016id_provenances\030\021 \001(\0132\034.event.Identifier"
  "ProvenancesR\ridProvenances\0222\n\nproperties"
  "\030\013 \001(\0132\022.common.PropertiesR\npropertiesJ\004"
  "\010\005\020\006\"/\n\016NavigateAction\022\035\n\ntarget_url\030\001 \001"
  "(\tR\ttargetUrl\"\362\007\n\006Action\022\037\n\013platform_id\030"
  "\001 \001(\004R\nplatformId\022-\n\tuser_info\030\002 \001(\0132\020.c"
  "ommon.UserInfoR\010userInfo\022&\n\006timing\030\003 \001(\013"
  "2\016.common.TimingR\006timing\0223\n\013client_info\030"
  "\004 \001(\0132\022.common.ClientInfoR\nclientInfo\022\033\n"
  "\taction_id\030\006 \001(\tR\010actionId\022#\n\rimpression"
  "_id\030\007 \001(\tR\014impressionId\022!\n\014insertion_id\030"
  "\010 \001(\tR\013insertionId\022\035\n\nrequest_id\030\t \001(\tR\t"
  "requestId\022\027\n\007view_id\030\013 \001(\tR\006viewId\022 \n\014au"
  "to_view_id\030\027 \001(\tR\nautoViewId\022\035\n\nsession_"
  "id\030\n \001(\tR\tsessionId\022\035\n\ncontent_id\030\025 \001(\tR"
  "\tcontentId\022\022\n\004name\030\014 \001(\tR\004name\0222\n\013action"
  "_type\030\016 \001(\0162\021.event.ActionTypeR\nactionTy"
  "pe\022,\n\022custom_action_type\030\017 \001(\tR\020customAc"
  "tionType\022\035\n\nelement_id\030\021 \001(\tR\telementId\022"
  "@\n\017navigate_action\030\022 \001(\0132\025.event.Navigat"
  "eActionH\000R\016navigateAction\0224\n\026has_superim"
  "posed_views\030\026 \001(\010R\024hasSuperimposedViews\022"
  "9\n\017client_position\030\030 \001(\0132\020.event.IndexPa"
  "thR\016clientPosition\022C\n\016id_provenances\030\031 \001"
  "(\0132\034.event.IdentifierProvenancesR\ridProv"
  "enances\0222\n\nproperties\030\024 \001(\0132\022.common.Pro"
  "pertiesR\nproperties\022&\n\006device\030\032 \001(\0132\016.co"
  "mmon.DeviceR\006device\022$\n\004cart\030\034 \001(\0132\013.even"
  "t.CartH\001R\004cart\210\001\001B\010\n\006actionB\007\n\005_cartJ\004\010\005"
  "\020\006J\004\010\r\020\016J\004\010\020\020\021J\004\010\023\020\024J\004\010\033\020\034\"6\n\004Cart\022.\n\010co"
  "ntents\030\001 \003(\0132\022.event.CartContentR\010conten"
  "ts\"}\n\013CartContent\022\035\n\ncontent_id\030\001 \001(\tR\tc"
  "ontentId\022\032\n\010quantity\030\002 \001(\003R\010quantity\0223\n\016"
  "price_per_unit\030\003 \001(\0132\r.common.MoneyR\014pri"
  "cePerUnit\"M\n\013Attribution\022\031\n\010model_id\030\001 \001"
  "(\004R\007modelId\022#\n\rcredit_millis\030\002 \001(\005R\014cred"
  "itMillis\"{\n\010IOSError\022\022\n\004code\030\001 \001(\005R\004code"
  "\022\026\n\006domain\030\002 \001(\tR\006domain\022 \n\013description\030"
  "\003 \001(\tR\013description\022!\n\014batch_number\030\004 \001(\005"
  "R\013batchNumber\"a\n\014ErrorHistory\022.\n\nios_err"
  "ors\030\001 \003(\0132\017.event.IOSErrorR\tiosErrors\022!\n"
  "\014total_errors\030\002 \001(\005R\013totalErrors\"\300\002\n\025Anc"
  "estorIdHistoryItem\022\037\n\013ancestor_id\030\001 \001(\tR"
  "\nancestorId\022,\n\nuser_event\030\002 \001(\0132\013.event."
  "UserH\000R\tuserEvent\022<\n\032session_id_from_use"
  "r_event\030\003 \001(\tH\000R\026sessionIdFromUserEvent\022"
  ",\n\nview_event\030\004 \001(\0132\013.event.ViewH\000R\tview"
  "Event\0229\n\017auto_view_event\030\006 \001(\0132\017.event.A"
  "utoViewH\000R\rautoViewEvent\022!\n\014batch_number"
  "\030\005 \001(\005R\013batchNumberB\016\n\014logged_event\"\243\004\n\021"
  "AncestorIdHistory\022K\n\023log_user_id_history"
  "\030\001 \003(\0132\034.event.AncestorIdHistoryItemR\020lo"
  "gUserIdHistory\0228\n\031total_log_user_ids_log"
  "ged\030\002 \001(\005R\025totalLogUserIdsLogged\022J\n\022sess"
  "ion_id_history\030\003 \003(\0132\034.event.AncestorIdH"
  "istoryItemR\020sessionIdHistory\0227\n\030total_se"
  "ssion_ids_logged\030\004 \001(\005R\025totalSessionIdsL"
  "ogged\022D\n\017view_id_history\030\005 \003(\0132\034.event.A"
  "ncestorIdHistoryItemR\rviewIdHistory\0221\n\025t"
  "otal_view_ids_logged\030\006 \001(\005R\022totalViewIds"
  "Logged\022M\n\024auto_view_id_history\030\007 \003(\0132\034.e"
  "vent.AncestorIdHistoryItemR\021autoViewIdHi"
  "story\022:\n\032total_auto_view_ids_logged\030\010 \001("
  "\005R\026totalAutoViewIdsLogged\"\306\003\n\021MobileDiag"
  "nostics\022+\n\021device_identifier\030\001 \001(\tR\020devi"
  "ceIdentifier\022)\n\016client_version\030\002 \001(\tB\002\030\001"
  "R\rclientVersion\022<\n\030promoted_library_vers"
  "ion\030\003 \001(\tB\002\030\001R\026promotedLibraryVersion\022+\n"
  "\021batches_attempted\030\004 \001(\005R\020batchesAttempt"
  "ed\022:\n\031batches_sent_successfully\030\005 \001(\005R\027b"
  "atchesSentSuccessfully\022.\n\023batches_with_e"
  "rrors\030\006 \001(\005R\021batchesWithErrors\0228\n\rerror_"
  "history\030\007 \001(\0132\023.event.ErrorHistoryR\014erro"
  "rHistory\022H\n\023ancestor_id_history\030\010 \001(\0132\030."
  "event.AncestorIdHistoryR\021ancestorIdHisto"
  "ry\"\234\002\n\013Diagnostics\022\037\n\013platform_id\030\001 \001(\004R"
  "\nplatformId\022-\n\tuser_info\030\002 \001(\0132\020.common."
  "UserInfoR\010userInfo\022&\n\006timing\030\003 \001(\0132\016.com"
  "mon.TimingR\006timing\0223\n\013client_info\030\004 \001(\0132"
  "\022.common.ClientInfoR\nclientInfo\022I\n\022mobil"
  "e_diagnostics\030\005 \001(\0132\030.event.MobileDiagno"
  "sticsH\000R\021mobileDiagnosticsB\025\n\023diagnostic"
  "s_message\"\345\005\n\nLogRequest\022\037\n\013platform_id\030"
  "\001 \001(\004R\nplatformId\022-\n\tuser_info\030\002 \001(\0132\020.c"
  "ommon.UserInfoR\010userInfo\022&\n\006timing\030\003 \001(\013"
  "2\016.common.TimingR\006timing\0223\n\013client_info\030"
  "\004 \001(\0132\022.common.ClientInfoR\nclientInfo\022&\n"
  "\006device\030\030 \001(\0132\016.common.DeviceR\006device\022\037\n"
  "\004user\030\007 \003(\0132\013.event.UserR\004user\022D\n\021cohort"
  "_membership\030\010 \003(\0132\027.event.CohortMembersh"
  "ipR\020cohortMembership\022\037\n\004view\030\013 \003(\0132\013.eve"
  "nt.ViewR\004view\022,\n\tauto_view\030\031 \003(\0132\017.event"
  ".AutoViewR\010autoView\022+\n\007request\030\014 \003(\0132\021.d"
  "elivery.RequestR\007request\0221\n\tinsertion\030\r "
  "\003(\0132\023.delivery.InsertionR\tinsertion\0221\n\ni"
  "mpression\030\016 \003(\0132\021.event.ImpressionR\nimpr"
  "ession\022%\n\006action\030\017 \003(\0132\r.event.ActionR\006a"
  "ction\0228\n\014delivery_log\030\022 \003(\0132\025.delivery.D"
  "eliveryLogR\013deliveryLog\0224\n\013diagnostics\030\027"
  " \003(\0132\022.event.DiagnosticsR\013diagnosticsJ\004\010"
  "\005\020\006J\004\010\t\020\nJ\004\010\n\020\013J\004\010\020\020\021J\004\010\021\020\022J\004\010\023\020\027*c\n\024Ide"
  "ntifierProvenance\022\013\n\007UNKNOWN\020\000\022\010\n\004NULL\020\001"
  "\022\t\n\005EMPTY\020\002\022\021\n\rAUTOGENERATED\020\003\022\026\n\022PLATFO"
  "RM_SPECIFIED\020\004*j\n\tCohortArm\022\021\n\rUNKNOWN_G"
  "ROUP\020\000\022\013\n\007CONTROL\020\001\022\r\n\tTREATMENT\020\002\022\016\n\nTR"
  "EATMENT1\020\003\022\016\n\nTREATMENT2\020\004\022\016\n\nTREATMENT3"
  "\020\005*\\\n\024ImpressionSourceType\022\"\n\036UNKNOWN_IM"
  "PRESSION_SOURCE_TYPE\020\000\022\014\n\010DELIVERY\020\001\022\022\n\016"
  "CLIENT_BACKEND\020\002*\213\003\n\nActionType\022\027\n\023UNKNO"
  "WN_ACTION_TYPE\020\000\022\026\n\022CUSTOM_ACTION_TYPE\020\001"
  "\022\014\n\010NAVIGATE\020\002\022\017\n\013ADD_TO_CART\020\004\022\024\n\020REMOV"
  "E_FROM_CART\020\n\022\014\n\010CHECKOUT\020\010\022\014\n\010PURCHASE\020"
  "\003\022\t\n\005SHARE\020\005\022\010\n\004LIKE\020\006\022\n\n\006UNLIKE\020\t\022\013\n\007CO"
  "MMENT\020\007\022\016\n\nMAKE_OFFER\020\013\022\020\n\014ASK_QUESTION\020"
  "\014\022\023\n\017ANSWER_QUESTION\020\r\022\024\n\020COMPLETE_SIGN_"
  "IN\020\016\022\024\n\020COMPLETE_SIGN_UP\020\017\022\014\n\010BOOKMARK\020\020"
  "\022\023\n\017REMOVE_BOOKMARK\020\021\022\017\n\013ADD_TO_LIST\020\022\022\024"
  "\n\020REMOVE_FROM_LIST\020\023\022\n\n\006FOLLOW\020\024\022\014\n\010UNFO"
  "LLOW\020\025\"\006\010\377\001\020\377\001Bj\n\027ai.promoted.proto.even"
  "tB\005EventP\001Z5github.com/promotedai/schema"
  "/generated/go/proto/event\252\002\016Promoted.Eve"
  "ntb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fevent_2fevent_2eproto_deps[3] = {
  &::descriptor_table_proto_2fcommon_2fcommon_2eproto,
  &::descriptor_table_proto_2fdelivery_2fdelivery_2eproto,
  &::descriptor_table_proto_2fdelivery_2fexecution_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fevent_2fevent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fevent_2fevent_2eproto = {
  false, false, 9050, descriptor_table_protodef_proto_2fevent_2fevent_2eproto, "proto/event/event.proto", 
  &descriptor_table_proto_2fevent_2fevent_2eproto_once, descriptor_table_proto_2fevent_2fevent_2eproto_deps, 3, 22,
  schemas, file_default_instances, TableStruct_proto_2fevent_2fevent_2eproto::offsets,
  file_level_metadata_proto_2fevent_2fevent_2eproto, file_level_enum_descriptors_proto_2fevent_2fevent_2eproto, file_level_service_descriptors_proto_2fevent_2fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_proto_2fevent_2fevent_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fevent_2fevent_2eproto);
  return descriptor_table_proto_2fevent_2fevent_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fevent_2fevent_2eproto(&descriptor_table_proto_2fevent_2fevent_2eproto);
namespace event {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* View_ViewType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fevent_2fevent_2eproto);
  return file_level_enum_descriptors_proto_2fevent_2fevent_2eproto[0];
}
bool View_ViewType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr View_ViewType View::UNKNOWN_VIEW_TYPE;
constexpr View_ViewType View::WEB_PAGE;
constexpr View_ViewType View::APP_SCREEN;
constexpr View_ViewType View::ViewType_MIN;
constexpr View_ViewType View::ViewType_MAX;
constexpr int View::ViewType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IdentifierProvenance_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fevent_2fevent_2eproto);
  return file_level_enum_descriptors_proto_2fevent_2fevent_2eproto[1];
}
bool IdentifierProvenance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CohortArm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fevent_2fevent_2eproto);
  return file_level_enum_descriptors_proto_2fevent_2fevent_2eproto[2];
}
bool CohortArm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImpressionSourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fevent_2fevent_2eproto);
  return file_level_enum_descriptors_proto_2fevent_2fevent_2eproto[3];
}
bool ImpressionSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fevent_2fevent_2eproto);
  return file_level_enum_descriptors_proto_2fevent_2fevent_2eproto[4];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class JoinedIdentifiers::_Internal {
 public:
};

JoinedIdentifiers::JoinedIdentifiers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.JoinedIdentifiers)
}
JoinedIdentifiers::JoinedIdentifiers(const JoinedIdentifiers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  log_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_user_id().empty()) {
    log_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log_user_id(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_view_id().empty()) {
    view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_view_id(), 
      GetArena());
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArena());
  }
  insertion_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_insertion_id().empty()) {
    insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_insertion_id(), 
      GetArena());
  }
  impression_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_impression_id().empty()) {
    impression_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_impression_id(), 
      GetArena());
  }
  auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auto_view_id().empty()) {
    auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auto_view_id(), 
      GetArena());
  }
  anon_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_anon_user_id().empty()) {
    anon_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_anon_user_id(), 
      GetArena());
  }
  platform_id_ = from.platform_id_;
  // @@protoc_insertion_point(copy_constructor:event.JoinedIdentifiers)
}

void JoinedIdentifiers::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
log_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
insertion_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
impression_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
anon_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
platform_id_ = PROTOBUF_ULONGLONG(0);
}

JoinedIdentifiers::~JoinedIdentifiers() {
  // @@protoc_insertion_point(destructor:event.JoinedIdentifiers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinedIdentifiers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  insertion_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  impression_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auto_view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anon_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinedIdentifiers::ArenaDtor(void* object) {
  JoinedIdentifiers* _this = reinterpret_cast< JoinedIdentifiers* >(object);
  (void)_this;
}
void JoinedIdentifiers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinedIdentifiers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinedIdentifiers::Clear() {
// @@protoc_insertion_point(message_clear_start:event.JoinedIdentifiers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  log_user_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  view_id_.ClearToEmpty();
  request_id_.ClearToEmpty();
  insertion_id_.ClearToEmpty();
  impression_id_.ClearToEmpty();
  auto_view_id_.ClearToEmpty();
  anon_user_id_.ClearToEmpty();
  platform_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinedIdentifiers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 2 [json_name = "userId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.JoinedIdentifiers.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log_user_id = 3 [json_name = "logUserId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_log_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.JoinedIdentifiers.log_user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 4 [json_name = "sessionId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.JoinedIdentifiers.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string view_id = 5 [json_name = "viewId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.JoinedIdentifiers.view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 6 [json_name = "requestId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.JoinedIdentifiers.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string insertion_id = 7 [json_name = "insertionId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_insertion_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.JoinedIdentifiers.insertion_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string impression_id = 8 [json_name = "impressionId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_impression_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.JoinedIdentifiers.impression_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auto_view_id = 9 [json_name = "autoViewId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_auto_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.JoinedIdentifiers.auto_view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string anon_user_id = 10 [json_name = "anonUserId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_anon_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.JoinedIdentifiers.anon_user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinedIdentifiers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.JoinedIdentifiers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_platform_id(), target);
  }

  // string user_id = 2 [json_name = "userId"];
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.JoinedIdentifiers.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string log_user_id = 3 [json_name = "logUserId"];
  if (this->log_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_user_id().data(), static_cast<int>(this->_internal_log_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.JoinedIdentifiers.log_user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log_user_id(), target);
  }

  // string session_id = 4 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.JoinedIdentifiers.session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_session_id(), target);
  }

  // string view_id = 5 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_view_id().data(), static_cast<int>(this->_internal_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.JoinedIdentifiers.view_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_view_id(), target);
  }

  // string request_id = 6 [json_name = "requestId"];
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.JoinedIdentifiers.request_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_request_id(), target);
  }

  // string insertion_id = 7 [json_name = "insertionId"];
  if (this->insertion_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insertion_id().data(), static_cast<int>(this->_internal_insertion_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.JoinedIdentifiers.insertion_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_insertion_id(), target);
  }

  // string impression_id = 8 [json_name = "impressionId"];
  if (this->impression_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_impression_id().data(), static_cast<int>(this->_internal_impression_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.JoinedIdentifiers.impression_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_impression_id(), target);
  }

  // string auto_view_id = 9 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auto_view_id().data(), static_cast<int>(this->_internal_auto_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.JoinedIdentifiers.auto_view_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_auto_view_id(), target);
  }

  // string anon_user_id = 10 [json_name = "anonUserId"];
  if (this->anon_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_anon_user_id().data(), static_cast<int>(this->_internal_anon_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.JoinedIdentifiers.anon_user_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_anon_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.JoinedIdentifiers)
  return target;
}

size_t JoinedIdentifiers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.JoinedIdentifiers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 2 [json_name = "userId"];
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string log_user_id = 3 [json_name = "logUserId"];
  if (this->log_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_user_id());
  }

  // string session_id = 4 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string view_id = 5 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_id());
  }

  // string request_id = 6 [json_name = "requestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string insertion_id = 7 [json_name = "insertionId"];
  if (this->insertion_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insertion_id());
  }

  // string impression_id = 8 [json_name = "impressionId"];
  if (this->impression_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_impression_id());
  }

  // string auto_view_id = 9 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_view_id());
  }

  // string anon_user_id = 10 [json_name = "anonUserId"];
  if (this->anon_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_anon_user_id());
  }

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_platform_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinedIdentifiers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.JoinedIdentifiers)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinedIdentifiers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinedIdentifiers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.JoinedIdentifiers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.JoinedIdentifiers)
    MergeFrom(*source);
  }
}

void JoinedIdentifiers::MergeFrom(const JoinedIdentifiers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.JoinedIdentifiers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.log_user_id().size() > 0) {
    _internal_set_log_user_id(from._internal_log_user_id());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.view_id().size() > 0) {
    _internal_set_view_id(from._internal_view_id());
  }
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.insertion_id().size() > 0) {
    _internal_set_insertion_id(from._internal_insertion_id());
  }
  if (from.impression_id().size() > 0) {
    _internal_set_impression_id(from._internal_impression_id());
  }
  if (from.auto_view_id().size() > 0) {
    _internal_set_auto_view_id(from._internal_auto_view_id());
  }
  if (from.anon_user_id().size() > 0) {
    _internal_set_anon_user_id(from._internal_anon_user_id());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
}

void JoinedIdentifiers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.JoinedIdentifiers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinedIdentifiers::CopyFrom(const JoinedIdentifiers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.JoinedIdentifiers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinedIdentifiers::IsInitialized() const {
  return true;
}

void JoinedIdentifiers::InternalSwap(JoinedIdentifiers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_user_id_.Swap(&other->log_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  view_id_.Swap(&other->view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  insertion_id_.Swap(&other->insertion_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  impression_id_.Swap(&other->impression_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auto_view_id_.Swap(&other->auto_view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  anon_user_id_.Swap(&other->anon_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(platform_id_, other->platform_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinedIdentifiers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IdentifierProvenances::_Internal {
 public:
};

IdentifierProvenances::IdentifierProvenances(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.IdentifierProvenances)
}
IdentifierProvenances::IdentifierProvenances(const IdentifierProvenances& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_provenance_, &from.user_id_provenance_,
    static_cast<size_t>(reinterpret_cast<char*>(&insertion_id_provenance_) -
    reinterpret_cast<char*>(&user_id_provenance_)) + sizeof(insertion_id_provenance_));
  // @@protoc_insertion_point(copy_constructor:event.IdentifierProvenances)
}

void IdentifierProvenances::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_provenance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&insertion_id_provenance_) -
    reinterpret_cast<char*>(&user_id_provenance_)) + sizeof(insertion_id_provenance_));
}

IdentifierProvenances::~IdentifierProvenances() {
  // @@protoc_insertion_point(destructor:event.IdentifierProvenances)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IdentifierProvenances::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IdentifierProvenances::ArenaDtor(void* object) {
  IdentifierProvenances* _this = reinterpret_cast< IdentifierProvenances* >(object);
  (void)_this;
}
void IdentifierProvenances::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IdentifierProvenances::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IdentifierProvenances::Clear() {
// @@protoc_insertion_point(message_clear_start:event.IdentifierProvenances)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_provenance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&insertion_id_provenance_) -
      reinterpret_cast<char*>(&user_id_provenance_)) + sizeof(insertion_id_provenance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdentifierProvenances::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .event.IdentifierProvenance user_id_provenance = 1 [json_name = "userIdProvenance"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_user_id_provenance(static_cast<::event::IdentifierProvenance>(val));
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenance session_id_provenance = 2 [json_name = "sessionIdProvenance"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_id_provenance(static_cast<::event::IdentifierProvenance>(val));
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenance view_id_provenance = 3 [json_name = "viewIdProvenance"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_view_id_provenance(static_cast<::event::IdentifierProvenance>(val));
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenance impression_id_provenance = 4 [json_name = "impressionIdProvenance"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_impression_id_provenance(static_cast<::event::IdentifierProvenance>(val));
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenance action_id_provenance = 5 [json_name = "actionIdProvenance"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action_id_provenance(static_cast<::event::IdentifierProvenance>(val));
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenance content_id_provenance = 6 [json_name = "contentIdProvenance"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_content_id_provenance(static_cast<::event::IdentifierProvenance>(val));
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenance request_id_provenance = 7 [json_name = "requestIdProvenance"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_request_id_provenance(static_cast<::event::IdentifierProvenance>(val));
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenance auto_view_id_provenance = 8 [json_name = "autoViewIdProvenance"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_view_id_provenance(static_cast<::event::IdentifierProvenance>(val));
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenance log_user_id_provenance = 9 [json_name = "logUserIdProvenance"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_user_id_provenance(static_cast<::event::IdentifierProvenance>(val));
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenance insertion_id_provenance = 10 [json_name = "insertionIdProvenance"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_insertion_id_provenance(static_cast<::event::IdentifierProvenance>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IdentifierProvenances::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.IdentifierProvenances)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .event.IdentifierProvenance user_id_provenance = 1 [json_name = "userIdProvenance"];
  if (this->user_id_provenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_user_id_provenance(), target);
  }

  // .event.IdentifierProvenance session_id_provenance = 2 [json_name = "sessionIdProvenance"];
  if (this->session_id_provenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_id_provenance(), target);
  }

  // .event.IdentifierProvenance view_id_provenance = 3 [json_name = "viewIdProvenance"];
  if (this->view_id_provenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_view_id_provenance(), target);
  }

  // .event.IdentifierProvenance impression_id_provenance = 4 [json_name = "impressionIdProvenance"];
  if (this->impression_id_provenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_impression_id_provenance(), target);
  }

  // .event.IdentifierProvenance action_id_provenance = 5 [json_name = "actionIdProvenance"];
  if (this->action_id_provenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_action_id_provenance(), target);
  }

  // .event.IdentifierProvenance content_id_provenance = 6 [json_name = "contentIdProvenance"];
  if (this->content_id_provenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_content_id_provenance(), target);
  }

  // .event.IdentifierProvenance request_id_provenance = 7 [json_name = "requestIdProvenance"];
  if (this->request_id_provenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_request_id_provenance(), target);
  }

  // .event.IdentifierProvenance auto_view_id_provenance = 8 [json_name = "autoViewIdProvenance"];
  if (this->auto_view_id_provenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_auto_view_id_provenance(), target);
  }

  // .event.IdentifierProvenance log_user_id_provenance = 9 [json_name = "logUserIdProvenance"];
  if (this->log_user_id_provenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_log_user_id_provenance(), target);
  }

  // .event.IdentifierProvenance insertion_id_provenance = 10 [json_name = "insertionIdProvenance"];
  if (this->insertion_id_provenance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_insertion_id_provenance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.IdentifierProvenances)
  return target;
}

size_t IdentifierProvenances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.IdentifierProvenances)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .event.IdentifierProvenance user_id_provenance = 1 [json_name = "userIdProvenance"];
  if (this->user_id_provenance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_user_id_provenance());
  }

  // .event.IdentifierProvenance session_id_provenance = 2 [json_name = "sessionIdProvenance"];
  if (this->session_id_provenance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_id_provenance());
  }

  // .event.IdentifierProvenance view_id_provenance = 3 [json_name = "viewIdProvenance"];
  if (this->view_id_provenance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_view_id_provenance());
  }

  // .event.IdentifierProvenance impression_id_provenance = 4 [json_name = "impressionIdProvenance"];
  if (this->impression_id_provenance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_impression_id_provenance());
  }

  // .event.IdentifierProvenance action_id_provenance = 5 [json_name = "actionIdProvenance"];
  if (this->action_id_provenance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action_id_provenance());
  }

  // .event.IdentifierProvenance content_id_provenance = 6 [json_name = "contentIdProvenance"];
  if (this->content_id_provenance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_id_provenance());
  }

  // .event.IdentifierProvenance request_id_provenance = 7 [json_name = "requestIdProvenance"];
  if (this->request_id_provenance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_request_id_provenance());
  }

  // .event.IdentifierProvenance auto_view_id_provenance = 8 [json_name = "autoViewIdProvenance"];
  if (this->auto_view_id_provenance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_view_id_provenance());
  }

  // .event.IdentifierProvenance log_user_id_provenance = 9 [json_name = "logUserIdProvenance"];
  if (this->log_user_id_provenance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_user_id_provenance());
  }

  // .event.IdentifierProvenance insertion_id_provenance = 10 [json_name = "insertionIdProvenance"];
  if (this->insertion_id_provenance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_insertion_id_provenance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IdentifierProvenances::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.IdentifierProvenances)
  GOOGLE_DCHECK_NE(&from, this);
  const IdentifierProvenances* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IdentifierProvenances>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.IdentifierProvenances)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.IdentifierProvenances)
    MergeFrom(*source);
  }
}

void IdentifierProvenances::MergeFrom(const IdentifierProvenances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.IdentifierProvenances)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id_provenance() != 0) {
    _internal_set_user_id_provenance(from._internal_user_id_provenance());
  }
  if (from.session_id_provenance() != 0) {
    _internal_set_session_id_provenance(from._internal_session_id_provenance());
  }
  if (from.view_id_provenance() != 0) {
    _internal_set_view_id_provenance(from._internal_view_id_provenance());
  }
  if (from.impression_id_provenance() != 0) {
    _internal_set_impression_id_provenance(from._internal_impression_id_provenance());
  }
  if (from.action_id_provenance() != 0) {
    _internal_set_action_id_provenance(from._internal_action_id_provenance());
  }
  if (from.content_id_provenance() != 0) {
    _internal_set_content_id_provenance(from._internal_content_id_provenance());
  }
  if (from.request_id_provenance() != 0) {
    _internal_set_request_id_provenance(from._internal_request_id_provenance());
  }
  if (from.auto_view_id_provenance() != 0) {
    _internal_set_auto_view_id_provenance(from._internal_auto_view_id_provenance());
  }
  if (from.log_user_id_provenance() != 0) {
    _internal_set_log_user_id_provenance(from._internal_log_user_id_provenance());
  }
  if (from.insertion_id_provenance() != 0) {
    _internal_set_insertion_id_provenance(from._internal_insertion_id_provenance());
  }
}

void IdentifierProvenances::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.IdentifierProvenances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentifierProvenances::CopyFrom(const IdentifierProvenances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.IdentifierProvenances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifierProvenances::IsInitialized() const {
  return true;
}

void IdentifierProvenances::InternalSwap(IdentifierProvenances* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdentifierProvenances, insertion_id_provenance_)
      + sizeof(IdentifierProvenances::insertion_id_provenance_)
      - PROTOBUF_FIELD_OFFSET(IdentifierProvenances, user_id_provenance_)>(
          reinterpret_cast<char*>(&user_id_provenance_),
          reinterpret_cast<char*>(&other->user_id_provenance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentifierProvenances::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class User::_Internal {
 public:
  static const ::common::UserInfo& user_info(const User* msg);
  static const ::common::Timing& timing(const User* msg);
  static const ::common::ClientInfo& client_info(const User* msg);
  static const ::event::IdentifierProvenances& id_provenances(const User* msg);
  static const ::common::Properties& properties(const User* msg);
};

const ::common::UserInfo&
User::_Internal::user_info(const User* msg) {
  return *msg->user_info_;
}
const ::common::Timing&
User::_Internal::timing(const User* msg) {
  return *msg->timing_;
}
const ::common::ClientInfo&
User::_Internal::client_info(const User* msg) {
  return *msg->client_info_;
}
const ::event::IdentifierProvenances&
User::_Internal::id_provenances(const User* msg) {
  return *msg->id_provenances_;
}
const ::common::Properties&
User::_Internal::properties(const User* msg) {
  return *msg->properties_;
}
void User::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
void User::clear_timing() {
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
}
void User::clear_client_info() {
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
void User::clear_properties() {
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_info()) {
    user_info_ = new ::common::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  if (from._internal_has_timing()) {
    timing_ = new ::common::Timing(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::common::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  if (from._internal_has_properties()) {
    properties_ = new ::common::Properties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  if (from._internal_has_id_provenances()) {
    id_provenances_ = new ::event::IdentifierProvenances(*from.id_provenances_);
  } else {
    id_provenances_ = nullptr;
  }
  platform_id_ = from.platform_id_;
  // @@protoc_insertion_point(copy_constructor:event.User)
}

void User::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&platform_id_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(platform_id_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:event.User)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void User::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete timing_;
  if (this != internal_default_instance()) delete client_info_;
  if (this != internal_default_instance()) delete properties_;
  if (this != internal_default_instance()) delete id_provenances_;
}

void User::ArenaDtor(void* object) {
  User* _this = reinterpret_cast< User* >(object);
  (void)_this;
}
void User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:event.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  if (GetArena() == nullptr && id_provenances_ != nullptr) {
    delete id_provenances_;
  }
  id_provenances_ = nullptr;
  platform_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.UserInfo user_info = 2 [json_name = "userInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Timing timing = 3 [json_name = "timing"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Properties properties = 6 [json_name = "properties"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenances id_provenances = 7 [json_name = "idProvenances"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_provenances(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_platform_id(), target);
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timing(this), target, stream);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_info(this), target, stream);
  }

  // .common.Properties properties = 6 [json_name = "properties"];
  if (this->has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::properties(this), target, stream);
  }

  // .event.IdentifierProvenances id_provenances = 7 [json_name = "idProvenances"];
  if (this->has_id_provenances()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::id_provenances(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  // .common.Properties properties = 6 [json_name = "properties"];
  if (this->has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  // .event.IdentifierProvenances id_provenances = 7 [json_name = "idProvenances"];
  if (this->has_id_provenances()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_provenances_);
  }

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_platform_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_info()) {
    _internal_mutable_user_info()->::common::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.has_timing()) {
    _internal_mutable_timing()->::common::Timing::MergeFrom(from._internal_timing());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::common::ClientInfo::MergeFrom(from._internal_client_info());
  }
  if (from.has_properties()) {
    _internal_mutable_properties()->::common::Properties::MergeFrom(from._internal_properties());
  }
  if (from.has_id_provenances()) {
    _internal_mutable_id_provenances()->::event::IdentifierProvenances::MergeFrom(from._internal_id_provenances());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
}

void User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User, platform_id_)
      + sizeof(User::platform_id_)
      - PROTOBUF_FIELD_OFFSET(User, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CohortMembership::_Internal {
 public:
  static const ::common::UserInfo& user_info(const CohortMembership* msg);
  static const ::common::Timing& timing(const CohortMembership* msg);
  static const ::common::ClientInfo& client_info(const CohortMembership* msg);
  static const ::common::Properties& properties(const CohortMembership* msg);
};

const ::common::UserInfo&
CohortMembership::_Internal::user_info(const CohortMembership* msg) {
  return *msg->user_info_;
}
const ::common::Timing&
CohortMembership::_Internal::timing(const CohortMembership* msg) {
  return *msg->timing_;
}
const ::common::ClientInfo&
CohortMembership::_Internal::client_info(const CohortMembership* msg) {
  return *msg->client_info_;
}
const ::common::Properties&
CohortMembership::_Internal::properties(const CohortMembership* msg) {
  return *msg->properties_;
}
void CohortMembership::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
void CohortMembership::clear_timing() {
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
}
void CohortMembership::clear_client_info() {
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
void CohortMembership::clear_properties() {
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
CohortMembership::CohortMembership(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.CohortMembership)
}
CohortMembership::CohortMembership(const CohortMembership& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  membership_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_membership_id().empty()) {
    membership_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_membership_id(), 
      GetArena());
  }
  cohort_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cohort_id().empty()) {
    cohort_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cohort_id(), 
      GetArena());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::common::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  if (from._internal_has_timing()) {
    timing_ = new ::common::Timing(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::common::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  if (from._internal_has_properties()) {
    properties_ = new ::common::Properties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  ::memcpy(&platform_id_, &from.platform_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&arm_) -
    reinterpret_cast<char*>(&platform_id_)) + sizeof(arm_));
  // @@protoc_insertion_point(copy_constructor:event.CohortMembership)
}

void CohortMembership::SharedCtor() {
membership_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cohort_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&arm_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(arm_));
}

CohortMembership::~CohortMembership() {
  // @@protoc_insertion_point(destructor:event.CohortMembership)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CohortMembership::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  membership_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cohort_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete timing_;
  if (this != internal_default_instance()) delete client_info_;
  if (this != internal_default_instance()) delete properties_;
}

void CohortMembership::ArenaDtor(void* object) {
  CohortMembership* _this = reinterpret_cast< CohortMembership* >(object);
  (void)_this;
}
void CohortMembership::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CohortMembership::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CohortMembership::Clear() {
// @@protoc_insertion_point(message_clear_start:event.CohortMembership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  membership_id_.ClearToEmpty();
  cohort_id_.ClearToEmpty();
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  ::memset(&platform_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arm_) -
      reinterpret_cast<char*>(&platform_id_)) + sizeof(arm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CohortMembership::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.UserInfo user_info = 2 [json_name = "userInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Timing timing = 3 [json_name = "timing"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string membership_id = 6 [json_name = "membershipId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_membership_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.CohortMembership.membership_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cohort_id = 8 [json_name = "cohortId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_cohort_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.CohortMembership.cohort_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.CohortArm arm = 9 [json_name = "arm"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_arm(static_cast<::event::CohortArm>(val));
        } else goto handle_unusual;
        continue;
      // .common.Properties properties = 10 [json_name = "properties"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CohortMembership::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.CohortMembership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_platform_id(), target);
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timing(this), target, stream);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_info(this), target, stream);
  }

  // string membership_id = 6 [json_name = "membershipId"];
  if (this->membership_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id().data(), static_cast<int>(this->_internal_membership_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.CohortMembership.membership_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_membership_id(), target);
  }

  // string cohort_id = 8 [json_name = "cohortId"];
  if (this->cohort_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cohort_id().data(), static_cast<int>(this->_internal_cohort_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.CohortMembership.cohort_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_cohort_id(), target);
  }

  // .event.CohortArm arm = 9 [json_name = "arm"];
  if (this->arm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_arm(), target);
  }

  // .common.Properties properties = 10 [json_name = "properties"];
  if (this->has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.CohortMembership)
  return target;
}

size_t CohortMembership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.CohortMembership)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string membership_id = 6 [json_name = "membershipId"];
  if (this->membership_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id());
  }

  // string cohort_id = 8 [json_name = "cohortId"];
  if (this->cohort_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cohort_id());
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  // .common.Properties properties = 10 [json_name = "properties"];
  if (this->has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_platform_id());
  }

  // .event.CohortArm arm = 9 [json_name = "arm"];
  if (this->arm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_arm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CohortMembership::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.CohortMembership)
  GOOGLE_DCHECK_NE(&from, this);
  const CohortMembership* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CohortMembership>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.CohortMembership)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.CohortMembership)
    MergeFrom(*source);
  }
}

void CohortMembership::MergeFrom(const CohortMembership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.CohortMembership)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.membership_id().size() > 0) {
    _internal_set_membership_id(from._internal_membership_id());
  }
  if (from.cohort_id().size() > 0) {
    _internal_set_cohort_id(from._internal_cohort_id());
  }
  if (from.has_user_info()) {
    _internal_mutable_user_info()->::common::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.has_timing()) {
    _internal_mutable_timing()->::common::Timing::MergeFrom(from._internal_timing());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::common::ClientInfo::MergeFrom(from._internal_client_info());
  }
  if (from.has_properties()) {
    _internal_mutable_properties()->::common::Properties::MergeFrom(from._internal_properties());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
  if (from.arm() != 0) {
    _internal_set_arm(from._internal_arm());
  }
}

void CohortMembership::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.CohortMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CohortMembership::CopyFrom(const CohortMembership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.CohortMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CohortMembership::IsInitialized() const {
  return true;
}

void CohortMembership::InternalSwap(CohortMembership* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  membership_id_.Swap(&other->membership_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cohort_id_.Swap(&other->cohort_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CohortMembership, arm_)
      + sizeof(CohortMembership::arm_)
      - PROTOBUF_FIELD_OFFSET(CohortMembership, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CohortMembership::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WebPageView::_Internal {
 public:
  static const ::common::Size& document_size(const WebPageView* msg);
};

const ::common::Size&
WebPageView::_Internal::document_size(const WebPageView* msg) {
  return *msg->document_size_;
}
void WebPageView::clear_document_size() {
  if (GetArena() == nullptr && document_size_ != nullptr) {
    delete document_size_;
  }
  document_size_ = nullptr;
}
WebPageView::WebPageView(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.WebPageView)
}
WebPageView::WebPageView(const WebPageView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  referrer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_referrer().empty()) {
    referrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referrer(), 
      GetArena());
  }
  if (from._internal_has_document_size()) {
    document_size_ = new ::common::Size(*from.document_size_);
  } else {
    document_size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:event.WebPageView)
}

void WebPageView::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
referrer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
document_size_ = nullptr;
}

WebPageView::~WebPageView() {
  // @@protoc_insertion_point(destructor:event.WebPageView)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WebPageView::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  referrer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete document_size_;
}

void WebPageView::ArenaDtor(void* object) {
  WebPageView* _this = reinterpret_cast< WebPageView* >(object);
  (void)_this;
}
void WebPageView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WebPageView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebPageView::Clear() {
// @@protoc_insertion_point(message_clear_start:event.WebPageView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  referrer_.ClearToEmpty();
  if (GetArena() == nullptr && document_size_ != nullptr) {
    delete document_size_;
  }
  document_size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebPageView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1 [json_name = "url"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.WebPageView.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string referrer = 3 [json_name = "referrer"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_referrer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.WebPageView.referrer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Size document_size = 4 [json_name = "documentSize"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WebPageView::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.WebPageView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1 [json_name = "url"];
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.WebPageView.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string referrer = 3 [json_name = "referrer"];
  if (this->referrer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_referrer().data(), static_cast<int>(this->_internal_referrer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.WebPageView.referrer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_referrer(), target);
  }

  // .common.Size document_size = 4 [json_name = "documentSize"];
  if (this->has_document_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::document_size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.WebPageView)
  return target;
}

size_t WebPageView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.WebPageView)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1 [json_name = "url"];
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string referrer = 3 [json_name = "referrer"];
  if (this->referrer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_referrer());
  }

  // .common.Size document_size = 4 [json_name = "documentSize"];
  if (this->has_document_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebPageView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.WebPageView)
  GOOGLE_DCHECK_NE(&from, this);
  const WebPageView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WebPageView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.WebPageView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.WebPageView)
    MergeFrom(*source);
  }
}

void WebPageView::MergeFrom(const WebPageView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.WebPageView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
  if (from.referrer().size() > 0) {
    _internal_set_referrer(from._internal_referrer());
  }
  if (from.has_document_size()) {
    _internal_mutable_document_size()->::common::Size::MergeFrom(from._internal_document_size());
  }
}

void WebPageView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.WebPageView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebPageView::CopyFrom(const WebPageView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.WebPageView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebPageView::IsInitialized() const {
  return true;
}

void WebPageView::InternalSwap(WebPageView* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  referrer_.Swap(&other->referrer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(document_size_, other->document_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WebPageView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppScreenView::_Internal {
 public:
};

AppScreenView::AppScreenView(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.AppScreenView)
}
AppScreenView::AppScreenView(const AppScreenView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:event.AppScreenView)
}

void AppScreenView::SharedCtor() {
}

AppScreenView::~AppScreenView() {
  // @@protoc_insertion_point(destructor:event.AppScreenView)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppScreenView::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppScreenView::ArenaDtor(void* object) {
  AppScreenView* _this = reinterpret_cast< AppScreenView* >(object);
  (void)_this;
}
void AppScreenView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppScreenView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppScreenView::Clear() {
// @@protoc_insertion_point(message_clear_start:event.AppScreenView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppScreenView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppScreenView::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.AppScreenView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.AppScreenView)
  return target;
}

size_t AppScreenView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.AppScreenView)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppScreenView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.AppScreenView)
  GOOGLE_DCHECK_NE(&from, this);
  const AppScreenView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppScreenView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.AppScreenView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.AppScreenView)
    MergeFrom(*source);
  }
}

void AppScreenView::MergeFrom(const AppScreenView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.AppScreenView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AppScreenView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.AppScreenView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppScreenView::CopyFrom(const AppScreenView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.AppScreenView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppScreenView::IsInitialized() const {
  return true;
}

void AppScreenView::InternalSwap(AppScreenView* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppScreenView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class View::_Internal {
 public:
  static const ::common::UserInfo& user_info(const View* msg);
  static const ::common::Timing& timing(const View* msg);
  static const ::common::ClientInfo& client_info(const View* msg);
  static const ::common::Properties& properties(const View* msg);
  static const ::common::Locale& locale(const View* msg);
  static const ::event::WebPageView& web_page_view(const View* msg);
  static const ::event::AppScreenView& app_screen_view(const View* msg);
  static const ::event::IdentifierProvenances& id_provenances(const View* msg);
};

const ::common::UserInfo&
View::_Internal::user_info(const View* msg) {
  return *msg->user_info_;
}
const ::common::Timing&
View::_Internal::timing(const View* msg) {
  return *msg->timing_;
}
const ::common::ClientInfo&
View::_Internal::client_info(const View* msg) {
  return *msg->client_info_;
}
const ::common::Properties&
View::_Internal::properties(const View* msg) {
  return *msg->properties_;
}
const ::common::Locale&
View::_Internal::locale(const View* msg) {
  return *msg->locale_;
}
const ::event::WebPageView&
View::_Internal::web_page_view(const View* msg) {
  return *msg->ui_type_.web_page_view_;
}
const ::event::AppScreenView&
View::_Internal::app_screen_view(const View* msg) {
  return *msg->ui_type_.app_screen_view_;
}
const ::event::IdentifierProvenances&
View::_Internal::id_provenances(const View* msg) {
  return *msg->id_provenances_;
}
void View::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
void View::clear_timing() {
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
}
void View::clear_client_info() {
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
void View::clear_properties() {
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
void View::clear_locale() {
  if (GetArena() == nullptr && locale_ != nullptr) {
    delete locale_;
  }
  locale_ = nullptr;
}
void View::set_allocated_web_page_view(::event::WebPageView* web_page_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ui_type();
  if (web_page_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(web_page_view);
    if (message_arena != submessage_arena) {
      web_page_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_page_view, submessage_arena);
    }
    set_has_web_page_view();
    ui_type_.web_page_view_ = web_page_view;
  }
  // @@protoc_insertion_point(field_set_allocated:event.View.web_page_view)
}
void View::set_allocated_app_screen_view(::event::AppScreenView* app_screen_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ui_type();
  if (app_screen_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(app_screen_view);
    if (message_arena != submessage_arena) {
      app_screen_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_screen_view, submessage_arena);
    }
    set_has_app_screen_view();
    ui_type_.app_screen_view_ = app_screen_view;
  }
  // @@protoc_insertion_point(field_set_allocated:event.View.app_screen_view)
}
View::View(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.View)
}
View::View(const View& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_view_id().empty()) {
    view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_view_id(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  search_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_search_query().empty()) {
    search_query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_query(), 
      GetArena());
  }
  auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auto_view_id().empty()) {
    auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auto_view_id(), 
      GetArena());
  }
  content_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content_id().empty()) {
    content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content_id(), 
      GetArena());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::common::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  if (from._internal_has_timing()) {
    timing_ = new ::common::Timing(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::common::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  if (from._internal_has_properties()) {
    properties_ = new ::common::Properties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  if (from._internal_has_locale()) {
    locale_ = new ::common::Locale(*from.locale_);
  } else {
    locale_ = nullptr;
  }
  if (from._internal_has_id_provenances()) {
    id_provenances_ = new ::event::IdentifierProvenances(*from.id_provenances_);
  } else {
    id_provenances_ = nullptr;
  }
  ::memcpy(&platform_id_, &from.platform_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&view_type_) -
    reinterpret_cast<char*>(&platform_id_)) + sizeof(view_type_));
  clear_has_ui_type();
  switch (from.ui_type_case()) {
    case kWebPageView: {
      _internal_mutable_web_page_view()->::event::WebPageView::MergeFrom(from._internal_web_page_view());
      break;
    }
    case kAppScreenView: {
      _internal_mutable_app_screen_view()->::event::AppScreenView::MergeFrom(from._internal_app_screen_view());
      break;
    }
    case UI_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event.View)
}

void View::SharedCtor() {
view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
search_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&view_type_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(view_type_));
clear_has_ui_type();
}

View::~View() {
  // @@protoc_insertion_point(destructor:event.View)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void View::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  search_query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auto_view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete timing_;
  if (this != internal_default_instance()) delete client_info_;
  if (this != internal_default_instance()) delete properties_;
  if (this != internal_default_instance()) delete locale_;
  if (this != internal_default_instance()) delete id_provenances_;
  if (has_ui_type()) {
    clear_ui_type();
  }
}

void View::ArenaDtor(void* object) {
  View* _this = reinterpret_cast< View* >(object);
  (void)_this;
}
void View::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void View::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void View::clear_ui_type() {
// @@protoc_insertion_point(one_of_clear_start:event.View)
  switch (ui_type_case()) {
    case kWebPageView: {
      if (GetArena() == nullptr) {
        delete ui_type_.web_page_view_;
      }
      break;
    }
    case kAppScreenView: {
      if (GetArena() == nullptr) {
        delete ui_type_.app_screen_view_;
      }
      break;
    }
    case UI_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UI_TYPE_NOT_SET;
}


void View::Clear() {
// @@protoc_insertion_point(message_clear_start:event.View)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  view_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  name_.ClearToEmpty();
  search_query_.ClearToEmpty();
  auto_view_id_.ClearToEmpty();
  content_id_.ClearToEmpty();
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  if (GetArena() == nullptr && locale_ != nullptr) {
    delete locale_;
  }
  locale_ = nullptr;
  if (GetArena() == nullptr && id_provenances_ != nullptr) {
    delete id_provenances_;
  }
  id_provenances_ = nullptr;
  ::memset(&platform_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_type_) -
      reinterpret_cast<char*>(&platform_id_)) + sizeof(view_type_));
  clear_ui_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* View::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.UserInfo user_info = 2 [json_name = "userInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Timing timing = 3 [json_name = "timing"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string view_id = 6 [json_name = "viewId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.View.view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 7 [json_name = "sessionId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.View.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 8 [json_name = "name"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.View.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.UseCase use_case = 9 [json_name = "useCase"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_case(static_cast<::delivery::UseCase>(val));
        } else goto handle_unusual;
        continue;
      // string search_query = 10 [json_name = "searchQuery"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_search_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.View.search_query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Properties properties = 11 [json_name = "properties"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.View.ViewType view_type = 13 [json_name = "viewType"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_view_type(static_cast<::event::View_ViewType>(val));
        } else goto handle_unusual;
        continue;
      // .event.WebPageView web_page_view = 14 [json_name = "webPageView"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_page_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.AppScreenView app_screen_view = 15 [json_name = "appScreenView"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_screen_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Locale locale = 16 [json_name = "locale"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_locale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auto_view_id = 17 [json_name = "autoViewId"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_auto_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.View.auto_view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenances id_provenances = 18 [json_name = "idProvenances"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_provenances(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content_id = 19 [json_name = "contentId"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_content_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.View.content_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* View::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.View)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_platform_id(), target);
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timing(this), target, stream);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_info(this), target, stream);
  }

  // string view_id = 6 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_view_id().data(), static_cast<int>(this->_internal_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.View.view_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_view_id(), target);
  }

  // string session_id = 7 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.View.session_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_session_id(), target);
  }

  // string name = 8 [json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.View.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // .delivery.UseCase use_case = 9 [json_name = "useCase"];
  if (this->use_case() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_use_case(), target);
  }

  // string search_query = 10 [json_name = "searchQuery"];
  if (this->search_query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_query().data(), static_cast<int>(this->_internal_search_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.View.search_query");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_search_query(), target);
  }

  // .common.Properties properties = 11 [json_name = "properties"];
  if (this->has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::properties(this), target, stream);
  }

  // .event.View.ViewType view_type = 13 [json_name = "viewType"];
  if (this->view_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_view_type(), target);
  }

  // .event.WebPageView web_page_view = 14 [json_name = "webPageView"];
  if (_internal_has_web_page_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::web_page_view(this), target, stream);
  }

  // .event.AppScreenView app_screen_view = 15 [json_name = "appScreenView"];
  if (_internal_has_app_screen_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::app_screen_view(this), target, stream);
  }

  // .common.Locale locale = 16 [json_name = "locale"];
  if (this->has_locale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::locale(this), target, stream);
  }

  // string auto_view_id = 17 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auto_view_id().data(), static_cast<int>(this->_internal_auto_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.View.auto_view_id");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_auto_view_id(), target);
  }

  // .event.IdentifierProvenances id_provenances = 18 [json_name = "idProvenances"];
  if (this->has_id_provenances()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::id_provenances(this), target, stream);
  }

  // string content_id = 19 [json_name = "contentId"];
  if (this->content_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_id().data(), static_cast<int>(this->_internal_content_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.View.content_id");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_content_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.View)
  return target;
}

size_t View::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.View)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string view_id = 6 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_id());
  }

  // string session_id = 7 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string name = 8 [json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string search_query = 10 [json_name = "searchQuery"];
  if (this->search_query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_query());
  }

  // string auto_view_id = 17 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_view_id());
  }

  // string content_id = 19 [json_name = "contentId"];
  if (this->content_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_id());
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  // .common.Properties properties = 11 [json_name = "properties"];
  if (this->has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  // .common.Locale locale = 16 [json_name = "locale"];
  if (this->has_locale()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locale_);
  }

  // .event.IdentifierProvenances id_provenances = 18 [json_name = "idProvenances"];
  if (this->has_id_provenances()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_provenances_);
  }

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_platform_id());
  }

  // .delivery.UseCase use_case = 9 [json_name = "useCase"];
  if (this->use_case() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_case());
  }

  // .event.View.ViewType view_type = 13 [json_name = "viewType"];
  if (this->view_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_view_type());
  }

  switch (ui_type_case()) {
    // .event.WebPageView web_page_view = 14 [json_name = "webPageView"];
    case kWebPageView: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ui_type_.web_page_view_);
      break;
    }
    // .event.AppScreenView app_screen_view = 15 [json_name = "appScreenView"];
    case kAppScreenView: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ui_type_.app_screen_view_);
      break;
    }
    case UI_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void View::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.View)
  GOOGLE_DCHECK_NE(&from, this);
  const View* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<View>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.View)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.View)
    MergeFrom(*source);
  }
}

void View::MergeFrom(const View& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.View)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.view_id().size() > 0) {
    _internal_set_view_id(from._internal_view_id());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.search_query().size() > 0) {
    _internal_set_search_query(from._internal_search_query());
  }
  if (from.auto_view_id().size() > 0) {
    _internal_set_auto_view_id(from._internal_auto_view_id());
  }
  if (from.content_id().size() > 0) {
    _internal_set_content_id(from._internal_content_id());
  }
  if (from.has_user_info()) {
    _internal_mutable_user_info()->::common::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.has_timing()) {
    _internal_mutable_timing()->::common::Timing::MergeFrom(from._internal_timing());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::common::ClientInfo::MergeFrom(from._internal_client_info());
  }
  if (from.has_properties()) {
    _internal_mutable_properties()->::common::Properties::MergeFrom(from._internal_properties());
  }
  if (from.has_locale()) {
    _internal_mutable_locale()->::common::Locale::MergeFrom(from._internal_locale());
  }
  if (from.has_id_provenances()) {
    _internal_mutable_id_provenances()->::event::IdentifierProvenances::MergeFrom(from._internal_id_provenances());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
  if (from.use_case() != 0) {
    _internal_set_use_case(from._internal_use_case());
  }
  if (from.view_type() != 0) {
    _internal_set_view_type(from._internal_view_type());
  }
  switch (from.ui_type_case()) {
    case kWebPageView: {
      _internal_mutable_web_page_view()->::event::WebPageView::MergeFrom(from._internal_web_page_view());
      break;
    }
    case kAppScreenView: {
      _internal_mutable_app_screen_view()->::event::AppScreenView::MergeFrom(from._internal_app_screen_view());
      break;
    }
    case UI_TYPE_NOT_SET: {
      break;
    }
  }
}

void View::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void View::CopyFrom(const View& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool View::IsInitialized() const {
  return true;
}

void View::InternalSwap(View* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  view_id_.Swap(&other->view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  search_query_.Swap(&other->search_query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auto_view_id_.Swap(&other->auto_view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_id_.Swap(&other->content_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(View, view_type_)
      + sizeof(View::view_type_)
      - PROTOBUF_FIELD_OFFSET(View, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
  swap(ui_type_, other->ui_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata View::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AutoView::_Internal {
 public:
  static const ::common::UserInfo& user_info(const AutoView* msg);
  static const ::common::Timing& timing(const AutoView* msg);
  static const ::common::ClientInfo& client_info(const AutoView* msg);
  static const ::common::Properties& properties(const AutoView* msg);
  static const ::common::Locale& locale(const AutoView* msg);
  static const ::event::WebPageView& web_page_view(const AutoView* msg);
  static const ::event::AppScreenView& app_screen_view(const AutoView* msg);
  static const ::event::IdentifierProvenances& id_provenances(const AutoView* msg);
};

const ::common::UserInfo&
AutoView::_Internal::user_info(const AutoView* msg) {
  return *msg->user_info_;
}
const ::common::Timing&
AutoView::_Internal::timing(const AutoView* msg) {
  return *msg->timing_;
}
const ::common::ClientInfo&
AutoView::_Internal::client_info(const AutoView* msg) {
  return *msg->client_info_;
}
const ::common::Properties&
AutoView::_Internal::properties(const AutoView* msg) {
  return *msg->properties_;
}
const ::common::Locale&
AutoView::_Internal::locale(const AutoView* msg) {
  return *msg->locale_;
}
const ::event::WebPageView&
AutoView::_Internal::web_page_view(const AutoView* msg) {
  return *msg->ui_type_.web_page_view_;
}
const ::event::AppScreenView&
AutoView::_Internal::app_screen_view(const AutoView* msg) {
  return *msg->ui_type_.app_screen_view_;
}
const ::event::IdentifierProvenances&
AutoView::_Internal::id_provenances(const AutoView* msg) {
  return *msg->id_provenances_;
}
void AutoView::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
void AutoView::clear_timing() {
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
}
void AutoView::clear_client_info() {
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
void AutoView::clear_properties() {
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
void AutoView::clear_locale() {
  if (GetArena() == nullptr && locale_ != nullptr) {
    delete locale_;
  }
  locale_ = nullptr;
}
void AutoView::set_allocated_web_page_view(::event::WebPageView* web_page_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ui_type();
  if (web_page_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(web_page_view);
    if (message_arena != submessage_arena) {
      web_page_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_page_view, submessage_arena);
    }
    set_has_web_page_view();
    ui_type_.web_page_view_ = web_page_view;
  }
  // @@protoc_insertion_point(field_set_allocated:event.AutoView.web_page_view)
}
void AutoView::set_allocated_app_screen_view(::event::AppScreenView* app_screen_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ui_type();
  if (app_screen_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(app_screen_view);
    if (message_arena != submessage_arena) {
      app_screen_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_screen_view, submessage_arena);
    }
    set_has_app_screen_view();
    ui_type_.app_screen_view_ = app_screen_view;
  }
  // @@protoc_insertion_point(field_set_allocated:event.AutoView.app_screen_view)
}
AutoView::AutoView(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.AutoView)
}
AutoView::AutoView(const AutoView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auto_view_id().empty()) {
    auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auto_view_id(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_view_id().empty()) {
    view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_view_id(), 
      GetArena());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::common::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  if (from._internal_has_timing()) {
    timing_ = new ::common::Timing(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::common::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  if (from._internal_has_properties()) {
    properties_ = new ::common::Properties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  if (from._internal_has_locale()) {
    locale_ = new ::common::Locale(*from.locale_);
  } else {
    locale_ = nullptr;
  }
  if (from._internal_has_id_provenances()) {
    id_provenances_ = new ::event::IdentifierProvenances(*from.id_provenances_);
  } else {
    id_provenances_ = nullptr;
  }
  ::memcpy(&platform_id_, &from.platform_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_case_) -
    reinterpret_cast<char*>(&platform_id_)) + sizeof(use_case_));
  clear_has_ui_type();
  switch (from.ui_type_case()) {
    case kWebPageView: {
      _internal_mutable_web_page_view()->::event::WebPageView::MergeFrom(from._internal_web_page_view());
      break;
    }
    case kAppScreenView: {
      _internal_mutable_app_screen_view()->::event::AppScreenView::MergeFrom(from._internal_app_screen_view());
      break;
    }
    case UI_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event.AutoView)
}

void AutoView::SharedCtor() {
auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_case_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(use_case_));
clear_has_ui_type();
}

AutoView::~AutoView() {
  // @@protoc_insertion_point(destructor:event.AutoView)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoView::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auto_view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete timing_;
  if (this != internal_default_instance()) delete client_info_;
  if (this != internal_default_instance()) delete properties_;
  if (this != internal_default_instance()) delete locale_;
  if (this != internal_default_instance()) delete id_provenances_;
  if (has_ui_type()) {
    clear_ui_type();
  }
}

void AutoView::ArenaDtor(void* object) {
  AutoView* _this = reinterpret_cast< AutoView* >(object);
  (void)_this;
}
void AutoView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutoView::clear_ui_type() {
// @@protoc_insertion_point(one_of_clear_start:event.AutoView)
  switch (ui_type_case()) {
    case kWebPageView: {
      if (GetArena() == nullptr) {
        delete ui_type_.web_page_view_;
      }
      break;
    }
    case kAppScreenView: {
      if (GetArena() == nullptr) {
        delete ui_type_.app_screen_view_;
      }
      break;
    }
    case UI_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UI_TYPE_NOT_SET;
}


void AutoView::Clear() {
// @@protoc_insertion_point(message_clear_start:event.AutoView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auto_view_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  name_.ClearToEmpty();
  view_id_.ClearToEmpty();
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  if (GetArena() == nullptr && locale_ != nullptr) {
    delete locale_;
  }
  locale_ = nullptr;
  if (GetArena() == nullptr && id_provenances_ != nullptr) {
    delete id_provenances_;
  }
  id_provenances_ = nullptr;
  ::memset(&platform_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_case_) -
      reinterpret_cast<char*>(&platform_id_)) + sizeof(use_case_));
  clear_ui_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.UserInfo user_info = 2 [json_name = "userInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Timing timing = 3 [json_name = "timing"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auto_view_id = 6 [json_name = "autoViewId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_auto_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.AutoView.auto_view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 7 [json_name = "sessionId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.AutoView.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 8 [json_name = "name"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.AutoView.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .delivery.UseCase use_case = 9 [json_name = "useCase"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_case(static_cast<::delivery::UseCase>(val));
        } else goto handle_unusual;
        continue;
      // .common.Properties properties = 10 [json_name = "properties"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Locale locale = 11 [json_name = "locale"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_locale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.WebPageView web_page_view = 12 [json_name = "webPageView"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_page_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.AppScreenView app_screen_view = 13 [json_name = "appScreenView"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_screen_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string view_id = 14 [json_name = "viewId"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.AutoView.view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenances id_provenances = 15 [json_name = "idProvenances"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_provenances(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoView::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.AutoView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_platform_id(), target);
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timing(this), target, stream);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_info(this), target, stream);
  }

  // string auto_view_id = 6 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auto_view_id().data(), static_cast<int>(this->_internal_auto_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.AutoView.auto_view_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_auto_view_id(), target);
  }

  // string session_id = 7 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.AutoView.session_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_session_id(), target);
  }

  // string name = 8 [json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.AutoView.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // .delivery.UseCase use_case = 9 [json_name = "useCase"];
  if (this->use_case() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_use_case(), target);
  }

  // .common.Properties properties = 10 [json_name = "properties"];
  if (this->has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::properties(this), target, stream);
  }

  // .common.Locale locale = 11 [json_name = "locale"];
  if (this->has_locale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::locale(this), target, stream);
  }

  // .event.WebPageView web_page_view = 12 [json_name = "webPageView"];
  if (_internal_has_web_page_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::web_page_view(this), target, stream);
  }

  // .event.AppScreenView app_screen_view = 13 [json_name = "appScreenView"];
  if (_internal_has_app_screen_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::app_screen_view(this), target, stream);
  }

  // string view_id = 14 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_view_id().data(), static_cast<int>(this->_internal_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.AutoView.view_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_view_id(), target);
  }

  // .event.IdentifierProvenances id_provenances = 15 [json_name = "idProvenances"];
  if (this->has_id_provenances()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::id_provenances(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.AutoView)
  return target;
}

size_t AutoView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.AutoView)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auto_view_id = 6 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_view_id());
  }

  // string session_id = 7 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string name = 8 [json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string view_id = 14 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_id());
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  // .common.Properties properties = 10 [json_name = "properties"];
  if (this->has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  // .common.Locale locale = 11 [json_name = "locale"];
  if (this->has_locale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locale_);
  }

  // .event.IdentifierProvenances id_provenances = 15 [json_name = "idProvenances"];
  if (this->has_id_provenances()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_provenances_);
  }

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_platform_id());
  }

  // .delivery.UseCase use_case = 9 [json_name = "useCase"];
  if (this->use_case() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_case());
  }

  switch (ui_type_case()) {
    // .event.WebPageView web_page_view = 12 [json_name = "webPageView"];
    case kWebPageView: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ui_type_.web_page_view_);
      break;
    }
    // .event.AppScreenView app_screen_view = 13 [json_name = "appScreenView"];
    case kAppScreenView: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ui_type_.app_screen_view_);
      break;
    }
    case UI_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.AutoView)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.AutoView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.AutoView)
    MergeFrom(*source);
  }
}

void AutoView::MergeFrom(const AutoView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.AutoView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_view_id().size() > 0) {
    _internal_set_auto_view_id(from._internal_auto_view_id());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.view_id().size() > 0) {
    _internal_set_view_id(from._internal_view_id());
  }
  if (from.has_user_info()) {
    _internal_mutable_user_info()->::common::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.has_timing()) {
    _internal_mutable_timing()->::common::Timing::MergeFrom(from._internal_timing());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::common::ClientInfo::MergeFrom(from._internal_client_info());
  }
  if (from.has_properties()) {
    _internal_mutable_properties()->::common::Properties::MergeFrom(from._internal_properties());
  }
  if (from.has_locale()) {
    _internal_mutable_locale()->::common::Locale::MergeFrom(from._internal_locale());
  }
  if (from.has_id_provenances()) {
    _internal_mutable_id_provenances()->::event::IdentifierProvenances::MergeFrom(from._internal_id_provenances());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
  if (from.use_case() != 0) {
    _internal_set_use_case(from._internal_use_case());
  }
  switch (from.ui_type_case()) {
    case kWebPageView: {
      _internal_mutable_web_page_view()->::event::WebPageView::MergeFrom(from._internal_web_page_view());
      break;
    }
    case kAppScreenView: {
      _internal_mutable_app_screen_view()->::event::AppScreenView::MergeFrom(from._internal_app_screen_view());
      break;
    }
    case UI_TYPE_NOT_SET: {
      break;
    }
  }
}

void AutoView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.AutoView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoView::CopyFrom(const AutoView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.AutoView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoView::IsInitialized() const {
  return true;
}

void AutoView::InternalSwap(AutoView* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  auto_view_id_.Swap(&other->auto_view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  view_id_.Swap(&other->view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoView, use_case_)
      + sizeof(AutoView::use_case_)
      - PROTOBUF_FIELD_OFFSET(AutoView, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
  swap(ui_type_, other->ui_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IndexPath::_Internal {
 public:
};

IndexPath::IndexPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  index_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.IndexPath)
}
IndexPath::IndexPath(const IndexPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      index_(from.index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:event.IndexPath)
}

void IndexPath::SharedCtor() {
}

IndexPath::~IndexPath() {
  // @@protoc_insertion_point(destructor:event.IndexPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IndexPath::ArenaDtor(void* object) {
  IndexPath* _this = reinterpret_cast< IndexPath* >(object);
  (void)_this;
}
void IndexPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IndexPath::Clear() {
// @@protoc_insertion_point(message_clear_start:event.IndexPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.IndexPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 index = 1 [json_name = "index"];
  {
    int byte_size = _index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_index(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.IndexPath)
  return target;
}

size_t IndexPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.IndexPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 index = 1 [json_name = "index"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->index_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.IndexPath)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.IndexPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.IndexPath)
    MergeFrom(*source);
  }
}

void IndexPath::MergeFrom(const IndexPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.IndexPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_.MergeFrom(from.index_);
}

void IndexPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.IndexPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexPath::CopyFrom(const IndexPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.IndexPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexPath::IsInitialized() const {
  return true;
}

void IndexPath::InternalSwap(IndexPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_.InternalSwap(&other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Impression::_Internal {
 public:
  static const ::common::UserInfo& user_info(const Impression* msg);
  static const ::common::Timing& timing(const Impression* msg);
  static const ::common::ClientInfo& client_info(const Impression* msg);
  static const ::event::IndexPath& client_position(const Impression* msg);
  static const ::event::IdentifierProvenances& id_provenances(const Impression* msg);
  static const ::common::Properties& properties(const Impression* msg);
};

const ::common::UserInfo&
Impression::_Internal::user_info(const Impression* msg) {
  return *msg->user_info_;
}
const ::common::Timing&
Impression::_Internal::timing(const Impression* msg) {
  return *msg->timing_;
}
const ::common::ClientInfo&
Impression::_Internal::client_info(const Impression* msg) {
  return *msg->client_info_;
}
const ::event::IndexPath&
Impression::_Internal::client_position(const Impression* msg) {
  return *msg->client_position_;
}
const ::event::IdentifierProvenances&
Impression::_Internal::id_provenances(const Impression* msg) {
  return *msg->id_provenances_;
}
const ::common::Properties&
Impression::_Internal::properties(const Impression* msg) {
  return *msg->properties_;
}
void Impression::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
void Impression::clear_timing() {
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
}
void Impression::clear_client_info() {
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
void Impression::clear_properties() {
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
Impression::Impression(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.Impression)
}
Impression::Impression(const Impression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  impression_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_impression_id().empty()) {
    impression_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_impression_id(), 
      GetArena());
  }
  insertion_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_insertion_id().empty()) {
    insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_insertion_id(), 
      GetArena());
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_view_id().empty()) {
    view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_view_id(), 
      GetArena());
  }
  content_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content_id().empty()) {
    content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content_id(), 
      GetArena());
  }
  auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auto_view_id().empty()) {
    auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auto_view_id(), 
      GetArena());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::common::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  if (from._internal_has_timing()) {
    timing_ = new ::common::Timing(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::common::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  if (from._internal_has_properties()) {
    properties_ = new ::common::Properties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  if (from._internal_has_client_position()) {
    client_position_ = new ::event::IndexPath(*from.client_position_);
  } else {
    client_position_ = nullptr;
  }
  if (from._internal_has_id_provenances()) {
    id_provenances_ = new ::event::IdentifierProvenances(*from.id_provenances_);
  } else {
    id_provenances_ = nullptr;
  }
  ::memcpy(&platform_id_, &from.platform_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_superimposed_views_) -
    reinterpret_cast<char*>(&platform_id_)) + sizeof(has_superimposed_views_));
  // @@protoc_insertion_point(copy_constructor:event.Impression)
}

void Impression::SharedCtor() {
impression_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
insertion_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_superimposed_views_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(has_superimposed_views_));
}

Impression::~Impression() {
  // @@protoc_insertion_point(destructor:event.Impression)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Impression::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  impression_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  insertion_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auto_view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete timing_;
  if (this != internal_default_instance()) delete client_info_;
  if (this != internal_default_instance()) delete properties_;
  if (this != internal_default_instance()) delete client_position_;
  if (this != internal_default_instance()) delete id_provenances_;
}

void Impression::ArenaDtor(void* object) {
  Impression* _this = reinterpret_cast< Impression* >(object);
  (void)_this;
}
void Impression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Impression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Impression::Clear() {
// @@protoc_insertion_point(message_clear_start:event.Impression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  impression_id_.ClearToEmpty();
  insertion_id_.ClearToEmpty();
  request_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  view_id_.ClearToEmpty();
  content_id_.ClearToEmpty();
  auto_view_id_.ClearToEmpty();
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  if (GetArena() == nullptr && client_position_ != nullptr) {
    delete client_position_;
  }
  client_position_ = nullptr;
  if (GetArena() == nullptr && id_provenances_ != nullptr) {
    delete id_provenances_;
  }
  id_provenances_ = nullptr;
  ::memset(&platform_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_superimposed_views_) -
      reinterpret_cast<char*>(&platform_id_)) + sizeof(has_superimposed_views_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Impression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.UserInfo user_info = 2 [json_name = "userInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Timing timing = 3 [json_name = "timing"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string impression_id = 6 [json_name = "impressionId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_impression_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Impression.impression_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string insertion_id = 7 [json_name = "insertionId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_insertion_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Impression.insertion_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 8 [json_name = "requestId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Impression.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 9 [json_name = "sessionId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Impression.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string view_id = 10 [json_name = "viewId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Impression.view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Properties properties = 11 [json_name = "properties"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content_id = 12 [json_name = "contentId"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_content_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Impression.content_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.ImpressionSourceType source_type = 13 [json_name = "sourceType"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source_type(static_cast<::event::ImpressionSourceType>(val));
        } else goto handle_unusual;
        continue;
      // bool has_superimposed_views = 14 [json_name = "hasSuperimposedViews"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          has_superimposed_views_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auto_view_id = 15 [json_name = "autoViewId"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_auto_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Impression.auto_view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.IndexPath client_position = 16 [json_name = "clientPosition"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenances id_provenances = 17 [json_name = "idProvenances"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_provenances(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Impression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.Impression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_platform_id(), target);
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timing(this), target, stream);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_info(this), target, stream);
  }

  // string impression_id = 6 [json_name = "impressionId"];
  if (this->impression_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_impression_id().data(), static_cast<int>(this->_internal_impression_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Impression.impression_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_impression_id(), target);
  }

  // string insertion_id = 7 [json_name = "insertionId"];
  if (this->insertion_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insertion_id().data(), static_cast<int>(this->_internal_insertion_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Impression.insertion_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_insertion_id(), target);
  }

  // string request_id = 8 [json_name = "requestId"];
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Impression.request_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_request_id(), target);
  }

  // string session_id = 9 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Impression.session_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_session_id(), target);
  }

  // string view_id = 10 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_view_id().data(), static_cast<int>(this->_internal_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Impression.view_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_view_id(), target);
  }

  // .common.Properties properties = 11 [json_name = "properties"];
  if (this->has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::properties(this), target, stream);
  }

  // string content_id = 12 [json_name = "contentId"];
  if (this->content_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_id().data(), static_cast<int>(this->_internal_content_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Impression.content_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_content_id(), target);
  }

  // .event.ImpressionSourceType source_type = 13 [json_name = "sourceType"];
  if (this->source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_source_type(), target);
  }

  // bool has_superimposed_views = 14 [json_name = "hasSuperimposedViews"];
  if (this->has_superimposed_views() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_has_superimposed_views(), target);
  }

  // string auto_view_id = 15 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auto_view_id().data(), static_cast<int>(this->_internal_auto_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Impression.auto_view_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_auto_view_id(), target);
  }

  // .event.IndexPath client_position = 16 [json_name = "clientPosition"];
  if (this->has_client_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::client_position(this), target, stream);
  }

  // .event.IdentifierProvenances id_provenances = 17 [json_name = "idProvenances"];
  if (this->has_id_provenances()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::id_provenances(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.Impression)
  return target;
}

size_t Impression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.Impression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string impression_id = 6 [json_name = "impressionId"];
  if (this->impression_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_impression_id());
  }

  // string insertion_id = 7 [json_name = "insertionId"];
  if (this->insertion_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insertion_id());
  }

  // string request_id = 8 [json_name = "requestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string session_id = 9 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string view_id = 10 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_id());
  }

  // string content_id = 12 [json_name = "contentId"];
  if (this->content_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_id());
  }

  // string auto_view_id = 15 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_view_id());
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  // .common.Properties properties = 11 [json_name = "properties"];
  if (this->has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  // .event.IndexPath client_position = 16 [json_name = "clientPosition"];
  if (this->has_client_position()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_position_);
  }

  // .event.IdentifierProvenances id_provenances = 17 [json_name = "idProvenances"];
  if (this->has_id_provenances()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_provenances_);
  }

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_platform_id());
  }

  // .event.ImpressionSourceType source_type = 13 [json_name = "sourceType"];
  if (this->source_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_type());
  }

  // bool has_superimposed_views = 14 [json_name = "hasSuperimposedViews"];
  if (this->has_superimposed_views() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Impression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.Impression)
  GOOGLE_DCHECK_NE(&from, this);
  const Impression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Impression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.Impression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.Impression)
    MergeFrom(*source);
  }
}

void Impression::MergeFrom(const Impression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.Impression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.impression_id().size() > 0) {
    _internal_set_impression_id(from._internal_impression_id());
  }
  if (from.insertion_id().size() > 0) {
    _internal_set_insertion_id(from._internal_insertion_id());
  }
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.view_id().size() > 0) {
    _internal_set_view_id(from._internal_view_id());
  }
  if (from.content_id().size() > 0) {
    _internal_set_content_id(from._internal_content_id());
  }
  if (from.auto_view_id().size() > 0) {
    _internal_set_auto_view_id(from._internal_auto_view_id());
  }
  if (from.has_user_info()) {
    _internal_mutable_user_info()->::common::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.has_timing()) {
    _internal_mutable_timing()->::common::Timing::MergeFrom(from._internal_timing());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::common::ClientInfo::MergeFrom(from._internal_client_info());
  }
  if (from.has_properties()) {
    _internal_mutable_properties()->::common::Properties::MergeFrom(from._internal_properties());
  }
  if (from.has_client_position()) {
    _internal_mutable_client_position()->::event::IndexPath::MergeFrom(from._internal_client_position());
  }
  if (from.has_id_provenances()) {
    _internal_mutable_id_provenances()->::event::IdentifierProvenances::MergeFrom(from._internal_id_provenances());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
  if (from.source_type() != 0) {
    _internal_set_source_type(from._internal_source_type());
  }
  if (from.has_superimposed_views() != 0) {
    _internal_set_has_superimposed_views(from._internal_has_superimposed_views());
  }
}

void Impression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.Impression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Impression::CopyFrom(const Impression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.Impression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Impression::IsInitialized() const {
  return true;
}

void Impression::InternalSwap(Impression* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  impression_id_.Swap(&other->impression_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  insertion_id_.Swap(&other->insertion_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  view_id_.Swap(&other->view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_id_.Swap(&other->content_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auto_view_id_.Swap(&other->auto_view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Impression, has_superimposed_views_)
      + sizeof(Impression::has_superimposed_views_)
      - PROTOBUF_FIELD_OFFSET(Impression, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Impression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NavigateAction::_Internal {
 public:
};

NavigateAction::NavigateAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.NavigateAction)
}
NavigateAction::NavigateAction(const NavigateAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_url().empty()) {
    target_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_url(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:event.NavigateAction)
}

void NavigateAction::SharedCtor() {
target_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NavigateAction::~NavigateAction() {
  // @@protoc_insertion_point(destructor:event.NavigateAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigateAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NavigateAction::ArenaDtor(void* object) {
  NavigateAction* _this = reinterpret_cast< NavigateAction* >(object);
  (void)_this;
}
void NavigateAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigateAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NavigateAction::Clear() {
// @@protoc_insertion_point(message_clear_start:event.NavigateAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigateAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target_url = 1 [json_name = "targetUrl"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.NavigateAction.target_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigateAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.NavigateAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_url = 1 [json_name = "targetUrl"];
  if (this->target_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_url().data(), static_cast<int>(this->_internal_target_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.NavigateAction.target_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.NavigateAction)
  return target;
}

size_t NavigateAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.NavigateAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target_url = 1 [json_name = "targetUrl"];
  if (this->target_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigateAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.NavigateAction)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigateAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigateAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.NavigateAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.NavigateAction)
    MergeFrom(*source);
  }
}

void NavigateAction::MergeFrom(const NavigateAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.NavigateAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_url().size() > 0) {
    _internal_set_target_url(from._internal_target_url());
  }
}

void NavigateAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.NavigateAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigateAction::CopyFrom(const NavigateAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.NavigateAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigateAction::IsInitialized() const {
  return true;
}

void NavigateAction::InternalSwap(NavigateAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_url_.Swap(&other->target_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigateAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Action::_Internal {
 public:
  using HasBits = decltype(std::declval<Action>()._has_bits_);
  static const ::common::UserInfo& user_info(const Action* msg);
  static const ::common::Timing& timing(const Action* msg);
  static const ::common::ClientInfo& client_info(const Action* msg);
  static const ::event::NavigateAction& navigate_action(const Action* msg);
  static const ::event::IndexPath& client_position(const Action* msg);
  static const ::event::IdentifierProvenances& id_provenances(const Action* msg);
  static const ::common::Properties& properties(const Action* msg);
  static const ::common::Device& device(const Action* msg);
  static const ::event::Cart& cart(const Action* msg);
  static void set_has_cart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::common::UserInfo&
Action::_Internal::user_info(const Action* msg) {
  return *msg->user_info_;
}
const ::common::Timing&
Action::_Internal::timing(const Action* msg) {
  return *msg->timing_;
}
const ::common::ClientInfo&
Action::_Internal::client_info(const Action* msg) {
  return *msg->client_info_;
}
const ::event::NavigateAction&
Action::_Internal::navigate_action(const Action* msg) {
  return *msg->action_.navigate_action_;
}
const ::event::IndexPath&
Action::_Internal::client_position(const Action* msg) {
  return *msg->client_position_;
}
const ::event::IdentifierProvenances&
Action::_Internal::id_provenances(const Action* msg) {
  return *msg->id_provenances_;
}
const ::common::Properties&
Action::_Internal::properties(const Action* msg) {
  return *msg->properties_;
}
const ::common::Device&
Action::_Internal::device(const Action* msg) {
  return *msg->device_;
}
const ::event::Cart&
Action::_Internal::cart(const Action* msg) {
  return *msg->cart_;
}
void Action::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
void Action::clear_timing() {
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
}
void Action::clear_client_info() {
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
void Action::set_allocated_navigate_action(::event::NavigateAction* navigate_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (navigate_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(navigate_action);
    if (message_arena != submessage_arena) {
      navigate_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigate_action, submessage_arena);
    }
    set_has_navigate_action();
    action_.navigate_action_ = navigate_action;
  }
  // @@protoc_insertion_point(field_set_allocated:event.Action.navigate_action)
}
void Action::clear_properties() {
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
void Action::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_id().empty()) {
    action_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_id(), 
      GetArena());
  }
  impression_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_impression_id().empty()) {
    impression_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_impression_id(), 
      GetArena());
  }
  insertion_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_insertion_id().empty()) {
    insertion_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_insertion_id(), 
      GetArena());
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_view_id().empty()) {
    view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_view_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  custom_action_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_custom_action_type().empty()) {
    custom_action_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_action_type(), 
      GetArena());
  }
  element_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_element_id().empty()) {
    element_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_element_id(), 
      GetArena());
  }
  content_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content_id().empty()) {
    content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content_id(), 
      GetArena());
  }
  auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auto_view_id().empty()) {
    auto_view_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auto_view_id(), 
      GetArena());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::common::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  if (from._internal_has_timing()) {
    timing_ = new ::common::Timing(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::common::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  if (from._internal_has_properties()) {
    properties_ = new ::common::Properties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  if (from._internal_has_client_position()) {
    client_position_ = new ::event::IndexPath(*from.client_position_);
  } else {
    client_position_ = nullptr;
  }
  if (from._internal_has_id_provenances()) {
    id_provenances_ = new ::event::IdentifierProvenances(*from.id_provenances_);
  } else {
    id_provenances_ = nullptr;
  }
  if (from._internal_has_device()) {
    device_ = new ::common::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from._internal_has_cart()) {
    cart_ = new ::event::Cart(*from.cart_);
  } else {
    cart_ = nullptr;
  }
  ::memcpy(&platform_id_, &from.platform_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_superimposed_views_) -
    reinterpret_cast<char*>(&platform_id_)) + sizeof(has_superimposed_views_));
  clear_has_action();
  switch (from.action_case()) {
    case kNavigateAction: {
      _internal_mutable_navigate_action()->::event::NavigateAction::MergeFrom(from._internal_navigate_action());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event.Action)
}

void Action::SharedCtor() {
action_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
impression_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
insertion_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_action_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
element_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auto_view_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_superimposed_views_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(has_superimposed_views_));
clear_has_action();
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:event.Action)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  action_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  impression_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  insertion_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_action_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  element_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auto_view_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete timing_;
  if (this != internal_default_instance()) delete client_info_;
  if (this != internal_default_instance()) delete properties_;
  if (this != internal_default_instance()) delete client_position_;
  if (this != internal_default_instance()) delete id_provenances_;
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete cart_;
  if (has_action()) {
    clear_action();
  }
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:event.Action)
  switch (action_case()) {
    case kNavigateAction: {
      if (GetArena() == nullptr) {
        delete action_.navigate_action_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:event.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_id_.ClearToEmpty();
  impression_id_.ClearToEmpty();
  insertion_id_.ClearToEmpty();
  request_id_.ClearToEmpty();
  session_id_.ClearToEmpty();
  view_id_.ClearToEmpty();
  name_.ClearToEmpty();
  custom_action_type_.ClearToEmpty();
  element_id_.ClearToEmpty();
  content_id_.ClearToEmpty();
  auto_view_id_.ClearToEmpty();
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  if (GetArena() == nullptr && client_position_ != nullptr) {
    delete client_position_;
  }
  client_position_ = nullptr;
  if (GetArena() == nullptr && id_provenances_ != nullptr) {
    delete id_provenances_;
  }
  id_provenances_ = nullptr;
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && cart_ != nullptr) {
      delete cart_;
    }
    cart_ = nullptr;
  }
  ::memset(&platform_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_superimposed_views_) -
      reinterpret_cast<char*>(&platform_id_)) + sizeof(has_superimposed_views_));
  clear_action();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.UserInfo user_info = 2 [json_name = "userInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Timing timing = 3 [json_name = "timing"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action_id = 6 [json_name = "actionId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_action_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Action.action_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string impression_id = 7 [json_name = "impressionId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_impression_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Action.impression_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string insertion_id = 8 [json_name = "insertionId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_insertion_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Action.insertion_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_id = 9 [json_name = "requestId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Action.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 10 [json_name = "sessionId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Action.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string view_id = 11 [json_name = "viewId"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Action.view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 12 [json_name = "name"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Action.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.ActionType action_type = 14 [json_name = "actionType"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action_type(static_cast<::event::ActionType>(val));
        } else goto handle_unusual;
        continue;
      // string custom_action_type = 15 [json_name = "customActionType"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_custom_action_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Action.custom_action_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string element_id = 17 [json_name = "elementId"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_element_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Action.element_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.NavigateAction navigate_action = 18 [json_name = "navigateAction"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigate_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Properties properties = 20 [json_name = "properties"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content_id = 21 [json_name = "contentId"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_content_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Action.content_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_superimposed_views = 22 [json_name = "hasSuperimposedViews"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          has_superimposed_views_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auto_view_id = 23 [json_name = "autoViewId"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_auto_view_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.Action.auto_view_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.IndexPath client_position = 24 [json_name = "clientPosition"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.IdentifierProvenances id_provenances = 25 [json_name = "idProvenances"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_id_provenances(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Device device = 26 [json_name = "device"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.Cart cart = 28 [json_name = "cart"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_cart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_platform_id(), target);
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timing(this), target, stream);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_info(this), target, stream);
  }

  // string action_id = 6 [json_name = "actionId"];
  if (this->action_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_id().data(), static_cast<int>(this->_internal_action_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Action.action_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_action_id(), target);
  }

  // string impression_id = 7 [json_name = "impressionId"];
  if (this->impression_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_impression_id().data(), static_cast<int>(this->_internal_impression_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Action.impression_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_impression_id(), target);
  }

  // string insertion_id = 8 [json_name = "insertionId"];
  if (this->insertion_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insertion_id().data(), static_cast<int>(this->_internal_insertion_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Action.insertion_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_insertion_id(), target);
  }

  // string request_id = 9 [json_name = "requestId"];
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Action.request_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_request_id(), target);
  }

  // string session_id = 10 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Action.session_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_session_id(), target);
  }

  // string view_id = 11 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_view_id().data(), static_cast<int>(this->_internal_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Action.view_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_view_id(), target);
  }

  // string name = 12 [json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Action.name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_name(), target);
  }

  // .event.ActionType action_type = 14 [json_name = "actionType"];
  if (this->action_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_action_type(), target);
  }

  // string custom_action_type = 15 [json_name = "customActionType"];
  if (this->custom_action_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_action_type().data(), static_cast<int>(this->_internal_custom_action_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Action.custom_action_type");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_custom_action_type(), target);
  }

  // string element_id = 17 [json_name = "elementId"];
  if (this->element_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_element_id().data(), static_cast<int>(this->_internal_element_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Action.element_id");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_element_id(), target);
  }

  // .event.NavigateAction navigate_action = 18 [json_name = "navigateAction"];
  if (_internal_has_navigate_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::navigate_action(this), target, stream);
  }

  // .common.Properties properties = 20 [json_name = "properties"];
  if (this->has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::properties(this), target, stream);
  }

  // string content_id = 21 [json_name = "contentId"];
  if (this->content_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_id().data(), static_cast<int>(this->_internal_content_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Action.content_id");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_content_id(), target);
  }

  // bool has_superimposed_views = 22 [json_name = "hasSuperimposedViews"];
  if (this->has_superimposed_views() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_has_superimposed_views(), target);
  }

  // string auto_view_id = 23 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auto_view_id().data(), static_cast<int>(this->_internal_auto_view_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.Action.auto_view_id");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_auto_view_id(), target);
  }

  // .event.IndexPath client_position = 24 [json_name = "clientPosition"];
  if (this->has_client_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::client_position(this), target, stream);
  }

  // .event.IdentifierProvenances id_provenances = 25 [json_name = "idProvenances"];
  if (this->has_id_provenances()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::id_provenances(this), target, stream);
  }

  // .common.Device device = 26 [json_name = "device"];
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::device(this), target, stream);
  }

  // .event.Cart cart = 28 [json_name = "cart"];
  if (_internal_has_cart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::cart(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.Action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action_id = 6 [json_name = "actionId"];
  if (this->action_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_id());
  }

  // string impression_id = 7 [json_name = "impressionId"];
  if (this->impression_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_impression_id());
  }

  // string insertion_id = 8 [json_name = "insertionId"];
  if (this->insertion_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insertion_id());
  }

  // string request_id = 9 [json_name = "requestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string session_id = 10 [json_name = "sessionId"];
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string view_id = 11 [json_name = "viewId"];
  if (this->view_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_view_id());
  }

  // string name = 12 [json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string custom_action_type = 15 [json_name = "customActionType"];
  if (this->custom_action_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_custom_action_type());
  }

  // string element_id = 17 [json_name = "elementId"];
  if (this->element_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_element_id());
  }

  // string content_id = 21 [json_name = "contentId"];
  if (this->content_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_id());
  }

  // string auto_view_id = 23 [json_name = "autoViewId"];
  if (this->auto_view_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_view_id());
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  // .common.Properties properties = 20 [json_name = "properties"];
  if (this->has_properties()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  // .event.IndexPath client_position = 24 [json_name = "clientPosition"];
  if (this->has_client_position()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_position_);
  }

  // .event.IdentifierProvenances id_provenances = 25 [json_name = "idProvenances"];
  if (this->has_id_provenances()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_provenances_);
  }

  // .common.Device device = 26 [json_name = "device"];
  if (this->has_device()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .event.Cart cart = 28 [json_name = "cart"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cart_);
  }

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_platform_id());
  }

  // .event.ActionType action_type = 14 [json_name = "actionType"];
  if (this->action_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action_type());
  }

  // bool has_superimposed_views = 22 [json_name = "hasSuperimposedViews"];
  if (this->has_superimposed_views() != 0) {
    total_size += 2 + 1;
  }

  switch (action_case()) {
    // .event.NavigateAction navigate_action = 18 [json_name = "navigateAction"];
    case kNavigateAction: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.navigate_action_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.Action)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action_id().size() > 0) {
    _internal_set_action_id(from._internal_action_id());
  }
  if (from.impression_id().size() > 0) {
    _internal_set_impression_id(from._internal_impression_id());
  }
  if (from.insertion_id().size() > 0) {
    _internal_set_insertion_id(from._internal_insertion_id());
  }
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.view_id().size() > 0) {
    _internal_set_view_id(from._internal_view_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.custom_action_type().size() > 0) {
    _internal_set_custom_action_type(from._internal_custom_action_type());
  }
  if (from.element_id().size() > 0) {
    _internal_set_element_id(from._internal_element_id());
  }
  if (from.content_id().size() > 0) {
    _internal_set_content_id(from._internal_content_id());
  }
  if (from.auto_view_id().size() > 0) {
    _internal_set_auto_view_id(from._internal_auto_view_id());
  }
  if (from.has_user_info()) {
    _internal_mutable_user_info()->::common::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.has_timing()) {
    _internal_mutable_timing()->::common::Timing::MergeFrom(from._internal_timing());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::common::ClientInfo::MergeFrom(from._internal_client_info());
  }
  if (from.has_properties()) {
    _internal_mutable_properties()->::common::Properties::MergeFrom(from._internal_properties());
  }
  if (from.has_client_position()) {
    _internal_mutable_client_position()->::event::IndexPath::MergeFrom(from._internal_client_position());
  }
  if (from.has_id_provenances()) {
    _internal_mutable_id_provenances()->::event::IdentifierProvenances::MergeFrom(from._internal_id_provenances());
  }
  if (from.has_device()) {
    _internal_mutable_device()->::common::Device::MergeFrom(from._internal_device());
  }
  if (from._internal_has_cart()) {
    _internal_mutable_cart()->::event::Cart::MergeFrom(from._internal_cart());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
  if (from.action_type() != 0) {
    _internal_set_action_type(from._internal_action_type());
  }
  if (from.has_superimposed_views() != 0) {
    _internal_set_has_superimposed_views(from._internal_has_superimposed_views());
  }
  switch (from.action_case()) {
    case kNavigateAction: {
      _internal_mutable_navigate_action()->::event::NavigateAction::MergeFrom(from._internal_navigate_action());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void Action::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  action_id_.Swap(&other->action_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  impression_id_.Swap(&other->impression_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  insertion_id_.Swap(&other->insertion_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  view_id_.Swap(&other->view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_action_type_.Swap(&other->custom_action_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  element_id_.Swap(&other->element_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_id_.Swap(&other->content_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auto_view_id_.Swap(&other->auto_view_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Action, has_superimposed_views_)
      + sizeof(Action::has_superimposed_views_)
      - PROTOBUF_FIELD_OFFSET(Action, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Cart::_Internal {
 public:
};

Cart::Cart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.Cart)
}
Cart::Cart(const Cart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contents_(from.contents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:event.Cart)
}

void Cart::SharedCtor() {
}

Cart::~Cart() {
  // @@protoc_insertion_point(destructor:event.Cart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Cart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Cart::ArenaDtor(void* object) {
  Cart* _this = reinterpret_cast< Cart* >(object);
  (void)_this;
}
void Cart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Cart::Clear() {
// @@protoc_insertion_point(message_clear_start:event.Cart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .event.CartContent contents = 1 [json_name = "contents"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.Cart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .event.CartContent contents = 1 [json_name = "contents"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_contents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.Cart)
  return target;
}

size_t Cart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.Cart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event.CartContent contents = 1 [json_name = "contents"];
  total_size += 1UL * this->_internal_contents_size();
  for (const auto& msg : this->contents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.Cart)
  GOOGLE_DCHECK_NE(&from, this);
  const Cart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.Cart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.Cart)
    MergeFrom(*source);
  }
}

void Cart::MergeFrom(const Cart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.Cart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contents_.MergeFrom(from.contents_);
}

void Cart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.Cart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cart::CopyFrom(const Cart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.Cart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cart::IsInitialized() const {
  return true;
}

void Cart::InternalSwap(Cart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contents_.InternalSwap(&other->contents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CartContent::_Internal {
 public:
  static const ::common::Money& price_per_unit(const CartContent* msg);
};

const ::common::Money&
CartContent::_Internal::price_per_unit(const CartContent* msg) {
  return *msg->price_per_unit_;
}
void CartContent::clear_price_per_unit() {
  if (GetArena() == nullptr && price_per_unit_ != nullptr) {
    delete price_per_unit_;
  }
  price_per_unit_ = nullptr;
}
CartContent::CartContent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.CartContent)
}
CartContent::CartContent(const CartContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content_id().empty()) {
    content_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content_id(), 
      GetArena());
  }
  if (from._internal_has_price_per_unit()) {
    price_per_unit_ = new ::common::Money(*from.price_per_unit_);
  } else {
    price_per_unit_ = nullptr;
  }
  quantity_ = from.quantity_;
  // @@protoc_insertion_point(copy_constructor:event.CartContent)
}

void CartContent::SharedCtor() {
content_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_per_unit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&price_per_unit_)) + sizeof(quantity_));
}

CartContent::~CartContent() {
  // @@protoc_insertion_point(destructor:event.CartContent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CartContent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete price_per_unit_;
}

void CartContent::ArenaDtor(void* object) {
  CartContent* _this = reinterpret_cast< CartContent* >(object);
  (void)_this;
}
void CartContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CartContent::Clear() {
// @@protoc_insertion_point(message_clear_start:event.CartContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_id_.ClearToEmpty();
  if (GetArena() == nullptr && price_per_unit_ != nullptr) {
    delete price_per_unit_;
  }
  price_per_unit_ = nullptr;
  quantity_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string content_id = 1 [json_name = "contentId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.CartContent.content_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 quantity = 2 [json_name = "quantity"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Money price_per_unit = 3 [json_name = "pricePerUnit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price_per_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.CartContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content_id = 1 [json_name = "contentId"];
  if (this->content_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_id().data(), static_cast<int>(this->_internal_content_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.CartContent.content_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content_id(), target);
  }

  // int64 quantity = 2 [json_name = "quantity"];
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_quantity(), target);
  }

  // .common.Money price_per_unit = 3 [json_name = "pricePerUnit"];
  if (this->has_price_per_unit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::price_per_unit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.CartContent)
  return target;
}

size_t CartContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.CartContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content_id = 1 [json_name = "contentId"];
  if (this->content_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_id());
  }

  // .common.Money price_per_unit = 3 [json_name = "pricePerUnit"];
  if (this->has_price_per_unit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_per_unit_);
  }

  // int64 quantity = 2 [json_name = "quantity"];
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.CartContent)
  GOOGLE_DCHECK_NE(&from, this);
  const CartContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CartContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.CartContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.CartContent)
    MergeFrom(*source);
  }
}

void CartContent::MergeFrom(const CartContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.CartContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content_id().size() > 0) {
    _internal_set_content_id(from._internal_content_id());
  }
  if (from.has_price_per_unit()) {
    _internal_mutable_price_per_unit()->::common::Money::MergeFrom(from._internal_price_per_unit());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void CartContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.CartContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartContent::CopyFrom(const CartContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.CartContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartContent::IsInitialized() const {
  return true;
}

void CartContent::InternalSwap(CartContent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_id_.Swap(&other->content_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartContent, quantity_)
      + sizeof(CartContent::quantity_)
      - PROTOBUF_FIELD_OFFSET(CartContent, price_per_unit_)>(
          reinterpret_cast<char*>(&price_per_unit_),
          reinterpret_cast<char*>(&other->price_per_unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CartContent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Attribution::_Internal {
 public:
};

Attribution::Attribution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.Attribution)
}
Attribution::Attribution(const Attribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&model_id_, &from.model_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&credit_millis_) -
    reinterpret_cast<char*>(&model_id_)) + sizeof(credit_millis_));
  // @@protoc_insertion_point(copy_constructor:event.Attribution)
}

void Attribution::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&model_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&credit_millis_) -
    reinterpret_cast<char*>(&model_id_)) + sizeof(credit_millis_));
}

Attribution::~Attribution() {
  // @@protoc_insertion_point(destructor:event.Attribution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Attribution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Attribution::ArenaDtor(void* object) {
  Attribution* _this = reinterpret_cast< Attribution* >(object);
  (void)_this;
}
void Attribution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Attribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Attribution::Clear() {
// @@protoc_insertion_point(message_clear_start:event.Attribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&model_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&credit_millis_) -
      reinterpret_cast<char*>(&model_id_)) + sizeof(credit_millis_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 model_id = 1 [json_name = "modelId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 credit_millis = 2 [json_name = "creditMillis"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          credit_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Attribution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.Attribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 model_id = 1 [json_name = "modelId"];
  if (this->model_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_model_id(), target);
  }

  // int32 credit_millis = 2 [json_name = "creditMillis"];
  if (this->credit_millis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_credit_millis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.Attribution)
  return target;
}

size_t Attribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.Attribution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 model_id = 1 [json_name = "modelId"];
  if (this->model_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_model_id());
  }

  // int32 credit_millis = 2 [json_name = "creditMillis"];
  if (this->credit_millis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_credit_millis());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.Attribution)
  GOOGLE_DCHECK_NE(&from, this);
  const Attribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.Attribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.Attribution)
    MergeFrom(*source);
  }
}

void Attribution::MergeFrom(const Attribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.Attribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id() != 0) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (from.credit_millis() != 0) {
    _internal_set_credit_millis(from._internal_credit_millis());
  }
}

void Attribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.Attribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribution::CopyFrom(const Attribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.Attribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribution::IsInitialized() const {
  return true;
}

void Attribution::InternalSwap(Attribution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Attribution, credit_millis_)
      + sizeof(Attribution::credit_millis_)
      - PROTOBUF_FIELD_OFFSET(Attribution, model_id_)>(
          reinterpret_cast<char*>(&model_id_),
          reinterpret_cast<char*>(&other->model_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IOSError::_Internal {
 public:
};

IOSError::IOSError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.IOSError)
}
IOSError::IOSError(const IOSError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&batch_number_) -
    reinterpret_cast<char*>(&code_)) + sizeof(batch_number_));
  // @@protoc_insertion_point(copy_constructor:event.IOSError)
}

void IOSError::SharedCtor() {
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&batch_number_) -
    reinterpret_cast<char*>(&code_)) + sizeof(batch_number_));
}

IOSError::~IOSError() {
  // @@protoc_insertion_point(destructor:event.IOSError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IOSError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IOSError::ArenaDtor(void* object) {
  IOSError* _this = reinterpret_cast< IOSError* >(object);
  (void)_this;
}
void IOSError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOSError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IOSError::Clear() {
// @@protoc_insertion_point(message_clear_start:event.IOSError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domain_.ClearToEmpty();
  description_.ClearToEmpty();
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_number_) -
      reinterpret_cast<char*>(&code_)) + sizeof(batch_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOSError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1 [json_name = "code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string domain = 2 [json_name = "domain"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.IOSError.domain"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3 [json_name = "description"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.IOSError.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batch_number = 4 [json_name = "batchNumber"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          batch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IOSError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.IOSError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1 [json_name = "code"];
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string domain = 2 [json_name = "domain"];
  if (this->domain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.IOSError.domain");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_domain(), target);
  }

  // string description = 3 [json_name = "description"];
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.IOSError.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // int32 batch_number = 4 [json_name = "batchNumber"];
  if (this->batch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_batch_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.IOSError)
  return target;
}

size_t IOSError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.IOSError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string domain = 2 [json_name = "domain"];
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  // string description = 3 [json_name = "description"];
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // int32 code = 1 [json_name = "code"];
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 batch_number = 4 [json_name = "batchNumber"];
  if (this->batch_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOSError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.IOSError)
  GOOGLE_DCHECK_NE(&from, this);
  const IOSError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IOSError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.IOSError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.IOSError)
    MergeFrom(*source);
  }
}

void IOSError::MergeFrom(const IOSError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.IOSError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.domain().size() > 0) {
    _internal_set_domain(from._internal_domain());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.batch_number() != 0) {
    _internal_set_batch_number(from._internal_batch_number());
  }
}

void IOSError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.IOSError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOSError::CopyFrom(const IOSError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.IOSError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOSError::IsInitialized() const {
  return true;
}

void IOSError::InternalSwap(IOSError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IOSError, batch_number_)
      + sizeof(IOSError::batch_number_)
      - PROTOBUF_FIELD_OFFSET(IOSError, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IOSError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ErrorHistory::_Internal {
 public:
};

ErrorHistory::ErrorHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ios_errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.ErrorHistory)
}
ErrorHistory::ErrorHistory(const ErrorHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ios_errors_(from.ios_errors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_errors_ = from.total_errors_;
  // @@protoc_insertion_point(copy_constructor:event.ErrorHistory)
}

void ErrorHistory::SharedCtor() {
total_errors_ = 0;
}

ErrorHistory::~ErrorHistory() {
  // @@protoc_insertion_point(destructor:event.ErrorHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ErrorHistory::ArenaDtor(void* object) {
  ErrorHistory* _this = reinterpret_cast< ErrorHistory* >(object);
  (void)_this;
}
void ErrorHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrorHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:event.ErrorHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ios_errors_.Clear();
  total_errors_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .event.IOSError ios_errors = 1 [json_name = "iosErrors"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ios_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_errors = 2 [json_name = "totalErrors"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.ErrorHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .event.IOSError ios_errors = 1 [json_name = "iosErrors"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ios_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ios_errors(i), target, stream);
  }

  // int32 total_errors = 2 [json_name = "totalErrors"];
  if (this->total_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.ErrorHistory)
  return target;
}

size_t ErrorHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.ErrorHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event.IOSError ios_errors = 1 [json_name = "iosErrors"];
  total_size += 1UL * this->_internal_ios_errors_size();
  for (const auto& msg : this->ios_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_errors = 2 [json_name = "totalErrors"];
  if (this->total_errors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_errors());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.ErrorHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.ErrorHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.ErrorHistory)
    MergeFrom(*source);
  }
}

void ErrorHistory::MergeFrom(const ErrorHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.ErrorHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ios_errors_.MergeFrom(from.ios_errors_);
  if (from.total_errors() != 0) {
    _internal_set_total_errors(from._internal_total_errors());
  }
}

void ErrorHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.ErrorHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorHistory::CopyFrom(const ErrorHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.ErrorHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorHistory::IsInitialized() const {
  return true;
}

void ErrorHistory::InternalSwap(ErrorHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ios_errors_.InternalSwap(&other->ios_errors_);
  swap(total_errors_, other->total_errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AncestorIdHistoryItem::_Internal {
 public:
  static const ::event::User& user_event(const AncestorIdHistoryItem* msg);
  static const ::event::View& view_event(const AncestorIdHistoryItem* msg);
  static const ::event::AutoView& auto_view_event(const AncestorIdHistoryItem* msg);
};

const ::event::User&
AncestorIdHistoryItem::_Internal::user_event(const AncestorIdHistoryItem* msg) {
  return *msg->logged_event_.user_event_;
}
const ::event::View&
AncestorIdHistoryItem::_Internal::view_event(const AncestorIdHistoryItem* msg) {
  return *msg->logged_event_.view_event_;
}
const ::event::AutoView&
AncestorIdHistoryItem::_Internal::auto_view_event(const AncestorIdHistoryItem* msg) {
  return *msg->logged_event_.auto_view_event_;
}
void AncestorIdHistoryItem::set_allocated_user_event(::event::User* user_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_logged_event();
  if (user_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_event);
    if (message_arena != submessage_arena) {
      user_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_event, submessage_arena);
    }
    set_has_user_event();
    logged_event_.user_event_ = user_event;
  }
  // @@protoc_insertion_point(field_set_allocated:event.AncestorIdHistoryItem.user_event)
}
void AncestorIdHistoryItem::set_allocated_view_event(::event::View* view_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_logged_event();
  if (view_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(view_event);
    if (message_arena != submessage_arena) {
      view_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_event, submessage_arena);
    }
    set_has_view_event();
    logged_event_.view_event_ = view_event;
  }
  // @@protoc_insertion_point(field_set_allocated:event.AncestorIdHistoryItem.view_event)
}
void AncestorIdHistoryItem::set_allocated_auto_view_event(::event::AutoView* auto_view_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_logged_event();
  if (auto_view_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(auto_view_event);
    if (message_arena != submessage_arena) {
      auto_view_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_view_event, submessage_arena);
    }
    set_has_auto_view_event();
    logged_event_.auto_view_event_ = auto_view_event;
  }
  // @@protoc_insertion_point(field_set_allocated:event.AncestorIdHistoryItem.auto_view_event)
}
AncestorIdHistoryItem::AncestorIdHistoryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.AncestorIdHistoryItem)
}
AncestorIdHistoryItem::AncestorIdHistoryItem(const AncestorIdHistoryItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ancestor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ancestor_id().empty()) {
    ancestor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ancestor_id(), 
      GetArena());
  }
  batch_number_ = from.batch_number_;
  clear_has_logged_event();
  switch (from.logged_event_case()) {
    case kUserEvent: {
      _internal_mutable_user_event()->::event::User::MergeFrom(from._internal_user_event());
      break;
    }
    case kSessionIdFromUserEvent: {
      _internal_set_session_id_from_user_event(from._internal_session_id_from_user_event());
      break;
    }
    case kViewEvent: {
      _internal_mutable_view_event()->::event::View::MergeFrom(from._internal_view_event());
      break;
    }
    case kAutoViewEvent: {
      _internal_mutable_auto_view_event()->::event::AutoView::MergeFrom(from._internal_auto_view_event());
      break;
    }
    case LOGGED_EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event.AncestorIdHistoryItem)
}

void AncestorIdHistoryItem::SharedCtor() {
ancestor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
batch_number_ = 0;
clear_has_logged_event();
}

AncestorIdHistoryItem::~AncestorIdHistoryItem() {
  // @@protoc_insertion_point(destructor:event.AncestorIdHistoryItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AncestorIdHistoryItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ancestor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_logged_event()) {
    clear_logged_event();
  }
}

void AncestorIdHistoryItem::ArenaDtor(void* object) {
  AncestorIdHistoryItem* _this = reinterpret_cast< AncestorIdHistoryItem* >(object);
  (void)_this;
}
void AncestorIdHistoryItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AncestorIdHistoryItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AncestorIdHistoryItem::clear_logged_event() {
// @@protoc_insertion_point(one_of_clear_start:event.AncestorIdHistoryItem)
  switch (logged_event_case()) {
    case kUserEvent: {
      if (GetArena() == nullptr) {
        delete logged_event_.user_event_;
      }
      break;
    }
    case kSessionIdFromUserEvent: {
      logged_event_.session_id_from_user_event_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kViewEvent: {
      if (GetArena() == nullptr) {
        delete logged_event_.view_event_;
      }
      break;
    }
    case kAutoViewEvent: {
      if (GetArena() == nullptr) {
        delete logged_event_.auto_view_event_;
      }
      break;
    }
    case LOGGED_EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOGGED_EVENT_NOT_SET;
}


void AncestorIdHistoryItem::Clear() {
// @@protoc_insertion_point(message_clear_start:event.AncestorIdHistoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ancestor_id_.ClearToEmpty();
  batch_number_ = 0;
  clear_logged_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AncestorIdHistoryItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ancestor_id = 1 [json_name = "ancestorId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ancestor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.AncestorIdHistoryItem.ancestor_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.User user_event = 2 [json_name = "userEvent"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id_from_user_event = 3 [json_name = "sessionIdFromUserEvent"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_id_from_user_event();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.AncestorIdHistoryItem.session_id_from_user_event"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.View view_event = 4 [json_name = "viewEvent"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batch_number = 5 [json_name = "batchNumber"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          batch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.AutoView auto_view_event = 6 [json_name = "autoViewEvent"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_view_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AncestorIdHistoryItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.AncestorIdHistoryItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ancestor_id = 1 [json_name = "ancestorId"];
  if (this->ancestor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ancestor_id().data(), static_cast<int>(this->_internal_ancestor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.AncestorIdHistoryItem.ancestor_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ancestor_id(), target);
  }

  // .event.User user_event = 2 [json_name = "userEvent"];
  if (_internal_has_user_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_event(this), target, stream);
  }

  // string session_id_from_user_event = 3 [json_name = "sessionIdFromUserEvent"];
  if (_internal_has_session_id_from_user_event()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id_from_user_event().data(), static_cast<int>(this->_internal_session_id_from_user_event().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.AncestorIdHistoryItem.session_id_from_user_event");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id_from_user_event(), target);
  }

  // .event.View view_event = 4 [json_name = "viewEvent"];
  if (_internal_has_view_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::view_event(this), target, stream);
  }

  // int32 batch_number = 5 [json_name = "batchNumber"];
  if (this->batch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_batch_number(), target);
  }

  // .event.AutoView auto_view_event = 6 [json_name = "autoViewEvent"];
  if (_internal_has_auto_view_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::auto_view_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.AncestorIdHistoryItem)
  return target;
}

size_t AncestorIdHistoryItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.AncestorIdHistoryItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ancestor_id = 1 [json_name = "ancestorId"];
  if (this->ancestor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ancestor_id());
  }

  // int32 batch_number = 5 [json_name = "batchNumber"];
  if (this->batch_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batch_number());
  }

  switch (logged_event_case()) {
    // .event.User user_event = 2 [json_name = "userEvent"];
    case kUserEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logged_event_.user_event_);
      break;
    }
    // string session_id_from_user_event = 3 [json_name = "sessionIdFromUserEvent"];
    case kSessionIdFromUserEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id_from_user_event());
      break;
    }
    // .event.View view_event = 4 [json_name = "viewEvent"];
    case kViewEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logged_event_.view_event_);
      break;
    }
    // .event.AutoView auto_view_event = 6 [json_name = "autoViewEvent"];
    case kAutoViewEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logged_event_.auto_view_event_);
      break;
    }
    case LOGGED_EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AncestorIdHistoryItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.AncestorIdHistoryItem)
  GOOGLE_DCHECK_NE(&from, this);
  const AncestorIdHistoryItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AncestorIdHistoryItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.AncestorIdHistoryItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.AncestorIdHistoryItem)
    MergeFrom(*source);
  }
}

void AncestorIdHistoryItem::MergeFrom(const AncestorIdHistoryItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.AncestorIdHistoryItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ancestor_id().size() > 0) {
    _internal_set_ancestor_id(from._internal_ancestor_id());
  }
  if (from.batch_number() != 0) {
    _internal_set_batch_number(from._internal_batch_number());
  }
  switch (from.logged_event_case()) {
    case kUserEvent: {
      _internal_mutable_user_event()->::event::User::MergeFrom(from._internal_user_event());
      break;
    }
    case kSessionIdFromUserEvent: {
      _internal_set_session_id_from_user_event(from._internal_session_id_from_user_event());
      break;
    }
    case kViewEvent: {
      _internal_mutable_view_event()->::event::View::MergeFrom(from._internal_view_event());
      break;
    }
    case kAutoViewEvent: {
      _internal_mutable_auto_view_event()->::event::AutoView::MergeFrom(from._internal_auto_view_event());
      break;
    }
    case LOGGED_EVENT_NOT_SET: {
      break;
    }
  }
}

void AncestorIdHistoryItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.AncestorIdHistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncestorIdHistoryItem::CopyFrom(const AncestorIdHistoryItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.AncestorIdHistoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncestorIdHistoryItem::IsInitialized() const {
  return true;
}

void AncestorIdHistoryItem::InternalSwap(AncestorIdHistoryItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ancestor_id_.Swap(&other->ancestor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(batch_number_, other->batch_number_);
  swap(logged_event_, other->logged_event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AncestorIdHistoryItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AncestorIdHistory::_Internal {
 public:
};

AncestorIdHistory::AncestorIdHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  log_user_id_history_(arena),
  session_id_history_(arena),
  view_id_history_(arena),
  auto_view_id_history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.AncestorIdHistory)
}
AncestorIdHistory::AncestorIdHistory(const AncestorIdHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      log_user_id_history_(from.log_user_id_history_),
      session_id_history_(from.session_id_history_),
      view_id_history_(from.view_id_history_),
      auto_view_id_history_(from.auto_view_id_history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_log_user_ids_logged_, &from.total_log_user_ids_logged_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_auto_view_ids_logged_) -
    reinterpret_cast<char*>(&total_log_user_ids_logged_)) + sizeof(total_auto_view_ids_logged_));
  // @@protoc_insertion_point(copy_constructor:event.AncestorIdHistory)
}

void AncestorIdHistory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_log_user_ids_logged_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_auto_view_ids_logged_) -
    reinterpret_cast<char*>(&total_log_user_ids_logged_)) + sizeof(total_auto_view_ids_logged_));
}

AncestorIdHistory::~AncestorIdHistory() {
  // @@protoc_insertion_point(destructor:event.AncestorIdHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AncestorIdHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AncestorIdHistory::ArenaDtor(void* object) {
  AncestorIdHistory* _this = reinterpret_cast< AncestorIdHistory* >(object);
  (void)_this;
}
void AncestorIdHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AncestorIdHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AncestorIdHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:event.AncestorIdHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_user_id_history_.Clear();
  session_id_history_.Clear();
  view_id_history_.Clear();
  auto_view_id_history_.Clear();
  ::memset(&total_log_user_ids_logged_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_auto_view_ids_logged_) -
      reinterpret_cast<char*>(&total_log_user_ids_logged_)) + sizeof(total_auto_view_ids_logged_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AncestorIdHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .event.AncestorIdHistoryItem log_user_id_history = 1 [json_name = "logUserIdHistory"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log_user_id_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_log_user_ids_logged = 2 [json_name = "totalLogUserIdsLogged"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_log_user_ids_logged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .event.AncestorIdHistoryItem session_id_history = 3 [json_name = "sessionIdHistory"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_session_id_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_session_ids_logged = 4 [json_name = "totalSessionIdsLogged"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_session_ids_logged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .event.AncestorIdHistoryItem view_id_history = 5 [json_name = "viewIdHistory"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_view_id_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_view_ids_logged = 6 [json_name = "totalViewIdsLogged"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_view_ids_logged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .event.AncestorIdHistoryItem auto_view_id_history = 7 [json_name = "autoViewIdHistory"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_auto_view_id_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_auto_view_ids_logged = 8 [json_name = "totalAutoViewIdsLogged"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          total_auto_view_ids_logged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AncestorIdHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.AncestorIdHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .event.AncestorIdHistoryItem log_user_id_history = 1 [json_name = "logUserIdHistory"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_log_user_id_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_log_user_id_history(i), target, stream);
  }

  // int32 total_log_user_ids_logged = 2 [json_name = "totalLogUserIdsLogged"];
  if (this->total_log_user_ids_logged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_log_user_ids_logged(), target);
  }

  // repeated .event.AncestorIdHistoryItem session_id_history = 3 [json_name = "sessionIdHistory"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_session_id_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_session_id_history(i), target, stream);
  }

  // int32 total_session_ids_logged = 4 [json_name = "totalSessionIdsLogged"];
  if (this->total_session_ids_logged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_session_ids_logged(), target);
  }

  // repeated .event.AncestorIdHistoryItem view_id_history = 5 [json_name = "viewIdHistory"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_view_id_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_view_id_history(i), target, stream);
  }

  // int32 total_view_ids_logged = 6 [json_name = "totalViewIdsLogged"];
  if (this->total_view_ids_logged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_view_ids_logged(), target);
  }

  // repeated .event.AncestorIdHistoryItem auto_view_id_history = 7 [json_name = "autoViewIdHistory"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_auto_view_id_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_auto_view_id_history(i), target, stream);
  }

  // int32 total_auto_view_ids_logged = 8 [json_name = "totalAutoViewIdsLogged"];
  if (this->total_auto_view_ids_logged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_total_auto_view_ids_logged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.AncestorIdHistory)
  return target;
}

size_t AncestorIdHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.AncestorIdHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event.AncestorIdHistoryItem log_user_id_history = 1 [json_name = "logUserIdHistory"];
  total_size += 1UL * this->_internal_log_user_id_history_size();
  for (const auto& msg : this->log_user_id_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .event.AncestorIdHistoryItem session_id_history = 3 [json_name = "sessionIdHistory"];
  total_size += 1UL * this->_internal_session_id_history_size();
  for (const auto& msg : this->session_id_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .event.AncestorIdHistoryItem view_id_history = 5 [json_name = "viewIdHistory"];
  total_size += 1UL * this->_internal_view_id_history_size();
  for (const auto& msg : this->view_id_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .event.AncestorIdHistoryItem auto_view_id_history = 7 [json_name = "autoViewIdHistory"];
  total_size += 1UL * this->_internal_auto_view_id_history_size();
  for (const auto& msg : this->auto_view_id_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_log_user_ids_logged = 2 [json_name = "totalLogUserIdsLogged"];
  if (this->total_log_user_ids_logged() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_log_user_ids_logged());
  }

  // int32 total_session_ids_logged = 4 [json_name = "totalSessionIdsLogged"];
  if (this->total_session_ids_logged() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_session_ids_logged());
  }

  // int32 total_view_ids_logged = 6 [json_name = "totalViewIdsLogged"];
  if (this->total_view_ids_logged() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_view_ids_logged());
  }

  // int32 total_auto_view_ids_logged = 8 [json_name = "totalAutoViewIdsLogged"];
  if (this->total_auto_view_ids_logged() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_auto_view_ids_logged());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AncestorIdHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.AncestorIdHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const AncestorIdHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AncestorIdHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.AncestorIdHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.AncestorIdHistory)
    MergeFrom(*source);
  }
}

void AncestorIdHistory::MergeFrom(const AncestorIdHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.AncestorIdHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_user_id_history_.MergeFrom(from.log_user_id_history_);
  session_id_history_.MergeFrom(from.session_id_history_);
  view_id_history_.MergeFrom(from.view_id_history_);
  auto_view_id_history_.MergeFrom(from.auto_view_id_history_);
  if (from.total_log_user_ids_logged() != 0) {
    _internal_set_total_log_user_ids_logged(from._internal_total_log_user_ids_logged());
  }
  if (from.total_session_ids_logged() != 0) {
    _internal_set_total_session_ids_logged(from._internal_total_session_ids_logged());
  }
  if (from.total_view_ids_logged() != 0) {
    _internal_set_total_view_ids_logged(from._internal_total_view_ids_logged());
  }
  if (from.total_auto_view_ids_logged() != 0) {
    _internal_set_total_auto_view_ids_logged(from._internal_total_auto_view_ids_logged());
  }
}

void AncestorIdHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.AncestorIdHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncestorIdHistory::CopyFrom(const AncestorIdHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.AncestorIdHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncestorIdHistory::IsInitialized() const {
  return true;
}

void AncestorIdHistory::InternalSwap(AncestorIdHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  log_user_id_history_.InternalSwap(&other->log_user_id_history_);
  session_id_history_.InternalSwap(&other->session_id_history_);
  view_id_history_.InternalSwap(&other->view_id_history_);
  auto_view_id_history_.InternalSwap(&other->auto_view_id_history_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AncestorIdHistory, total_auto_view_ids_logged_)
      + sizeof(AncestorIdHistory::total_auto_view_ids_logged_)
      - PROTOBUF_FIELD_OFFSET(AncestorIdHistory, total_log_user_ids_logged_)>(
          reinterpret_cast<char*>(&total_log_user_ids_logged_),
          reinterpret_cast<char*>(&other->total_log_user_ids_logged_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AncestorIdHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MobileDiagnostics::_Internal {
 public:
  static const ::event::ErrorHistory& error_history(const MobileDiagnostics* msg);
  static const ::event::AncestorIdHistory& ancestor_id_history(const MobileDiagnostics* msg);
};

const ::event::ErrorHistory&
MobileDiagnostics::_Internal::error_history(const MobileDiagnostics* msg) {
  return *msg->error_history_;
}
const ::event::AncestorIdHistory&
MobileDiagnostics::_Internal::ancestor_id_history(const MobileDiagnostics* msg) {
  return *msg->ancestor_id_history_;
}
MobileDiagnostics::MobileDiagnostics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.MobileDiagnostics)
}
MobileDiagnostics::MobileDiagnostics(const MobileDiagnostics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_identifier().empty()) {
    device_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_identifier(), 
      GetArena());
  }
  client_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_version().empty()) {
    client_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_version(), 
      GetArena());
  }
  promoted_library_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_promoted_library_version().empty()) {
    promoted_library_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_promoted_library_version(), 
      GetArena());
  }
  if (from._internal_has_error_history()) {
    error_history_ = new ::event::ErrorHistory(*from.error_history_);
  } else {
    error_history_ = nullptr;
  }
  if (from._internal_has_ancestor_id_history()) {
    ancestor_id_history_ = new ::event::AncestorIdHistory(*from.ancestor_id_history_);
  } else {
    ancestor_id_history_ = nullptr;
  }
  ::memcpy(&batches_attempted_, &from.batches_attempted_,
    static_cast<size_t>(reinterpret_cast<char*>(&batches_with_errors_) -
    reinterpret_cast<char*>(&batches_attempted_)) + sizeof(batches_with_errors_));
  // @@protoc_insertion_point(copy_constructor:event.MobileDiagnostics)
}

void MobileDiagnostics::SharedCtor() {
device_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
client_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
promoted_library_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_history_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&batches_with_errors_) -
    reinterpret_cast<char*>(&error_history_)) + sizeof(batches_with_errors_));
}

MobileDiagnostics::~MobileDiagnostics() {
  // @@protoc_insertion_point(destructor:event.MobileDiagnostics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MobileDiagnostics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  promoted_library_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_history_;
  if (this != internal_default_instance()) delete ancestor_id_history_;
}

void MobileDiagnostics::ArenaDtor(void* object) {
  MobileDiagnostics* _this = reinterpret_cast< MobileDiagnostics* >(object);
  (void)_this;
}
void MobileDiagnostics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MobileDiagnostics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MobileDiagnostics::Clear() {
// @@protoc_insertion_point(message_clear_start:event.MobileDiagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_identifier_.ClearToEmpty();
  client_version_.ClearToEmpty();
  promoted_library_version_.ClearToEmpty();
  if (GetArena() == nullptr && error_history_ != nullptr) {
    delete error_history_;
  }
  error_history_ = nullptr;
  if (GetArena() == nullptr && ancestor_id_history_ != nullptr) {
    delete ancestor_id_history_;
  }
  ancestor_id_history_ = nullptr;
  ::memset(&batches_attempted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batches_with_errors_) -
      reinterpret_cast<char*>(&batches_attempted_)) + sizeof(batches_with_errors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MobileDiagnostics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_identifier = 1 [json_name = "deviceIdentifier"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.MobileDiagnostics.device_identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_version = 2 [json_name = "clientVersion", deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_client_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.MobileDiagnostics.client_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string promoted_library_version = 3 [json_name = "promotedLibraryVersion", deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_promoted_library_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "event.MobileDiagnostics.promoted_library_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batches_attempted = 4 [json_name = "batchesAttempted"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          batches_attempted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batches_sent_successfully = 5 [json_name = "batchesSentSuccessfully"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          batches_sent_successfully_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batches_with_errors = 6 [json_name = "batchesWithErrors"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          batches_with_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.ErrorHistory error_history = 7 [json_name = "errorHistory"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.AncestorIdHistory ancestor_id_history = 8 [json_name = "ancestorIdHistory"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ancestor_id_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MobileDiagnostics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.MobileDiagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_identifier = 1 [json_name = "deviceIdentifier"];
  if (this->device_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_identifier().data(), static_cast<int>(this->_internal_device_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.MobileDiagnostics.device_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_identifier(), target);
  }

  // string client_version = 2 [json_name = "clientVersion", deprecated = true];
  if (this->client_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_version().data(), static_cast<int>(this->_internal_client_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.MobileDiagnostics.client_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_version(), target);
  }

  // string promoted_library_version = 3 [json_name = "promotedLibraryVersion", deprecated = true];
  if (this->promoted_library_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_promoted_library_version().data(), static_cast<int>(this->_internal_promoted_library_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event.MobileDiagnostics.promoted_library_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_promoted_library_version(), target);
  }

  // int32 batches_attempted = 4 [json_name = "batchesAttempted"];
  if (this->batches_attempted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_batches_attempted(), target);
  }

  // int32 batches_sent_successfully = 5 [json_name = "batchesSentSuccessfully"];
  if (this->batches_sent_successfully() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_batches_sent_successfully(), target);
  }

  // int32 batches_with_errors = 6 [json_name = "batchesWithErrors"];
  if (this->batches_with_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_batches_with_errors(), target);
  }

  // .event.ErrorHistory error_history = 7 [json_name = "errorHistory"];
  if (this->has_error_history()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::error_history(this), target, stream);
  }

  // .event.AncestorIdHistory ancestor_id_history = 8 [json_name = "ancestorIdHistory"];
  if (this->has_ancestor_id_history()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ancestor_id_history(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.MobileDiagnostics)
  return target;
}

size_t MobileDiagnostics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.MobileDiagnostics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_identifier = 1 [json_name = "deviceIdentifier"];
  if (this->device_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_identifier());
  }

  // string client_version = 2 [json_name = "clientVersion", deprecated = true];
  if (this->client_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_version());
  }

  // string promoted_library_version = 3 [json_name = "promotedLibraryVersion", deprecated = true];
  if (this->promoted_library_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_promoted_library_version());
  }

  // .event.ErrorHistory error_history = 7 [json_name = "errorHistory"];
  if (this->has_error_history()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_history_);
  }

  // .event.AncestorIdHistory ancestor_id_history = 8 [json_name = "ancestorIdHistory"];
  if (this->has_ancestor_id_history()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ancestor_id_history_);
  }

  // int32 batches_attempted = 4 [json_name = "batchesAttempted"];
  if (this->batches_attempted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batches_attempted());
  }

  // int32 batches_sent_successfully = 5 [json_name = "batchesSentSuccessfully"];
  if (this->batches_sent_successfully() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batches_sent_successfully());
  }

  // int32 batches_with_errors = 6 [json_name = "batchesWithErrors"];
  if (this->batches_with_errors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batches_with_errors());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MobileDiagnostics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.MobileDiagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  const MobileDiagnostics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MobileDiagnostics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.MobileDiagnostics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.MobileDiagnostics)
    MergeFrom(*source);
  }
}

void MobileDiagnostics::MergeFrom(const MobileDiagnostics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.MobileDiagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_identifier().size() > 0) {
    _internal_set_device_identifier(from._internal_device_identifier());
  }
  if (from.client_version().size() > 0) {
    _internal_set_client_version(from._internal_client_version());
  }
  if (from.promoted_library_version().size() > 0) {
    _internal_set_promoted_library_version(from._internal_promoted_library_version());
  }
  if (from.has_error_history()) {
    _internal_mutable_error_history()->::event::ErrorHistory::MergeFrom(from._internal_error_history());
  }
  if (from.has_ancestor_id_history()) {
    _internal_mutable_ancestor_id_history()->::event::AncestorIdHistory::MergeFrom(from._internal_ancestor_id_history());
  }
  if (from.batches_attempted() != 0) {
    _internal_set_batches_attempted(from._internal_batches_attempted());
  }
  if (from.batches_sent_successfully() != 0) {
    _internal_set_batches_sent_successfully(from._internal_batches_sent_successfully());
  }
  if (from.batches_with_errors() != 0) {
    _internal_set_batches_with_errors(from._internal_batches_with_errors());
  }
}

void MobileDiagnostics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.MobileDiagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileDiagnostics::CopyFrom(const MobileDiagnostics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.MobileDiagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileDiagnostics::IsInitialized() const {
  return true;
}

void MobileDiagnostics::InternalSwap(MobileDiagnostics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_identifier_.Swap(&other->device_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  client_version_.Swap(&other->client_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  promoted_library_version_.Swap(&other->promoted_library_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MobileDiagnostics, batches_with_errors_)
      + sizeof(MobileDiagnostics::batches_with_errors_)
      - PROTOBUF_FIELD_OFFSET(MobileDiagnostics, error_history_)>(
          reinterpret_cast<char*>(&error_history_),
          reinterpret_cast<char*>(&other->error_history_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MobileDiagnostics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Diagnostics::_Internal {
 public:
  static const ::common::UserInfo& user_info(const Diagnostics* msg);
  static const ::common::Timing& timing(const Diagnostics* msg);
  static const ::common::ClientInfo& client_info(const Diagnostics* msg);
  static const ::event::MobileDiagnostics& mobile_diagnostics(const Diagnostics* msg);
};

const ::common::UserInfo&
Diagnostics::_Internal::user_info(const Diagnostics* msg) {
  return *msg->user_info_;
}
const ::common::Timing&
Diagnostics::_Internal::timing(const Diagnostics* msg) {
  return *msg->timing_;
}
const ::common::ClientInfo&
Diagnostics::_Internal::client_info(const Diagnostics* msg) {
  return *msg->client_info_;
}
const ::event::MobileDiagnostics&
Diagnostics::_Internal::mobile_diagnostics(const Diagnostics* msg) {
  return *msg->diagnostics_message_.mobile_diagnostics_;
}
void Diagnostics::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
void Diagnostics::clear_timing() {
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
}
void Diagnostics::clear_client_info() {
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
void Diagnostics::set_allocated_mobile_diagnostics(::event::MobileDiagnostics* mobile_diagnostics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_diagnostics_message();
  if (mobile_diagnostics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mobile_diagnostics);
    if (message_arena != submessage_arena) {
      mobile_diagnostics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mobile_diagnostics, submessage_arena);
    }
    set_has_mobile_diagnostics();
    diagnostics_message_.mobile_diagnostics_ = mobile_diagnostics;
  }
  // @@protoc_insertion_point(field_set_allocated:event.Diagnostics.mobile_diagnostics)
}
Diagnostics::Diagnostics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.Diagnostics)
}
Diagnostics::Diagnostics(const Diagnostics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_info()) {
    user_info_ = new ::common::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  if (from._internal_has_timing()) {
    timing_ = new ::common::Timing(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::common::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  platform_id_ = from.platform_id_;
  clear_has_diagnostics_message();
  switch (from.diagnostics_message_case()) {
    case kMobileDiagnostics: {
      _internal_mutable_mobile_diagnostics()->::event::MobileDiagnostics::MergeFrom(from._internal_mobile_diagnostics());
      break;
    }
    case DIAGNOSTICS_MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event.Diagnostics)
}

void Diagnostics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&platform_id_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(platform_id_));
clear_has_diagnostics_message();
}

Diagnostics::~Diagnostics() {
  // @@protoc_insertion_point(destructor:event.Diagnostics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Diagnostics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete timing_;
  if (this != internal_default_instance()) delete client_info_;
  if (has_diagnostics_message()) {
    clear_diagnostics_message();
  }
}

void Diagnostics::ArenaDtor(void* object) {
  Diagnostics* _this = reinterpret_cast< Diagnostics* >(object);
  (void)_this;
}
void Diagnostics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Diagnostics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Diagnostics::clear_diagnostics_message() {
// @@protoc_insertion_point(one_of_clear_start:event.Diagnostics)
  switch (diagnostics_message_case()) {
    case kMobileDiagnostics: {
      if (GetArena() == nullptr) {
        delete diagnostics_message_.mobile_diagnostics_;
      }
      break;
    }
    case DIAGNOSTICS_MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DIAGNOSTICS_MESSAGE_NOT_SET;
}


void Diagnostics::Clear() {
// @@protoc_insertion_point(message_clear_start:event.Diagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  platform_id_ = PROTOBUF_ULONGLONG(0);
  clear_diagnostics_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Diagnostics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.UserInfo user_info = 2 [json_name = "userInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Timing timing = 3 [json_name = "timing"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .event.MobileDiagnostics mobile_diagnostics = 5 [json_name = "mobileDiagnostics"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mobile_diagnostics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Diagnostics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.Diagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_platform_id(), target);
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timing(this), target, stream);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_info(this), target, stream);
  }

  // .event.MobileDiagnostics mobile_diagnostics = 5 [json_name = "mobileDiagnostics"];
  if (_internal_has_mobile_diagnostics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mobile_diagnostics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.Diagnostics)
  return target;
}

size_t Diagnostics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.Diagnostics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_platform_id());
  }

  switch (diagnostics_message_case()) {
    // .event.MobileDiagnostics mobile_diagnostics = 5 [json_name = "mobileDiagnostics"];
    case kMobileDiagnostics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diagnostics_message_.mobile_diagnostics_);
      break;
    }
    case DIAGNOSTICS_MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Diagnostics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  const Diagnostics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Diagnostics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.Diagnostics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.Diagnostics)
    MergeFrom(*source);
  }
}

void Diagnostics::MergeFrom(const Diagnostics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_info()) {
    _internal_mutable_user_info()->::common::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.has_timing()) {
    _internal_mutable_timing()->::common::Timing::MergeFrom(from._internal_timing());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::common::ClientInfo::MergeFrom(from._internal_client_info());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
  switch (from.diagnostics_message_case()) {
    case kMobileDiagnostics: {
      _internal_mutable_mobile_diagnostics()->::event::MobileDiagnostics::MergeFrom(from._internal_mobile_diagnostics());
      break;
    }
    case DIAGNOSTICS_MESSAGE_NOT_SET: {
      break;
    }
  }
}

void Diagnostics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnostics::CopyFrom(const Diagnostics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostics::IsInitialized() const {
  return true;
}

void Diagnostics::InternalSwap(Diagnostics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Diagnostics, platform_id_)
      + sizeof(Diagnostics::platform_id_)
      - PROTOBUF_FIELD_OFFSET(Diagnostics, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
  swap(diagnostics_message_, other->diagnostics_message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Diagnostics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogRequest::_Internal {
 public:
  static const ::common::UserInfo& user_info(const LogRequest* msg);
  static const ::common::Timing& timing(const LogRequest* msg);
  static const ::common::ClientInfo& client_info(const LogRequest* msg);
  static const ::common::Device& device(const LogRequest* msg);
};

const ::common::UserInfo&
LogRequest::_Internal::user_info(const LogRequest* msg) {
  return *msg->user_info_;
}
const ::common::Timing&
LogRequest::_Internal::timing(const LogRequest* msg) {
  return *msg->timing_;
}
const ::common::ClientInfo&
LogRequest::_Internal::client_info(const LogRequest* msg) {
  return *msg->client_info_;
}
const ::common::Device&
LogRequest::_Internal::device(const LogRequest* msg) {
  return *msg->device_;
}
void LogRequest::clear_user_info() {
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
void LogRequest::clear_timing() {
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
}
void LogRequest::clear_client_info() {
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
void LogRequest::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
void LogRequest::clear_request() {
  request_.Clear();
}
void LogRequest::clear_insertion() {
  insertion_.Clear();
}
void LogRequest::clear_delivery_log() {
  delivery_log_.Clear();
}
LogRequest::LogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_(arena),
  cohort_membership_(arena),
  view_(arena),
  request_(arena),
  insertion_(arena),
  impression_(arena),
  action_(arena),
  delivery_log_(arena),
  diagnostics_(arena),
  auto_view_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:event.LogRequest)
}
LogRequest::LogRequest(const LogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_(from.user_),
      cohort_membership_(from.cohort_membership_),
      view_(from.view_),
      request_(from.request_),
      insertion_(from.insertion_),
      impression_(from.impression_),
      action_(from.action_),
      delivery_log_(from.delivery_log_),
      diagnostics_(from.diagnostics_),
      auto_view_(from.auto_view_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_info()) {
    user_info_ = new ::common::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  if (from._internal_has_timing()) {
    timing_ = new ::common::Timing(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::common::ClientInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  if (from._internal_has_device()) {
    device_ = new ::common::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  platform_id_ = from.platform_id_;
  // @@protoc_insertion_point(copy_constructor:event.LogRequest)
}

void LogRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&platform_id_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(platform_id_));
}

LogRequest::~LogRequest() {
  // @@protoc_insertion_point(destructor:event.LogRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_info_;
  if (this != internal_default_instance()) delete timing_;
  if (this != internal_default_instance()) delete client_info_;
  if (this != internal_default_instance()) delete device_;
}

void LogRequest::ArenaDtor(void* object) {
  LogRequest* _this = reinterpret_cast< LogRequest* >(object);
  (void)_this;
}
void LogRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:event.LogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.Clear();
  cohort_membership_.Clear();
  view_.Clear();
  request_.Clear();
  insertion_.Clear();
  impression_.Clear();
  action_.Clear();
  delivery_log_.Clear();
  diagnostics_.Clear();
  auto_view_.Clear();
  if (GetArena() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  platform_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.UserInfo user_info = 2 [json_name = "userInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Timing timing = 3 [json_name = "timing"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .event.User user = 7 [json_name = "user"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .event.CohortMembership cohort_membership = 8 [json_name = "cohortMembership"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cohort_membership(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .event.View view = 11 [json_name = "view"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_view(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .delivery.Request request = 12 [json_name = "request"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .delivery.Insertion insertion = 13 [json_name = "insertion"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insertion(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .event.Impression impression = 14 [json_name = "impression"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_impression(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .event.Action action = 15 [json_name = "action"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .delivery.DeliveryLog delivery_log = 18 [json_name = "deliveryLog"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_delivery_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .event.Diagnostics diagnostics = 23 [json_name = "diagnostics"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_diagnostics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // .common.Device device = 24 [json_name = "device"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .event.AutoView auto_view = 25 [json_name = "autoView"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_auto_view(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event.LogRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_platform_id(), target);
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_info(this), target, stream);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timing(this), target, stream);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_info(this), target, stream);
  }

  // repeated .event.User user = 7 [json_name = "user"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_user(i), target, stream);
  }

  // repeated .event.CohortMembership cohort_membership = 8 [json_name = "cohortMembership"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cohort_membership_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_cohort_membership(i), target, stream);
  }

  // repeated .event.View view = 11 [json_name = "view"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_view_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_view(i), target, stream);
  }

  // repeated .delivery.Request request = 12 [json_name = "request"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_request(i), target, stream);
  }

  // repeated .delivery.Insertion insertion = 13 [json_name = "insertion"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_insertion_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_insertion(i), target, stream);
  }

  // repeated .event.Impression impression = 14 [json_name = "impression"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_impression_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_impression(i), target, stream);
  }

  // repeated .event.Action action = 15 [json_name = "action"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_action_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_action(i), target, stream);
  }

  // repeated .delivery.DeliveryLog delivery_log = 18 [json_name = "deliveryLog"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delivery_log_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_delivery_log(i), target, stream);
  }

  // repeated .event.Diagnostics diagnostics = 23 [json_name = "diagnostics"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_diagnostics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_diagnostics(i), target, stream);
  }

  // .common.Device device = 24 [json_name = "device"];
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::device(this), target, stream);
  }

  // repeated .event.AutoView auto_view = 25 [json_name = "autoView"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_auto_view_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_auto_view(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event.LogRequest)
  return target;
}

size_t LogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event.LogRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event.User user = 7 [json_name = "user"];
  total_size += 1UL * this->_internal_user_size();
  for (const auto& msg : this->user_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .event.CohortMembership cohort_membership = 8 [json_name = "cohortMembership"];
  total_size += 1UL * this->_internal_cohort_membership_size();
  for (const auto& msg : this->cohort_membership_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .event.View view = 11 [json_name = "view"];
  total_size += 1UL * this->_internal_view_size();
  for (const auto& msg : this->view_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .delivery.Request request = 12 [json_name = "request"];
  total_size += 1UL * this->_internal_request_size();
  for (const auto& msg : this->request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .delivery.Insertion insertion = 13 [json_name = "insertion"];
  total_size += 1UL * this->_internal_insertion_size();
  for (const auto& msg : this->insertion_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .event.Impression impression = 14 [json_name = "impression"];
  total_size += 1UL * this->_internal_impression_size();
  for (const auto& msg : this->impression_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .event.Action action = 15 [json_name = "action"];
  total_size += 1UL * this->_internal_action_size();
  for (const auto& msg : this->action_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .delivery.DeliveryLog delivery_log = 18 [json_name = "deliveryLog"];
  total_size += 2UL * this->_internal_delivery_log_size();
  for (const auto& msg : this->delivery_log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .event.Diagnostics diagnostics = 23 [json_name = "diagnostics"];
  total_size += 2UL * this->_internal_diagnostics_size();
  for (const auto& msg : this->diagnostics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .event.AutoView auto_view = 25 [json_name = "autoView"];
  total_size += 2UL * this->_internal_auto_view_size();
  for (const auto& msg : this->auto_view_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .common.UserInfo user_info = 2 [json_name = "userInfo"];
  if (this->has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // .common.Timing timing = 3 [json_name = "timing"];
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  // .common.ClientInfo client_info = 4 [json_name = "clientInfo"];
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  // .common.Device device = 24 [json_name = "device"];
  if (this->has_device()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_platform_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:event.LogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:event.LogRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:event.LogRequest)
    MergeFrom(*source);
  }
}

void LogRequest::MergeFrom(const LogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:event.LogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_.MergeFrom(from.user_);
  cohort_membership_.MergeFrom(from.cohort_membership_);
  view_.MergeFrom(from.view_);
  request_.MergeFrom(from.request_);
  insertion_.MergeFrom(from.insertion_);
  impression_.MergeFrom(from.impression_);
  action_.MergeFrom(from.action_);
  delivery_log_.MergeFrom(from.delivery_log_);
  diagnostics_.MergeFrom(from.diagnostics_);
  auto_view_.MergeFrom(from.auto_view_);
  if (from.has_user_info()) {
    _internal_mutable_user_info()->::common::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from.has_timing()) {
    _internal_mutable_timing()->::common::Timing::MergeFrom(from._internal_timing());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::common::ClientInfo::MergeFrom(from._internal_client_info());
  }
  if (from.has_device()) {
    _internal_mutable_device()->::common::Device::MergeFrom(from._internal_device());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
}

void LogRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:event.LogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRequest::CopyFrom(const LogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event.LogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequest::IsInitialized() const {
  return true;
}

void LogRequest::InternalSwap(LogRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_.InternalSwap(&other->user_);
  cohort_membership_.InternalSwap(&other->cohort_membership_);
  view_.InternalSwap(&other->view_);
  request_.InternalSwap(&other->request_);
  insertion_.InternalSwap(&other->insertion_);
  impression_.InternalSwap(&other->impression_);
  action_.InternalSwap(&other->action_);
  delivery_log_.InternalSwap(&other->delivery_log_);
  diagnostics_.InternalSwap(&other->diagnostics_);
  auto_view_.InternalSwap(&other->auto_view_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogRequest, platform_id_)
      + sizeof(LogRequest::platform_id_)
      - PROTOBUF_FIELD_OFFSET(LogRequest, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace event
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::event::JoinedIdentifiers* Arena::CreateMaybeMessage< ::event::JoinedIdentifiers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::JoinedIdentifiers >(arena);
}
template<> PROTOBUF_NOINLINE ::event::IdentifierProvenances* Arena::CreateMaybeMessage< ::event::IdentifierProvenances >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::IdentifierProvenances >(arena);
}
template<> PROTOBUF_NOINLINE ::event::User* Arena::CreateMaybeMessage< ::event::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::User >(arena);
}
template<> PROTOBUF_NOINLINE ::event::CohortMembership* Arena::CreateMaybeMessage< ::event::CohortMembership >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::CohortMembership >(arena);
}
template<> PROTOBUF_NOINLINE ::event::WebPageView* Arena::CreateMaybeMessage< ::event::WebPageView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::WebPageView >(arena);
}
template<> PROTOBUF_NOINLINE ::event::AppScreenView* Arena::CreateMaybeMessage< ::event::AppScreenView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::AppScreenView >(arena);
}
template<> PROTOBUF_NOINLINE ::event::View* Arena::CreateMaybeMessage< ::event::View >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::View >(arena);
}
template<> PROTOBUF_NOINLINE ::event::AutoView* Arena::CreateMaybeMessage< ::event::AutoView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::AutoView >(arena);
}
template<> PROTOBUF_NOINLINE ::event::IndexPath* Arena::CreateMaybeMessage< ::event::IndexPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::IndexPath >(arena);
}
template<> PROTOBUF_NOINLINE ::event::Impression* Arena::CreateMaybeMessage< ::event::Impression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::Impression >(arena);
}
template<> PROTOBUF_NOINLINE ::event::NavigateAction* Arena::CreateMaybeMessage< ::event::NavigateAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::NavigateAction >(arena);
}
template<> PROTOBUF_NOINLINE ::event::Action* Arena::CreateMaybeMessage< ::event::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::event::Cart* Arena::CreateMaybeMessage< ::event::Cart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::Cart >(arena);
}
template<> PROTOBUF_NOINLINE ::event::CartContent* Arena::CreateMaybeMessage< ::event::CartContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::CartContent >(arena);
}
template<> PROTOBUF_NOINLINE ::event::Attribution* Arena::CreateMaybeMessage< ::event::Attribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::Attribution >(arena);
}
template<> PROTOBUF_NOINLINE ::event::IOSError* Arena::CreateMaybeMessage< ::event::IOSError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::IOSError >(arena);
}
template<> PROTOBUF_NOINLINE ::event::ErrorHistory* Arena::CreateMaybeMessage< ::event::ErrorHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::ErrorHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::event::AncestorIdHistoryItem* Arena::CreateMaybeMessage< ::event::AncestorIdHistoryItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::AncestorIdHistoryItem >(arena);
}
template<> PROTOBUF_NOINLINE ::event::AncestorIdHistory* Arena::CreateMaybeMessage< ::event::AncestorIdHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::AncestorIdHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::event::MobileDiagnostics* Arena::CreateMaybeMessage< ::event::MobileDiagnostics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::MobileDiagnostics >(arena);
}
template<> PROTOBUF_NOINLINE ::event::Diagnostics* Arena::CreateMaybeMessage< ::event::Diagnostics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::Diagnostics >(arena);
}
template<> PROTOBUF_NOINLINE ::event::LogRequest* Arena::CreateMaybeMessage< ::event::LogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event::LogRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
