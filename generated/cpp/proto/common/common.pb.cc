// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/common/common.proto

#include "proto/common/common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace common {
constexpr EntityPath::EntityPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : platform_id_(PROTOBUF_ULONGLONG(0))
  , customer_id_(PROTOBUF_ULONGLONG(0))
  , content_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(PROTOBUF_ULONGLONG(0))
  , campaign_id_(PROTOBUF_ULONGLONG(0))
  , promotion_id_(PROTOBUF_ULONGLONG(0)){}
struct EntityPathDefaultTypeInternal {
  constexpr EntityPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EntityPathDefaultTypeInternal() {}
  union {
    EntityPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EntityPathDefaultTypeInternal _EntityPath_default_instance_;
constexpr Money::Money(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_micros_(PROTOBUF_LONGLONG(0))
  , currency_code_(0)
{}
struct MoneyDefaultTypeInternal {
  constexpr MoneyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoneyDefaultTypeInternal() {}
  union {
    Money _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoneyDefaultTypeInternal _Money_default_instance_;
constexpr UserInfo::UserInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , log_user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , anon_user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , retained_user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_internal_user_(false)
  , ignore_usage_(false){}
struct UserInfoDefaultTypeInternal {
  constexpr UserInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserInfoDefaultTypeInternal _UserInfo_default_instance_;
constexpr ClientInfo::ClientInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_type_(0)

  , traffic_type_(0)
{}
struct ClientInfoDefaultTypeInternal {
  constexpr ClientInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientInfoDefaultTypeInternal() {}
  union {
    ClientInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
constexpr Locale::Locale(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , region_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LocaleDefaultTypeInternal {
  constexpr LocaleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocaleDefaultTypeInternal() {}
  union {
    Locale _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocaleDefaultTypeInternal _Locale_default_instance_;
constexpr Size::Size(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0u)
  , height_(0u){}
struct SizeDefaultTypeInternal {
  constexpr SizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SizeDefaultTypeInternal() {}
  union {
    Size _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SizeDefaultTypeInternal _Size_default_instance_;
constexpr Screen::Screen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_(nullptr)
  , scale_(0){}
struct ScreenDefaultTypeInternal {
  constexpr ScreenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScreenDefaultTypeInternal() {}
  union {
    Screen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScreenDefaultTypeInternal _Screen_default_instance_;
constexpr Device::Device(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : brand_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , manufacturer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , os_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , platform_app_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , promoted_mobile_sdk_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , locale_(nullptr)
  , screen_(nullptr)
  , location_(nullptr)
  , browser_(nullptr)
  , device_type_(0)
{}
struct DeviceDefaultTypeInternal {
  constexpr DeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceDefaultTypeInternal _Device_default_instance_;
constexpr ClientHints::ClientHints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : brand_()
  , architecture_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , platform_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , platform_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ua_full_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_mobile_(false){}
struct ClientHintsDefaultTypeInternal {
  constexpr ClientHintsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientHintsDefaultTypeInternal() {}
  union {
    ClientHints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientHintsDefaultTypeInternal _ClientHints_default_instance_;
constexpr ClientHintBrand::ClientHintBrand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : brand_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ClientHintBrandDefaultTypeInternal {
  constexpr ClientHintBrandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientHintBrandDefaultTypeInternal() {}
  union {
    ClientHintBrand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientHintBrandDefaultTypeInternal _ClientHintBrand_default_instance_;
constexpr Browser::Browser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_agent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , referrer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , viewport_size_(nullptr)
  , client_hints_(nullptr){}
struct BrowserDefaultTypeInternal {
  constexpr BrowserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BrowserDefaultTypeInternal() {}
  union {
    Browser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BrowserDefaultTypeInternal _Browser_default_instance_;
constexpr Location::Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_(0)
  , longitude_(0)
  , accuracy_in_meters_(0){}
struct LocationDefaultTypeInternal {
  constexpr LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocationDefaultTypeInternal _Location_default_instance_;
constexpr Timing::Timing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_log_timestamp_(PROTOBUF_ULONGLONG(0)){}
struct TimingDefaultTypeInternal {
  constexpr TimingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimingDefaultTypeInternal() {}
  union {
    Timing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimingDefaultTypeInternal _Timing_default_instance_;
constexpr Properties::Properties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PropertiesDefaultTypeInternal {
  constexpr PropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropertiesDefaultTypeInternal() {}
  union {
    Properties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropertiesDefaultTypeInternal _Properties_default_instance_;
}  // namespace common
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fcommon_2fcommon_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fcommon_2fcommon_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fcommon_2fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fcommon_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::EntityPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::EntityPath, platform_id_),
  PROTOBUF_FIELD_OFFSET(::common::EntityPath, customer_id_),
  PROTOBUF_FIELD_OFFSET(::common::EntityPath, account_id_),
  PROTOBUF_FIELD_OFFSET(::common::EntityPath, campaign_id_),
  PROTOBUF_FIELD_OFFSET(::common::EntityPath, promotion_id_),
  PROTOBUF_FIELD_OFFSET(::common::EntityPath, content_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Money, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::Money, currency_code_),
  PROTOBUF_FIELD_OFFSET(::common::Money, amount_micros_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::UserInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::common::UserInfo, log_user_id_),
  PROTOBUF_FIELD_OFFSET(::common::UserInfo, is_internal_user_),
  PROTOBUF_FIELD_OFFSET(::common::UserInfo, ignore_usage_),
  PROTOBUF_FIELD_OFFSET(::common::UserInfo, anon_user_id_),
  PROTOBUF_FIELD_OFFSET(::common::UserInfo, retained_user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::ClientInfo, client_type_),
  PROTOBUF_FIELD_OFFSET(::common::ClientInfo, traffic_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Locale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::Locale, language_code_),
  PROTOBUF_FIELD_OFFSET(::common::Locale, region_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Size, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::Size, width_),
  PROTOBUF_FIELD_OFFSET(::common::Size, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Screen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::Screen, size_),
  PROTOBUF_FIELD_OFFSET(::common::Screen, scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::Device, device_type_),
  PROTOBUF_FIELD_OFFSET(::common::Device, brand_),
  PROTOBUF_FIELD_OFFSET(::common::Device, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::common::Device, identifier_),
  PROTOBUF_FIELD_OFFSET(::common::Device, os_version_),
  PROTOBUF_FIELD_OFFSET(::common::Device, locale_),
  PROTOBUF_FIELD_OFFSET(::common::Device, screen_),
  PROTOBUF_FIELD_OFFSET(::common::Device, ip_address_),
  PROTOBUF_FIELD_OFFSET(::common::Device, location_),
  PROTOBUF_FIELD_OFFSET(::common::Device, browser_),
  PROTOBUF_FIELD_OFFSET(::common::Device, platform_app_version_),
  PROTOBUF_FIELD_OFFSET(::common::Device, promoted_mobile_sdk_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientHints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::ClientHints, is_mobile_),
  PROTOBUF_FIELD_OFFSET(::common::ClientHints, brand_),
  PROTOBUF_FIELD_OFFSET(::common::ClientHints, architecture_),
  PROTOBUF_FIELD_OFFSET(::common::ClientHints, model_),
  PROTOBUF_FIELD_OFFSET(::common::ClientHints, platform_),
  PROTOBUF_FIELD_OFFSET(::common::ClientHints, platform_version_),
  PROTOBUF_FIELD_OFFSET(::common::ClientHints, ua_full_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::ClientHintBrand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::ClientHintBrand, brand_),
  PROTOBUF_FIELD_OFFSET(::common::ClientHintBrand, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Browser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::Browser, user_agent_),
  PROTOBUF_FIELD_OFFSET(::common::Browser, viewport_size_),
  PROTOBUF_FIELD_OFFSET(::common::Browser, client_hints_),
  PROTOBUF_FIELD_OFFSET(::common::Browser, referrer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::Location, latitude_),
  PROTOBUF_FIELD_OFFSET(::common::Location, longitude_),
  PROTOBUF_FIELD_OFFSET(::common::Location, accuracy_in_meters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Timing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::Timing, client_log_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::Properties, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::common::Properties, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::common::Properties, struct_field_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::common::EntityPath)},
  { 11, -1, sizeof(::common::Money)},
  { 18, -1, sizeof(::common::UserInfo)},
  { 29, -1, sizeof(::common::ClientInfo)},
  { 36, -1, sizeof(::common::Locale)},
  { 43, -1, sizeof(::common::Size)},
  { 50, -1, sizeof(::common::Screen)},
  { 57, -1, sizeof(::common::Device)},
  { 74, -1, sizeof(::common::ClientHints)},
  { 86, -1, sizeof(::common::ClientHintBrand)},
  { 93, -1, sizeof(::common::Browser)},
  { 102, -1, sizeof(::common::Location)},
  { 110, -1, sizeof(::common::Timing)},
  { 116, -1, sizeof(::common::Properties)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_EntityPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_Money_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_ClientInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_Locale_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_Size_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_Screen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_ClientHints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_ClientHintBrand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_Browser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_Timing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_Properties_default_instance_),
};

const char descriptor_table_protodef_proto_2fcommon_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031proto/common/common.proto\022\006common\032\034goo"
  "gle/protobuf/struct.proto\"\320\001\n\nEntityPath"
  "\022\037\n\013platform_id\030\001 \001(\004R\nplatformId\022\037\n\013cus"
  "tomer_id\030\002 \001(\004R\ncustomerId\022\035\n\naccount_id"
  "\030\004 \001(\004R\taccountId\022\037\n\013campaign_id\030\005 \001(\004R\n"
  "campaignId\022!\n\014promotion_id\030\006 \001(\004R\013promot"
  "ionId\022\035\n\ncontent_id\030\003 \001(\004R\tcontentId\"g\n\005"
  "Money\0229\n\rcurrency_code\030\001 \001(\0162\024.common.Cu"
  "rrencyCodeR\014currencyCode\022#\n\ramount_micro"
  "s\030\002 \001(\003R\014amountMicros\"\334\001\n\010UserInfo\022\027\n\007us"
  "er_id\030\001 \001(\tR\006userId\022\036\n\013log_user_id\030\002 \001(\t"
  "R\tlogUserId\022(\n\020is_internal_user\030\003 \001(\010R\016i"
  "sInternalUser\022!\n\014ignore_usage\030\004 \001(\010R\013ign"
  "oreUsage\022 \n\014anon_user_id\030\005 \001(\tR\nanonUser"
  "Id\022(\n\020retained_user_id\030\007 \001(\tR\016retainedUs"
  "erId\"\306\002\n\nClientInfo\022>\n\013client_type\030\001 \001(\016"
  "2\035.common.ClientInfo.ClientTypeR\nclientT"
  "ype\022A\n\014traffic_type\030\002 \001(\0162\036.common.Clien"
  "tInfo.TrafficTypeR\013trafficType\"X\n\nClient"
  "Type\022\032\n\026UNKNOWN_REQUEST_CLIENT\020\000\022\023\n\017PLAT"
  "FORM_SERVER\020\001\022\023\n\017PLATFORM_CLIENT\020\002\"\004\010\003\020\004"
  "\"[\n\013TrafficType\022\030\n\024UNKNOWN_TRAFFIC_TYPE\020"
  "\000\022\016\n\nPRODUCTION\020\001\022\n\n\006REPLAY\020\002\022\n\n\006SHADOW\020"
  "\004\"\004\010\003\020\003\"\004\010\005\020\005\"N\n\006Locale\022#\n\rlanguage_code"
  "\030\001 \001(\tR\014languageCode\022\037\n\013region_code\030\002 \001("
  "\tR\nregionCode\"4\n\004Size\022\024\n\005width\030\001 \001(\rR\005wi"
  "dth\022\026\n\006height\030\002 \001(\rR\006height\"@\n\006Screen\022 \n"
  "\004size\030\001 \001(\0132\014.common.SizeR\004size\022\024\n\005scale"
  "\030\002 \001(\002R\005scale\"\363\003\n\006Device\0223\n\013device_type\030"
  "\001 \001(\0162\022.common.DeviceTypeR\ndeviceType\022\024\n"
  "\005brand\030\002 \001(\tR\005brand\022\"\n\014manufacturer\030\003 \001("
  "\tR\014manufacturer\022\036\n\nidentifier\030\004 \001(\tR\nide"
  "ntifier\022\035\n\nos_version\030\005 \001(\tR\tosVersion\022*"
  "\n\006locale\030\006 \001(\0132\016.common.LocaleB\002\030\001R\006loca"
  "le\022&\n\006screen\030\007 \001(\0132\016.common.ScreenR\006scre"
  "en\022\035\n\nip_address\030\010 \001(\tR\tipAddress\022,\n\010loc"
  "ation\030\t \001(\0132\020.common.LocationR\010location\022"
  ")\n\007browser\030\n \001(\0132\017.common.BrowserR\007brows"
  "er\0220\n\024platform_app_version\030\013 \001(\tR\022platfo"
  "rmAppVersion\022=\n\033promoted_mobile_sdk_vers"
  "ion\030\014 \001(\tR\030promotedMobileSdkVersion\"\202\002\n\013"
  "ClientHints\022\033\n\tis_mobile\030\001 \001(\010R\010isMobile"
  "\022-\n\005brand\030\002 \003(\0132\027.common.ClientHintBrand"
  "R\005brand\022\"\n\014architecture\030\003 \001(\tR\014architect"
  "ure\022\024\n\005model\030\004 \001(\tR\005model\022\032\n\010platform\030\005 "
  "\001(\tR\010platform\022)\n\020platform_version\030\006 \001(\tR"
  "\017platformVersion\022&\n\017ua_full_version\030\007 \001("
  "\tR\ruaFullVersion\"A\n\017ClientHintBrand\022\024\n\005b"
  "rand\030\001 \001(\tR\005brand\022\030\n\007version\030\002 \001(\tR\007vers"
  "ion\"\257\001\n\007Browser\022\035\n\nuser_agent\030\001 \001(\tR\tuse"
  "rAgent\0221\n\rviewport_size\030\002 \001(\0132\014.common.S"
  "izeR\014viewportSize\0226\n\014client_hints\030\003 \001(\0132"
  "\023.common.ClientHintsR\013clientHints\022\032\n\010ref"
  "errer\030\004 \001(\tR\010referrer\"r\n\010Location\022\032\n\010lat"
  "itude\030\001 \001(\001R\010latitude\022\034\n\tlongitude\030\002 \001(\001"
  "R\tlongitude\022,\n\022accuracy_in_meters\030\003 \001(\001R"
  "\020accuracyInMeters\"F\n\006Timing\0220\n\024client_lo"
  "g_timestamp\030\001 \001(\004R\022clientLogTimestampJ\004\010"
  "\002\020\003J\004\010\003\020\004\"z\n\nProperties\022#\n\014struct_bytes\030"
  "\001 \001(\014H\000R\013structBytes\0221\n\006struct\030\002 \001(\0132\027.g"
  "oogle.protobuf.StructH\000R\006structB\016\n\014struc"
  "t_fieldJ\004\010\003\020\004*\335\001\n\014CurrencyCode\022\031\n\025UNKNOW"
  "N_CURRENCY_CODE\020\000\022\007\n\003USD\020\001\022\007\n\003EUR\020\002\022\007\n\003J"
  "PY\020\003\022\007\n\003GBP\020\004\022\007\n\003AUD\020\005\022\007\n\003CAD\020\006\022\007\n\003CHF\020\007"
  "\022\007\n\003CNY\020\010\022\007\n\003HKD\020\t\022\007\n\003NZD\020\n\022\007\n\003SEK\020\013\022\007\n\003"
  "KRW\020\014\022\007\n\003SGD\020\r\022\007\n\003NOK\020\016\022\007\n\003MXN\020\017\022\007\n\003INR\020"
  "\020\022\007\n\003RUB\020\021\022\007\n\003ZAR\020\022\022\007\n\003TRY\020\023\022\007\n\003BRL\020\024*J\n"
  "\nDeviceType\022\027\n\023UNKNOWN_DEVICE_TYPE\020\000\022\013\n\007"
  "DESKTOP\020\001\022\n\n\006MOBILE\020\002\022\n\n\006TABLET\020\003Bs\n\030ai."
  "promoted.proto.commonB\013CommonProtoP\001Z6gi"
  "thub.com/promotedai/schema/generated/go/"
  "proto/common\252\002\017Promoted.Commonb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fcommon_2fcommon_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fcommon_2fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcommon_2fcommon_2eproto = {
  false, false, 2878, descriptor_table_protodef_proto_2fcommon_2fcommon_2eproto, "proto/common/common.proto", 
  &descriptor_table_proto_2fcommon_2fcommon_2eproto_once, descriptor_table_proto_2fcommon_2fcommon_2eproto_deps, 1, 14,
  schemas, file_default_instances, TableStruct_proto_2fcommon_2fcommon_2eproto::offsets,
  file_level_metadata_proto_2fcommon_2fcommon_2eproto, file_level_enum_descriptors_proto_2fcommon_2fcommon_2eproto, file_level_service_descriptors_proto_2fcommon_2fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2fcommon_2eproto);
  return descriptor_table_proto_2fcommon_2fcommon_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fcommon_2fcommon_2eproto(&descriptor_table_proto_2fcommon_2fcommon_2eproto);
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientInfo_ClientType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2fcommon_2eproto[0];
}
bool ClientInfo_ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientInfo_ClientType ClientInfo::UNKNOWN_REQUEST_CLIENT;
constexpr ClientInfo_ClientType ClientInfo::PLATFORM_SERVER;
constexpr ClientInfo_ClientType ClientInfo::PLATFORM_CLIENT;
constexpr ClientInfo_ClientType ClientInfo::ClientType_MIN;
constexpr ClientInfo_ClientType ClientInfo::ClientType_MAX;
constexpr int ClientInfo::ClientType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientInfo_TrafficType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2fcommon_2eproto[1];
}
bool ClientInfo_TrafficType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientInfo_TrafficType ClientInfo::UNKNOWN_TRAFFIC_TYPE;
constexpr ClientInfo_TrafficType ClientInfo::PRODUCTION;
constexpr ClientInfo_TrafficType ClientInfo::REPLAY;
constexpr ClientInfo_TrafficType ClientInfo::SHADOW;
constexpr ClientInfo_TrafficType ClientInfo::TrafficType_MIN;
constexpr ClientInfo_TrafficType ClientInfo::TrafficType_MAX;
constexpr int ClientInfo::TrafficType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CurrencyCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2fcommon_2eproto[2];
}
bool CurrencyCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2fcommon_2eproto);
  return file_level_enum_descriptors_proto_2fcommon_2fcommon_2eproto[3];
}
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class EntityPath::_Internal {
 public:
};

EntityPath::EntityPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.EntityPath)
}
EntityPath::EntityPath(const EntityPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&platform_id_, &from.platform_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&promotion_id_) -
    reinterpret_cast<char*>(&platform_id_)) + sizeof(promotion_id_));
  // @@protoc_insertion_point(copy_constructor:common.EntityPath)
}

void EntityPath::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&platform_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&promotion_id_) -
    reinterpret_cast<char*>(&platform_id_)) + sizeof(promotion_id_));
}

EntityPath::~EntityPath() {
  // @@protoc_insertion_point(destructor:common.EntityPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EntityPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EntityPath::ArenaDtor(void* object) {
  EntityPath* _this = reinterpret_cast< EntityPath* >(object);
  (void)_this;
}
void EntityPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EntityPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EntityPath::Clear() {
// @@protoc_insertion_point(message_clear_start:common.EntityPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&platform_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&promotion_id_) -
      reinterpret_cast<char*>(&platform_id_)) + sizeof(promotion_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 platform_id = 1 [json_name = "platformId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 customer_id = 2 [json_name = "customerId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          customer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 content_id = 3 [json_name = "contentId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          content_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 account_id = 4 [json_name = "accountId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 campaign_id = 5 [json_name = "campaignId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          campaign_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 promotion_id = 6 [json_name = "promotionId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          promotion_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntityPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.EntityPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_platform_id(), target);
  }

  // uint64 customer_id = 2 [json_name = "customerId"];
  if (this->customer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_customer_id(), target);
  }

  // uint64 content_id = 3 [json_name = "contentId"];
  if (this->content_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_content_id(), target);
  }

  // uint64 account_id = 4 [json_name = "accountId"];
  if (this->account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_account_id(), target);
  }

  // uint64 campaign_id = 5 [json_name = "campaignId"];
  if (this->campaign_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_campaign_id(), target);
  }

  // uint64 promotion_id = 6 [json_name = "promotionId"];
  if (this->promotion_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_promotion_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.EntityPath)
  return target;
}

size_t EntityPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.EntityPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 platform_id = 1 [json_name = "platformId"];
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_platform_id());
  }

  // uint64 customer_id = 2 [json_name = "customerId"];
  if (this->customer_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_customer_id());
  }

  // uint64 content_id = 3 [json_name = "contentId"];
  if (this->content_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_content_id());
  }

  // uint64 account_id = 4 [json_name = "accountId"];
  if (this->account_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_account_id());
  }

  // uint64 campaign_id = 5 [json_name = "campaignId"];
  if (this->campaign_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_campaign_id());
  }

  // uint64 promotion_id = 6 [json_name = "promotionId"];
  if (this->promotion_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_promotion_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.EntityPath)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntityPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.EntityPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.EntityPath)
    MergeFrom(*source);
  }
}

void EntityPath::MergeFrom(const EntityPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.EntityPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
  if (from.customer_id() != 0) {
    _internal_set_customer_id(from._internal_customer_id());
  }
  if (from.content_id() != 0) {
    _internal_set_content_id(from._internal_content_id());
  }
  if (from.account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.campaign_id() != 0) {
    _internal_set_campaign_id(from._internal_campaign_id());
  }
  if (from.promotion_id() != 0) {
    _internal_set_promotion_id(from._internal_promotion_id());
  }
}

void EntityPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.EntityPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityPath::CopyFrom(const EntityPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.EntityPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityPath::IsInitialized() const {
  return true;
}

void EntityPath::InternalSwap(EntityPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntityPath, promotion_id_)
      + sizeof(EntityPath::promotion_id_)
      - PROTOBUF_FIELD_OFFSET(EntityPath, platform_id_)>(
          reinterpret_cast<char*>(&platform_id_),
          reinterpret_cast<char*>(&other->platform_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Money::_Internal {
 public:
};

Money::Money(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.Money)
}
Money::Money(const Money& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&amount_micros_, &from.amount_micros_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_code_) -
    reinterpret_cast<char*>(&amount_micros_)) + sizeof(currency_code_));
  // @@protoc_insertion_point(copy_constructor:common.Money)
}

void Money::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&amount_micros_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&currency_code_) -
    reinterpret_cast<char*>(&amount_micros_)) + sizeof(currency_code_));
}

Money::~Money() {
  // @@protoc_insertion_point(destructor:common.Money)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Money::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Money::ArenaDtor(void* object) {
  Money* _this = reinterpret_cast< Money* >(object);
  (void)_this;
}
void Money::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Money::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Money::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Money)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&amount_micros_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_code_) -
      reinterpret_cast<char*>(&amount_micros_)) + sizeof(currency_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Money::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.CurrencyCode currency_code = 1 [json_name = "currencyCode"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_currency_code(static_cast<::common::CurrencyCode>(val));
        } else goto handle_unusual;
        continue;
      // int64 amount_micros = 2 [json_name = "amountMicros"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Money::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Money)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.CurrencyCode currency_code = 1 [json_name = "currencyCode"];
  if (this->currency_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_currency_code(), target);
  }

  // int64 amount_micros = 2 [json_name = "amountMicros"];
  if (this->amount_micros() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount_micros(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Money)
  return target;
}

size_t Money::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Money)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 amount_micros = 2 [json_name = "amountMicros"];
  if (this->amount_micros() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount_micros());
  }

  // .common.CurrencyCode currency_code = 1 [json_name = "currencyCode"];
  if (this->currency_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_currency_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Money::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.Money)
  GOOGLE_DCHECK_NE(&from, this);
  const Money* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Money>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.Money)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.Money)
    MergeFrom(*source);
  }
}

void Money::MergeFrom(const Money& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Money)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount_micros() != 0) {
    _internal_set_amount_micros(from._internal_amount_micros());
  }
  if (from.currency_code() != 0) {
    _internal_set_currency_code(from._internal_currency_code());
  }
}

void Money::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.Money)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Money::CopyFrom(const Money& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Money)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Money::IsInitialized() const {
  return true;
}

void Money::InternalSwap(Money* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Money, currency_code_)
      + sizeof(Money::currency_code_)
      - PROTOBUF_FIELD_OFFSET(Money, amount_micros_)>(
          reinterpret_cast<char*>(&amount_micros_),
          reinterpret_cast<char*>(&other->amount_micros_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Money::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  log_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_user_id().empty()) {
    log_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log_user_id(), 
      GetArena());
  }
  anon_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_anon_user_id().empty()) {
    anon_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_anon_user_id(), 
      GetArena());
  }
  retained_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_retained_user_id().empty()) {
    retained_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_retained_user_id(), 
      GetArena());
  }
  ::memcpy(&is_internal_user_, &from.is_internal_user_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_usage_) -
    reinterpret_cast<char*>(&is_internal_user_)) + sizeof(ignore_usage_));
  // @@protoc_insertion_point(copy_constructor:common.UserInfo)
}

void UserInfo::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
log_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
anon_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
retained_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_internal_user_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ignore_usage_) -
    reinterpret_cast<char*>(&is_internal_user_)) + sizeof(ignore_usage_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:common.UserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anon_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retained_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::ArenaDtor(void* object) {
  UserInfo* _this = reinterpret_cast< UserInfo* >(object);
  (void)_this;
}
void UserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:common.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  log_user_id_.ClearToEmpty();
  anon_user_id_.ClearToEmpty();
  retained_user_id_.ClearToEmpty();
  ::memset(&is_internal_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_usage_) -
      reinterpret_cast<char*>(&is_internal_user_)) + sizeof(ignore_usage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1 [json_name = "userId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.UserInfo.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log_user_id = 2 [json_name = "logUserId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_log_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.UserInfo.log_user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_internal_user = 3 [json_name = "isInternalUser"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_internal_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_usage = 4 [json_name = "ignoreUsage"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ignore_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string anon_user_id = 5 [json_name = "anonUserId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_anon_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.UserInfo.anon_user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string retained_user_id = 7 [json_name = "retainedUserId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_retained_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.UserInfo.retained_user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UserInfo.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string log_user_id = 2 [json_name = "logUserId"];
  if (this->log_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_user_id().data(), static_cast<int>(this->_internal_log_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UserInfo.log_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_log_user_id(), target);
  }

  // bool is_internal_user = 3 [json_name = "isInternalUser"];
  if (this->is_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_internal_user(), target);
  }

  // bool ignore_usage = 4 [json_name = "ignoreUsage"];
  if (this->ignore_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ignore_usage(), target);
  }

  // string anon_user_id = 5 [json_name = "anonUserId"];
  if (this->anon_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_anon_user_id().data(), static_cast<int>(this->_internal_anon_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UserInfo.anon_user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_anon_user_id(), target);
  }

  // string retained_user_id = 7 [json_name = "retainedUserId"];
  if (this->retained_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_retained_user_id().data(), static_cast<int>(this->_internal_retained_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.UserInfo.retained_user_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_retained_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1 [json_name = "userId"];
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string log_user_id = 2 [json_name = "logUserId"];
  if (this->log_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_user_id());
  }

  // string anon_user_id = 5 [json_name = "anonUserId"];
  if (this->anon_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_anon_user_id());
  }

  // string retained_user_id = 7 [json_name = "retainedUserId"];
  if (this->retained_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_retained_user_id());
  }

  // bool is_internal_user = 3 [json_name = "isInternalUser"];
  if (this->is_internal_user() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_usage = 4 [json_name = "ignoreUsage"];
  if (this->ignore_usage() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.log_user_id().size() > 0) {
    _internal_set_log_user_id(from._internal_log_user_id());
  }
  if (from.anon_user_id().size() > 0) {
    _internal_set_anon_user_id(from._internal_anon_user_id());
  }
  if (from.retained_user_id().size() > 0) {
    _internal_set_retained_user_id(from._internal_retained_user_id());
  }
  if (from.is_internal_user() != 0) {
    _internal_set_is_internal_user(from._internal_is_internal_user());
  }
  if (from.ignore_usage() != 0) {
    _internal_set_ignore_usage(from._internal_ignore_usage());
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_user_id_.Swap(&other->log_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  anon_user_id_.Swap(&other->anon_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  retained_user_id_.Swap(&other->retained_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, ignore_usage_)
      + sizeof(UserInfo::ignore_usage_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, is_internal_user_)>(
          reinterpret_cast<char*>(&is_internal_user_),
          reinterpret_cast<char*>(&other->is_internal_user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientInfo::_Internal {
 public:
};

ClientInfo::ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.ClientInfo)
}
ClientInfo::ClientInfo(const ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_type_, &from.client_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&traffic_type_) -
    reinterpret_cast<char*>(&client_type_)) + sizeof(traffic_type_));
  // @@protoc_insertion_point(copy_constructor:common.ClientInfo)
}

void ClientInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&traffic_type_) -
    reinterpret_cast<char*>(&client_type_)) + sizeof(traffic_type_));
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:common.ClientInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientInfo::ArenaDtor(void* object) {
  ClientInfo* _this = reinterpret_cast< ClientInfo* >(object);
  (void)_this;
}
void ClientInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&client_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&traffic_type_) -
      reinterpret_cast<char*>(&client_type_)) + sizeof(traffic_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.ClientInfo.ClientType client_type = 1 [json_name = "clientType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::common::ClientInfo_ClientType>(val));
        } else goto handle_unusual;
        continue;
      // .common.ClientInfo.TrafficType traffic_type = 2 [json_name = "trafficType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_traffic_type(static_cast<::common::ClientInfo_TrafficType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.ClientInfo.ClientType client_type = 1 [json_name = "clientType"];
  if (this->client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_client_type(), target);
  }

  // .common.ClientInfo.TrafficType traffic_type = 2 [json_name = "trafficType"];
  if (this->traffic_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_traffic_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientInfo)
  return target;
}

size_t ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.ClientInfo.ClientType client_type = 1 [json_name = "clientType"];
  if (this->client_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  // .common.ClientInfo.TrafficType traffic_type = 2 [json_name = "trafficType"];
  if (this->traffic_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_traffic_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.ClientInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.ClientInfo)
    MergeFrom(*source);
  }
}

void ClientInfo::MergeFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_type() != 0) {
    _internal_set_client_type(from._internal_client_type());
  }
  if (from.traffic_type() != 0) {
    _internal_set_traffic_type(from._internal_traffic_type());
  }
}

void ClientInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {
  return true;
}

void ClientInfo::InternalSwap(ClientInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientInfo, traffic_type_)
      + sizeof(ClientInfo::traffic_type_)
      - PROTOBUF_FIELD_OFFSET(ClientInfo, client_type_)>(
          reinterpret_cast<char*>(&client_type_),
          reinterpret_cast<char*>(&other->client_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Locale::_Internal {
 public:
};

Locale::Locale(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.Locale)
}
Locale::Locale(const Locale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArena());
  }
  region_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region_code().empty()) {
    region_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_region_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:common.Locale)
}

void Locale::SharedCtor() {
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
region_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Locale::~Locale() {
  // @@protoc_insertion_point(destructor:common.Locale)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Locale::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Locale::ArenaDtor(void* object) {
  Locale* _this = reinterpret_cast< Locale* >(object);
  (void)_this;
}
void Locale::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Locale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Locale::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Locale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_code_.ClearToEmpty();
  region_code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Locale::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string language_code = 1 [json_name = "languageCode"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.Locale.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region_code = 2 [json_name = "regionCode"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_region_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.Locale.region_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Locale::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Locale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1 [json_name = "languageCode"];
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Locale.language_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_code(), target);
  }

  // string region_code = 2 [json_name = "regionCode"];
  if (this->region_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region_code().data(), static_cast<int>(this->_internal_region_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Locale.region_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_region_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Locale)
  return target;
}

size_t Locale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Locale)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language_code = 1 [json_name = "languageCode"];
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // string region_code = 2 [json_name = "regionCode"];
  if (this->region_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Locale::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.Locale)
  GOOGLE_DCHECK_NE(&from, this);
  const Locale* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Locale>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.Locale)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.Locale)
    MergeFrom(*source);
  }
}

void Locale::MergeFrom(const Locale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Locale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language_code().size() > 0) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from.region_code().size() > 0) {
    _internal_set_region_code(from._internal_region_code());
  }
}

void Locale::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.Locale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Locale::CopyFrom(const Locale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Locale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locale::IsInitialized() const {
  return true;
}

void Locale::InternalSwap(Locale* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_code_.Swap(&other->region_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Locale::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Size::_Internal {
 public:
};

Size::Size(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.Size)
}
Size::Size(const Size& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:common.Size)
}

void Size::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Size::~Size() {
  // @@protoc_insertion_point(destructor:common.Size)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Size::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Size::ArenaDtor(void* object) {
  Size* _this = reinterpret_cast< Size* >(object);
  (void)_this;
}
void Size::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Size::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Size::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Size::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 width = 1 [json_name = "width"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Size::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1 [json_name = "width"];
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 height = 2 [json_name = "height"];
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Size)
  return target;
}

size_t Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Size)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 width = 1 [json_name = "width"];
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 2 [json_name = "height"];
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Size::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.Size)
  GOOGLE_DCHECK_NE(&from, this);
  const Size* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Size>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.Size)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.Size)
    MergeFrom(*source);
  }
}

void Size::MergeFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Size)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void Size::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size::CopyFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  return true;
}

void Size::InternalSwap(Size* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Size, height_)
      + sizeof(Size::height_)
      - PROTOBUF_FIELD_OFFSET(Size, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Size::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Screen::_Internal {
 public:
  static const ::common::Size& size(const Screen* msg);
};

const ::common::Size&
Screen::_Internal::size(const Screen* msg) {
  return *msg->size_;
}
Screen::Screen(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.Screen)
}
Screen::Screen(const Screen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size()) {
    size_ = new ::common::Size(*from.size_);
  } else {
    size_ = nullptr;
  }
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:common.Screen)
}

void Screen::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&size_)) + sizeof(scale_));
}

Screen::~Screen() {
  // @@protoc_insertion_point(destructor:common.Screen)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Screen::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete size_;
}

void Screen::ArenaDtor(void* object) {
  Screen* _this = reinterpret_cast< Screen* >(object);
  (void)_this;
}
void Screen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Screen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Screen::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Screen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  scale_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Screen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.Size size = 1 [json_name = "size"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float scale = 2 [json_name = "scale"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Screen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Screen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.Size size = 1 [json_name = "size"];
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::size(this), target, stream);
  }

  // float scale = 2 [json_name = "scale"];
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Screen)
  return target;
}

size_t Screen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Screen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .common.Size size = 1 [json_name = "size"];
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // float scale = 2 [json_name = "scale"];
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Screen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.Screen)
  GOOGLE_DCHECK_NE(&from, this);
  const Screen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Screen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.Screen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.Screen)
    MergeFrom(*source);
  }
}

void Screen::MergeFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Screen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_size()) {
    _internal_mutable_size()->::common::Size::MergeFrom(from._internal_size());
  }
  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
}

void Screen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Screen::CopyFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screen::IsInitialized() const {
  return true;
}

void Screen::InternalSwap(Screen* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Screen, scale_)
      + sizeof(Screen::scale_)
      - PROTOBUF_FIELD_OFFSET(Screen, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Screen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Device::_Internal {
 public:
  static const ::common::Locale& locale(const Device* msg);
  static const ::common::Screen& screen(const Device* msg);
  static const ::common::Location& location(const Device* msg);
  static const ::common::Browser& browser(const Device* msg);
};

const ::common::Locale&
Device::_Internal::locale(const Device* msg) {
  return *msg->locale_;
}
const ::common::Screen&
Device::_Internal::screen(const Device* msg) {
  return *msg->screen_;
}
const ::common::Location&
Device::_Internal::location(const Device* msg) {
  return *msg->location_;
}
const ::common::Browser&
Device::_Internal::browser(const Device* msg) {
  return *msg->browser_;
}
Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brand().empty()) {
    brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brand(), 
      GetArena());
  }
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_manufacturer().empty()) {
    manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_manufacturer(), 
      GetArena());
  }
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identifier().empty()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArena());
  }
  os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_os_version().empty()) {
    os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_os_version(), 
      GetArena());
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_address(), 
      GetArena());
  }
  platform_app_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_platform_app_version().empty()) {
    platform_app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform_app_version(), 
      GetArena());
  }
  promoted_mobile_sdk_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_promoted_mobile_sdk_version().empty()) {
    promoted_mobile_sdk_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_promoted_mobile_sdk_version(), 
      GetArena());
  }
  if (from._internal_has_locale()) {
    locale_ = new ::common::Locale(*from.locale_);
  } else {
    locale_ = nullptr;
  }
  if (from._internal_has_screen()) {
    screen_ = new ::common::Screen(*from.screen_);
  } else {
    screen_ = nullptr;
  }
  if (from._internal_has_location()) {
    location_ = new ::common::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_browser()) {
    browser_ = new ::common::Browser(*from.browser_);
  } else {
    browser_ = nullptr;
  }
  device_type_ = from.device_type_;
  // @@protoc_insertion_point(copy_constructor:common.Device)
}

void Device::SharedCtor() {
brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
os_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
platform_app_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
promoted_mobile_sdk_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&locale_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_type_) -
    reinterpret_cast<char*>(&locale_)) + sizeof(device_type_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:common.Device)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  brand_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_app_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  promoted_mobile_sdk_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete locale_;
  if (this != internal_default_instance()) delete screen_;
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete browser_;
}

void Device::ArenaDtor(void* object) {
  Device* _this = reinterpret_cast< Device* >(object);
  (void)_this;
}
void Device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brand_.ClearToEmpty();
  manufacturer_.ClearToEmpty();
  identifier_.ClearToEmpty();
  os_version_.ClearToEmpty();
  ip_address_.ClearToEmpty();
  platform_app_version_.ClearToEmpty();
  promoted_mobile_sdk_version_.ClearToEmpty();
  if (GetArena() == nullptr && locale_ != nullptr) {
    delete locale_;
  }
  locale_ = nullptr;
  if (GetArena() == nullptr && screen_ != nullptr) {
    delete screen_;
  }
  screen_ = nullptr;
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArena() == nullptr && browser_ != nullptr) {
    delete browser_;
  }
  browser_ = nullptr;
  device_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.DeviceType device_type = 1 [json_name = "deviceType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_device_type(static_cast<::common::DeviceType>(val));
        } else goto handle_unusual;
        continue;
      // string brand = 2 [json_name = "brand"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_brand();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.Device.brand"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string manufacturer = 3 [json_name = "manufacturer"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.Device.manufacturer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string identifier = 4 [json_name = "identifier"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.Device.identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string os_version = 5 [json_name = "osVersion"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_os_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.Device.os_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Locale locale = 6 [json_name = "locale", deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_locale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Screen screen = 7 [json_name = "screen"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 8 [json_name = "ipAddress"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.Device.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Location location = 9 [json_name = "location"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Browser browser = 10 [json_name = "browser"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_browser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string platform_app_version = 11 [json_name = "platformAppVersion"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_platform_app_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.Device.platform_app_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string promoted_mobile_sdk_version = 12 [json_name = "promotedMobileSdkVersion"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_promoted_mobile_sdk_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.Device.promoted_mobile_sdk_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.DeviceType device_type = 1 [json_name = "deviceType"];
  if (this->device_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_device_type(), target);
  }

  // string brand = 2 [json_name = "brand"];
  if (this->brand().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brand().data(), static_cast<int>(this->_internal_brand().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Device.brand");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_brand(), target);
  }

  // string manufacturer = 3 [json_name = "manufacturer"];
  if (this->manufacturer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Device.manufacturer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_manufacturer(), target);
  }

  // string identifier = 4 [json_name = "identifier"];
  if (this->identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Device.identifier");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_identifier(), target);
  }

  // string os_version = 5 [json_name = "osVersion"];
  if (this->os_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os_version().data(), static_cast<int>(this->_internal_os_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Device.os_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_os_version(), target);
  }

  // .common.Locale locale = 6 [json_name = "locale", deprecated = true];
  if (this->has_locale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::locale(this), target, stream);
  }

  // .common.Screen screen = 7 [json_name = "screen"];
  if (this->has_screen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::screen(this), target, stream);
  }

  // string ip_address = 8 [json_name = "ipAddress"];
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Device.ip_address");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ip_address(), target);
  }

  // .common.Location location = 9 [json_name = "location"];
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::location(this), target, stream);
  }

  // .common.Browser browser = 10 [json_name = "browser"];
  if (this->has_browser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::browser(this), target, stream);
  }

  // string platform_app_version = 11 [json_name = "platformAppVersion"];
  if (this->platform_app_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform_app_version().data(), static_cast<int>(this->_internal_platform_app_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Device.platform_app_version");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_platform_app_version(), target);
  }

  // string promoted_mobile_sdk_version = 12 [json_name = "promotedMobileSdkVersion"];
  if (this->promoted_mobile_sdk_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_promoted_mobile_sdk_version().data(), static_cast<int>(this->_internal_promoted_mobile_sdk_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Device.promoted_mobile_sdk_version");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_promoted_mobile_sdk_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Device)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string brand = 2 [json_name = "brand"];
  if (this->brand().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brand());
  }

  // string manufacturer = 3 [json_name = "manufacturer"];
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer());
  }

  // string identifier = 4 [json_name = "identifier"];
  if (this->identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // string os_version = 5 [json_name = "osVersion"];
  if (this->os_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os_version());
  }

  // string ip_address = 8 [json_name = "ipAddress"];
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string platform_app_version = 11 [json_name = "platformAppVersion"];
  if (this->platform_app_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform_app_version());
  }

  // string promoted_mobile_sdk_version = 12 [json_name = "promotedMobileSdkVersion"];
  if (this->promoted_mobile_sdk_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_promoted_mobile_sdk_version());
  }

  // .common.Locale locale = 6 [json_name = "locale", deprecated = true];
  if (this->has_locale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locale_);
  }

  // .common.Screen screen = 7 [json_name = "screen"];
  if (this->has_screen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *screen_);
  }

  // .common.Location location = 9 [json_name = "location"];
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .common.Browser browser = 10 [json_name = "browser"];
  if (this->has_browser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *browser_);
  }

  // .common.DeviceType device_type = 1 [json_name = "deviceType"];
  if (this->device_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_device_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const Device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.Device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brand().size() > 0) {
    _internal_set_brand(from._internal_brand());
  }
  if (from.manufacturer().size() > 0) {
    _internal_set_manufacturer(from._internal_manufacturer());
  }
  if (from.identifier().size() > 0) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (from.os_version().size() > 0) {
    _internal_set_os_version(from._internal_os_version());
  }
  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.platform_app_version().size() > 0) {
    _internal_set_platform_app_version(from._internal_platform_app_version());
  }
  if (from.promoted_mobile_sdk_version().size() > 0) {
    _internal_set_promoted_mobile_sdk_version(from._internal_promoted_mobile_sdk_version());
  }
  if (from.has_locale()) {
    _internal_mutable_locale()->::common::Locale::MergeFrom(from._internal_locale());
  }
  if (from.has_screen()) {
    _internal_mutable_screen()->::common::Screen::MergeFrom(from._internal_screen());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::common::Location::MergeFrom(from._internal_location());
  }
  if (from.has_browser()) {
    _internal_mutable_browser()->::common::Browser::MergeFrom(from._internal_browser());
  }
  if (from.device_type() != 0) {
    _internal_set_device_type(from._internal_device_type());
  }
}

void Device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  brand_.Swap(&other->brand_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  manufacturer_.Swap(&other->manufacturer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  os_version_.Swap(&other->os_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_app_version_.Swap(&other->platform_app_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  promoted_mobile_sdk_version_.Swap(&other->promoted_mobile_sdk_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Device, device_type_)
      + sizeof(Device::device_type_)
      - PROTOBUF_FIELD_OFFSET(Device, locale_)>(
          reinterpret_cast<char*>(&locale_),
          reinterpret_cast<char*>(&other->locale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientHints::_Internal {
 public:
};

ClientHints::ClientHints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  brand_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.ClientHints)
}
ClientHints::ClientHints(const ClientHints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      brand_(from.brand_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  architecture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_architecture().empty()) {
    architecture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_architecture(), 
      GetArena());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_platform().empty()) {
    platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform(), 
      GetArena());
  }
  platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_platform_version().empty()) {
    platform_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform_version(), 
      GetArena());
  }
  ua_full_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ua_full_version().empty()) {
    ua_full_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ua_full_version(), 
      GetArena());
  }
  is_mobile_ = from.is_mobile_;
  // @@protoc_insertion_point(copy_constructor:common.ClientHints)
}

void ClientHints::SharedCtor() {
architecture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ua_full_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_mobile_ = false;
}

ClientHints::~ClientHints() {
  // @@protoc_insertion_point(destructor:common.ClientHints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientHints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  architecture_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ua_full_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientHints::ArenaDtor(void* object) {
  ClientHints* _this = reinterpret_cast< ClientHints* >(object);
  (void)_this;
}
void ClientHints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientHints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientHints::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientHints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brand_.Clear();
  architecture_.ClearToEmpty();
  model_.ClearToEmpty();
  platform_.ClearToEmpty();
  platform_version_.ClearToEmpty();
  ua_full_version_.ClearToEmpty();
  is_mobile_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientHints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_mobile = 1 [json_name = "isMobile"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_mobile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .common.ClientHintBrand brand = 2 [json_name = "brand"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_brand(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string architecture = 3 [json_name = "architecture"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_architecture();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.ClientHints.architecture"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model = 4 [json_name = "model"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.ClientHints.model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string platform = 5 [json_name = "platform"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.ClientHints.platform"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string platform_version = 6 [json_name = "platformVersion"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_platform_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.ClientHints.platform_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ua_full_version = 7 [json_name = "uaFullVersion"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ua_full_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.ClientHints.ua_full_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientHints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientHints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_mobile = 1 [json_name = "isMobile"];
  if (this->is_mobile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_mobile(), target);
  }

  // repeated .common.ClientHintBrand brand = 2 [json_name = "brand"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_brand_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_brand(i), target, stream);
  }

  // string architecture = 3 [json_name = "architecture"];
  if (this->architecture().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_architecture().data(), static_cast<int>(this->_internal_architecture().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ClientHints.architecture");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_architecture(), target);
  }

  // string model = 4 [json_name = "model"];
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ClientHints.model");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model(), target);
  }

  // string platform = 5 [json_name = "platform"];
  if (this->platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ClientHints.platform");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_platform(), target);
  }

  // string platform_version = 6 [json_name = "platformVersion"];
  if (this->platform_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform_version().data(), static_cast<int>(this->_internal_platform_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ClientHints.platform_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_platform_version(), target);
  }

  // string ua_full_version = 7 [json_name = "uaFullVersion"];
  if (this->ua_full_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ua_full_version().data(), static_cast<int>(this->_internal_ua_full_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ClientHints.ua_full_version");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ua_full_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientHints)
  return target;
}

size_t ClientHints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientHints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.ClientHintBrand brand = 2 [json_name = "brand"];
  total_size += 1UL * this->_internal_brand_size();
  for (const auto& msg : this->brand_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string architecture = 3 [json_name = "architecture"];
  if (this->architecture().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_architecture());
  }

  // string model = 4 [json_name = "model"];
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string platform = 5 [json_name = "platform"];
  if (this->platform().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  // string platform_version = 6 [json_name = "platformVersion"];
  if (this->platform_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform_version());
  }

  // string ua_full_version = 7 [json_name = "uaFullVersion"];
  if (this->ua_full_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ua_full_version());
  }

  // bool is_mobile = 1 [json_name = "isMobile"];
  if (this->is_mobile() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientHints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.ClientHints)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientHints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientHints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.ClientHints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.ClientHints)
    MergeFrom(*source);
  }
}

void ClientHints::MergeFrom(const ClientHints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientHints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  brand_.MergeFrom(from.brand_);
  if (from.architecture().size() > 0) {
    _internal_set_architecture(from._internal_architecture());
  }
  if (from.model().size() > 0) {
    _internal_set_model(from._internal_model());
  }
  if (from.platform().size() > 0) {
    _internal_set_platform(from._internal_platform());
  }
  if (from.platform_version().size() > 0) {
    _internal_set_platform_version(from._internal_platform_version());
  }
  if (from.ua_full_version().size() > 0) {
    _internal_set_ua_full_version(from._internal_ua_full_version());
  }
  if (from.is_mobile() != 0) {
    _internal_set_is_mobile(from._internal_is_mobile());
  }
}

void ClientHints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.ClientHints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientHints::CopyFrom(const ClientHints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientHints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHints::IsInitialized() const {
  return true;
}

void ClientHints::InternalSwap(ClientHints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  brand_.InternalSwap(&other->brand_);
  architecture_.Swap(&other->architecture_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_version_.Swap(&other->platform_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ua_full_version_.Swap(&other->ua_full_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_mobile_, other->is_mobile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientHints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientHintBrand::_Internal {
 public:
};

ClientHintBrand::ClientHintBrand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.ClientHintBrand)
}
ClientHintBrand::ClientHintBrand(const ClientHintBrand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brand().empty()) {
    brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brand(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:common.ClientHintBrand)
}

void ClientHintBrand::SharedCtor() {
brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientHintBrand::~ClientHintBrand() {
  // @@protoc_insertion_point(destructor:common.ClientHintBrand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientHintBrand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  brand_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientHintBrand::ArenaDtor(void* object) {
  ClientHintBrand* _this = reinterpret_cast< ClientHintBrand* >(object);
  (void)_this;
}
void ClientHintBrand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientHintBrand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientHintBrand::Clear() {
// @@protoc_insertion_point(message_clear_start:common.ClientHintBrand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brand_.ClearToEmpty();
  version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientHintBrand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string brand = 1 [json_name = "brand"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_brand();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.ClientHintBrand.brand"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2 [json_name = "version"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.ClientHintBrand.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientHintBrand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ClientHintBrand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string brand = 1 [json_name = "brand"];
  if (this->brand().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brand().data(), static_cast<int>(this->_internal_brand().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ClientHintBrand.brand");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_brand(), target);
  }

  // string version = 2 [json_name = "version"];
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.ClientHintBrand.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.ClientHintBrand)
  return target;
}

size_t ClientHintBrand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.ClientHintBrand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string brand = 1 [json_name = "brand"];
  if (this->brand().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brand());
  }

  // string version = 2 [json_name = "version"];
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientHintBrand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.ClientHintBrand)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientHintBrand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientHintBrand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.ClientHintBrand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.ClientHintBrand)
    MergeFrom(*source);
  }
}

void ClientHintBrand::MergeFrom(const ClientHintBrand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.ClientHintBrand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brand().size() > 0) {
    _internal_set_brand(from._internal_brand());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
}

void ClientHintBrand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.ClientHintBrand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientHintBrand::CopyFrom(const ClientHintBrand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.ClientHintBrand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHintBrand::IsInitialized() const {
  return true;
}

void ClientHintBrand::InternalSwap(ClientHintBrand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  brand_.Swap(&other->brand_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientHintBrand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Browser::_Internal {
 public:
  static const ::common::Size& viewport_size(const Browser* msg);
  static const ::common::ClientHints& client_hints(const Browser* msg);
};

const ::common::Size&
Browser::_Internal::viewport_size(const Browser* msg) {
  return *msg->viewport_size_;
}
const ::common::ClientHints&
Browser::_Internal::client_hints(const Browser* msg) {
  return *msg->client_hints_;
}
Browser::Browser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.Browser)
}
Browser::Browser(const Browser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_agent().empty()) {
    user_agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_agent(), 
      GetArena());
  }
  referrer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_referrer().empty()) {
    referrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_referrer(), 
      GetArena());
  }
  if (from._internal_has_viewport_size()) {
    viewport_size_ = new ::common::Size(*from.viewport_size_);
  } else {
    viewport_size_ = nullptr;
  }
  if (from._internal_has_client_hints()) {
    client_hints_ = new ::common::ClientHints(*from.client_hints_);
  } else {
    client_hints_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:common.Browser)
}

void Browser::SharedCtor() {
user_agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
referrer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&viewport_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_hints_) -
    reinterpret_cast<char*>(&viewport_size_)) + sizeof(client_hints_));
}

Browser::~Browser() {
  // @@protoc_insertion_point(destructor:common.Browser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Browser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_agent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  referrer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete viewport_size_;
  if (this != internal_default_instance()) delete client_hints_;
}

void Browser::ArenaDtor(void* object) {
  Browser* _this = reinterpret_cast< Browser* >(object);
  (void)_this;
}
void Browser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Browser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Browser::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Browser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_agent_.ClearToEmpty();
  referrer_.ClearToEmpty();
  if (GetArena() == nullptr && viewport_size_ != nullptr) {
    delete viewport_size_;
  }
  viewport_size_ = nullptr;
  if (GetArena() == nullptr && client_hints_ != nullptr) {
    delete client_hints_;
  }
  client_hints_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Browser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_agent = 1 [json_name = "userAgent"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_agent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.Browser.user_agent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.Size viewport_size = 2 [json_name = "viewportSize"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewport_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.ClientHints client_hints = 3 [json_name = "clientHints"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_hints(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string referrer = 4 [json_name = "referrer"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_referrer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.Browser.referrer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Browser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Browser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_agent = 1 [json_name = "userAgent"];
  if (this->user_agent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_agent().data(), static_cast<int>(this->_internal_user_agent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Browser.user_agent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_agent(), target);
  }

  // .common.Size viewport_size = 2 [json_name = "viewportSize"];
  if (this->has_viewport_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::viewport_size(this), target, stream);
  }

  // .common.ClientHints client_hints = 3 [json_name = "clientHints"];
  if (this->has_client_hints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::client_hints(this), target, stream);
  }

  // string referrer = 4 [json_name = "referrer"];
  if (this->referrer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_referrer().data(), static_cast<int>(this->_internal_referrer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.Browser.referrer");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_referrer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Browser)
  return target;
}

size_t Browser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Browser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_agent = 1 [json_name = "userAgent"];
  if (this->user_agent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_agent());
  }

  // string referrer = 4 [json_name = "referrer"];
  if (this->referrer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_referrer());
  }

  // .common.Size viewport_size = 2 [json_name = "viewportSize"];
  if (this->has_viewport_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *viewport_size_);
  }

  // .common.ClientHints client_hints = 3 [json_name = "clientHints"];
  if (this->has_client_hints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_hints_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Browser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.Browser)
  GOOGLE_DCHECK_NE(&from, this);
  const Browser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Browser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.Browser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.Browser)
    MergeFrom(*source);
  }
}

void Browser::MergeFrom(const Browser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Browser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_agent().size() > 0) {
    _internal_set_user_agent(from._internal_user_agent());
  }
  if (from.referrer().size() > 0) {
    _internal_set_referrer(from._internal_referrer());
  }
  if (from.has_viewport_size()) {
    _internal_mutable_viewport_size()->::common::Size::MergeFrom(from._internal_viewport_size());
  }
  if (from.has_client_hints()) {
    _internal_mutable_client_hints()->::common::ClientHints::MergeFrom(from._internal_client_hints());
  }
}

void Browser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.Browser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Browser::CopyFrom(const Browser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Browser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Browser::IsInitialized() const {
  return true;
}

void Browser::InternalSwap(Browser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_agent_.Swap(&other->user_agent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  referrer_.Swap(&other->referrer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Browser, client_hints_)
      + sizeof(Browser::client_hints_)
      - PROTOBUF_FIELD_OFFSET(Browser, viewport_size_)>(
          reinterpret_cast<char*>(&viewport_size_),
          reinterpret_cast<char*>(&other->viewport_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Browser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&accuracy_in_meters_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(accuracy_in_meters_));
  // @@protoc_insertion_point(copy_constructor:common.Location)
}

void Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accuracy_in_meters_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(accuracy_in_meters_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:common.Location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accuracy_in_meters_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(accuracy_in_meters_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 1 [json_name = "latitude"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2 [json_name = "longitude"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double accuracy_in_meters = 3 [json_name = "accuracyInMeters"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          accuracy_in_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1 [json_name = "latitude"];
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2 [json_name = "longitude"];
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // double accuracy_in_meters = 3 [json_name = "accuracyInMeters"];
  if (!(this->accuracy_in_meters() <= 0 && this->accuracy_in_meters() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_accuracy_in_meters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1 [json_name = "latitude"];
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 2 [json_name = "longitude"];
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double accuracy_in_meters = 3 [json_name = "accuracyInMeters"];
  if (!(this->accuracy_in_meters() <= 0 && this->accuracy_in_meters() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.accuracy_in_meters() <= 0 && from.accuracy_in_meters() >= 0)) {
    _internal_set_accuracy_in_meters(from._internal_accuracy_in_meters());
  }
}

void Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, accuracy_in_meters_)
      + sizeof(Location::accuracy_in_meters_)
      - PROTOBUF_FIELD_OFFSET(Location, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Timing::_Internal {
 public:
};

Timing::Timing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.Timing)
}
Timing::Timing(const Timing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_log_timestamp_ = from.client_log_timestamp_;
  // @@protoc_insertion_point(copy_constructor:common.Timing)
}

void Timing::SharedCtor() {
client_log_timestamp_ = PROTOBUF_ULONGLONG(0);
}

Timing::~Timing() {
  // @@protoc_insertion_point(destructor:common.Timing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Timing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Timing::ArenaDtor(void* object) {
  Timing* _this = reinterpret_cast< Timing* >(object);
  (void)_this;
}
void Timing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Timing::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Timing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_log_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 client_log_timestamp = 1 [json_name = "clientLogTimestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_log_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Timing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_log_timestamp = 1 [json_name = "clientLogTimestamp"];
  if (this->client_log_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_log_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Timing)
  return target;
}

size_t Timing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Timing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 client_log_timestamp = 1 [json_name = "clientLogTimestamp"];
  if (this->client_log_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_client_log_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.Timing)
  GOOGLE_DCHECK_NE(&from, this);
  const Timing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.Timing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.Timing)
    MergeFrom(*source);
  }
}

void Timing::MergeFrom(const Timing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Timing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_log_timestamp() != 0) {
    _internal_set_client_log_timestamp(from._internal_client_log_timestamp());
  }
}

void Timing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.Timing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timing::CopyFrom(const Timing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Timing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timing::IsInitialized() const {
  return true;
}

void Timing::InternalSwap(Timing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(client_log_timestamp_, other->client_log_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Timing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Properties::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& struct_(const Properties* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
Properties::_Internal::struct_(const Properties* msg) {
  return *msg->struct_field_.struct__;
}
void Properties::set_allocated_struct_(PROTOBUF_NAMESPACE_ID::Struct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_struct_field();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_)->GetArena();
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    struct_field_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:common.Properties.struct)
}
void Properties::clear_struct_() {
  if (_internal_has_struct_()) {
    if (GetArena() == nullptr) {
      delete struct_field_.struct__;
    }
    clear_has_struct_field();
  }
}
Properties::Properties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.Properties)
}
Properties::Properties(const Properties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_struct_field();
  switch (from.struct_field_case()) {
    case kStructBytes: {
      _internal_set_struct_bytes(from._internal_struct_bytes());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case STRUCT_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:common.Properties)
}

void Properties::SharedCtor() {
clear_has_struct_field();
}

Properties::~Properties() {
  // @@protoc_insertion_point(destructor:common.Properties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Properties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_struct_field()) {
    clear_struct_field();
  }
}

void Properties::ArenaDtor(void* object) {
  Properties* _this = reinterpret_cast< Properties* >(object);
  (void)_this;
}
void Properties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Properties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Properties::clear_struct_field() {
// @@protoc_insertion_point(one_of_clear_start:common.Properties)
  switch (struct_field_case()) {
    case kStructBytes: {
      struct_field_.struct_bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kStruct: {
      if (GetArena() == nullptr) {
        delete struct_field_.struct__;
      }
      break;
    }
    case STRUCT_FIELD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STRUCT_FIELD_NOT_SET;
}


void Properties::Clear() {
// @@protoc_insertion_point(message_clear_start:common.Properties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_struct_field();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Properties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes struct_bytes = 1 [json_name = "structBytes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_struct_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct struct = 2 [json_name = "struct"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Properties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Properties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes struct_bytes = 1 [json_name = "structBytes"];
  if (_internal_has_struct_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_struct_bytes(), target);
  }

  // .google.protobuf.Struct struct = 2 [json_name = "struct"];
  if (_internal_has_struct_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::struct_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.Properties)
  return target;
}

size_t Properties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.Properties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (struct_field_case()) {
    // bytes struct_bytes = 1 [json_name = "structBytes"];
    case kStructBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_struct_bytes());
      break;
    }
    // .google.protobuf.Struct struct = 2 [json_name = "struct"];
    case kStruct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *struct_field_.struct__);
      break;
    }
    case STRUCT_FIELD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Properties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.Properties)
  GOOGLE_DCHECK_NE(&from, this);
  const Properties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Properties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.Properties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.Properties)
    MergeFrom(*source);
  }
}

void Properties::MergeFrom(const Properties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.Properties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.struct_field_case()) {
    case kStructBytes: {
      _internal_set_struct_bytes(from._internal_struct_bytes());
      break;
    }
    case kStruct: {
      _internal_mutable_struct_()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_struct_());
      break;
    }
    case STRUCT_FIELD_NOT_SET: {
      break;
    }
  }
}

void Properties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.Properties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Properties::CopyFrom(const Properties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.Properties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Properties::IsInitialized() const {
  return true;
}

void Properties::InternalSwap(Properties* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(struct_field_, other->struct_field_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Properties::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::EntityPath* Arena::CreateMaybeMessage< ::common::EntityPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::EntityPath >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Money* Arena::CreateMaybeMessage< ::common::Money >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Money >(arena);
}
template<> PROTOBUF_NOINLINE ::common::UserInfo* Arena::CreateMaybeMessage< ::common::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientInfo* Arena::CreateMaybeMessage< ::common::ClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Locale* Arena::CreateMaybeMessage< ::common::Locale >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Locale >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Size* Arena::CreateMaybeMessage< ::common::Size >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Size >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Screen* Arena::CreateMaybeMessage< ::common::Screen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Screen >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Device* Arena::CreateMaybeMessage< ::common::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientHints* Arena::CreateMaybeMessage< ::common::ClientHints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientHints >(arena);
}
template<> PROTOBUF_NOINLINE ::common::ClientHintBrand* Arena::CreateMaybeMessage< ::common::ClientHintBrand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::ClientHintBrand >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Browser* Arena::CreateMaybeMessage< ::common::Browser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Browser >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Location* Arena::CreateMaybeMessage< ::common::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Timing* Arena::CreateMaybeMessage< ::common::Timing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Timing >(arena);
}
template<> PROTOBUF_NOINLINE ::common::Properties* Arena::CreateMaybeMessage< ::common::Properties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::Properties >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
