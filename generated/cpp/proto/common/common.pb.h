// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/common/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fcommon_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcommon_2fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcommon_2fcommon_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(int index);
namespace common {
class Browser;
struct BrowserDefaultTypeInternal;
extern BrowserDefaultTypeInternal _Browser_default_instance_;
class ClientHintBrand;
struct ClientHintBrandDefaultTypeInternal;
extern ClientHintBrandDefaultTypeInternal _ClientHintBrand_default_instance_;
class ClientHints;
struct ClientHintsDefaultTypeInternal;
extern ClientHintsDefaultTypeInternal _ClientHints_default_instance_;
class ClientInfo;
struct ClientInfoDefaultTypeInternal;
extern ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class EntityPath;
struct EntityPathDefaultTypeInternal;
extern EntityPathDefaultTypeInternal _EntityPath_default_instance_;
class Locale;
struct LocaleDefaultTypeInternal;
extern LocaleDefaultTypeInternal _Locale_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Money;
struct MoneyDefaultTypeInternal;
extern MoneyDefaultTypeInternal _Money_default_instance_;
class Properties;
struct PropertiesDefaultTypeInternal;
extern PropertiesDefaultTypeInternal _Properties_default_instance_;
class Screen;
struct ScreenDefaultTypeInternal;
extern ScreenDefaultTypeInternal _Screen_default_instance_;
class Size;
struct SizeDefaultTypeInternal;
extern SizeDefaultTypeInternal _Size_default_instance_;
class Timing;
struct TimingDefaultTypeInternal;
extern TimingDefaultTypeInternal _Timing_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::Browser* Arena::CreateMaybeMessage<::common::Browser>(Arena*);
template<> ::common::ClientHintBrand* Arena::CreateMaybeMessage<::common::ClientHintBrand>(Arena*);
template<> ::common::ClientHints* Arena::CreateMaybeMessage<::common::ClientHints>(Arena*);
template<> ::common::ClientInfo* Arena::CreateMaybeMessage<::common::ClientInfo>(Arena*);
template<> ::common::Device* Arena::CreateMaybeMessage<::common::Device>(Arena*);
template<> ::common::EntityPath* Arena::CreateMaybeMessage<::common::EntityPath>(Arena*);
template<> ::common::Locale* Arena::CreateMaybeMessage<::common::Locale>(Arena*);
template<> ::common::Location* Arena::CreateMaybeMessage<::common::Location>(Arena*);
template<> ::common::Money* Arena::CreateMaybeMessage<::common::Money>(Arena*);
template<> ::common::Properties* Arena::CreateMaybeMessage<::common::Properties>(Arena*);
template<> ::common::Screen* Arena::CreateMaybeMessage<::common::Screen>(Arena*);
template<> ::common::Size* Arena::CreateMaybeMessage<::common::Size>(Arena*);
template<> ::common::Timing* Arena::CreateMaybeMessage<::common::Timing>(Arena*);
template<> ::common::UserInfo* Arena::CreateMaybeMessage<::common::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

enum ClientInfo_ClientType : int {
  ClientInfo_ClientType_UNKNOWN_REQUEST_CLIENT = 0,
  ClientInfo_ClientType_PLATFORM_SERVER = 1,
  ClientInfo_ClientType_PLATFORM_CLIENT = 2,
  ClientInfo_ClientType_ClientInfo_ClientType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientInfo_ClientType_ClientInfo_ClientType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientInfo_ClientType_IsValid(int value);
constexpr ClientInfo_ClientType ClientInfo_ClientType_ClientType_MIN = ClientInfo_ClientType_UNKNOWN_REQUEST_CLIENT;
constexpr ClientInfo_ClientType ClientInfo_ClientType_ClientType_MAX = ClientInfo_ClientType_PLATFORM_CLIENT;
constexpr int ClientInfo_ClientType_ClientType_ARRAYSIZE = ClientInfo_ClientType_ClientType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientInfo_ClientType_descriptor();
template<typename T>
inline const std::string& ClientInfo_ClientType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientInfo_ClientType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientInfo_ClientType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientInfo_ClientType_descriptor(), enum_t_value);
}
inline bool ClientInfo_ClientType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientInfo_ClientType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientInfo_ClientType>(
    ClientInfo_ClientType_descriptor(), name, value);
}
enum ClientInfo_TrafficType : int {
  ClientInfo_TrafficType_UNKNOWN_TRAFFIC_TYPE = 0,
  ClientInfo_TrafficType_PRODUCTION = 1,
  ClientInfo_TrafficType_REPLAY = 2,
  ClientInfo_TrafficType_SHADOW = 4,
  ClientInfo_TrafficType_ClientInfo_TrafficType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientInfo_TrafficType_ClientInfo_TrafficType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientInfo_TrafficType_IsValid(int value);
constexpr ClientInfo_TrafficType ClientInfo_TrafficType_TrafficType_MIN = ClientInfo_TrafficType_UNKNOWN_TRAFFIC_TYPE;
constexpr ClientInfo_TrafficType ClientInfo_TrafficType_TrafficType_MAX = ClientInfo_TrafficType_SHADOW;
constexpr int ClientInfo_TrafficType_TrafficType_ARRAYSIZE = ClientInfo_TrafficType_TrafficType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientInfo_TrafficType_descriptor();
template<typename T>
inline const std::string& ClientInfo_TrafficType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientInfo_TrafficType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientInfo_TrafficType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientInfo_TrafficType_descriptor(), enum_t_value);
}
inline bool ClientInfo_TrafficType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientInfo_TrafficType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientInfo_TrafficType>(
    ClientInfo_TrafficType_descriptor(), name, value);
}
enum CurrencyCode : int {
  UNKNOWN_CURRENCY_CODE = 0,
  USD = 1,
  EUR = 2,
  JPY = 3,
  GBP = 4,
  AUD = 5,
  CAD = 6,
  CHF = 7,
  CNY = 8,
  HKD = 9,
  NZD = 10,
  SEK = 11,
  KRW = 12,
  SGD = 13,
  NOK = 14,
  MXN = 15,
  INR = 16,
  RUB = 17,
  ZAR = 18,
  TRY = 19,
  BRL = 20,
  CurrencyCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CurrencyCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CurrencyCode_IsValid(int value);
constexpr CurrencyCode CurrencyCode_MIN = UNKNOWN_CURRENCY_CODE;
constexpr CurrencyCode CurrencyCode_MAX = BRL;
constexpr int CurrencyCode_ARRAYSIZE = CurrencyCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CurrencyCode_descriptor();
template<typename T>
inline const std::string& CurrencyCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CurrencyCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CurrencyCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CurrencyCode_descriptor(), enum_t_value);
}
inline bool CurrencyCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CurrencyCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CurrencyCode>(
    CurrencyCode_descriptor(), name, value);
}
enum DeviceType : int {
  UNKNOWN_DEVICE_TYPE = 0,
  DESKTOP = 1,
  MOBILE = 2,
  TABLET = 3,
  DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceType_IsValid(int value);
constexpr DeviceType DeviceType_MIN = UNKNOWN_DEVICE_TYPE;
constexpr DeviceType DeviceType_MAX = TABLET;
constexpr int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_descriptor();
template<typename T>
inline const std::string& DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceType_descriptor(), enum_t_value);
}
inline bool DeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceType>(
    DeviceType_descriptor(), name, value);
}
// ===================================================================

class EntityPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.EntityPath) */ {
 public:
  inline EntityPath() : EntityPath(nullptr) {}
  virtual ~EntityPath();
  explicit constexpr EntityPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntityPath(const EntityPath& from);
  EntityPath(EntityPath&& from) noexcept
    : EntityPath() {
    *this = ::std::move(from);
  }

  inline EntityPath& operator=(const EntityPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityPath& operator=(EntityPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntityPath* internal_default_instance() {
    return reinterpret_cast<const EntityPath*>(
               &_EntityPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EntityPath& a, EntityPath& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityPath* New() const final {
    return CreateMaybeMessage<EntityPath>(nullptr);
  }

  EntityPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityPath& from);
  void MergeFrom(const EntityPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.EntityPath";
  }
  protected:
  explicit EntityPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformIdFieldNumber = 1,
    kCustomerIdFieldNumber = 2,
    kContentIdFieldNumber = 3,
    kAccountIdFieldNumber = 4,
    kCampaignIdFieldNumber = 5,
    kPromotionIdFieldNumber = 6,
  };
  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 customer_id = 2 [json_name = "customerId"];
  void clear_customer_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 customer_id() const;
  void set_customer_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_customer_id() const;
  void _internal_set_customer_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 content_id = 3 [json_name = "contentId"];
  void clear_content_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 content_id() const;
  void set_content_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_content_id() const;
  void _internal_set_content_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 account_id = 4 [json_name = "accountId"];
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 campaign_id = 5 [json_name = "campaignId"];
  void clear_campaign_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 campaign_id() const;
  void set_campaign_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_campaign_id() const;
  void _internal_set_campaign_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 promotion_id = 6 [json_name = "promotionId"];
  void clear_promotion_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 promotion_id() const;
  void set_promotion_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_promotion_id() const;
  void _internal_set_promotion_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:common.EntityPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 customer_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 content_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 campaign_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 promotion_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Money PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Money) */ {
 public:
  inline Money() : Money(nullptr) {}
  virtual ~Money();
  explicit constexpr Money(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Money(const Money& from);
  Money(Money&& from) noexcept
    : Money() {
    *this = ::std::move(from);
  }

  inline Money& operator=(const Money& from) {
    CopyFrom(from);
    return *this;
  }
  inline Money& operator=(Money&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Money& default_instance() {
    return *internal_default_instance();
  }
  static inline const Money* internal_default_instance() {
    return reinterpret_cast<const Money*>(
               &_Money_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Money& a, Money& b) {
    a.Swap(&b);
  }
  inline void Swap(Money* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Money* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Money* New() const final {
    return CreateMaybeMessage<Money>(nullptr);
  }

  Money* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Money>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Money& from);
  void MergeFrom(const Money& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Money* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Money";
  }
  protected:
  explicit Money(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountMicrosFieldNumber = 2,
    kCurrencyCodeFieldNumber = 1,
  };
  // int64 amount_micros = 2 [json_name = "amountMicros"];
  void clear_amount_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 amount_micros() const;
  void set_amount_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount_micros() const;
  void _internal_set_amount_micros(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .common.CurrencyCode currency_code = 1 [json_name = "currencyCode"];
  void clear_currency_code();
  ::common::CurrencyCode currency_code() const;
  void set_currency_code(::common::CurrencyCode value);
  private:
  ::common::CurrencyCode _internal_currency_code() const;
  void _internal_set_currency_code(::common::CurrencyCode value);
  public:

  // @@protoc_insertion_point(class_scope:common.Money)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_micros_;
  int currency_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class UserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  virtual ~UserInfo();
  explicit constexpr UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kLogUserIdFieldNumber = 2,
    kAnonUserIdFieldNumber = 5,
    kIsInternalUserFieldNumber = 3,
    kIgnoreUsageFieldNumber = 4,
    kHasUserIdFieldNumber = 6,
  };
  // string user_id = 1 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string log_user_id = 2 [json_name = "logUserId"];
  void clear_log_user_id();
  const std::string& log_user_id() const;
  void set_log_user_id(const std::string& value);
  void set_log_user_id(std::string&& value);
  void set_log_user_id(const char* value);
  void set_log_user_id(const char* value, size_t size);
  std::string* mutable_log_user_id();
  std::string* release_log_user_id();
  void set_allocated_log_user_id(std::string* log_user_id);
  private:
  const std::string& _internal_log_user_id() const;
  void _internal_set_log_user_id(const std::string& value);
  std::string* _internal_mutable_log_user_id();
  public:

  // string anon_user_id = 5 [json_name = "anonUserId"];
  void clear_anon_user_id();
  const std::string& anon_user_id() const;
  void set_anon_user_id(const std::string& value);
  void set_anon_user_id(std::string&& value);
  void set_anon_user_id(const char* value);
  void set_anon_user_id(const char* value, size_t size);
  std::string* mutable_anon_user_id();
  std::string* release_anon_user_id();
  void set_allocated_anon_user_id(std::string* anon_user_id);
  private:
  const std::string& _internal_anon_user_id() const;
  void _internal_set_anon_user_id(const std::string& value);
  std::string* _internal_mutable_anon_user_id();
  public:

  // bool is_internal_user = 3 [json_name = "isInternalUser"];
  void clear_is_internal_user();
  bool is_internal_user() const;
  void set_is_internal_user(bool value);
  private:
  bool _internal_is_internal_user() const;
  void _internal_set_is_internal_user(bool value);
  public:

  // bool ignore_usage = 4 [json_name = "ignoreUsage"];
  void clear_ignore_usage();
  bool ignore_usage() const;
  void set_ignore_usage(bool value);
  private:
  bool _internal_ignore_usage() const;
  void _internal_set_ignore_usage(bool value);
  public:

  // bool has_user_id = 6 [json_name = "hasUserId"];
  void clear_has_user_id();
  bool has_user_id() const;
  void set_has_user_id(bool value);
  private:
  bool _internal_has_user_id() const;
  void _internal_set_has_user_id(bool value);
  public:

  // @@protoc_insertion_point(class_scope:common.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anon_user_id_;
  bool is_internal_user_;
  bool ignore_usage_;
  bool has_user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ClientInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ClientInfo) */ {
 public:
  inline ClientInfo() : ClientInfo(nullptr) {}
  virtual ~ClientInfo();
  explicit constexpr ClientInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientInfo(const ClientInfo& from);
  ClientInfo(ClientInfo&& from) noexcept
    : ClientInfo() {
    *this = ::std::move(from);
  }

  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInfo& operator=(ClientInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientInfo* internal_default_instance() {
    return reinterpret_cast<const ClientInfo*>(
               &_ClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientInfo& a, ClientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientInfo* New() const final {
    return CreateMaybeMessage<ClientInfo>(nullptr);
  }

  ClientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientInfo& from);
  void MergeFrom(const ClientInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ClientInfo";
  }
  protected:
  explicit ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientInfo_ClientType ClientType;
  static constexpr ClientType UNKNOWN_REQUEST_CLIENT =
    ClientInfo_ClientType_UNKNOWN_REQUEST_CLIENT;
  static constexpr ClientType PLATFORM_SERVER =
    ClientInfo_ClientType_PLATFORM_SERVER;
  static constexpr ClientType PLATFORM_CLIENT =
    ClientInfo_ClientType_PLATFORM_CLIENT;
  static inline bool ClientType_IsValid(int value) {
    return ClientInfo_ClientType_IsValid(value);
  }
  static constexpr ClientType ClientType_MIN =
    ClientInfo_ClientType_ClientType_MIN;
  static constexpr ClientType ClientType_MAX =
    ClientInfo_ClientType_ClientType_MAX;
  static constexpr int ClientType_ARRAYSIZE =
    ClientInfo_ClientType_ClientType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ClientType_descriptor() {
    return ClientInfo_ClientType_descriptor();
  }
  template<typename T>
  static inline const std::string& ClientType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ClientType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ClientType_Name.");
    return ClientInfo_ClientType_Name(enum_t_value);
  }
  static inline bool ClientType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ClientType* value) {
    return ClientInfo_ClientType_Parse(name, value);
  }

  typedef ClientInfo_TrafficType TrafficType;
  static constexpr TrafficType UNKNOWN_TRAFFIC_TYPE =
    ClientInfo_TrafficType_UNKNOWN_TRAFFIC_TYPE;
  static constexpr TrafficType PRODUCTION =
    ClientInfo_TrafficType_PRODUCTION;
  static constexpr TrafficType REPLAY =
    ClientInfo_TrafficType_REPLAY;
  static constexpr TrafficType SHADOW =
    ClientInfo_TrafficType_SHADOW;
  static inline bool TrafficType_IsValid(int value) {
    return ClientInfo_TrafficType_IsValid(value);
  }
  static constexpr TrafficType TrafficType_MIN =
    ClientInfo_TrafficType_TrafficType_MIN;
  static constexpr TrafficType TrafficType_MAX =
    ClientInfo_TrafficType_TrafficType_MAX;
  static constexpr int TrafficType_ARRAYSIZE =
    ClientInfo_TrafficType_TrafficType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrafficType_descriptor() {
    return ClientInfo_TrafficType_descriptor();
  }
  template<typename T>
  static inline const std::string& TrafficType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrafficType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrafficType_Name.");
    return ClientInfo_TrafficType_Name(enum_t_value);
  }
  static inline bool TrafficType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TrafficType* value) {
    return ClientInfo_TrafficType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kClientTypeFieldNumber = 1,
    kTrafficTypeFieldNumber = 2,
  };
  // .common.ClientInfo.ClientType client_type = 1 [json_name = "clientType"];
  void clear_client_type();
  ::common::ClientInfo_ClientType client_type() const;
  void set_client_type(::common::ClientInfo_ClientType value);
  private:
  ::common::ClientInfo_ClientType _internal_client_type() const;
  void _internal_set_client_type(::common::ClientInfo_ClientType value);
  public:

  // .common.ClientInfo.TrafficType traffic_type = 2 [json_name = "trafficType"];
  void clear_traffic_type();
  ::common::ClientInfo_TrafficType traffic_type() const;
  void set_traffic_type(::common::ClientInfo_TrafficType value);
  private:
  ::common::ClientInfo_TrafficType _internal_traffic_type() const;
  void _internal_set_traffic_type(::common::ClientInfo_TrafficType value);
  public:

  // @@protoc_insertion_point(class_scope:common.ClientInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int client_type_;
  int traffic_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Locale PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Locale) */ {
 public:
  inline Locale() : Locale(nullptr) {}
  virtual ~Locale();
  explicit constexpr Locale(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Locale(const Locale& from);
  Locale(Locale&& from) noexcept
    : Locale() {
    *this = ::std::move(from);
  }

  inline Locale& operator=(const Locale& from) {
    CopyFrom(from);
    return *this;
  }
  inline Locale& operator=(Locale&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Locale& default_instance() {
    return *internal_default_instance();
  }
  static inline const Locale* internal_default_instance() {
    return reinterpret_cast<const Locale*>(
               &_Locale_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Locale& a, Locale& b) {
    a.Swap(&b);
  }
  inline void Swap(Locale* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Locale* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Locale* New() const final {
    return CreateMaybeMessage<Locale>(nullptr);
  }

  Locale* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Locale>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Locale& from);
  void MergeFrom(const Locale& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Locale* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Locale";
  }
  protected:
  explicit Locale(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodeFieldNumber = 1,
    kRegionCodeFieldNumber = 2,
  };
  // string language_code = 1 [json_name = "languageCode"];
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string region_code = 2 [json_name = "regionCode"];
  void clear_region_code();
  const std::string& region_code() const;
  void set_region_code(const std::string& value);
  void set_region_code(std::string&& value);
  void set_region_code(const char* value);
  void set_region_code(const char* value, size_t size);
  std::string* mutable_region_code();
  std::string* release_region_code();
  void set_allocated_region_code(std::string* region_code);
  private:
  const std::string& _internal_region_code() const;
  void _internal_set_region_code(const std::string& value);
  std::string* _internal_mutable_region_code();
  public:

  // @@protoc_insertion_point(class_scope:common.Locale)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Size PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Size) */ {
 public:
  inline Size() : Size(nullptr) {}
  virtual ~Size();
  explicit constexpr Size(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Size(const Size& from);
  Size(Size&& from) noexcept
    : Size() {
    *this = ::std::move(from);
  }

  inline Size& operator=(const Size& from) {
    CopyFrom(from);
    return *this;
  }
  inline Size& operator=(Size&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Size& default_instance() {
    return *internal_default_instance();
  }
  static inline const Size* internal_default_instance() {
    return reinterpret_cast<const Size*>(
               &_Size_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Size& a, Size& b) {
    a.Swap(&b);
  }
  inline void Swap(Size* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Size* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Size* New() const final {
    return CreateMaybeMessage<Size>(nullptr);
  }

  Size* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Size>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Size& from);
  void MergeFrom(const Size& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Size* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Size";
  }
  protected:
  explicit Size(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // uint32 width = 1 [json_name = "width"];
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 2 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:common.Size)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Screen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Screen) */ {
 public:
  inline Screen() : Screen(nullptr) {}
  virtual ~Screen();
  explicit constexpr Screen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Screen(const Screen& from);
  Screen(Screen&& from) noexcept
    : Screen() {
    *this = ::std::move(from);
  }

  inline Screen& operator=(const Screen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Screen& operator=(Screen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Screen& default_instance() {
    return *internal_default_instance();
  }
  static inline const Screen* internal_default_instance() {
    return reinterpret_cast<const Screen*>(
               &_Screen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Screen& a, Screen& b) {
    a.Swap(&b);
  }
  inline void Swap(Screen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Screen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Screen* New() const final {
    return CreateMaybeMessage<Screen>(nullptr);
  }

  Screen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Screen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Screen& from);
  void MergeFrom(const Screen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Screen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Screen";
  }
  protected:
  explicit Screen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // .common.Size size = 1 [json_name = "size"];
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::common::Size& size() const;
  ::common::Size* release_size();
  ::common::Size* mutable_size();
  void set_allocated_size(::common::Size* size);
  private:
  const ::common::Size& _internal_size() const;
  ::common::Size* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::common::Size* size);
  ::common::Size* unsafe_arena_release_size();

  // float scale = 2 [json_name = "scale"];
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:common.Screen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::Size* size_;
  float scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Device PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  virtual ~Device();
  explicit constexpr Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrandFieldNumber = 2,
    kManufacturerFieldNumber = 3,
    kIdentifierFieldNumber = 4,
    kOsVersionFieldNumber = 5,
    kIpAddressFieldNumber = 8,
    kPlatformAppVersionFieldNumber = 11,
    kPromotedMobileSdkVersionFieldNumber = 12,
    kLocaleFieldNumber = 6,
    kScreenFieldNumber = 7,
    kLocationFieldNumber = 9,
    kBrowserFieldNumber = 10,
    kDeviceTypeFieldNumber = 1,
  };
  // string brand = 2 [json_name = "brand"];
  void clear_brand();
  const std::string& brand() const;
  void set_brand(const std::string& value);
  void set_brand(std::string&& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  std::string* mutable_brand();
  std::string* release_brand();
  void set_allocated_brand(std::string* brand);
  private:
  const std::string& _internal_brand() const;
  void _internal_set_brand(const std::string& value);
  std::string* _internal_mutable_brand();
  public:

  // string manufacturer = 3 [json_name = "manufacturer"];
  void clear_manufacturer();
  const std::string& manufacturer() const;
  void set_manufacturer(const std::string& value);
  void set_manufacturer(std::string&& value);
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  std::string* mutable_manufacturer();
  std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // string identifier = 4 [json_name = "identifier"];
  void clear_identifier();
  const std::string& identifier() const;
  void set_identifier(const std::string& value);
  void set_identifier(std::string&& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // string os_version = 5 [json_name = "osVersion"];
  void clear_os_version();
  const std::string& os_version() const;
  void set_os_version(const std::string& value);
  void set_os_version(std::string&& value);
  void set_os_version(const char* value);
  void set_os_version(const char* value, size_t size);
  std::string* mutable_os_version();
  std::string* release_os_version();
  void set_allocated_os_version(std::string* os_version);
  private:
  const std::string& _internal_os_version() const;
  void _internal_set_os_version(const std::string& value);
  std::string* _internal_mutable_os_version();
  public:

  // string ip_address = 8 [json_name = "ipAddress"];
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // string platform_app_version = 11 [json_name = "platformAppVersion"];
  void clear_platform_app_version();
  const std::string& platform_app_version() const;
  void set_platform_app_version(const std::string& value);
  void set_platform_app_version(std::string&& value);
  void set_platform_app_version(const char* value);
  void set_platform_app_version(const char* value, size_t size);
  std::string* mutable_platform_app_version();
  std::string* release_platform_app_version();
  void set_allocated_platform_app_version(std::string* platform_app_version);
  private:
  const std::string& _internal_platform_app_version() const;
  void _internal_set_platform_app_version(const std::string& value);
  std::string* _internal_mutable_platform_app_version();
  public:

  // string promoted_mobile_sdk_version = 12 [json_name = "promotedMobileSdkVersion"];
  void clear_promoted_mobile_sdk_version();
  const std::string& promoted_mobile_sdk_version() const;
  void set_promoted_mobile_sdk_version(const std::string& value);
  void set_promoted_mobile_sdk_version(std::string&& value);
  void set_promoted_mobile_sdk_version(const char* value);
  void set_promoted_mobile_sdk_version(const char* value, size_t size);
  std::string* mutable_promoted_mobile_sdk_version();
  std::string* release_promoted_mobile_sdk_version();
  void set_allocated_promoted_mobile_sdk_version(std::string* promoted_mobile_sdk_version);
  private:
  const std::string& _internal_promoted_mobile_sdk_version() const;
  void _internal_set_promoted_mobile_sdk_version(const std::string& value);
  std::string* _internal_mutable_promoted_mobile_sdk_version();
  public:

  // .common.Locale locale = 6 [json_name = "locale", deprecated = true];
  PROTOBUF_DEPRECATED bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  PROTOBUF_DEPRECATED void clear_locale();
  PROTOBUF_DEPRECATED const ::common::Locale& locale() const;
  PROTOBUF_DEPRECATED ::common::Locale* release_locale();
  PROTOBUF_DEPRECATED ::common::Locale* mutable_locale();
  PROTOBUF_DEPRECATED void set_allocated_locale(::common::Locale* locale);
  private:
  const ::common::Locale& _internal_locale() const;
  ::common::Locale* _internal_mutable_locale();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_locale(
      ::common::Locale* locale);
  PROTOBUF_DEPRECATED ::common::Locale* unsafe_arena_release_locale();

  // .common.Screen screen = 7 [json_name = "screen"];
  bool has_screen() const;
  private:
  bool _internal_has_screen() const;
  public:
  void clear_screen();
  const ::common::Screen& screen() const;
  ::common::Screen* release_screen();
  ::common::Screen* mutable_screen();
  void set_allocated_screen(::common::Screen* screen);
  private:
  const ::common::Screen& _internal_screen() const;
  ::common::Screen* _internal_mutable_screen();
  public:
  void unsafe_arena_set_allocated_screen(
      ::common::Screen* screen);
  ::common::Screen* unsafe_arena_release_screen();

  // .common.Location location = 9 [json_name = "location"];
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::common::Location& location() const;
  ::common::Location* release_location();
  ::common::Location* mutable_location();
  void set_allocated_location(::common::Location* location);
  private:
  const ::common::Location& _internal_location() const;
  ::common::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::common::Location* location);
  ::common::Location* unsafe_arena_release_location();

  // .common.Browser browser = 10 [json_name = "browser"];
  bool has_browser() const;
  private:
  bool _internal_has_browser() const;
  public:
  void clear_browser();
  const ::common::Browser& browser() const;
  ::common::Browser* release_browser();
  ::common::Browser* mutable_browser();
  void set_allocated_browser(::common::Browser* browser);
  private:
  const ::common::Browser& _internal_browser() const;
  ::common::Browser* _internal_mutable_browser();
  public:
  void unsafe_arena_set_allocated_browser(
      ::common::Browser* browser);
  ::common::Browser* unsafe_arena_release_browser();

  // .common.DeviceType device_type = 1 [json_name = "deviceType"];
  void clear_device_type();
  ::common::DeviceType device_type() const;
  void set_device_type(::common::DeviceType value);
  private:
  ::common::DeviceType _internal_device_type() const;
  void _internal_set_device_type(::common::DeviceType value);
  public:

  // @@protoc_insertion_point(class_scope:common.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_app_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr promoted_mobile_sdk_version_;
  ::common::Locale* locale_;
  ::common::Screen* screen_;
  ::common::Location* location_;
  ::common::Browser* browser_;
  int device_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ClientHints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ClientHints) */ {
 public:
  inline ClientHints() : ClientHints(nullptr) {}
  virtual ~ClientHints();
  explicit constexpr ClientHints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientHints(const ClientHints& from);
  ClientHints(ClientHints&& from) noexcept
    : ClientHints() {
    *this = ::std::move(from);
  }

  inline ClientHints& operator=(const ClientHints& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientHints& operator=(ClientHints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientHints& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientHints* internal_default_instance() {
    return reinterpret_cast<const ClientHints*>(
               &_ClientHints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ClientHints& a, ClientHints& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientHints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientHints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientHints* New() const final {
    return CreateMaybeMessage<ClientHints>(nullptr);
  }

  ClientHints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientHints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientHints& from);
  void MergeFrom(const ClientHints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientHints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ClientHints";
  }
  protected:
  explicit ClientHints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrandFieldNumber = 2,
    kArchitectureFieldNumber = 3,
    kModelFieldNumber = 4,
    kPlatformFieldNumber = 5,
    kPlatformVersionFieldNumber = 6,
    kUaFullVersionFieldNumber = 7,
    kIsMobileFieldNumber = 1,
  };
  // repeated .common.ClientHintBrand brand = 2 [json_name = "brand"];
  int brand_size() const;
  private:
  int _internal_brand_size() const;
  public:
  void clear_brand();
  ::common::ClientHintBrand* mutable_brand(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ClientHintBrand >*
      mutable_brand();
  private:
  const ::common::ClientHintBrand& _internal_brand(int index) const;
  ::common::ClientHintBrand* _internal_add_brand();
  public:
  const ::common::ClientHintBrand& brand(int index) const;
  ::common::ClientHintBrand* add_brand();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ClientHintBrand >&
      brand() const;

  // string architecture = 3 [json_name = "architecture"];
  void clear_architecture();
  const std::string& architecture() const;
  void set_architecture(const std::string& value);
  void set_architecture(std::string&& value);
  void set_architecture(const char* value);
  void set_architecture(const char* value, size_t size);
  std::string* mutable_architecture();
  std::string* release_architecture();
  void set_allocated_architecture(std::string* architecture);
  private:
  const std::string& _internal_architecture() const;
  void _internal_set_architecture(const std::string& value);
  std::string* _internal_mutable_architecture();
  public:

  // string model = 4 [json_name = "model"];
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string platform = 5 [json_name = "platform"];
  void clear_platform();
  const std::string& platform() const;
  void set_platform(const std::string& value);
  void set_platform(std::string&& value);
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  std::string* mutable_platform();
  std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // string platform_version = 6 [json_name = "platformVersion"];
  void clear_platform_version();
  const std::string& platform_version() const;
  void set_platform_version(const std::string& value);
  void set_platform_version(std::string&& value);
  void set_platform_version(const char* value);
  void set_platform_version(const char* value, size_t size);
  std::string* mutable_platform_version();
  std::string* release_platform_version();
  void set_allocated_platform_version(std::string* platform_version);
  private:
  const std::string& _internal_platform_version() const;
  void _internal_set_platform_version(const std::string& value);
  std::string* _internal_mutable_platform_version();
  public:

  // string ua_full_version = 7 [json_name = "uaFullVersion"];
  void clear_ua_full_version();
  const std::string& ua_full_version() const;
  void set_ua_full_version(const std::string& value);
  void set_ua_full_version(std::string&& value);
  void set_ua_full_version(const char* value);
  void set_ua_full_version(const char* value, size_t size);
  std::string* mutable_ua_full_version();
  std::string* release_ua_full_version();
  void set_allocated_ua_full_version(std::string* ua_full_version);
  private:
  const std::string& _internal_ua_full_version() const;
  void _internal_set_ua_full_version(const std::string& value);
  std::string* _internal_mutable_ua_full_version();
  public:

  // bool is_mobile = 1 [json_name = "isMobile"];
  void clear_is_mobile();
  bool is_mobile() const;
  void set_is_mobile(bool value);
  private:
  bool _internal_is_mobile() const;
  void _internal_set_is_mobile(bool value);
  public:

  // @@protoc_insertion_point(class_scope:common.ClientHints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ClientHintBrand > brand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr architecture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ua_full_version_;
  bool is_mobile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ClientHintBrand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.ClientHintBrand) */ {
 public:
  inline ClientHintBrand() : ClientHintBrand(nullptr) {}
  virtual ~ClientHintBrand();
  explicit constexpr ClientHintBrand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientHintBrand(const ClientHintBrand& from);
  ClientHintBrand(ClientHintBrand&& from) noexcept
    : ClientHintBrand() {
    *this = ::std::move(from);
  }

  inline ClientHintBrand& operator=(const ClientHintBrand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientHintBrand& operator=(ClientHintBrand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientHintBrand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientHintBrand* internal_default_instance() {
    return reinterpret_cast<const ClientHintBrand*>(
               &_ClientHintBrand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClientHintBrand& a, ClientHintBrand& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientHintBrand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientHintBrand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientHintBrand* New() const final {
    return CreateMaybeMessage<ClientHintBrand>(nullptr);
  }

  ClientHintBrand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientHintBrand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientHintBrand& from);
  void MergeFrom(const ClientHintBrand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientHintBrand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.ClientHintBrand";
  }
  protected:
  explicit ClientHintBrand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrandFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string brand = 1 [json_name = "brand"];
  void clear_brand();
  const std::string& brand() const;
  void set_brand(const std::string& value);
  void set_brand(std::string&& value);
  void set_brand(const char* value);
  void set_brand(const char* value, size_t size);
  std::string* mutable_brand();
  std::string* release_brand();
  void set_allocated_brand(std::string* brand);
  private:
  const std::string& _internal_brand() const;
  void _internal_set_brand(const std::string& value);
  std::string* _internal_mutable_brand();
  public:

  // string version = 2 [json_name = "version"];
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:common.ClientHintBrand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Browser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Browser) */ {
 public:
  inline Browser() : Browser(nullptr) {}
  virtual ~Browser();
  explicit constexpr Browser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Browser(const Browser& from);
  Browser(Browser&& from) noexcept
    : Browser() {
    *this = ::std::move(from);
  }

  inline Browser& operator=(const Browser& from) {
    CopyFrom(from);
    return *this;
  }
  inline Browser& operator=(Browser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Browser& default_instance() {
    return *internal_default_instance();
  }
  static inline const Browser* internal_default_instance() {
    return reinterpret_cast<const Browser*>(
               &_Browser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Browser& a, Browser& b) {
    a.Swap(&b);
  }
  inline void Swap(Browser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Browser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Browser* New() const final {
    return CreateMaybeMessage<Browser>(nullptr);
  }

  Browser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Browser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Browser& from);
  void MergeFrom(const Browser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Browser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Browser";
  }
  protected:
  explicit Browser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAgentFieldNumber = 1,
    kReferrerFieldNumber = 4,
    kViewportSizeFieldNumber = 2,
    kClientHintsFieldNumber = 3,
  };
  // string user_agent = 1 [json_name = "userAgent"];
  void clear_user_agent();
  const std::string& user_agent() const;
  void set_user_agent(const std::string& value);
  void set_user_agent(std::string&& value);
  void set_user_agent(const char* value);
  void set_user_agent(const char* value, size_t size);
  std::string* mutable_user_agent();
  std::string* release_user_agent();
  void set_allocated_user_agent(std::string* user_agent);
  private:
  const std::string& _internal_user_agent() const;
  void _internal_set_user_agent(const std::string& value);
  std::string* _internal_mutable_user_agent();
  public:

  // string referrer = 4 [json_name = "referrer"];
  void clear_referrer();
  const std::string& referrer() const;
  void set_referrer(const std::string& value);
  void set_referrer(std::string&& value);
  void set_referrer(const char* value);
  void set_referrer(const char* value, size_t size);
  std::string* mutable_referrer();
  std::string* release_referrer();
  void set_allocated_referrer(std::string* referrer);
  private:
  const std::string& _internal_referrer() const;
  void _internal_set_referrer(const std::string& value);
  std::string* _internal_mutable_referrer();
  public:

  // .common.Size viewport_size = 2 [json_name = "viewportSize"];
  bool has_viewport_size() const;
  private:
  bool _internal_has_viewport_size() const;
  public:
  void clear_viewport_size();
  const ::common::Size& viewport_size() const;
  ::common::Size* release_viewport_size();
  ::common::Size* mutable_viewport_size();
  void set_allocated_viewport_size(::common::Size* viewport_size);
  private:
  const ::common::Size& _internal_viewport_size() const;
  ::common::Size* _internal_mutable_viewport_size();
  public:
  void unsafe_arena_set_allocated_viewport_size(
      ::common::Size* viewport_size);
  ::common::Size* unsafe_arena_release_viewport_size();

  // .common.ClientHints client_hints = 3 [json_name = "clientHints"];
  bool has_client_hints() const;
  private:
  bool _internal_has_client_hints() const;
  public:
  void clear_client_hints();
  const ::common::ClientHints& client_hints() const;
  ::common::ClientHints* release_client_hints();
  ::common::ClientHints* mutable_client_hints();
  void set_allocated_client_hints(::common::ClientHints* client_hints);
  private:
  const ::common::ClientHints& _internal_client_hints() const;
  ::common::ClientHints* _internal_mutable_client_hints();
  public:
  void unsafe_arena_set_allocated_client_hints(
      ::common::ClientHints* client_hints);
  ::common::ClientHints* unsafe_arena_release_client_hints();

  // @@protoc_insertion_point(class_scope:common.Browser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_agent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referrer_;
  ::common::Size* viewport_size_;
  ::common::ClientHints* client_hints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  virtual ~Location();
  explicit constexpr Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(nullptr);
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kAccuracyInMetersFieldNumber = 3,
  };
  // double latitude = 1 [json_name = "latitude"];
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2 [json_name = "longitude"];
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double accuracy_in_meters = 3 [json_name = "accuracyInMeters"];
  void clear_accuracy_in_meters();
  double accuracy_in_meters() const;
  void set_accuracy_in_meters(double value);
  private:
  double _internal_accuracy_in_meters() const;
  void _internal_set_accuracy_in_meters(double value);
  public:

  // @@protoc_insertion_point(class_scope:common.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_;
  double longitude_;
  double accuracy_in_meters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Timing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Timing) */ {
 public:
  inline Timing() : Timing(nullptr) {}
  virtual ~Timing();
  explicit constexpr Timing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timing(const Timing& from);
  Timing(Timing&& from) noexcept
    : Timing() {
    *this = ::std::move(from);
  }

  inline Timing& operator=(const Timing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timing& operator=(Timing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timing& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timing* internal_default_instance() {
    return reinterpret_cast<const Timing*>(
               &_Timing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Timing& a, Timing& b) {
    a.Swap(&b);
  }
  inline void Swap(Timing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timing* New() const final {
    return CreateMaybeMessage<Timing>(nullptr);
  }

  Timing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timing& from);
  void MergeFrom(const Timing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Timing";
  }
  protected:
  explicit Timing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientLogTimestampFieldNumber = 1,
  };
  // uint64 client_log_timestamp = 1 [json_name = "clientLogTimestamp"];
  void clear_client_log_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_log_timestamp() const;
  void set_client_log_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_log_timestamp() const;
  void _internal_set_client_log_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:common.Timing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_log_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Properties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.Properties) */ {
 public:
  inline Properties() : Properties(nullptr) {}
  virtual ~Properties();
  explicit constexpr Properties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Properties(const Properties& from);
  Properties(Properties&& from) noexcept
    : Properties() {
    *this = ::std::move(from);
  }

  inline Properties& operator=(const Properties& from) {
    CopyFrom(from);
    return *this;
  }
  inline Properties& operator=(Properties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Properties& default_instance() {
    return *internal_default_instance();
  }
  enum StructFieldCase {
    kStructBytes = 1,
    kStruct = 2,
    STRUCT_FIELD_NOT_SET = 0,
  };

  static inline const Properties* internal_default_instance() {
    return reinterpret_cast<const Properties*>(
               &_Properties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Properties& a, Properties& b) {
    a.Swap(&b);
  }
  inline void Swap(Properties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Properties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Properties* New() const final {
    return CreateMaybeMessage<Properties>(nullptr);
  }

  Properties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Properties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Properties& from);
  void MergeFrom(const Properties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Properties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.Properties";
  }
  protected:
  explicit Properties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStructBytesFieldNumber = 1,
    kStructFieldNumber = 2,
  };
  // bytes struct_bytes = 1 [json_name = "structBytes"];
  bool has_struct_bytes() const;
  private:
  bool _internal_has_struct_bytes() const;
  public:
  void clear_struct_bytes();
  const std::string& struct_bytes() const;
  void set_struct_bytes(const std::string& value);
  void set_struct_bytes(std::string&& value);
  void set_struct_bytes(const char* value);
  void set_struct_bytes(const void* value, size_t size);
  std::string* mutable_struct_bytes();
  std::string* release_struct_bytes();
  void set_allocated_struct_bytes(std::string* struct_bytes);
  private:
  const std::string& _internal_struct_bytes() const;
  void _internal_set_struct_bytes(const std::string& value);
  std::string* _internal_mutable_struct_bytes();
  public:

  // .google.protobuf.Struct struct = 2 [json_name = "struct"];
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;
  public:
  void clear_struct_();
  const PROTOBUF_NAMESPACE_ID::Struct& struct_() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_struct_();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_struct_();
  void set_allocated_struct_(PROTOBUF_NAMESPACE_ID::Struct* struct_);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_struct_() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_struct_();
  public:
  void unsafe_arena_set_allocated_struct_(
      PROTOBUF_NAMESPACE_ID::Struct* struct_);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_struct_();

  void clear_struct_field();
  StructFieldCase struct_field_case() const;
  // @@protoc_insertion_point(class_scope:common.Properties)
 private:
  class _Internal;
  void set_has_struct_bytes();
  void set_has_struct_();

  inline bool has_struct_field() const;
  inline void clear_has_struct_field();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StructFieldUnion {
    constexpr StructFieldUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr struct_bytes_;
    PROTOBUF_NAMESPACE_ID::Struct* struct__;
  } struct_field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fcommon_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntityPath

// uint64 platform_id = 1 [json_name = "platformId"];
inline void EntityPath::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityPath::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityPath::platform_id() const {
  // @@protoc_insertion_point(field_get:common.EntityPath.platform_id)
  return _internal_platform_id();
}
inline void EntityPath::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void EntityPath::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:common.EntityPath.platform_id)
}

// uint64 customer_id = 2 [json_name = "customerId"];
inline void EntityPath::clear_customer_id() {
  customer_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityPath::_internal_customer_id() const {
  return customer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityPath::customer_id() const {
  // @@protoc_insertion_point(field_get:common.EntityPath.customer_id)
  return _internal_customer_id();
}
inline void EntityPath::_internal_set_customer_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  customer_id_ = value;
}
inline void EntityPath::set_customer_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:common.EntityPath.customer_id)
}

// uint64 account_id = 4 [json_name = "accountId"];
inline void EntityPath::clear_account_id() {
  account_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityPath::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityPath::account_id() const {
  // @@protoc_insertion_point(field_get:common.EntityPath.account_id)
  return _internal_account_id();
}
inline void EntityPath::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_id_ = value;
}
inline void EntityPath::set_account_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:common.EntityPath.account_id)
}

// uint64 campaign_id = 5 [json_name = "campaignId"];
inline void EntityPath::clear_campaign_id() {
  campaign_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityPath::_internal_campaign_id() const {
  return campaign_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityPath::campaign_id() const {
  // @@protoc_insertion_point(field_get:common.EntityPath.campaign_id)
  return _internal_campaign_id();
}
inline void EntityPath::_internal_set_campaign_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  campaign_id_ = value;
}
inline void EntityPath::set_campaign_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_campaign_id(value);
  // @@protoc_insertion_point(field_set:common.EntityPath.campaign_id)
}

// uint64 promotion_id = 6 [json_name = "promotionId"];
inline void EntityPath::clear_promotion_id() {
  promotion_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityPath::_internal_promotion_id() const {
  return promotion_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityPath::promotion_id() const {
  // @@protoc_insertion_point(field_get:common.EntityPath.promotion_id)
  return _internal_promotion_id();
}
inline void EntityPath::_internal_set_promotion_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  promotion_id_ = value;
}
inline void EntityPath::set_promotion_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_promotion_id(value);
  // @@protoc_insertion_point(field_set:common.EntityPath.promotion_id)
}

// uint64 content_id = 3 [json_name = "contentId"];
inline void EntityPath::clear_content_id() {
  content_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityPath::_internal_content_id() const {
  return content_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EntityPath::content_id() const {
  // @@protoc_insertion_point(field_get:common.EntityPath.content_id)
  return _internal_content_id();
}
inline void EntityPath::_internal_set_content_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  content_id_ = value;
}
inline void EntityPath::set_content_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_content_id(value);
  // @@protoc_insertion_point(field_set:common.EntityPath.content_id)
}

// -------------------------------------------------------------------

// Money

// .common.CurrencyCode currency_code = 1 [json_name = "currencyCode"];
inline void Money::clear_currency_code() {
  currency_code_ = 0;
}
inline ::common::CurrencyCode Money::_internal_currency_code() const {
  return static_cast< ::common::CurrencyCode >(currency_code_);
}
inline ::common::CurrencyCode Money::currency_code() const {
  // @@protoc_insertion_point(field_get:common.Money.currency_code)
  return _internal_currency_code();
}
inline void Money::_internal_set_currency_code(::common::CurrencyCode value) {
  
  currency_code_ = value;
}
inline void Money::set_currency_code(::common::CurrencyCode value) {
  _internal_set_currency_code(value);
  // @@protoc_insertion_point(field_set:common.Money.currency_code)
}

// int64 amount_micros = 2 [json_name = "amountMicros"];
inline void Money::clear_amount_micros() {
  amount_micros_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Money::_internal_amount_micros() const {
  return amount_micros_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Money::amount_micros() const {
  // @@protoc_insertion_point(field_get:common.Money.amount_micros)
  return _internal_amount_micros();
}
inline void Money::_internal_set_amount_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_micros_ = value;
}
inline void Money::set_amount_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount_micros(value);
  // @@protoc_insertion_point(field_set:common.Money.amount_micros)
}

// -------------------------------------------------------------------

// UserInfo

// string user_id = 1 [json_name = "userId"];
inline void UserInfo::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:common.UserInfo.user_id)
  return _internal_user_id();
}
inline void UserInfo::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:common.UserInfo.user_id)
}
inline std::string* UserInfo::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:common.UserInfo.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UserInfo::_internal_user_id() const {
  return user_id_.Get();
}
inline void UserInfo::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserInfo::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.UserInfo.user_id)
}
inline void UserInfo::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.UserInfo.user_id)
}
inline void UserInfo::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.UserInfo.user_id)
}
inline std::string* UserInfo::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:common.UserInfo.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.UserInfo.user_id)
}

// string log_user_id = 2 [json_name = "logUserId"];
inline void UserInfo::clear_log_user_id() {
  log_user_id_.ClearToEmpty();
}
inline const std::string& UserInfo::log_user_id() const {
  // @@protoc_insertion_point(field_get:common.UserInfo.log_user_id)
  return _internal_log_user_id();
}
inline void UserInfo::set_log_user_id(const std::string& value) {
  _internal_set_log_user_id(value);
  // @@protoc_insertion_point(field_set:common.UserInfo.log_user_id)
}
inline std::string* UserInfo::mutable_log_user_id() {
  // @@protoc_insertion_point(field_mutable:common.UserInfo.log_user_id)
  return _internal_mutable_log_user_id();
}
inline const std::string& UserInfo::_internal_log_user_id() const {
  return log_user_id_.Get();
}
inline void UserInfo::_internal_set_log_user_id(const std::string& value) {
  
  log_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserInfo::set_log_user_id(std::string&& value) {
  
  log_user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.UserInfo.log_user_id)
}
inline void UserInfo::set_log_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.UserInfo.log_user_id)
}
inline void UserInfo::set_log_user_id(const char* value,
    size_t size) {
  
  log_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.UserInfo.log_user_id)
}
inline std::string* UserInfo::_internal_mutable_log_user_id() {
  
  return log_user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserInfo::release_log_user_id() {
  // @@protoc_insertion_point(field_release:common.UserInfo.log_user_id)
  return log_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_log_user_id(std::string* log_user_id) {
  if (log_user_id != nullptr) {
    
  } else {
    
  }
  log_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.UserInfo.log_user_id)
}

// bool is_internal_user = 3 [json_name = "isInternalUser"];
inline void UserInfo::clear_is_internal_user() {
  is_internal_user_ = false;
}
inline bool UserInfo::_internal_is_internal_user() const {
  return is_internal_user_;
}
inline bool UserInfo::is_internal_user() const {
  // @@protoc_insertion_point(field_get:common.UserInfo.is_internal_user)
  return _internal_is_internal_user();
}
inline void UserInfo::_internal_set_is_internal_user(bool value) {
  
  is_internal_user_ = value;
}
inline void UserInfo::set_is_internal_user(bool value) {
  _internal_set_is_internal_user(value);
  // @@protoc_insertion_point(field_set:common.UserInfo.is_internal_user)
}

// bool ignore_usage = 4 [json_name = "ignoreUsage"];
inline void UserInfo::clear_ignore_usage() {
  ignore_usage_ = false;
}
inline bool UserInfo::_internal_ignore_usage() const {
  return ignore_usage_;
}
inline bool UserInfo::ignore_usage() const {
  // @@protoc_insertion_point(field_get:common.UserInfo.ignore_usage)
  return _internal_ignore_usage();
}
inline void UserInfo::_internal_set_ignore_usage(bool value) {
  
  ignore_usage_ = value;
}
inline void UserInfo::set_ignore_usage(bool value) {
  _internal_set_ignore_usage(value);
  // @@protoc_insertion_point(field_set:common.UserInfo.ignore_usage)
}

// string anon_user_id = 5 [json_name = "anonUserId"];
inline void UserInfo::clear_anon_user_id() {
  anon_user_id_.ClearToEmpty();
}
inline const std::string& UserInfo::anon_user_id() const {
  // @@protoc_insertion_point(field_get:common.UserInfo.anon_user_id)
  return _internal_anon_user_id();
}
inline void UserInfo::set_anon_user_id(const std::string& value) {
  _internal_set_anon_user_id(value);
  // @@protoc_insertion_point(field_set:common.UserInfo.anon_user_id)
}
inline std::string* UserInfo::mutable_anon_user_id() {
  // @@protoc_insertion_point(field_mutable:common.UserInfo.anon_user_id)
  return _internal_mutable_anon_user_id();
}
inline const std::string& UserInfo::_internal_anon_user_id() const {
  return anon_user_id_.Get();
}
inline void UserInfo::_internal_set_anon_user_id(const std::string& value) {
  
  anon_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserInfo::set_anon_user_id(std::string&& value) {
  
  anon_user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.UserInfo.anon_user_id)
}
inline void UserInfo::set_anon_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  anon_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.UserInfo.anon_user_id)
}
inline void UserInfo::set_anon_user_id(const char* value,
    size_t size) {
  
  anon_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.UserInfo.anon_user_id)
}
inline std::string* UserInfo::_internal_mutable_anon_user_id() {
  
  return anon_user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserInfo::release_anon_user_id() {
  // @@protoc_insertion_point(field_release:common.UserInfo.anon_user_id)
  return anon_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_anon_user_id(std::string* anon_user_id) {
  if (anon_user_id != nullptr) {
    
  } else {
    
  }
  anon_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anon_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.UserInfo.anon_user_id)
}

// bool has_user_id = 6 [json_name = "hasUserId"];
inline void UserInfo::clear_has_user_id() {
  has_user_id_ = false;
}
inline bool UserInfo::_internal_has_user_id() const {
  return has_user_id_;
}
inline bool UserInfo::has_user_id() const {
  // @@protoc_insertion_point(field_get:common.UserInfo.has_user_id)
  return _internal_has_user_id();
}
inline void UserInfo::_internal_set_has_user_id(bool value) {
  
  has_user_id_ = value;
}
inline void UserInfo::set_has_user_id(bool value) {
  _internal_set_has_user_id(value);
  // @@protoc_insertion_point(field_set:common.UserInfo.has_user_id)
}

// -------------------------------------------------------------------

// ClientInfo

// .common.ClientInfo.ClientType client_type = 1 [json_name = "clientType"];
inline void ClientInfo::clear_client_type() {
  client_type_ = 0;
}
inline ::common::ClientInfo_ClientType ClientInfo::_internal_client_type() const {
  return static_cast< ::common::ClientInfo_ClientType >(client_type_);
}
inline ::common::ClientInfo_ClientType ClientInfo::client_type() const {
  // @@protoc_insertion_point(field_get:common.ClientInfo.client_type)
  return _internal_client_type();
}
inline void ClientInfo::_internal_set_client_type(::common::ClientInfo_ClientType value) {
  
  client_type_ = value;
}
inline void ClientInfo::set_client_type(::common::ClientInfo_ClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:common.ClientInfo.client_type)
}

// .common.ClientInfo.TrafficType traffic_type = 2 [json_name = "trafficType"];
inline void ClientInfo::clear_traffic_type() {
  traffic_type_ = 0;
}
inline ::common::ClientInfo_TrafficType ClientInfo::_internal_traffic_type() const {
  return static_cast< ::common::ClientInfo_TrafficType >(traffic_type_);
}
inline ::common::ClientInfo_TrafficType ClientInfo::traffic_type() const {
  // @@protoc_insertion_point(field_get:common.ClientInfo.traffic_type)
  return _internal_traffic_type();
}
inline void ClientInfo::_internal_set_traffic_type(::common::ClientInfo_TrafficType value) {
  
  traffic_type_ = value;
}
inline void ClientInfo::set_traffic_type(::common::ClientInfo_TrafficType value) {
  _internal_set_traffic_type(value);
  // @@protoc_insertion_point(field_set:common.ClientInfo.traffic_type)
}

// -------------------------------------------------------------------

// Locale

// string language_code = 1 [json_name = "languageCode"];
inline void Locale::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& Locale::language_code() const {
  // @@protoc_insertion_point(field_get:common.Locale.language_code)
  return _internal_language_code();
}
inline void Locale::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:common.Locale.language_code)
}
inline std::string* Locale::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:common.Locale.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& Locale::_internal_language_code() const {
  return language_code_.Get();
}
inline void Locale::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Locale::set_language_code(std::string&& value) {
  
  language_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.Locale.language_code)
}
inline void Locale::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.Locale.language_code)
}
inline void Locale::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.Locale.language_code)
}
inline std::string* Locale::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Locale::release_language_code() {
  // @@protoc_insertion_point(field_release:common.Locale.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Locale::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.Locale.language_code)
}

// string region_code = 2 [json_name = "regionCode"];
inline void Locale::clear_region_code() {
  region_code_.ClearToEmpty();
}
inline const std::string& Locale::region_code() const {
  // @@protoc_insertion_point(field_get:common.Locale.region_code)
  return _internal_region_code();
}
inline void Locale::set_region_code(const std::string& value) {
  _internal_set_region_code(value);
  // @@protoc_insertion_point(field_set:common.Locale.region_code)
}
inline std::string* Locale::mutable_region_code() {
  // @@protoc_insertion_point(field_mutable:common.Locale.region_code)
  return _internal_mutable_region_code();
}
inline const std::string& Locale::_internal_region_code() const {
  return region_code_.Get();
}
inline void Locale::_internal_set_region_code(const std::string& value) {
  
  region_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Locale::set_region_code(std::string&& value) {
  
  region_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.Locale.region_code)
}
inline void Locale::set_region_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.Locale.region_code)
}
inline void Locale::set_region_code(const char* value,
    size_t size) {
  
  region_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.Locale.region_code)
}
inline std::string* Locale::_internal_mutable_region_code() {
  
  return region_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Locale::release_region_code() {
  // @@protoc_insertion_point(field_release:common.Locale.region_code)
  return region_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Locale::set_allocated_region_code(std::string* region_code) {
  if (region_code != nullptr) {
    
  } else {
    
  }
  region_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.Locale.region_code)
}

// -------------------------------------------------------------------

// Size

// uint32 width = 1 [json_name = "width"];
inline void Size::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Size::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Size::width() const {
  // @@protoc_insertion_point(field_get:common.Size.width)
  return _internal_width();
}
inline void Size::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void Size::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:common.Size.width)
}

// uint32 height = 2 [json_name = "height"];
inline void Size::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Size::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Size::height() const {
  // @@protoc_insertion_point(field_get:common.Size.height)
  return _internal_height();
}
inline void Size::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void Size::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:common.Size.height)
}

// -------------------------------------------------------------------

// Screen

// .common.Size size = 1 [json_name = "size"];
inline bool Screen::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool Screen::has_size() const {
  return _internal_has_size();
}
inline void Screen::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
inline const ::common::Size& Screen::_internal_size() const {
  const ::common::Size* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Size&>(
      ::common::_Size_default_instance_);
}
inline const ::common::Size& Screen::size() const {
  // @@protoc_insertion_point(field_get:common.Screen.size)
  return _internal_size();
}
inline void Screen::unsafe_arena_set_allocated_size(
    ::common::Size* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Screen.size)
}
inline ::common::Size* Screen::release_size() {
  
  ::common::Size* temp = size_;
  size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Size* Screen::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:common.Screen.size)
  
  ::common::Size* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::common::Size* Screen::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Size>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::common::Size* Screen::mutable_size() {
  // @@protoc_insertion_point(field_mutable:common.Screen.size)
  return _internal_mutable_size();
}
inline void Screen::set_allocated_size(::common::Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:common.Screen.size)
}

// float scale = 2 [json_name = "scale"];
inline void Screen::clear_scale() {
  scale_ = 0;
}
inline float Screen::_internal_scale() const {
  return scale_;
}
inline float Screen::scale() const {
  // @@protoc_insertion_point(field_get:common.Screen.scale)
  return _internal_scale();
}
inline void Screen::_internal_set_scale(float value) {
  
  scale_ = value;
}
inline void Screen::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:common.Screen.scale)
}

// -------------------------------------------------------------------

// Device

// .common.DeviceType device_type = 1 [json_name = "deviceType"];
inline void Device::clear_device_type() {
  device_type_ = 0;
}
inline ::common::DeviceType Device::_internal_device_type() const {
  return static_cast< ::common::DeviceType >(device_type_);
}
inline ::common::DeviceType Device::device_type() const {
  // @@protoc_insertion_point(field_get:common.Device.device_type)
  return _internal_device_type();
}
inline void Device::_internal_set_device_type(::common::DeviceType value) {
  
  device_type_ = value;
}
inline void Device::set_device_type(::common::DeviceType value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:common.Device.device_type)
}

// string brand = 2 [json_name = "brand"];
inline void Device::clear_brand() {
  brand_.ClearToEmpty();
}
inline const std::string& Device::brand() const {
  // @@protoc_insertion_point(field_get:common.Device.brand)
  return _internal_brand();
}
inline void Device::set_brand(const std::string& value) {
  _internal_set_brand(value);
  // @@protoc_insertion_point(field_set:common.Device.brand)
}
inline std::string* Device::mutable_brand() {
  // @@protoc_insertion_point(field_mutable:common.Device.brand)
  return _internal_mutable_brand();
}
inline const std::string& Device::_internal_brand() const {
  return brand_.Get();
}
inline void Device::_internal_set_brand(const std::string& value) {
  
  brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_brand(std::string&& value) {
  
  brand_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.Device.brand)
}
inline void Device::set_brand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.Device.brand)
}
inline void Device::set_brand(const char* value,
    size_t size) {
  
  brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.Device.brand)
}
inline std::string* Device::_internal_mutable_brand() {
  
  return brand_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_brand() {
  // @@protoc_insertion_point(field_release:common.Device.brand)
  return brand_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    
  } else {
    
  }
  brand_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.Device.brand)
}

// string manufacturer = 3 [json_name = "manufacturer"];
inline void Device::clear_manufacturer() {
  manufacturer_.ClearToEmpty();
}
inline const std::string& Device::manufacturer() const {
  // @@protoc_insertion_point(field_get:common.Device.manufacturer)
  return _internal_manufacturer();
}
inline void Device::set_manufacturer(const std::string& value) {
  _internal_set_manufacturer(value);
  // @@protoc_insertion_point(field_set:common.Device.manufacturer)
}
inline std::string* Device::mutable_manufacturer() {
  // @@protoc_insertion_point(field_mutable:common.Device.manufacturer)
  return _internal_mutable_manufacturer();
}
inline const std::string& Device::_internal_manufacturer() const {
  return manufacturer_.Get();
}
inline void Device::_internal_set_manufacturer(const std::string& value) {
  
  manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_manufacturer(std::string&& value) {
  
  manufacturer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.Device.manufacturer)
}
inline void Device::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.Device.manufacturer)
}
inline void Device::set_manufacturer(const char* value,
    size_t size) {
  
  manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.Device.manufacturer)
}
inline std::string* Device::_internal_mutable_manufacturer() {
  
  return manufacturer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_manufacturer() {
  // @@protoc_insertion_point(field_release:common.Device.manufacturer)
  return manufacturer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    
  } else {
    
  }
  manufacturer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.Device.manufacturer)
}

// string identifier = 4 [json_name = "identifier"];
inline void Device::clear_identifier() {
  identifier_.ClearToEmpty();
}
inline const std::string& Device::identifier() const {
  // @@protoc_insertion_point(field_get:common.Device.identifier)
  return _internal_identifier();
}
inline void Device::set_identifier(const std::string& value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:common.Device.identifier)
}
inline std::string* Device::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:common.Device.identifier)
  return _internal_mutable_identifier();
}
inline const std::string& Device::_internal_identifier() const {
  return identifier_.Get();
}
inline void Device::_internal_set_identifier(const std::string& value) {
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_identifier(std::string&& value) {
  
  identifier_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.Device.identifier)
}
inline void Device::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.Device.identifier)
}
inline void Device::set_identifier(const char* value,
    size_t size) {
  
  identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.Device.identifier)
}
inline std::string* Device::_internal_mutable_identifier() {
  
  return identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_identifier() {
  // @@protoc_insertion_point(field_release:common.Device.identifier)
  return identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.Device.identifier)
}

// string os_version = 5 [json_name = "osVersion"];
inline void Device::clear_os_version() {
  os_version_.ClearToEmpty();
}
inline const std::string& Device::os_version() const {
  // @@protoc_insertion_point(field_get:common.Device.os_version)
  return _internal_os_version();
}
inline void Device::set_os_version(const std::string& value) {
  _internal_set_os_version(value);
  // @@protoc_insertion_point(field_set:common.Device.os_version)
}
inline std::string* Device::mutable_os_version() {
  // @@protoc_insertion_point(field_mutable:common.Device.os_version)
  return _internal_mutable_os_version();
}
inline const std::string& Device::_internal_os_version() const {
  return os_version_.Get();
}
inline void Device::_internal_set_os_version(const std::string& value) {
  
  os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_os_version(std::string&& value) {
  
  os_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.Device.os_version)
}
inline void Device::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.Device.os_version)
}
inline void Device::set_os_version(const char* value,
    size_t size) {
  
  os_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.Device.os_version)
}
inline std::string* Device::_internal_mutable_os_version() {
  
  return os_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_os_version() {
  // @@protoc_insertion_point(field_release:common.Device.os_version)
  return os_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_os_version(std::string* os_version) {
  if (os_version != nullptr) {
    
  } else {
    
  }
  os_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.Device.os_version)
}

// .common.Locale locale = 6 [json_name = "locale", deprecated = true];
inline bool Device::_internal_has_locale() const {
  return this != internal_default_instance() && locale_ != nullptr;
}
inline bool Device::has_locale() const {
  return _internal_has_locale();
}
inline void Device::clear_locale() {
  if (GetArena() == nullptr && locale_ != nullptr) {
    delete locale_;
  }
  locale_ = nullptr;
}
inline const ::common::Locale& Device::_internal_locale() const {
  const ::common::Locale* p = locale_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Locale&>(
      ::common::_Locale_default_instance_);
}
inline const ::common::Locale& Device::locale() const {
  // @@protoc_insertion_point(field_get:common.Device.locale)
  return _internal_locale();
}
inline void Device::unsafe_arena_set_allocated_locale(
    ::common::Locale* locale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locale_);
  }
  locale_ = locale;
  if (locale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Device.locale)
}
inline ::common::Locale* Device::release_locale() {
  
  ::common::Locale* temp = locale_;
  locale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Locale* Device::unsafe_arena_release_locale() {
  // @@protoc_insertion_point(field_release:common.Device.locale)
  
  ::common::Locale* temp = locale_;
  locale_ = nullptr;
  return temp;
}
inline ::common::Locale* Device::_internal_mutable_locale() {
  
  if (locale_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Locale>(GetArena());
    locale_ = p;
  }
  return locale_;
}
inline ::common::Locale* Device::mutable_locale() {
  // @@protoc_insertion_point(field_mutable:common.Device.locale)
  return _internal_mutable_locale();
}
inline void Device::set_allocated_locale(::common::Locale* locale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete locale_;
  }
  if (locale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(locale);
    if (message_arena != submessage_arena) {
      locale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locale, submessage_arena);
    }
    
  } else {
    
  }
  locale_ = locale;
  // @@protoc_insertion_point(field_set_allocated:common.Device.locale)
}

// .common.Screen screen = 7 [json_name = "screen"];
inline bool Device::_internal_has_screen() const {
  return this != internal_default_instance() && screen_ != nullptr;
}
inline bool Device::has_screen() const {
  return _internal_has_screen();
}
inline void Device::clear_screen() {
  if (GetArena() == nullptr && screen_ != nullptr) {
    delete screen_;
  }
  screen_ = nullptr;
}
inline const ::common::Screen& Device::_internal_screen() const {
  const ::common::Screen* p = screen_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Screen&>(
      ::common::_Screen_default_instance_);
}
inline const ::common::Screen& Device::screen() const {
  // @@protoc_insertion_point(field_get:common.Device.screen)
  return _internal_screen();
}
inline void Device::unsafe_arena_set_allocated_screen(
    ::common::Screen* screen) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(screen_);
  }
  screen_ = screen;
  if (screen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Device.screen)
}
inline ::common::Screen* Device::release_screen() {
  
  ::common::Screen* temp = screen_;
  screen_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Screen* Device::unsafe_arena_release_screen() {
  // @@protoc_insertion_point(field_release:common.Device.screen)
  
  ::common::Screen* temp = screen_;
  screen_ = nullptr;
  return temp;
}
inline ::common::Screen* Device::_internal_mutable_screen() {
  
  if (screen_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Screen>(GetArena());
    screen_ = p;
  }
  return screen_;
}
inline ::common::Screen* Device::mutable_screen() {
  // @@protoc_insertion_point(field_mutable:common.Device.screen)
  return _internal_mutable_screen();
}
inline void Device::set_allocated_screen(::common::Screen* screen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete screen_;
  }
  if (screen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(screen);
    if (message_arena != submessage_arena) {
      screen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen, submessage_arena);
    }
    
  } else {
    
  }
  screen_ = screen;
  // @@protoc_insertion_point(field_set_allocated:common.Device.screen)
}

// string ip_address = 8 [json_name = "ipAddress"];
inline void Device::clear_ip_address() {
  ip_address_.ClearToEmpty();
}
inline const std::string& Device::ip_address() const {
  // @@protoc_insertion_point(field_get:common.Device.ip_address)
  return _internal_ip_address();
}
inline void Device::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:common.Device.ip_address)
}
inline std::string* Device::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:common.Device.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& Device::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void Device::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_ip_address(std::string&& value) {
  
  ip_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.Device.ip_address)
}
inline void Device::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.Device.ip_address)
}
inline void Device::set_ip_address(const char* value,
    size_t size) {
  
  ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.Device.ip_address)
}
inline std::string* Device::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_ip_address() {
  // @@protoc_insertion_point(field_release:common.Device.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.Device.ip_address)
}

// .common.Location location = 9 [json_name = "location"];
inline bool Device::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Device::has_location() const {
  return _internal_has_location();
}
inline void Device::clear_location() {
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::common::Location& Device::_internal_location() const {
  const ::common::Location* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Location&>(
      ::common::_Location_default_instance_);
}
inline const ::common::Location& Device::location() const {
  // @@protoc_insertion_point(field_get:common.Device.location)
  return _internal_location();
}
inline void Device::unsafe_arena_set_allocated_location(
    ::common::Location* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Device.location)
}
inline ::common::Location* Device::release_location() {
  
  ::common::Location* temp = location_;
  location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Location* Device::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:common.Device.location)
  
  ::common::Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::common::Location* Device::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Location>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::common::Location* Device::mutable_location() {
  // @@protoc_insertion_point(field_mutable:common.Device.location)
  return _internal_mutable_location();
}
inline void Device::set_allocated_location(::common::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:common.Device.location)
}

// .common.Browser browser = 10 [json_name = "browser"];
inline bool Device::_internal_has_browser() const {
  return this != internal_default_instance() && browser_ != nullptr;
}
inline bool Device::has_browser() const {
  return _internal_has_browser();
}
inline void Device::clear_browser() {
  if (GetArena() == nullptr && browser_ != nullptr) {
    delete browser_;
  }
  browser_ = nullptr;
}
inline const ::common::Browser& Device::_internal_browser() const {
  const ::common::Browser* p = browser_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Browser&>(
      ::common::_Browser_default_instance_);
}
inline const ::common::Browser& Device::browser() const {
  // @@protoc_insertion_point(field_get:common.Device.browser)
  return _internal_browser();
}
inline void Device::unsafe_arena_set_allocated_browser(
    ::common::Browser* browser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(browser_);
  }
  browser_ = browser;
  if (browser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Device.browser)
}
inline ::common::Browser* Device::release_browser() {
  
  ::common::Browser* temp = browser_;
  browser_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Browser* Device::unsafe_arena_release_browser() {
  // @@protoc_insertion_point(field_release:common.Device.browser)
  
  ::common::Browser* temp = browser_;
  browser_ = nullptr;
  return temp;
}
inline ::common::Browser* Device::_internal_mutable_browser() {
  
  if (browser_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Browser>(GetArena());
    browser_ = p;
  }
  return browser_;
}
inline ::common::Browser* Device::mutable_browser() {
  // @@protoc_insertion_point(field_mutable:common.Device.browser)
  return _internal_mutable_browser();
}
inline void Device::set_allocated_browser(::common::Browser* browser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete browser_;
  }
  if (browser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(browser);
    if (message_arena != submessage_arena) {
      browser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, browser, submessage_arena);
    }
    
  } else {
    
  }
  browser_ = browser;
  // @@protoc_insertion_point(field_set_allocated:common.Device.browser)
}

// string platform_app_version = 11 [json_name = "platformAppVersion"];
inline void Device::clear_platform_app_version() {
  platform_app_version_.ClearToEmpty();
}
inline const std::string& Device::platform_app_version() const {
  // @@protoc_insertion_point(field_get:common.Device.platform_app_version)
  return _internal_platform_app_version();
}
inline void Device::set_platform_app_version(const std::string& value) {
  _internal_set_platform_app_version(value);
  // @@protoc_insertion_point(field_set:common.Device.platform_app_version)
}
inline std::string* Device::mutable_platform_app_version() {
  // @@protoc_insertion_point(field_mutable:common.Device.platform_app_version)
  return _internal_mutable_platform_app_version();
}
inline const std::string& Device::_internal_platform_app_version() const {
  return platform_app_version_.Get();
}
inline void Device::_internal_set_platform_app_version(const std::string& value) {
  
  platform_app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_platform_app_version(std::string&& value) {
  
  platform_app_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.Device.platform_app_version)
}
inline void Device::set_platform_app_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.Device.platform_app_version)
}
inline void Device::set_platform_app_version(const char* value,
    size_t size) {
  
  platform_app_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.Device.platform_app_version)
}
inline std::string* Device::_internal_mutable_platform_app_version() {
  
  return platform_app_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_platform_app_version() {
  // @@protoc_insertion_point(field_release:common.Device.platform_app_version)
  return platform_app_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_platform_app_version(std::string* platform_app_version) {
  if (platform_app_version != nullptr) {
    
  } else {
    
  }
  platform_app_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform_app_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.Device.platform_app_version)
}

// string promoted_mobile_sdk_version = 12 [json_name = "promotedMobileSdkVersion"];
inline void Device::clear_promoted_mobile_sdk_version() {
  promoted_mobile_sdk_version_.ClearToEmpty();
}
inline const std::string& Device::promoted_mobile_sdk_version() const {
  // @@protoc_insertion_point(field_get:common.Device.promoted_mobile_sdk_version)
  return _internal_promoted_mobile_sdk_version();
}
inline void Device::set_promoted_mobile_sdk_version(const std::string& value) {
  _internal_set_promoted_mobile_sdk_version(value);
  // @@protoc_insertion_point(field_set:common.Device.promoted_mobile_sdk_version)
}
inline std::string* Device::mutable_promoted_mobile_sdk_version() {
  // @@protoc_insertion_point(field_mutable:common.Device.promoted_mobile_sdk_version)
  return _internal_mutable_promoted_mobile_sdk_version();
}
inline const std::string& Device::_internal_promoted_mobile_sdk_version() const {
  return promoted_mobile_sdk_version_.Get();
}
inline void Device::_internal_set_promoted_mobile_sdk_version(const std::string& value) {
  
  promoted_mobile_sdk_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_promoted_mobile_sdk_version(std::string&& value) {
  
  promoted_mobile_sdk_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.Device.promoted_mobile_sdk_version)
}
inline void Device::set_promoted_mobile_sdk_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  promoted_mobile_sdk_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.Device.promoted_mobile_sdk_version)
}
inline void Device::set_promoted_mobile_sdk_version(const char* value,
    size_t size) {
  
  promoted_mobile_sdk_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.Device.promoted_mobile_sdk_version)
}
inline std::string* Device::_internal_mutable_promoted_mobile_sdk_version() {
  
  return promoted_mobile_sdk_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_promoted_mobile_sdk_version() {
  // @@protoc_insertion_point(field_release:common.Device.promoted_mobile_sdk_version)
  return promoted_mobile_sdk_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_promoted_mobile_sdk_version(std::string* promoted_mobile_sdk_version) {
  if (promoted_mobile_sdk_version != nullptr) {
    
  } else {
    
  }
  promoted_mobile_sdk_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), promoted_mobile_sdk_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.Device.promoted_mobile_sdk_version)
}

// -------------------------------------------------------------------

// ClientHints

// bool is_mobile = 1 [json_name = "isMobile"];
inline void ClientHints::clear_is_mobile() {
  is_mobile_ = false;
}
inline bool ClientHints::_internal_is_mobile() const {
  return is_mobile_;
}
inline bool ClientHints::is_mobile() const {
  // @@protoc_insertion_point(field_get:common.ClientHints.is_mobile)
  return _internal_is_mobile();
}
inline void ClientHints::_internal_set_is_mobile(bool value) {
  
  is_mobile_ = value;
}
inline void ClientHints::set_is_mobile(bool value) {
  _internal_set_is_mobile(value);
  // @@protoc_insertion_point(field_set:common.ClientHints.is_mobile)
}

// repeated .common.ClientHintBrand brand = 2 [json_name = "brand"];
inline int ClientHints::_internal_brand_size() const {
  return brand_.size();
}
inline int ClientHints::brand_size() const {
  return _internal_brand_size();
}
inline void ClientHints::clear_brand() {
  brand_.Clear();
}
inline ::common::ClientHintBrand* ClientHints::mutable_brand(int index) {
  // @@protoc_insertion_point(field_mutable:common.ClientHints.brand)
  return brand_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ClientHintBrand >*
ClientHints::mutable_brand() {
  // @@protoc_insertion_point(field_mutable_list:common.ClientHints.brand)
  return &brand_;
}
inline const ::common::ClientHintBrand& ClientHints::_internal_brand(int index) const {
  return brand_.Get(index);
}
inline const ::common::ClientHintBrand& ClientHints::brand(int index) const {
  // @@protoc_insertion_point(field_get:common.ClientHints.brand)
  return _internal_brand(index);
}
inline ::common::ClientHintBrand* ClientHints::_internal_add_brand() {
  return brand_.Add();
}
inline ::common::ClientHintBrand* ClientHints::add_brand() {
  // @@protoc_insertion_point(field_add:common.ClientHints.brand)
  return _internal_add_brand();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::ClientHintBrand >&
ClientHints::brand() const {
  // @@protoc_insertion_point(field_list:common.ClientHints.brand)
  return brand_;
}

// string architecture = 3 [json_name = "architecture"];
inline void ClientHints::clear_architecture() {
  architecture_.ClearToEmpty();
}
inline const std::string& ClientHints::architecture() const {
  // @@protoc_insertion_point(field_get:common.ClientHints.architecture)
  return _internal_architecture();
}
inline void ClientHints::set_architecture(const std::string& value) {
  _internal_set_architecture(value);
  // @@protoc_insertion_point(field_set:common.ClientHints.architecture)
}
inline std::string* ClientHints::mutable_architecture() {
  // @@protoc_insertion_point(field_mutable:common.ClientHints.architecture)
  return _internal_mutable_architecture();
}
inline const std::string& ClientHints::_internal_architecture() const {
  return architecture_.Get();
}
inline void ClientHints::_internal_set_architecture(const std::string& value) {
  
  architecture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientHints::set_architecture(std::string&& value) {
  
  architecture_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.ClientHints.architecture)
}
inline void ClientHints::set_architecture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  architecture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.ClientHints.architecture)
}
inline void ClientHints::set_architecture(const char* value,
    size_t size) {
  
  architecture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.ClientHints.architecture)
}
inline std::string* ClientHints::_internal_mutable_architecture() {
  
  return architecture_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientHints::release_architecture() {
  // @@protoc_insertion_point(field_release:common.ClientHints.architecture)
  return architecture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientHints::set_allocated_architecture(std::string* architecture) {
  if (architecture != nullptr) {
    
  } else {
    
  }
  architecture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), architecture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.ClientHints.architecture)
}

// string model = 4 [json_name = "model"];
inline void ClientHints::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& ClientHints::model() const {
  // @@protoc_insertion_point(field_get:common.ClientHints.model)
  return _internal_model();
}
inline void ClientHints::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:common.ClientHints.model)
}
inline std::string* ClientHints::mutable_model() {
  // @@protoc_insertion_point(field_mutable:common.ClientHints.model)
  return _internal_mutable_model();
}
inline const std::string& ClientHints::_internal_model() const {
  return model_.Get();
}
inline void ClientHints::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientHints::set_model(std::string&& value) {
  
  model_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.ClientHints.model)
}
inline void ClientHints::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.ClientHints.model)
}
inline void ClientHints::set_model(const char* value,
    size_t size) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.ClientHints.model)
}
inline std::string* ClientHints::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientHints::release_model() {
  // @@protoc_insertion_point(field_release:common.ClientHints.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientHints::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.ClientHints.model)
}

// string platform = 5 [json_name = "platform"];
inline void ClientHints::clear_platform() {
  platform_.ClearToEmpty();
}
inline const std::string& ClientHints::platform() const {
  // @@protoc_insertion_point(field_get:common.ClientHints.platform)
  return _internal_platform();
}
inline void ClientHints::set_platform(const std::string& value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:common.ClientHints.platform)
}
inline std::string* ClientHints::mutable_platform() {
  // @@protoc_insertion_point(field_mutable:common.ClientHints.platform)
  return _internal_mutable_platform();
}
inline const std::string& ClientHints::_internal_platform() const {
  return platform_.Get();
}
inline void ClientHints::_internal_set_platform(const std::string& value) {
  
  platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientHints::set_platform(std::string&& value) {
  
  platform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.ClientHints.platform)
}
inline void ClientHints::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.ClientHints.platform)
}
inline void ClientHints::set_platform(const char* value,
    size_t size) {
  
  platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.ClientHints.platform)
}
inline std::string* ClientHints::_internal_mutable_platform() {
  
  return platform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientHints::release_platform() {
  // @@protoc_insertion_point(field_release:common.ClientHints.platform)
  return platform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientHints::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.ClientHints.platform)
}

// string platform_version = 6 [json_name = "platformVersion"];
inline void ClientHints::clear_platform_version() {
  platform_version_.ClearToEmpty();
}
inline const std::string& ClientHints::platform_version() const {
  // @@protoc_insertion_point(field_get:common.ClientHints.platform_version)
  return _internal_platform_version();
}
inline void ClientHints::set_platform_version(const std::string& value) {
  _internal_set_platform_version(value);
  // @@protoc_insertion_point(field_set:common.ClientHints.platform_version)
}
inline std::string* ClientHints::mutable_platform_version() {
  // @@protoc_insertion_point(field_mutable:common.ClientHints.platform_version)
  return _internal_mutable_platform_version();
}
inline const std::string& ClientHints::_internal_platform_version() const {
  return platform_version_.Get();
}
inline void ClientHints::_internal_set_platform_version(const std::string& value) {
  
  platform_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientHints::set_platform_version(std::string&& value) {
  
  platform_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.ClientHints.platform_version)
}
inline void ClientHints::set_platform_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.ClientHints.platform_version)
}
inline void ClientHints::set_platform_version(const char* value,
    size_t size) {
  
  platform_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.ClientHints.platform_version)
}
inline std::string* ClientHints::_internal_mutable_platform_version() {
  
  return platform_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientHints::release_platform_version() {
  // @@protoc_insertion_point(field_release:common.ClientHints.platform_version)
  return platform_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientHints::set_allocated_platform_version(std::string* platform_version) {
  if (platform_version != nullptr) {
    
  } else {
    
  }
  platform_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.ClientHints.platform_version)
}

// string ua_full_version = 7 [json_name = "uaFullVersion"];
inline void ClientHints::clear_ua_full_version() {
  ua_full_version_.ClearToEmpty();
}
inline const std::string& ClientHints::ua_full_version() const {
  // @@protoc_insertion_point(field_get:common.ClientHints.ua_full_version)
  return _internal_ua_full_version();
}
inline void ClientHints::set_ua_full_version(const std::string& value) {
  _internal_set_ua_full_version(value);
  // @@protoc_insertion_point(field_set:common.ClientHints.ua_full_version)
}
inline std::string* ClientHints::mutable_ua_full_version() {
  // @@protoc_insertion_point(field_mutable:common.ClientHints.ua_full_version)
  return _internal_mutable_ua_full_version();
}
inline const std::string& ClientHints::_internal_ua_full_version() const {
  return ua_full_version_.Get();
}
inline void ClientHints::_internal_set_ua_full_version(const std::string& value) {
  
  ua_full_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientHints::set_ua_full_version(std::string&& value) {
  
  ua_full_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.ClientHints.ua_full_version)
}
inline void ClientHints::set_ua_full_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ua_full_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.ClientHints.ua_full_version)
}
inline void ClientHints::set_ua_full_version(const char* value,
    size_t size) {
  
  ua_full_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.ClientHints.ua_full_version)
}
inline std::string* ClientHints::_internal_mutable_ua_full_version() {
  
  return ua_full_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientHints::release_ua_full_version() {
  // @@protoc_insertion_point(field_release:common.ClientHints.ua_full_version)
  return ua_full_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientHints::set_allocated_ua_full_version(std::string* ua_full_version) {
  if (ua_full_version != nullptr) {
    
  } else {
    
  }
  ua_full_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ua_full_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.ClientHints.ua_full_version)
}

// -------------------------------------------------------------------

// ClientHintBrand

// string brand = 1 [json_name = "brand"];
inline void ClientHintBrand::clear_brand() {
  brand_.ClearToEmpty();
}
inline const std::string& ClientHintBrand::brand() const {
  // @@protoc_insertion_point(field_get:common.ClientHintBrand.brand)
  return _internal_brand();
}
inline void ClientHintBrand::set_brand(const std::string& value) {
  _internal_set_brand(value);
  // @@protoc_insertion_point(field_set:common.ClientHintBrand.brand)
}
inline std::string* ClientHintBrand::mutable_brand() {
  // @@protoc_insertion_point(field_mutable:common.ClientHintBrand.brand)
  return _internal_mutable_brand();
}
inline const std::string& ClientHintBrand::_internal_brand() const {
  return brand_.Get();
}
inline void ClientHintBrand::_internal_set_brand(const std::string& value) {
  
  brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientHintBrand::set_brand(std::string&& value) {
  
  brand_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.ClientHintBrand.brand)
}
inline void ClientHintBrand::set_brand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.ClientHintBrand.brand)
}
inline void ClientHintBrand::set_brand(const char* value,
    size_t size) {
  
  brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.ClientHintBrand.brand)
}
inline std::string* ClientHintBrand::_internal_mutable_brand() {
  
  return brand_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientHintBrand::release_brand() {
  // @@protoc_insertion_point(field_release:common.ClientHintBrand.brand)
  return brand_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientHintBrand::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    
  } else {
    
  }
  brand_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.ClientHintBrand.brand)
}

// string version = 2 [json_name = "version"];
inline void ClientHintBrand::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& ClientHintBrand::version() const {
  // @@protoc_insertion_point(field_get:common.ClientHintBrand.version)
  return _internal_version();
}
inline void ClientHintBrand::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:common.ClientHintBrand.version)
}
inline std::string* ClientHintBrand::mutable_version() {
  // @@protoc_insertion_point(field_mutable:common.ClientHintBrand.version)
  return _internal_mutable_version();
}
inline const std::string& ClientHintBrand::_internal_version() const {
  return version_.Get();
}
inline void ClientHintBrand::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientHintBrand::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.ClientHintBrand.version)
}
inline void ClientHintBrand::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.ClientHintBrand.version)
}
inline void ClientHintBrand::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.ClientHintBrand.version)
}
inline std::string* ClientHintBrand::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientHintBrand::release_version() {
  // @@protoc_insertion_point(field_release:common.ClientHintBrand.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientHintBrand::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.ClientHintBrand.version)
}

// -------------------------------------------------------------------

// Browser

// string user_agent = 1 [json_name = "userAgent"];
inline void Browser::clear_user_agent() {
  user_agent_.ClearToEmpty();
}
inline const std::string& Browser::user_agent() const {
  // @@protoc_insertion_point(field_get:common.Browser.user_agent)
  return _internal_user_agent();
}
inline void Browser::set_user_agent(const std::string& value) {
  _internal_set_user_agent(value);
  // @@protoc_insertion_point(field_set:common.Browser.user_agent)
}
inline std::string* Browser::mutable_user_agent() {
  // @@protoc_insertion_point(field_mutable:common.Browser.user_agent)
  return _internal_mutable_user_agent();
}
inline const std::string& Browser::_internal_user_agent() const {
  return user_agent_.Get();
}
inline void Browser::_internal_set_user_agent(const std::string& value) {
  
  user_agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Browser::set_user_agent(std::string&& value) {
  
  user_agent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.Browser.user_agent)
}
inline void Browser::set_user_agent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.Browser.user_agent)
}
inline void Browser::set_user_agent(const char* value,
    size_t size) {
  
  user_agent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.Browser.user_agent)
}
inline std::string* Browser::_internal_mutable_user_agent() {
  
  return user_agent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Browser::release_user_agent() {
  // @@protoc_insertion_point(field_release:common.Browser.user_agent)
  return user_agent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Browser::set_allocated_user_agent(std::string* user_agent) {
  if (user_agent != nullptr) {
    
  } else {
    
  }
  user_agent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_agent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.Browser.user_agent)
}

// .common.Size viewport_size = 2 [json_name = "viewportSize"];
inline bool Browser::_internal_has_viewport_size() const {
  return this != internal_default_instance() && viewport_size_ != nullptr;
}
inline bool Browser::has_viewport_size() const {
  return _internal_has_viewport_size();
}
inline void Browser::clear_viewport_size() {
  if (GetArena() == nullptr && viewport_size_ != nullptr) {
    delete viewport_size_;
  }
  viewport_size_ = nullptr;
}
inline const ::common::Size& Browser::_internal_viewport_size() const {
  const ::common::Size* p = viewport_size_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::Size&>(
      ::common::_Size_default_instance_);
}
inline const ::common::Size& Browser::viewport_size() const {
  // @@protoc_insertion_point(field_get:common.Browser.viewport_size)
  return _internal_viewport_size();
}
inline void Browser::unsafe_arena_set_allocated_viewport_size(
    ::common::Size* viewport_size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewport_size_);
  }
  viewport_size_ = viewport_size;
  if (viewport_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Browser.viewport_size)
}
inline ::common::Size* Browser::release_viewport_size() {
  
  ::common::Size* temp = viewport_size_;
  viewport_size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Size* Browser::unsafe_arena_release_viewport_size() {
  // @@protoc_insertion_point(field_release:common.Browser.viewport_size)
  
  ::common::Size* temp = viewport_size_;
  viewport_size_ = nullptr;
  return temp;
}
inline ::common::Size* Browser::_internal_mutable_viewport_size() {
  
  if (viewport_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Size>(GetArena());
    viewport_size_ = p;
  }
  return viewport_size_;
}
inline ::common::Size* Browser::mutable_viewport_size() {
  // @@protoc_insertion_point(field_mutable:common.Browser.viewport_size)
  return _internal_mutable_viewport_size();
}
inline void Browser::set_allocated_viewport_size(::common::Size* viewport_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete viewport_size_;
  }
  if (viewport_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(viewport_size);
    if (message_arena != submessage_arena) {
      viewport_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewport_size, submessage_arena);
    }
    
  } else {
    
  }
  viewport_size_ = viewport_size;
  // @@protoc_insertion_point(field_set_allocated:common.Browser.viewport_size)
}

// .common.ClientHints client_hints = 3 [json_name = "clientHints"];
inline bool Browser::_internal_has_client_hints() const {
  return this != internal_default_instance() && client_hints_ != nullptr;
}
inline bool Browser::has_client_hints() const {
  return _internal_has_client_hints();
}
inline void Browser::clear_client_hints() {
  if (GetArena() == nullptr && client_hints_ != nullptr) {
    delete client_hints_;
  }
  client_hints_ = nullptr;
}
inline const ::common::ClientHints& Browser::_internal_client_hints() const {
  const ::common::ClientHints* p = client_hints_;
  return p != nullptr ? *p : reinterpret_cast<const ::common::ClientHints&>(
      ::common::_ClientHints_default_instance_);
}
inline const ::common::ClientHints& Browser::client_hints() const {
  // @@protoc_insertion_point(field_get:common.Browser.client_hints)
  return _internal_client_hints();
}
inline void Browser::unsafe_arena_set_allocated_client_hints(
    ::common::ClientHints* client_hints) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_hints_);
  }
  client_hints_ = client_hints;
  if (client_hints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Browser.client_hints)
}
inline ::common::ClientHints* Browser::release_client_hints() {
  
  ::common::ClientHints* temp = client_hints_;
  client_hints_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::ClientHints* Browser::unsafe_arena_release_client_hints() {
  // @@protoc_insertion_point(field_release:common.Browser.client_hints)
  
  ::common::ClientHints* temp = client_hints_;
  client_hints_ = nullptr;
  return temp;
}
inline ::common::ClientHints* Browser::_internal_mutable_client_hints() {
  
  if (client_hints_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::ClientHints>(GetArena());
    client_hints_ = p;
  }
  return client_hints_;
}
inline ::common::ClientHints* Browser::mutable_client_hints() {
  // @@protoc_insertion_point(field_mutable:common.Browser.client_hints)
  return _internal_mutable_client_hints();
}
inline void Browser::set_allocated_client_hints(::common::ClientHints* client_hints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete client_hints_;
  }
  if (client_hints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client_hints);
    if (message_arena != submessage_arena) {
      client_hints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_hints, submessage_arena);
    }
    
  } else {
    
  }
  client_hints_ = client_hints;
  // @@protoc_insertion_point(field_set_allocated:common.Browser.client_hints)
}

// string referrer = 4 [json_name = "referrer"];
inline void Browser::clear_referrer() {
  referrer_.ClearToEmpty();
}
inline const std::string& Browser::referrer() const {
  // @@protoc_insertion_point(field_get:common.Browser.referrer)
  return _internal_referrer();
}
inline void Browser::set_referrer(const std::string& value) {
  _internal_set_referrer(value);
  // @@protoc_insertion_point(field_set:common.Browser.referrer)
}
inline std::string* Browser::mutable_referrer() {
  // @@protoc_insertion_point(field_mutable:common.Browser.referrer)
  return _internal_mutable_referrer();
}
inline const std::string& Browser::_internal_referrer() const {
  return referrer_.Get();
}
inline void Browser::_internal_set_referrer(const std::string& value) {
  
  referrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Browser::set_referrer(std::string&& value) {
  
  referrer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.Browser.referrer)
}
inline void Browser::set_referrer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  referrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.Browser.referrer)
}
inline void Browser::set_referrer(const char* value,
    size_t size) {
  
  referrer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.Browser.referrer)
}
inline std::string* Browser::_internal_mutable_referrer() {
  
  return referrer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Browser::release_referrer() {
  // @@protoc_insertion_point(field_release:common.Browser.referrer)
  return referrer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Browser::set_allocated_referrer(std::string* referrer) {
  if (referrer != nullptr) {
    
  } else {
    
  }
  referrer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referrer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.Browser.referrer)
}

// -------------------------------------------------------------------

// Location

// double latitude = 1 [json_name = "latitude"];
inline void Location::clear_latitude() {
  latitude_ = 0;
}
inline double Location::_internal_latitude() const {
  return latitude_;
}
inline double Location::latitude() const {
  // @@protoc_insertion_point(field_get:common.Location.latitude)
  return _internal_latitude();
}
inline void Location::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Location::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:common.Location.latitude)
}

// double longitude = 2 [json_name = "longitude"];
inline void Location::clear_longitude() {
  longitude_ = 0;
}
inline double Location::_internal_longitude() const {
  return longitude_;
}
inline double Location::longitude() const {
  // @@protoc_insertion_point(field_get:common.Location.longitude)
  return _internal_longitude();
}
inline void Location::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Location::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:common.Location.longitude)
}

// double accuracy_in_meters = 3 [json_name = "accuracyInMeters"];
inline void Location::clear_accuracy_in_meters() {
  accuracy_in_meters_ = 0;
}
inline double Location::_internal_accuracy_in_meters() const {
  return accuracy_in_meters_;
}
inline double Location::accuracy_in_meters() const {
  // @@protoc_insertion_point(field_get:common.Location.accuracy_in_meters)
  return _internal_accuracy_in_meters();
}
inline void Location::_internal_set_accuracy_in_meters(double value) {
  
  accuracy_in_meters_ = value;
}
inline void Location::set_accuracy_in_meters(double value) {
  _internal_set_accuracy_in_meters(value);
  // @@protoc_insertion_point(field_set:common.Location.accuracy_in_meters)
}

// -------------------------------------------------------------------

// Timing

// uint64 client_log_timestamp = 1 [json_name = "clientLogTimestamp"];
inline void Timing::clear_client_log_timestamp() {
  client_log_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Timing::_internal_client_log_timestamp() const {
  return client_log_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Timing::client_log_timestamp() const {
  // @@protoc_insertion_point(field_get:common.Timing.client_log_timestamp)
  return _internal_client_log_timestamp();
}
inline void Timing::_internal_set_client_log_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_log_timestamp_ = value;
}
inline void Timing::set_client_log_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_log_timestamp(value);
  // @@protoc_insertion_point(field_set:common.Timing.client_log_timestamp)
}

// -------------------------------------------------------------------

// Properties

// bytes struct_bytes = 1 [json_name = "structBytes"];
inline bool Properties::_internal_has_struct_bytes() const {
  return struct_field_case() == kStructBytes;
}
inline bool Properties::has_struct_bytes() const {
  return _internal_has_struct_bytes();
}
inline void Properties::set_has_struct_bytes() {
  _oneof_case_[0] = kStructBytes;
}
inline void Properties::clear_struct_bytes() {
  if (_internal_has_struct_bytes()) {
    struct_field_.struct_bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_struct_field();
  }
}
inline const std::string& Properties::struct_bytes() const {
  // @@protoc_insertion_point(field_get:common.Properties.struct_bytes)
  return _internal_struct_bytes();
}
inline void Properties::set_struct_bytes(const std::string& value) {
  _internal_set_struct_bytes(value);
  // @@protoc_insertion_point(field_set:common.Properties.struct_bytes)
}
inline std::string* Properties::mutable_struct_bytes() {
  // @@protoc_insertion_point(field_mutable:common.Properties.struct_bytes)
  return _internal_mutable_struct_bytes();
}
inline const std::string& Properties::_internal_struct_bytes() const {
  if (_internal_has_struct_bytes()) {
    return struct_field_.struct_bytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Properties::_internal_set_struct_bytes(const std::string& value) {
  if (!_internal_has_struct_bytes()) {
    clear_struct_field();
    set_has_struct_bytes();
    struct_field_.struct_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  struct_field_.struct_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Properties::set_struct_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:common.Properties.struct_bytes)
  if (!_internal_has_struct_bytes()) {
    clear_struct_field();
    set_has_struct_bytes();
    struct_field_.struct_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  struct_field_.struct_bytes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.Properties.struct_bytes)
}
inline void Properties::set_struct_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_struct_bytes()) {
    clear_struct_field();
    set_has_struct_bytes();
    struct_field_.struct_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  struct_field_.struct_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.Properties.struct_bytes)
}
inline void Properties::set_struct_bytes(const void* value,
                             size_t size) {
  if (!_internal_has_struct_bytes()) {
    clear_struct_field();
    set_has_struct_bytes();
    struct_field_.struct_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  struct_field_.struct_bytes_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.Properties.struct_bytes)
}
inline std::string* Properties::_internal_mutable_struct_bytes() {
  if (!_internal_has_struct_bytes()) {
    clear_struct_field();
    set_has_struct_bytes();
    struct_field_.struct_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return struct_field_.struct_bytes_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Properties::release_struct_bytes() {
  // @@protoc_insertion_point(field_release:common.Properties.struct_bytes)
  if (_internal_has_struct_bytes()) {
    clear_has_struct_field();
    return struct_field_.struct_bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Properties::set_allocated_struct_bytes(std::string* struct_bytes) {
  if (has_struct_field()) {
    clear_struct_field();
  }
  if (struct_bytes != nullptr) {
    set_has_struct_bytes();
    struct_field_.struct_bytes_.UnsafeSetDefault(struct_bytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(struct_bytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:common.Properties.struct_bytes)
}

// .google.protobuf.Struct struct = 2 [json_name = "struct"];
inline bool Properties::_internal_has_struct_() const {
  return struct_field_case() == kStruct;
}
inline bool Properties::has_struct_() const {
  return _internal_has_struct_();
}
inline void Properties::set_has_struct_() {
  _oneof_case_[0] = kStruct;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Properties::release_struct_() {
  // @@protoc_insertion_point(field_release:common.Properties.struct)
  if (_internal_has_struct_()) {
    clear_has_struct_field();
      PROTOBUF_NAMESPACE_ID::Struct* temp = struct_field_.struct__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    struct_field_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Properties::_internal_struct_() const {
  return _internal_has_struct_()
      ? *struct_field_.struct__
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Struct&>(PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Properties::struct_() const {
  // @@protoc_insertion_point(field_get:common.Properties.struct)
  return _internal_struct_();
}
inline PROTOBUF_NAMESPACE_ID::Struct* Properties::unsafe_arena_release_struct_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:common.Properties.struct)
  if (_internal_has_struct_()) {
    clear_has_struct_field();
    PROTOBUF_NAMESPACE_ID::Struct* temp = struct_field_.struct__;
    struct_field_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Properties::unsafe_arena_set_allocated_struct_(PROTOBUF_NAMESPACE_ID::Struct* struct_) {
  clear_struct_field();
  if (struct_) {
    set_has_struct_();
    struct_field_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Properties.struct)
}
inline PROTOBUF_NAMESPACE_ID::Struct* Properties::_internal_mutable_struct_() {
  if (!_internal_has_struct_()) {
    clear_struct_field();
    set_has_struct_();
    struct_field_.struct__ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Struct >(GetArena());
  }
  return struct_field_.struct__;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Properties::mutable_struct_() {
  // @@protoc_insertion_point(field_mutable:common.Properties.struct)
  return _internal_mutable_struct_();
}

inline bool Properties::has_struct_field() const {
  return struct_field_case() != STRUCT_FIELD_NOT_SET;
}
inline void Properties::clear_has_struct_field() {
  _oneof_case_[0] = STRUCT_FIELD_NOT_SET;
}
inline Properties::StructFieldCase Properties::struct_field_case() const {
  return Properties::StructFieldCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::common::ClientInfo_ClientType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::ClientInfo_ClientType>() {
  return ::common::ClientInfo_ClientType_descriptor();
}
template <> struct is_proto_enum< ::common::ClientInfo_TrafficType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::ClientInfo_TrafficType>() {
  return ::common::ClientInfo_TrafficType_descriptor();
}
template <> struct is_proto_enum< ::common::CurrencyCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::CurrencyCode>() {
  return ::common::CurrencyCode_descriptor();
}
template <> struct is_proto_enum< ::common::DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::DeviceType>() {
  return ::common::DeviceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2fcommon_2eproto
