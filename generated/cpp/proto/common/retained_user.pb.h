// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/common/retained_user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2fretained_5fuser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2fretained_5fuser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fcommon_2fretained_5fuser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcommon_2fretained_5fuser_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcommon_2fretained_5fuser_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_proto_2fcommon_2fretained_5fuser_2eproto_metadata_getter(int index);
namespace common {
class AnonUserRetainedUser;
struct AnonUserRetainedUserDefaultTypeInternal;
extern AnonUserRetainedUserDefaultTypeInternal _AnonUserRetainedUser_default_instance_;
class RetainedUser;
struct RetainedUserDefaultTypeInternal;
extern RetainedUserDefaultTypeInternal _RetainedUser_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::AnonUserRetainedUser* Arena::CreateMaybeMessage<::common::AnonUserRetainedUser>(Arena*);
template<> ::common::RetainedUser* Arena::CreateMaybeMessage<::common::RetainedUser>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

// ===================================================================

class RetainedUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.RetainedUser) */ {
 public:
  inline RetainedUser() : RetainedUser(nullptr) {}
  virtual ~RetainedUser();
  explicit constexpr RetainedUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RetainedUser(const RetainedUser& from);
  RetainedUser(RetainedUser&& from) noexcept
    : RetainedUser() {
    *this = ::std::move(from);
  }

  inline RetainedUser& operator=(const RetainedUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetainedUser& operator=(RetainedUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetainedUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetainedUser* internal_default_instance() {
    return reinterpret_cast<const RetainedUser*>(
               &_RetainedUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RetainedUser& a, RetainedUser& b) {
    a.Swap(&b);
  }
  inline void Swap(RetainedUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetainedUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetainedUser* New() const final {
    return CreateMaybeMessage<RetainedUser>(nullptr);
  }

  RetainedUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetainedUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetainedUser& from);
  void MergeFrom(const RetainedUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetainedUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.RetainedUser";
  }
  protected:
  explicit RetainedUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fretained_5fuser_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kRetainedUserIdFieldNumber = 3,
    kPlatformIdFieldNumber = 1,
    kCreateEventApiTimeMillisFieldNumber = 4,
    kProcessTimeMillisFieldNumber = 5,
    kLastForgottenTimeMillisFieldNumber = 6,
  };
  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string retained_user_id = 3 [json_name = "retainedUserId"];
  void clear_retained_user_id();
  const std::string& retained_user_id() const;
  void set_retained_user_id(const std::string& value);
  void set_retained_user_id(std::string&& value);
  void set_retained_user_id(const char* value);
  void set_retained_user_id(const char* value, size_t size);
  std::string* mutable_retained_user_id();
  std::string* release_retained_user_id();
  void set_allocated_retained_user_id(std::string* retained_user_id);
  private:
  const std::string& _internal_retained_user_id() const;
  void _internal_set_retained_user_id(const std::string& value);
  std::string* _internal_mutable_retained_user_id();
  public:

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 create_event_api_time_millis = 4 [json_name = "createEventApiTimeMillis"];
  void clear_create_event_api_time_millis();
  ::PROTOBUF_NAMESPACE_ID::uint64 create_event_api_time_millis() const;
  void set_create_event_api_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_create_event_api_time_millis() const;
  void _internal_set_create_event_api_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 process_time_millis = 5 [json_name = "processTimeMillis"];
  void clear_process_time_millis();
  ::PROTOBUF_NAMESPACE_ID::uint64 process_time_millis() const;
  void set_process_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_process_time_millis() const;
  void _internal_set_process_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_forgotten_time_millis = 6 [json_name = "lastForgottenTimeMillis"];
  void clear_last_forgotten_time_millis();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_forgotten_time_millis() const;
  void set_last_forgotten_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_forgotten_time_millis() const;
  void _internal_set_last_forgotten_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:common.RetainedUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr retained_user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 create_event_api_time_millis_;
  ::PROTOBUF_NAMESPACE_ID::uint64 process_time_millis_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_forgotten_time_millis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fretained_5fuser_2eproto;
};
// -------------------------------------------------------------------

class AnonUserRetainedUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.AnonUserRetainedUser) */ {
 public:
  inline AnonUserRetainedUser() : AnonUserRetainedUser(nullptr) {}
  virtual ~AnonUserRetainedUser();
  explicit constexpr AnonUserRetainedUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnonUserRetainedUser(const AnonUserRetainedUser& from);
  AnonUserRetainedUser(AnonUserRetainedUser&& from) noexcept
    : AnonUserRetainedUser() {
    *this = ::std::move(from);
  }

  inline AnonUserRetainedUser& operator=(const AnonUserRetainedUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnonUserRetainedUser& operator=(AnonUserRetainedUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnonUserRetainedUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnonUserRetainedUser* internal_default_instance() {
    return reinterpret_cast<const AnonUserRetainedUser*>(
               &_AnonUserRetainedUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AnonUserRetainedUser& a, AnonUserRetainedUser& b) {
    a.Swap(&b);
  }
  inline void Swap(AnonUserRetainedUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnonUserRetainedUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnonUserRetainedUser* New() const final {
    return CreateMaybeMessage<AnonUserRetainedUser>(nullptr);
  }

  AnonUserRetainedUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnonUserRetainedUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnonUserRetainedUser& from);
  void MergeFrom(const AnonUserRetainedUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnonUserRetainedUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.AnonUserRetainedUser";
  }
  protected:
  explicit AnonUserRetainedUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_proto_2fcommon_2fretained_5fuser_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnonUserIdFieldNumber = 2,
    kRetainedUserIdFieldNumber = 3,
    kPlatformIdFieldNumber = 1,
    kEventTimeMillisFieldNumber = 4,
    kProcessTimeMillisFieldNumber = 5,
  };
  // string anon_user_id = 2 [json_name = "anonUserId"];
  void clear_anon_user_id();
  const std::string& anon_user_id() const;
  void set_anon_user_id(const std::string& value);
  void set_anon_user_id(std::string&& value);
  void set_anon_user_id(const char* value);
  void set_anon_user_id(const char* value, size_t size);
  std::string* mutable_anon_user_id();
  std::string* release_anon_user_id();
  void set_allocated_anon_user_id(std::string* anon_user_id);
  private:
  const std::string& _internal_anon_user_id() const;
  void _internal_set_anon_user_id(const std::string& value);
  std::string* _internal_mutable_anon_user_id();
  public:

  // string retained_user_id = 3 [json_name = "retainedUserId"];
  void clear_retained_user_id();
  const std::string& retained_user_id() const;
  void set_retained_user_id(const std::string& value);
  void set_retained_user_id(std::string&& value);
  void set_retained_user_id(const char* value);
  void set_retained_user_id(const char* value, size_t size);
  std::string* mutable_retained_user_id();
  std::string* release_retained_user_id();
  void set_allocated_retained_user_id(std::string* retained_user_id);
  private:
  const std::string& _internal_retained_user_id() const;
  void _internal_set_retained_user_id(const std::string& value);
  std::string* _internal_mutable_retained_user_id();
  public:

  // uint64 platform_id = 1 [json_name = "platformId"];
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 event_time_millis = 4 [json_name = "eventTimeMillis"];
  void clear_event_time_millis();
  ::PROTOBUF_NAMESPACE_ID::uint64 event_time_millis() const;
  void set_event_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_event_time_millis() const;
  void _internal_set_event_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 process_time_millis = 5 [json_name = "processTimeMillis"];
  void clear_process_time_millis();
  ::PROTOBUF_NAMESPACE_ID::uint64 process_time_millis() const;
  void set_process_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_process_time_millis() const;
  void _internal_set_process_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:common.AnonUserRetainedUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anon_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr retained_user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 platform_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 event_time_millis_;
  ::PROTOBUF_NAMESPACE_ID::uint64 process_time_millis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcommon_2fretained_5fuser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RetainedUser

// uint64 platform_id = 1 [json_name = "platformId"];
inline void RetainedUser::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RetainedUser::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RetainedUser::platform_id() const {
  // @@protoc_insertion_point(field_get:common.RetainedUser.platform_id)
  return _internal_platform_id();
}
inline void RetainedUser::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void RetainedUser::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:common.RetainedUser.platform_id)
}

// string user_id = 2 [json_name = "userId"];
inline void RetainedUser::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& RetainedUser::user_id() const {
  // @@protoc_insertion_point(field_get:common.RetainedUser.user_id)
  return _internal_user_id();
}
inline void RetainedUser::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:common.RetainedUser.user_id)
}
inline std::string* RetainedUser::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:common.RetainedUser.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& RetainedUser::_internal_user_id() const {
  return user_id_.Get();
}
inline void RetainedUser::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RetainedUser::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.RetainedUser.user_id)
}
inline void RetainedUser::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.RetainedUser.user_id)
}
inline void RetainedUser::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.RetainedUser.user_id)
}
inline std::string* RetainedUser::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RetainedUser::release_user_id() {
  // @@protoc_insertion_point(field_release:common.RetainedUser.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RetainedUser::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.RetainedUser.user_id)
}

// string retained_user_id = 3 [json_name = "retainedUserId"];
inline void RetainedUser::clear_retained_user_id() {
  retained_user_id_.ClearToEmpty();
}
inline const std::string& RetainedUser::retained_user_id() const {
  // @@protoc_insertion_point(field_get:common.RetainedUser.retained_user_id)
  return _internal_retained_user_id();
}
inline void RetainedUser::set_retained_user_id(const std::string& value) {
  _internal_set_retained_user_id(value);
  // @@protoc_insertion_point(field_set:common.RetainedUser.retained_user_id)
}
inline std::string* RetainedUser::mutable_retained_user_id() {
  // @@protoc_insertion_point(field_mutable:common.RetainedUser.retained_user_id)
  return _internal_mutable_retained_user_id();
}
inline const std::string& RetainedUser::_internal_retained_user_id() const {
  return retained_user_id_.Get();
}
inline void RetainedUser::_internal_set_retained_user_id(const std::string& value) {
  
  retained_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RetainedUser::set_retained_user_id(std::string&& value) {
  
  retained_user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.RetainedUser.retained_user_id)
}
inline void RetainedUser::set_retained_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  retained_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.RetainedUser.retained_user_id)
}
inline void RetainedUser::set_retained_user_id(const char* value,
    size_t size) {
  
  retained_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.RetainedUser.retained_user_id)
}
inline std::string* RetainedUser::_internal_mutable_retained_user_id() {
  
  return retained_user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RetainedUser::release_retained_user_id() {
  // @@protoc_insertion_point(field_release:common.RetainedUser.retained_user_id)
  return retained_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RetainedUser::set_allocated_retained_user_id(std::string* retained_user_id) {
  if (retained_user_id != nullptr) {
    
  } else {
    
  }
  retained_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), retained_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.RetainedUser.retained_user_id)
}

// uint64 create_event_api_time_millis = 4 [json_name = "createEventApiTimeMillis"];
inline void RetainedUser::clear_create_event_api_time_millis() {
  create_event_api_time_millis_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RetainedUser::_internal_create_event_api_time_millis() const {
  return create_event_api_time_millis_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RetainedUser::create_event_api_time_millis() const {
  // @@protoc_insertion_point(field_get:common.RetainedUser.create_event_api_time_millis)
  return _internal_create_event_api_time_millis();
}
inline void RetainedUser::_internal_set_create_event_api_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  create_event_api_time_millis_ = value;
}
inline void RetainedUser::set_create_event_api_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_create_event_api_time_millis(value);
  // @@protoc_insertion_point(field_set:common.RetainedUser.create_event_api_time_millis)
}

// uint64 process_time_millis = 5 [json_name = "processTimeMillis"];
inline void RetainedUser::clear_process_time_millis() {
  process_time_millis_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RetainedUser::_internal_process_time_millis() const {
  return process_time_millis_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RetainedUser::process_time_millis() const {
  // @@protoc_insertion_point(field_get:common.RetainedUser.process_time_millis)
  return _internal_process_time_millis();
}
inline void RetainedUser::_internal_set_process_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  process_time_millis_ = value;
}
inline void RetainedUser::set_process_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_process_time_millis(value);
  // @@protoc_insertion_point(field_set:common.RetainedUser.process_time_millis)
}

// uint64 last_forgotten_time_millis = 6 [json_name = "lastForgottenTimeMillis"];
inline void RetainedUser::clear_last_forgotten_time_millis() {
  last_forgotten_time_millis_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RetainedUser::_internal_last_forgotten_time_millis() const {
  return last_forgotten_time_millis_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RetainedUser::last_forgotten_time_millis() const {
  // @@protoc_insertion_point(field_get:common.RetainedUser.last_forgotten_time_millis)
  return _internal_last_forgotten_time_millis();
}
inline void RetainedUser::_internal_set_last_forgotten_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_forgotten_time_millis_ = value;
}
inline void RetainedUser::set_last_forgotten_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_forgotten_time_millis(value);
  // @@protoc_insertion_point(field_set:common.RetainedUser.last_forgotten_time_millis)
}

// -------------------------------------------------------------------

// AnonUserRetainedUser

// uint64 platform_id = 1 [json_name = "platformId"];
inline void AnonUserRetainedUser::clear_platform_id() {
  platform_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AnonUserRetainedUser::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AnonUserRetainedUser::platform_id() const {
  // @@protoc_insertion_point(field_get:common.AnonUserRetainedUser.platform_id)
  return _internal_platform_id();
}
inline void AnonUserRetainedUser::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  platform_id_ = value;
}
inline void AnonUserRetainedUser::set_platform_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:common.AnonUserRetainedUser.platform_id)
}

// string anon_user_id = 2 [json_name = "anonUserId"];
inline void AnonUserRetainedUser::clear_anon_user_id() {
  anon_user_id_.ClearToEmpty();
}
inline const std::string& AnonUserRetainedUser::anon_user_id() const {
  // @@protoc_insertion_point(field_get:common.AnonUserRetainedUser.anon_user_id)
  return _internal_anon_user_id();
}
inline void AnonUserRetainedUser::set_anon_user_id(const std::string& value) {
  _internal_set_anon_user_id(value);
  // @@protoc_insertion_point(field_set:common.AnonUserRetainedUser.anon_user_id)
}
inline std::string* AnonUserRetainedUser::mutable_anon_user_id() {
  // @@protoc_insertion_point(field_mutable:common.AnonUserRetainedUser.anon_user_id)
  return _internal_mutable_anon_user_id();
}
inline const std::string& AnonUserRetainedUser::_internal_anon_user_id() const {
  return anon_user_id_.Get();
}
inline void AnonUserRetainedUser::_internal_set_anon_user_id(const std::string& value) {
  
  anon_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnonUserRetainedUser::set_anon_user_id(std::string&& value) {
  
  anon_user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.AnonUserRetainedUser.anon_user_id)
}
inline void AnonUserRetainedUser::set_anon_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  anon_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.AnonUserRetainedUser.anon_user_id)
}
inline void AnonUserRetainedUser::set_anon_user_id(const char* value,
    size_t size) {
  
  anon_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.AnonUserRetainedUser.anon_user_id)
}
inline std::string* AnonUserRetainedUser::_internal_mutable_anon_user_id() {
  
  return anon_user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnonUserRetainedUser::release_anon_user_id() {
  // @@protoc_insertion_point(field_release:common.AnonUserRetainedUser.anon_user_id)
  return anon_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnonUserRetainedUser::set_allocated_anon_user_id(std::string* anon_user_id) {
  if (anon_user_id != nullptr) {
    
  } else {
    
  }
  anon_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anon_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.AnonUserRetainedUser.anon_user_id)
}

// string retained_user_id = 3 [json_name = "retainedUserId"];
inline void AnonUserRetainedUser::clear_retained_user_id() {
  retained_user_id_.ClearToEmpty();
}
inline const std::string& AnonUserRetainedUser::retained_user_id() const {
  // @@protoc_insertion_point(field_get:common.AnonUserRetainedUser.retained_user_id)
  return _internal_retained_user_id();
}
inline void AnonUserRetainedUser::set_retained_user_id(const std::string& value) {
  _internal_set_retained_user_id(value);
  // @@protoc_insertion_point(field_set:common.AnonUserRetainedUser.retained_user_id)
}
inline std::string* AnonUserRetainedUser::mutable_retained_user_id() {
  // @@protoc_insertion_point(field_mutable:common.AnonUserRetainedUser.retained_user_id)
  return _internal_mutable_retained_user_id();
}
inline const std::string& AnonUserRetainedUser::_internal_retained_user_id() const {
  return retained_user_id_.Get();
}
inline void AnonUserRetainedUser::_internal_set_retained_user_id(const std::string& value) {
  
  retained_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AnonUserRetainedUser::set_retained_user_id(std::string&& value) {
  
  retained_user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.AnonUserRetainedUser.retained_user_id)
}
inline void AnonUserRetainedUser::set_retained_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  retained_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:common.AnonUserRetainedUser.retained_user_id)
}
inline void AnonUserRetainedUser::set_retained_user_id(const char* value,
    size_t size) {
  
  retained_user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.AnonUserRetainedUser.retained_user_id)
}
inline std::string* AnonUserRetainedUser::_internal_mutable_retained_user_id() {
  
  return retained_user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AnonUserRetainedUser::release_retained_user_id() {
  // @@protoc_insertion_point(field_release:common.AnonUserRetainedUser.retained_user_id)
  return retained_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AnonUserRetainedUser::set_allocated_retained_user_id(std::string* retained_user_id) {
  if (retained_user_id != nullptr) {
    
  } else {
    
  }
  retained_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), retained_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.AnonUserRetainedUser.retained_user_id)
}

// uint64 event_time_millis = 4 [json_name = "eventTimeMillis"];
inline void AnonUserRetainedUser::clear_event_time_millis() {
  event_time_millis_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AnonUserRetainedUser::_internal_event_time_millis() const {
  return event_time_millis_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AnonUserRetainedUser::event_time_millis() const {
  // @@protoc_insertion_point(field_get:common.AnonUserRetainedUser.event_time_millis)
  return _internal_event_time_millis();
}
inline void AnonUserRetainedUser::_internal_set_event_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  event_time_millis_ = value;
}
inline void AnonUserRetainedUser::set_event_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_event_time_millis(value);
  // @@protoc_insertion_point(field_set:common.AnonUserRetainedUser.event_time_millis)
}

// uint64 process_time_millis = 5 [json_name = "processTimeMillis"];
inline void AnonUserRetainedUser::clear_process_time_millis() {
  process_time_millis_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AnonUserRetainedUser::_internal_process_time_millis() const {
  return process_time_millis_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AnonUserRetainedUser::process_time_millis() const {
  // @@protoc_insertion_point(field_get:common.AnonUserRetainedUser.process_time_millis)
  return _internal_process_time_millis();
}
inline void AnonUserRetainedUser::_internal_set_process_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  process_time_millis_ = value;
}
inline void AnonUserRetainedUser::set_process_time_millis(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_process_time_millis(value);
  // @@protoc_insertion_point(field_set:common.AnonUserRetainedUser.process_time_millis)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2fretained_5fuser_2eproto
