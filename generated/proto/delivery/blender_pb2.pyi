"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class BlenderRule(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ATTRIBUTE_NAME_FIELD_NUMBER: builtins.int
    POSITIVE_RULE_FIELD_NUMBER: builtins.int
    INSERT_RULE_FIELD_NUMBER: builtins.int
    NEGATIVE_RULE_FIELD_NUMBER: builtins.int
    DIVERSITY_RULE_FIELD_NUMBER: builtins.int
    attribute_name: typing.Text = ...

    @property
    def positive_rule(self) -> global___PositiveRule: ...

    @property
    def insert_rule(self) -> global___InsertRule: ...

    @property
    def negative_rule(self) -> global___NegativeRule: ...

    @property
    def diversity_rule(self) -> global___DiversityRule: ...

    def __init__(self,
        *,
        attribute_name : typing.Text = ...,
        positive_rule : typing.Optional[global___PositiveRule] = ...,
        insert_rule : typing.Optional[global___InsertRule] = ...,
        negative_rule : typing.Optional[global___NegativeRule] = ...,
        diversity_rule : typing.Optional[global___DiversityRule] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"diversity_rule",b"diversity_rule",u"insert_rule",b"insert_rule",u"negative_rule",b"negative_rule",u"positive_rule",b"positive_rule",u"rule",b"rule"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"attribute_name",b"attribute_name",u"diversity_rule",b"diversity_rule",u"insert_rule",b"insert_rule",u"negative_rule",b"negative_rule",u"positive_rule",b"positive_rule",u"rule",b"rule"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"rule",b"rule"]) -> typing_extensions.Literal["positive_rule","insert_rule","negative_rule","diversity_rule"]: ...
global___BlenderRule = BlenderRule

class PositiveRule(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SELECT_PCT_FIELD_NUMBER: builtins.int
    MIN_POS_FIELD_NUMBER: builtins.int
    MAX_POS_FIELD_NUMBER: builtins.int
    select_pct: builtins.float = ...
    min_pos: builtins.int = ...
    max_pos: builtins.int = ...

    def __init__(self,
        *,
        select_pct : builtins.float = ...,
        min_pos : builtins.int = ...,
        max_pos : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"_max_pos",b"_max_pos",u"_min_pos",b"_min_pos",u"_select_pct",b"_select_pct",u"max_pos",b"max_pos",u"min_pos",b"min_pos",u"select_pct",b"select_pct"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"_max_pos",b"_max_pos",u"_min_pos",b"_min_pos",u"_select_pct",b"_select_pct",u"max_pos",b"max_pos",u"min_pos",b"min_pos",u"select_pct",b"select_pct"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_max_pos",b"_max_pos"]) -> typing_extensions.Literal["max_pos"]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_min_pos",b"_min_pos"]) -> typing_extensions.Literal["min_pos"]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_select_pct",b"_select_pct"]) -> typing_extensions.Literal["select_pct"]: ...
global___PositiveRule = PositiveRule

class InsertRule(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SELECT_PCT_FIELD_NUMBER: builtins.int
    MIN_POS_FIELD_NUMBER: builtins.int
    MAX_POS_FIELD_NUMBER: builtins.int
    select_pct: builtins.float = ...
    min_pos: builtins.int = ...
    max_pos: builtins.int = ...

    def __init__(self,
        *,
        select_pct : builtins.float = ...,
        min_pos : builtins.int = ...,
        max_pos : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"_max_pos",b"_max_pos",u"_min_pos",b"_min_pos",u"_select_pct",b"_select_pct",u"max_pos",b"max_pos",u"min_pos",b"min_pos",u"select_pct",b"select_pct"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"_max_pos",b"_max_pos",u"_min_pos",b"_min_pos",u"_select_pct",b"_select_pct",u"max_pos",b"max_pos",u"min_pos",b"min_pos",u"select_pct",b"select_pct"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_max_pos",b"_max_pos"]) -> typing_extensions.Literal["max_pos"]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_min_pos",b"_min_pos"]) -> typing_extensions.Literal["min_pos"]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_select_pct",b"_select_pct"]) -> typing_extensions.Literal["select_pct"]: ...
global___InsertRule = InsertRule

class NegativeRule(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    PLUCK_PCT_FIELD_NUMBER: builtins.int
    FORBID_LESS_POS_FIELD_NUMBER: builtins.int
    MIN_SPACING_FIELD_NUMBER: builtins.int
    FORBID_GREATER_POS_FIELD_NUMBER: builtins.int
    MAX_COUNT_FIELD_NUMBER: builtins.int
    pluck_pct: builtins.float = ...
    forbid_less_pos: builtins.int = ...
    min_spacing: builtins.int = ...
    forbid_greater_pos: builtins.int = ...
    max_count: builtins.int = ...

    def __init__(self,
        *,
        pluck_pct : builtins.float = ...,
        forbid_less_pos : builtins.int = ...,
        min_spacing : builtins.int = ...,
        forbid_greater_pos : builtins.int = ...,
        max_count : builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"_forbid_greater_pos",b"_forbid_greater_pos",u"_forbid_less_pos",b"_forbid_less_pos",u"_max_count",b"_max_count",u"_min_spacing",b"_min_spacing",u"_pluck_pct",b"_pluck_pct",u"forbid_greater_pos",b"forbid_greater_pos",u"forbid_less_pos",b"forbid_less_pos",u"max_count",b"max_count",u"min_spacing",b"min_spacing",u"pluck_pct",b"pluck_pct"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"_forbid_greater_pos",b"_forbid_greater_pos",u"_forbid_less_pos",b"_forbid_less_pos",u"_max_count",b"_max_count",u"_min_spacing",b"_min_spacing",u"_pluck_pct",b"_pluck_pct",u"forbid_greater_pos",b"forbid_greater_pos",u"forbid_less_pos",b"forbid_less_pos",u"max_count",b"max_count",u"min_spacing",b"min_spacing",u"pluck_pct",b"pluck_pct"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_forbid_greater_pos",b"_forbid_greater_pos"]) -> typing_extensions.Literal["forbid_greater_pos"]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_forbid_less_pos",b"_forbid_less_pos"]) -> typing_extensions.Literal["forbid_less_pos"]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_max_count",b"_max_count"]) -> typing_extensions.Literal["max_count"]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_min_spacing",b"_min_spacing"]) -> typing_extensions.Literal["min_spacing"]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_pluck_pct",b"_pluck_pct"]) -> typing_extensions.Literal["pluck_pct"]: ...
global___NegativeRule = NegativeRule

class DiversityRule(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MULTI_FIELD_NUMBER: builtins.int
    multi: builtins.float = ...

    def __init__(self,
        *,
        multi : builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"_multi",b"_multi",u"multi",b"multi"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"_multi",b"_multi",u"multi",b"multi"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_multi",b"_multi"]) -> typing_extensions.Literal["multi"]: ...
global___DiversityRule = DiversityRule

class BlenderConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BLENDER_RULE_FIELD_NUMBER: builtins.int
    QUALITY_SCORE_CONFIG_FIELD_NUMBER: builtins.int

    @property
    def blender_rule(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___BlenderRule]: ...

    @property
    def quality_score_config(self) -> global___QualityScoreConfig: ...

    def __init__(self,
        *,
        blender_rule : typing.Optional[typing.Iterable[global___BlenderRule]] = ...,
        quality_score_config : typing.Optional[global___QualityScoreConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"quality_score_config",b"quality_score_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"blender_rule",b"blender_rule",u"quality_score_config",b"quality_score_config"]) -> None: ...
global___BlenderConfig = BlenderConfig

class QualityScoreConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    WEIGHTED_SUM_TERM_FIELD_NUMBER: builtins.int

    @property
    def weighted_sum_term(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___QualityScoreTerm]: ...

    def __init__(self,
        *,
        weighted_sum_term : typing.Optional[typing.Iterable[global___QualityScoreTerm]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"weighted_sum_term",b"weighted_sum_term"]) -> None: ...
global___QualityScoreConfig = QualityScoreConfig

class QualityScoreTerm(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    ATTRIBUTE_NAME_FIELD_NUMBER: builtins.int
    RANDOM_NORMAL_FIELD_NUMBER: builtins.int
    ONES_FIELD_NUMBER: builtins.int
    FETCH_HIGH_FIELD_NUMBER: builtins.int
    FETCH_LOW_FIELD_NUMBER: builtins.int
    WEIGHT_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    attribute_name: typing.Text = ...
    ones: builtins.bool = ...
    fetch_high: builtins.float = ...
    fetch_low: builtins.float = ...
    weight: builtins.float = ...
    offset: builtins.float = ...

    @property
    def random_normal(self) -> global___NormalDistribution: ...

    def __init__(self,
        *,
        attribute_name : typing.Text = ...,
        random_normal : typing.Optional[global___NormalDistribution] = ...,
        ones : builtins.bool = ...,
        fetch_high : builtins.float = ...,
        fetch_low : builtins.float = ...,
        weight : builtins.float = ...,
        offset : builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"_fetch_high",b"_fetch_high",u"_fetch_low",b"_fetch_low",u"attribute_name",b"attribute_name",u"fetch_high",b"fetch_high",u"fetch_low",b"fetch_low",u"fetch_method",b"fetch_method",u"ones",b"ones",u"random_normal",b"random_normal"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"_fetch_high",b"_fetch_high",u"_fetch_low",b"_fetch_low",u"attribute_name",b"attribute_name",u"fetch_high",b"fetch_high",u"fetch_low",b"fetch_low",u"fetch_method",b"fetch_method",u"offset",b"offset",u"ones",b"ones",u"random_normal",b"random_normal",u"weight",b"weight"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_fetch_high",b"_fetch_high"]) -> typing_extensions.Literal["fetch_high"]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"_fetch_low",b"_fetch_low"]) -> typing_extensions.Literal["fetch_low"]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"fetch_method",b"fetch_method"]) -> typing_extensions.Literal["attribute_name","random_normal","ones"]: ...
global___QualityScoreTerm = QualityScoreTerm

class NormalDistribution(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    MEAN_FIELD_NUMBER: builtins.int
    VARIANCE_FIELD_NUMBER: builtins.int
    mean: builtins.float = ...
    variance: builtins.float = ...

    def __init__(self,
        *,
        mean : builtins.float = ...,
        variance : builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"mean",b"mean",u"variance",b"variance"]) -> None: ...
global___NormalDistribution = NormalDistribution
