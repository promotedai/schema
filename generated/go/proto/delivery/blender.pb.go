// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: proto/delivery/blender.proto

package delivery

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BlenderArithmeticExpression_Operator int32

const (
	BlenderArithmeticExpression_UNKNOWN  BlenderArithmeticExpression_Operator = 0
	BlenderArithmeticExpression_ADD      BlenderArithmeticExpression_Operator = 1
	BlenderArithmeticExpression_MULTIPLY BlenderArithmeticExpression_Operator = 2
	BlenderArithmeticExpression_SUBTRACT BlenderArithmeticExpression_Operator = 3
	BlenderArithmeticExpression_DIVIDE   BlenderArithmeticExpression_Operator = 4
	BlenderArithmeticExpression_MIN      BlenderArithmeticExpression_Operator = 5
	BlenderArithmeticExpression_MAX      BlenderArithmeticExpression_Operator = 6
	BlenderArithmeticExpression_FLOOR    BlenderArithmeticExpression_Operator = 7
	BlenderArithmeticExpression_CEILING  BlenderArithmeticExpression_Operator = 8
)

// Enum value maps for BlenderArithmeticExpression_Operator.
var (
	BlenderArithmeticExpression_Operator_name = map[int32]string{
		0: "UNKNOWN",
		1: "ADD",
		2: "MULTIPLY",
		3: "SUBTRACT",
		4: "DIVIDE",
		5: "MIN",
		6: "MAX",
		7: "FLOOR",
		8: "CEILING",
	}
	BlenderArithmeticExpression_Operator_value = map[string]int32{
		"UNKNOWN":  0,
		"ADD":      1,
		"MULTIPLY": 2,
		"SUBTRACT": 3,
		"DIVIDE":   4,
		"MIN":      5,
		"MAX":      6,
		"FLOOR":    7,
		"CEILING":  8,
	}
)

func (x BlenderArithmeticExpression_Operator) Enum() *BlenderArithmeticExpression_Operator {
	p := new(BlenderArithmeticExpression_Operator)
	*p = x
	return p
}

func (x BlenderArithmeticExpression_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlenderArithmeticExpression_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_delivery_blender_proto_enumTypes[0].Descriptor()
}

func (BlenderArithmeticExpression_Operator) Type() protoreflect.EnumType {
	return &file_proto_delivery_blender_proto_enumTypes[0]
}

func (x BlenderArithmeticExpression_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlenderArithmeticExpression_Operator.Descriptor instead.
func (BlenderArithmeticExpression_Operator) EnumDescriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{4, 0}
}

type BlenderConditionalExpression_Operator int32

const (
	BlenderConditionalExpression_UNKNOWN               BlenderConditionalExpression_Operator = 0
	BlenderConditionalExpression_EQUAL                 BlenderConditionalExpression_Operator = 1
	BlenderConditionalExpression_GREATER_THAN          BlenderConditionalExpression_Operator = 2
	BlenderConditionalExpression_GREATER_THAN_OR_EQUAL BlenderConditionalExpression_Operator = 3
)

// Enum value maps for BlenderConditionalExpression_Operator.
var (
	BlenderConditionalExpression_Operator_name = map[int32]string{
		0: "UNKNOWN",
		1: "EQUAL",
		2: "GREATER_THAN",
		3: "GREATER_THAN_OR_EQUAL",
	}
	BlenderConditionalExpression_Operator_value = map[string]int32{
		"UNKNOWN":               0,
		"EQUAL":                 1,
		"GREATER_THAN":          2,
		"GREATER_THAN_OR_EQUAL": 3,
	}
)

func (x BlenderConditionalExpression_Operator) Enum() *BlenderConditionalExpression_Operator {
	p := new(BlenderConditionalExpression_Operator)
	*p = x
	return p
}

func (x BlenderConditionalExpression_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlenderConditionalExpression_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_delivery_blender_proto_enumTypes[1].Descriptor()
}

func (BlenderConditionalExpression_Operator) Type() protoreflect.EnumType {
	return &file_proto_delivery_blender_proto_enumTypes[1]
}

func (x BlenderConditionalExpression_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlenderConditionalExpression_Operator.Descriptor instead.
func (BlenderConditionalExpression_Operator) EnumDescriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{5, 0}
}

type HyperloopConditionalExpression_Operator int32

const (
	HyperloopConditionalExpression_UNKNOWN               HyperloopConditionalExpression_Operator = 0
	HyperloopConditionalExpression_EQUAL                 HyperloopConditionalExpression_Operator = 1
	HyperloopConditionalExpression_GREATER_THAN          HyperloopConditionalExpression_Operator = 2
	HyperloopConditionalExpression_GREATER_THAN_OR_EQUAL HyperloopConditionalExpression_Operator = 3
)

// Enum value maps for HyperloopConditionalExpression_Operator.
var (
	HyperloopConditionalExpression_Operator_name = map[int32]string{
		0: "UNKNOWN",
		1: "EQUAL",
		2: "GREATER_THAN",
		3: "GREATER_THAN_OR_EQUAL",
	}
	HyperloopConditionalExpression_Operator_value = map[string]int32{
		"UNKNOWN":               0,
		"EQUAL":                 1,
		"GREATER_THAN":          2,
		"GREATER_THAN_OR_EQUAL": 3,
	}
)

func (x HyperloopConditionalExpression_Operator) Enum() *HyperloopConditionalExpression_Operator {
	p := new(HyperloopConditionalExpression_Operator)
	*p = x
	return p
}

func (x HyperloopConditionalExpression_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HyperloopConditionalExpression_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_delivery_blender_proto_enumTypes[2].Descriptor()
}

func (HyperloopConditionalExpression_Operator) Type() protoreflect.EnumType {
	return &file_proto_delivery_blender_proto_enumTypes[2]
}

func (x HyperloopConditionalExpression_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HyperloopConditionalExpression_Operator.Descriptor instead.
func (HyperloopConditionalExpression_Operator) EnumDescriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{14, 0}
}

type LeafExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lookups []*Lookup `protobuf:"bytes,1,rep,name=lookups,proto3" json:"lookups,omitempty"`
	Default float32   `protobuf:"fixed32,2,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *LeafExpression) Reset() {
	*x = LeafExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeafExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeafExpression) ProtoMessage() {}

func (x *LeafExpression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeafExpression.ProtoReflect.Descriptor instead.
func (*LeafExpression) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{0}
}

func (x *LeafExpression) GetLookups() []*Lookup {
	if x != nil {
		return x.Lookups
	}
	return nil
}

func (x *LeafExpression) GetDefault() float32 {
	if x != nil {
		return x.Default
	}
	return 0
}

type Lookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to LookupType:
	//	*Lookup_FeatureId
	//	*Lookup_ParameterKey
	LookupType isLookup_LookupType `protobuf_oneof:"lookup_type"`
}

func (x *Lookup) Reset() {
	*x = Lookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lookup) ProtoMessage() {}

func (x *Lookup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lookup.ProtoReflect.Descriptor instead.
func (*Lookup) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{1}
}

func (m *Lookup) GetLookupType() isLookup_LookupType {
	if m != nil {
		return m.LookupType
	}
	return nil
}

func (x *Lookup) GetFeatureId() uint64 {
	if x, ok := x.GetLookupType().(*Lookup_FeatureId); ok {
		return x.FeatureId
	}
	return 0
}

func (x *Lookup) GetParameterKey() uint64 {
	if x, ok := x.GetLookupType().(*Lookup_ParameterKey); ok {
		return x.ParameterKey
	}
	return 0
}

type isLookup_LookupType interface {
	isLookup_LookupType()
}

type Lookup_FeatureId struct {
	FeatureId uint64 `protobuf:"varint,1,opt,name=feature_id,json=featureId,proto3,oneof"`
}

type Lookup_ParameterKey struct {
	ParameterKey uint64 `protobuf:"varint,2,opt,name=parameter_key,json=parameterKey,proto3,oneof"`
}

func (*Lookup_FeatureId) isLookup_LookupType() {}

func (*Lookup_ParameterKey) isLookup_LookupType() {}

type BlenderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityScore *BlenderExpression `protobuf:"bytes,1,opt,name=quality_score,json=qualityScore,proto3" json:"quality_score,omitempty"`
	SortKey      *BlenderSortKey    `protobuf:"bytes,2,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
}

func (x *BlenderConfig) Reset() {
	*x = BlenderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlenderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlenderConfig) ProtoMessage() {}

func (x *BlenderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlenderConfig.ProtoReflect.Descriptor instead.
func (*BlenderConfig) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{2}
}

func (x *BlenderConfig) GetQualityScore() *BlenderExpression {
	if x != nil {
		return x.QualityScore
	}
	return nil
}

func (x *BlenderConfig) GetSortKey() *BlenderSortKey {
	if x != nil {
		return x.SortKey
	}
	return nil
}

type BlenderExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExpType:
	//	*BlenderExpression_Leaf
	//	*BlenderExpression_ArithmeticExp
	//	*BlenderExpression_ConditionalExp
	ExpType isBlenderExpression_ExpType `protobuf_oneof:"exp_type"`
}

func (x *BlenderExpression) Reset() {
	*x = BlenderExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlenderExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlenderExpression) ProtoMessage() {}

func (x *BlenderExpression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlenderExpression.ProtoReflect.Descriptor instead.
func (*BlenderExpression) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{3}
}

func (m *BlenderExpression) GetExpType() isBlenderExpression_ExpType {
	if m != nil {
		return m.ExpType
	}
	return nil
}

func (x *BlenderExpression) GetLeaf() *LeafExpression {
	if x, ok := x.GetExpType().(*BlenderExpression_Leaf); ok {
		return x.Leaf
	}
	return nil
}

func (x *BlenderExpression) GetArithmeticExp() *BlenderArithmeticExpression {
	if x, ok := x.GetExpType().(*BlenderExpression_ArithmeticExp); ok {
		return x.ArithmeticExp
	}
	return nil
}

func (x *BlenderExpression) GetConditionalExp() *BlenderConditionalExpression {
	if x, ok := x.GetExpType().(*BlenderExpression_ConditionalExp); ok {
		return x.ConditionalExp
	}
	return nil
}

type isBlenderExpression_ExpType interface {
	isBlenderExpression_ExpType()
}

type BlenderExpression_Leaf struct {
	Leaf *LeafExpression `protobuf:"bytes,1,opt,name=leaf,proto3,oneof"`
}

type BlenderExpression_ArithmeticExp struct {
	ArithmeticExp *BlenderArithmeticExpression `protobuf:"bytes,2,opt,name=arithmetic_exp,json=arithmeticExp,proto3,oneof"`
}

type BlenderExpression_ConditionalExp struct {
	ConditionalExp *BlenderConditionalExpression `protobuf:"bytes,3,opt,name=conditional_exp,json=conditionalExp,proto3,oneof"`
}

func (*BlenderExpression_Leaf) isBlenderExpression_ExpType() {}

func (*BlenderExpression_ArithmeticExp) isBlenderExpression_ExpType() {}

func (*BlenderExpression_ConditionalExp) isBlenderExpression_ExpType() {}

type BlenderArithmeticExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op     BlenderArithmeticExpression_Operator `protobuf:"varint,1,opt,name=op,proto3,enum=delivery.BlenderArithmeticExpression_Operator" json:"op,omitempty"`
	Inputs []*BlenderExpression                 `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *BlenderArithmeticExpression) Reset() {
	*x = BlenderArithmeticExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlenderArithmeticExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlenderArithmeticExpression) ProtoMessage() {}

func (x *BlenderArithmeticExpression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlenderArithmeticExpression.ProtoReflect.Descriptor instead.
func (*BlenderArithmeticExpression) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{4}
}

func (x *BlenderArithmeticExpression) GetOp() BlenderArithmeticExpression_Operator {
	if x != nil {
		return x.Op
	}
	return BlenderArithmeticExpression_UNKNOWN
}

func (x *BlenderArithmeticExpression) GetInputs() []*BlenderExpression {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type BlenderConditionalExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op           BlenderConditionalExpression_Operator `protobuf:"varint,1,opt,name=op,proto3,enum=delivery.BlenderConditionalExpression_Operator" json:"op,omitempty"`
	PredicateLhs *BlenderExpression                    `protobuf:"bytes,2,opt,name=predicate_lhs,json=predicateLhs,proto3" json:"predicate_lhs,omitempty"`
	PredicateRhs *BlenderExpression                    `protobuf:"bytes,3,opt,name=predicate_rhs,json=predicateRhs,proto3" json:"predicate_rhs,omitempty"`
	ThenBranch   *BlenderExpression                    `protobuf:"bytes,4,opt,name=then_branch,json=thenBranch,proto3" json:"then_branch,omitempty"`
	ElseBranch   *BlenderExpression                    `protobuf:"bytes,5,opt,name=else_branch,json=elseBranch,proto3" json:"else_branch,omitempty"`
}

func (x *BlenderConditionalExpression) Reset() {
	*x = BlenderConditionalExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlenderConditionalExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlenderConditionalExpression) ProtoMessage() {}

func (x *BlenderConditionalExpression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlenderConditionalExpression.ProtoReflect.Descriptor instead.
func (*BlenderConditionalExpression) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{5}
}

func (x *BlenderConditionalExpression) GetOp() BlenderConditionalExpression_Operator {
	if x != nil {
		return x.Op
	}
	return BlenderConditionalExpression_UNKNOWN
}

func (x *BlenderConditionalExpression) GetPredicateLhs() *BlenderExpression {
	if x != nil {
		return x.PredicateLhs
	}
	return nil
}

func (x *BlenderConditionalExpression) GetPredicateRhs() *BlenderExpression {
	if x != nil {
		return x.PredicateRhs
	}
	return nil
}

func (x *BlenderConditionalExpression) GetThenBranch() *BlenderExpression {
	if x != nil {
		return x.ThenBranch
	}
	return nil
}

func (x *BlenderConditionalExpression) GetElseBranch() *BlenderExpression {
	if x != nil {
		return x.ElseBranch
	}
	return nil
}

type BlenderSortKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*BlenderExpression `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *BlenderSortKey) Reset() {
	*x = BlenderSortKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlenderSortKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlenderSortKey) ProtoMessage() {}

func (x *BlenderSortKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlenderSortKey.ProtoReflect.Descriptor instead.
func (*BlenderSortKey) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{6}
}

func (x *BlenderSortKey) GetElements() []*BlenderExpression {
	if x != nil {
		return x.Elements
	}
	return nil
}

type HyperloopConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters map[uint64]*HyperloopParameter `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HyperloopConfig) Reset() {
	*x = HyperloopConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopConfig) ProtoMessage() {}

func (x *HyperloopConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopConfig.ProtoReflect.Descriptor instead.
func (*HyperloopConfig) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{7}
}

func (x *HyperloopConfig) GetParameters() map[uint64]*HyperloopParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type HyperloopParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups  []*HyperloopGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	Default float32           `protobuf:"fixed32,2,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *HyperloopParameter) Reset() {
	*x = HyperloopParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopParameter) ProtoMessage() {}

func (x *HyperloopParameter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopParameter.ProtoReflect.Descriptor instead.
func (*HyperloopParameter) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{8}
}

func (x *HyperloopParameter) GetGroups() []*HyperloopGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *HyperloopParameter) GetDefault() float32 {
	if x != nil {
		return x.Default
	}
	return 0
}

type HyperloopGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowBucket  int32                `protobuf:"varint,1,opt,name=low_bucket,json=lowBucket,proto3" json:"low_bucket,omitempty"`
	HighBucket int32                `protobuf:"varint,2,opt,name=high_bucket,json=highBucket,proto3" json:"high_bucket,omitempty"`
	Exp        *HyperloopExpression `protobuf:"bytes,3,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (x *HyperloopGroup) Reset() {
	*x = HyperloopGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopGroup) ProtoMessage() {}

func (x *HyperloopGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopGroup.ProtoReflect.Descriptor instead.
func (*HyperloopGroup) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{9}
}

func (x *HyperloopGroup) GetLowBucket() int32 {
	if x != nil {
		return x.LowBucket
	}
	return 0
}

func (x *HyperloopGroup) GetHighBucket() int32 {
	if x != nil {
		return x.HighBucket
	}
	return 0
}

func (x *HyperloopGroup) GetExp() *HyperloopExpression {
	if x != nil {
		return x.Exp
	}
	return nil
}

type HyperloopExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to NodeType:
	//	*HyperloopExpression_Leaf
	//	*HyperloopExpression_GeneratorExp
	//	*HyperloopExpression_ConditionalExp
	NodeType isHyperloopExpression_NodeType `protobuf_oneof:"node_type"`
}

func (x *HyperloopExpression) Reset() {
	*x = HyperloopExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopExpression) ProtoMessage() {}

func (x *HyperloopExpression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopExpression.ProtoReflect.Descriptor instead.
func (*HyperloopExpression) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{10}
}

func (m *HyperloopExpression) GetNodeType() isHyperloopExpression_NodeType {
	if m != nil {
		return m.NodeType
	}
	return nil
}

func (x *HyperloopExpression) GetLeaf() *LeafExpression {
	if x, ok := x.GetNodeType().(*HyperloopExpression_Leaf); ok {
		return x.Leaf
	}
	return nil
}

func (x *HyperloopExpression) GetGeneratorExp() *HyperloopGeneratorExpression {
	if x, ok := x.GetNodeType().(*HyperloopExpression_GeneratorExp); ok {
		return x.GeneratorExp
	}
	return nil
}

func (x *HyperloopExpression) GetConditionalExp() *HyperloopConditionalExpression {
	if x, ok := x.GetNodeType().(*HyperloopExpression_ConditionalExp); ok {
		return x.ConditionalExp
	}
	return nil
}

type isHyperloopExpression_NodeType interface {
	isHyperloopExpression_NodeType()
}

type HyperloopExpression_Leaf struct {
	Leaf *LeafExpression `protobuf:"bytes,1,opt,name=leaf,proto3,oneof"`
}

type HyperloopExpression_GeneratorExp struct {
	GeneratorExp *HyperloopGeneratorExpression `protobuf:"bytes,2,opt,name=generator_exp,json=generatorExp,proto3,oneof"`
}

type HyperloopExpression_ConditionalExp struct {
	ConditionalExp *HyperloopConditionalExpression `protobuf:"bytes,3,opt,name=conditional_exp,json=conditionalExp,proto3,oneof"`
}

func (*HyperloopExpression_Leaf) isHyperloopExpression_NodeType() {}

func (*HyperloopExpression_GeneratorExp) isHyperloopExpression_NodeType() {}

func (*HyperloopExpression_ConditionalExp) isHyperloopExpression_NodeType() {}

type HyperloopGeneratorExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Generator:
	//	*HyperloopGeneratorExpression_Uniform
	//	*HyperloopGeneratorExpression_UniformMulti
	Generator isHyperloopGeneratorExpression_Generator `protobuf_oneof:"generator"`
}

func (x *HyperloopGeneratorExpression) Reset() {
	*x = HyperloopGeneratorExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopGeneratorExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopGeneratorExpression) ProtoMessage() {}

func (x *HyperloopGeneratorExpression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopGeneratorExpression.ProtoReflect.Descriptor instead.
func (*HyperloopGeneratorExpression) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{11}
}

func (m *HyperloopGeneratorExpression) GetGenerator() isHyperloopGeneratorExpression_Generator {
	if m != nil {
		return m.Generator
	}
	return nil
}

func (x *HyperloopGeneratorExpression) GetUniform() *HyperloopUniformGenerator {
	if x, ok := x.GetGenerator().(*HyperloopGeneratorExpression_Uniform); ok {
		return x.Uniform
	}
	return nil
}

func (x *HyperloopGeneratorExpression) GetUniformMulti() *HyperloopUniformMultiGenerator {
	if x, ok := x.GetGenerator().(*HyperloopGeneratorExpression_UniformMulti); ok {
		return x.UniformMulti
	}
	return nil
}

type isHyperloopGeneratorExpression_Generator interface {
	isHyperloopGeneratorExpression_Generator()
}

type HyperloopGeneratorExpression_Uniform struct {
	Uniform *HyperloopUniformGenerator `protobuf:"bytes,1,opt,name=uniform,proto3,oneof"`
}

type HyperloopGeneratorExpression_UniformMulti struct {
	UniformMulti *HyperloopUniformMultiGenerator `protobuf:"bytes,2,opt,name=uniform_multi,json=uniformMulti,proto3,oneof"`
}

func (*HyperloopGeneratorExpression_Uniform) isHyperloopGeneratorExpression_Generator() {}

func (*HyperloopGeneratorExpression_UniformMulti) isHyperloopGeneratorExpression_Generator() {}

type HyperloopUniformGenerator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LowBound  float32 `protobuf:"fixed32,1,opt,name=low_bound,json=lowBound,proto3" json:"low_bound,omitempty"`
	HighBound float32 `protobuf:"fixed32,2,opt,name=high_bound,json=highBound,proto3" json:"high_bound,omitempty"`
}

func (x *HyperloopUniformGenerator) Reset() {
	*x = HyperloopUniformGenerator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopUniformGenerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopUniformGenerator) ProtoMessage() {}

func (x *HyperloopUniformGenerator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopUniformGenerator.ProtoReflect.Descriptor instead.
func (*HyperloopUniformGenerator) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{12}
}

func (x *HyperloopUniformGenerator) GetLowBound() float32 {
	if x != nil {
		return x.LowBound
	}
	return 0
}

func (x *HyperloopUniformGenerator) GetHighBound() float32 {
	if x != nil {
		return x.HighBound
	}
	return 0
}

type HyperloopUniformMultiGenerator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  float32 `protobuf:"fixed32,1,opt,name=base,proto3" json:"base,omitempty"`
	Multi float32 `protobuf:"fixed32,2,opt,name=multi,proto3" json:"multi,omitempty"`
}

func (x *HyperloopUniformMultiGenerator) Reset() {
	*x = HyperloopUniformMultiGenerator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopUniformMultiGenerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopUniformMultiGenerator) ProtoMessage() {}

func (x *HyperloopUniformMultiGenerator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopUniformMultiGenerator.ProtoReflect.Descriptor instead.
func (*HyperloopUniformMultiGenerator) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{13}
}

func (x *HyperloopUniformMultiGenerator) GetBase() float32 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *HyperloopUniformMultiGenerator) GetMulti() float32 {
	if x != nil {
		return x.Multi
	}
	return 0
}

type HyperloopConditionalExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op           HyperloopConditionalExpression_Operator `protobuf:"varint,1,opt,name=op,proto3,enum=delivery.HyperloopConditionalExpression_Operator" json:"op,omitempty"`
	PredicateLhs *HyperloopExpression                    `protobuf:"bytes,2,opt,name=predicate_lhs,json=predicateLhs,proto3" json:"predicate_lhs,omitempty"`
	PredicateRhs *HyperloopExpression                    `protobuf:"bytes,3,opt,name=predicate_rhs,json=predicateRhs,proto3" json:"predicate_rhs,omitempty"`
	ThenBranch   *HyperloopExpression                    `protobuf:"bytes,4,opt,name=then_branch,json=thenBranch,proto3" json:"then_branch,omitempty"`
	ElseBranch   *HyperloopExpression                    `protobuf:"bytes,5,opt,name=else_branch,json=elseBranch,proto3" json:"else_branch,omitempty"`
}

func (x *HyperloopConditionalExpression) Reset() {
	*x = HyperloopConditionalExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopConditionalExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopConditionalExpression) ProtoMessage() {}

func (x *HyperloopConditionalExpression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopConditionalExpression.ProtoReflect.Descriptor instead.
func (*HyperloopConditionalExpression) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{14}
}

func (x *HyperloopConditionalExpression) GetOp() HyperloopConditionalExpression_Operator {
	if x != nil {
		return x.Op
	}
	return HyperloopConditionalExpression_UNKNOWN
}

func (x *HyperloopConditionalExpression) GetPredicateLhs() *HyperloopExpression {
	if x != nil {
		return x.PredicateLhs
	}
	return nil
}

func (x *HyperloopConditionalExpression) GetPredicateRhs() *HyperloopExpression {
	if x != nil {
		return x.PredicateRhs
	}
	return nil
}

func (x *HyperloopConditionalExpression) GetThenBranch() *HyperloopExpression {
	if x != nil {
		return x.ThenBranch
	}
	return nil
}

func (x *HyperloopConditionalExpression) GetElseBranch() *HyperloopExpression {
	if x != nil {
		return x.ElseBranch
	}
	return nil
}

type HyperloopLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParameterLogs map[uint64]*HyperloopParameterLog `protobuf:"bytes,1,rep,name=parameter_logs,json=parameterLogs,proto3" json:"parameter_logs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HyperloopLog) Reset() {
	*x = HyperloopLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopLog) ProtoMessage() {}

func (x *HyperloopLog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopLog.ProtoReflect.Descriptor instead.
func (*HyperloopLog) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{15}
}

func (x *HyperloopLog) GetParameterLogs() map[uint64]*HyperloopParameterLog {
	if x != nil {
		return x.ParameterLogs
	}
	return nil
}

type HyperloopParameterLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket int32   `protobuf:"varint,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Value  float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HyperloopParameterLog) Reset() {
	*x = HyperloopParameterLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperloopParameterLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperloopParameterLog) ProtoMessage() {}

func (x *HyperloopParameterLog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperloopParameterLog.ProtoReflect.Descriptor instead.
func (*HyperloopParameterLog) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{16}
}

func (x *HyperloopParameterLog) GetBucket() int32 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

func (x *HyperloopParameterLog) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_proto_delivery_blender_proto protoreflect.FileDescriptor

var file_proto_delivery_blender_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x22, 0x56, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x66,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0x5f, 0x0a, 0x06, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0a, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xf2, 0x01, 0x0a, 0x11, 0x42,
	0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x65, 0x61, 0x66, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66,
	0x12, 0x4e, 0x0a, 0x0e, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x65,
	0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0d, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x45, 0x78, 0x70,
	0x12, 0x51, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x86, 0x02, 0x0a, 0x1b, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12,
	0x33, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x22, 0x72, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50,
	0x4c, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x10, 0x04, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x06,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x45, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x22, 0xb0, 0x03, 0x0a, 0x1c, 0x42, 0x6c, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x68, 0x73, 0x12, 0x40, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x68, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42,
	0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x68, 0x73, 0x12, 0x3c,
	0x0a, 0x0b, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42,
	0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x74, 0x68, 0x65, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x0b,
	0x65, 0x6c, 0x73, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x65, 0x6c, 0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x4f, 0x0a, 0x08, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x49, 0x0a, 0x0e, 0x42,
	0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x0f, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x5b, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x60, 0x0a, 0x12, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x5f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x77,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x69, 0x67,
	0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65, 0x78, 0x70, 0x22, 0xf6, 0x01, 0x0a, 0x13, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x65, 0x61, 0x66, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66,
	0x12, 0x4d, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x78,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x12,
	0x53, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x45, 0x78, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xbd, 0x01, 0x0a, 0x1c, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x4f, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x55,
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x42, 0x0b, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x57, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x55, 0x6e,
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x68, 0x69, 0x67, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x4a, 0x0a, 0x1e, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x22, 0xbc, 0x03, 0x0a, 0x1e, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x42, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x68, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x68, 0x73,
	0x12, 0x42, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x68,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x68, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x68, 0x65, 0x6e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x6c, 0x73, 0x65, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x22, 0x4f, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x10, 0x03, 0x22, 0xc3, 0x01, 0x0a, 0x0c, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x50, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x1a, 0x61, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x6f, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x15, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x75, 0x0a, 0x1a, 0x61, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x42, 0x07, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x01, 0x5a, 0x38, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64,
	0x61, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0xaa, 0x02, 0x11, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64,
	0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_delivery_blender_proto_rawDescOnce sync.Once
	file_proto_delivery_blender_proto_rawDescData = file_proto_delivery_blender_proto_rawDesc
)

func file_proto_delivery_blender_proto_rawDescGZIP() []byte {
	file_proto_delivery_blender_proto_rawDescOnce.Do(func() {
		file_proto_delivery_blender_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_delivery_blender_proto_rawDescData)
	})
	return file_proto_delivery_blender_proto_rawDescData
}

var file_proto_delivery_blender_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_delivery_blender_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_proto_delivery_blender_proto_goTypes = []interface{}{
	(BlenderArithmeticExpression_Operator)(0),    // 0: delivery.BlenderArithmeticExpression.Operator
	(BlenderConditionalExpression_Operator)(0),   // 1: delivery.BlenderConditionalExpression.Operator
	(HyperloopConditionalExpression_Operator)(0), // 2: delivery.HyperloopConditionalExpression.Operator
	(*LeafExpression)(nil),                       // 3: delivery.LeafExpression
	(*Lookup)(nil),                               // 4: delivery.Lookup
	(*BlenderConfig)(nil),                        // 5: delivery.BlenderConfig
	(*BlenderExpression)(nil),                    // 6: delivery.BlenderExpression
	(*BlenderArithmeticExpression)(nil),          // 7: delivery.BlenderArithmeticExpression
	(*BlenderConditionalExpression)(nil),         // 8: delivery.BlenderConditionalExpression
	(*BlenderSortKey)(nil),                       // 9: delivery.BlenderSortKey
	(*HyperloopConfig)(nil),                      // 10: delivery.HyperloopConfig
	(*HyperloopParameter)(nil),                   // 11: delivery.HyperloopParameter
	(*HyperloopGroup)(nil),                       // 12: delivery.HyperloopGroup
	(*HyperloopExpression)(nil),                  // 13: delivery.HyperloopExpression
	(*HyperloopGeneratorExpression)(nil),         // 14: delivery.HyperloopGeneratorExpression
	(*HyperloopUniformGenerator)(nil),            // 15: delivery.HyperloopUniformGenerator
	(*HyperloopUniformMultiGenerator)(nil),       // 16: delivery.HyperloopUniformMultiGenerator
	(*HyperloopConditionalExpression)(nil),       // 17: delivery.HyperloopConditionalExpression
	(*HyperloopLog)(nil),                         // 18: delivery.HyperloopLog
	(*HyperloopParameterLog)(nil),                // 19: delivery.HyperloopParameterLog
	nil,                                          // 20: delivery.HyperloopConfig.ParametersEntry
	nil,                                          // 21: delivery.HyperloopLog.ParameterLogsEntry
}
var file_proto_delivery_blender_proto_depIdxs = []int32{
	4,  // 0: delivery.LeafExpression.lookups:type_name -> delivery.Lookup
	6,  // 1: delivery.BlenderConfig.quality_score:type_name -> delivery.BlenderExpression
	9,  // 2: delivery.BlenderConfig.sort_key:type_name -> delivery.BlenderSortKey
	3,  // 3: delivery.BlenderExpression.leaf:type_name -> delivery.LeafExpression
	7,  // 4: delivery.BlenderExpression.arithmetic_exp:type_name -> delivery.BlenderArithmeticExpression
	8,  // 5: delivery.BlenderExpression.conditional_exp:type_name -> delivery.BlenderConditionalExpression
	0,  // 6: delivery.BlenderArithmeticExpression.op:type_name -> delivery.BlenderArithmeticExpression.Operator
	6,  // 7: delivery.BlenderArithmeticExpression.inputs:type_name -> delivery.BlenderExpression
	1,  // 8: delivery.BlenderConditionalExpression.op:type_name -> delivery.BlenderConditionalExpression.Operator
	6,  // 9: delivery.BlenderConditionalExpression.predicate_lhs:type_name -> delivery.BlenderExpression
	6,  // 10: delivery.BlenderConditionalExpression.predicate_rhs:type_name -> delivery.BlenderExpression
	6,  // 11: delivery.BlenderConditionalExpression.then_branch:type_name -> delivery.BlenderExpression
	6,  // 12: delivery.BlenderConditionalExpression.else_branch:type_name -> delivery.BlenderExpression
	6,  // 13: delivery.BlenderSortKey.elements:type_name -> delivery.BlenderExpression
	20, // 14: delivery.HyperloopConfig.parameters:type_name -> delivery.HyperloopConfig.ParametersEntry
	12, // 15: delivery.HyperloopParameter.groups:type_name -> delivery.HyperloopGroup
	13, // 16: delivery.HyperloopGroup.exp:type_name -> delivery.HyperloopExpression
	3,  // 17: delivery.HyperloopExpression.leaf:type_name -> delivery.LeafExpression
	14, // 18: delivery.HyperloopExpression.generator_exp:type_name -> delivery.HyperloopGeneratorExpression
	17, // 19: delivery.HyperloopExpression.conditional_exp:type_name -> delivery.HyperloopConditionalExpression
	15, // 20: delivery.HyperloopGeneratorExpression.uniform:type_name -> delivery.HyperloopUniformGenerator
	16, // 21: delivery.HyperloopGeneratorExpression.uniform_multi:type_name -> delivery.HyperloopUniformMultiGenerator
	2,  // 22: delivery.HyperloopConditionalExpression.op:type_name -> delivery.HyperloopConditionalExpression.Operator
	13, // 23: delivery.HyperloopConditionalExpression.predicate_lhs:type_name -> delivery.HyperloopExpression
	13, // 24: delivery.HyperloopConditionalExpression.predicate_rhs:type_name -> delivery.HyperloopExpression
	13, // 25: delivery.HyperloopConditionalExpression.then_branch:type_name -> delivery.HyperloopExpression
	13, // 26: delivery.HyperloopConditionalExpression.else_branch:type_name -> delivery.HyperloopExpression
	21, // 27: delivery.HyperloopLog.parameter_logs:type_name -> delivery.HyperloopLog.ParameterLogsEntry
	11, // 28: delivery.HyperloopConfig.ParametersEntry.value:type_name -> delivery.HyperloopParameter
	19, // 29: delivery.HyperloopLog.ParameterLogsEntry.value:type_name -> delivery.HyperloopParameterLog
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_proto_delivery_blender_proto_init() }
func file_proto_delivery_blender_proto_init() {
	if File_proto_delivery_blender_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_delivery_blender_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeafExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlenderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlenderExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlenderArithmeticExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlenderConditionalExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlenderSortKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopGeneratorExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopUniformGenerator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopUniformMultiGenerator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopConditionalExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperloopParameterLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_delivery_blender_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Lookup_FeatureId)(nil),
		(*Lookup_ParameterKey)(nil),
	}
	file_proto_delivery_blender_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*BlenderExpression_Leaf)(nil),
		(*BlenderExpression_ArithmeticExp)(nil),
		(*BlenderExpression_ConditionalExp)(nil),
	}
	file_proto_delivery_blender_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*HyperloopExpression_Leaf)(nil),
		(*HyperloopExpression_GeneratorExp)(nil),
		(*HyperloopExpression_ConditionalExp)(nil),
	}
	file_proto_delivery_blender_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*HyperloopGeneratorExpression_Uniform)(nil),
		(*HyperloopGeneratorExpression_UniformMulti)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_delivery_blender_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_delivery_blender_proto_goTypes,
		DependencyIndexes: file_proto_delivery_blender_proto_depIdxs,
		EnumInfos:         file_proto_delivery_blender_proto_enumTypes,
		MessageInfos:      file_proto_delivery_blender_proto_msgTypes,
	}.Build()
	File_proto_delivery_blender_proto = out.File
	file_proto_delivery_blender_proto_rawDesc = nil
	file_proto_delivery_blender_proto_goTypes = nil
	file_proto_delivery_blender_proto_depIdxs = nil
}
