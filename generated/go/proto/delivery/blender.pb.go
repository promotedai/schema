// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: proto/delivery/blender.proto

package delivery

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RankingMethod int32

const (
	RankingMethod_QUALITY_SCORE RankingMethod = 0
	RankingMethod_REQUEST_ORDER RankingMethod = 1
)

// Enum value maps for RankingMethod.
var (
	RankingMethod_name = map[int32]string{
		0: "QUALITY_SCORE",
		1: "REQUEST_ORDER",
	}
	RankingMethod_value = map[string]int32{
		"QUALITY_SCORE": 0,
		"REQUEST_ORDER": 1,
	}
)

func (x RankingMethod) Enum() *RankingMethod {
	p := new(RankingMethod)
	*p = x
	return p
}

func (x RankingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RankingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_delivery_blender_proto_enumTypes[0].Descriptor()
}

func (RankingMethod) Type() protoreflect.EnumType {
	return &file_proto_delivery_blender_proto_enumTypes[0]
}

func (x RankingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RankingMethod.Descriptor instead.
func (RankingMethod) EnumDescriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{0}
}

type BlenderRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeName string `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	// Types that are assignable to Rule:
	//	*BlenderRule_PositiveRule
	//	*BlenderRule_InsertRule
	//	*BlenderRule_NegativeRule
	//	*BlenderRule_DiversityRule
	Rule isBlenderRule_Rule `protobuf_oneof:"rule"`
	// Types that are assignable to EvalMethod:
	//	*BlenderRule_Boolean
	//	*BlenderRule_Equal
	//	*BlenderRule_GreaterThan
	//	*BlenderRule_LessThan
	//	*BlenderRule_Interval
	//	*BlenderRule_EqualV2
	EvalMethod isBlenderRule_EvalMethod `protobuf_oneof:"eval_method"`
}

func (x *BlenderRule) Reset() {
	*x = BlenderRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlenderRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlenderRule) ProtoMessage() {}

func (x *BlenderRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlenderRule.ProtoReflect.Descriptor instead.
func (*BlenderRule) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{0}
}

func (x *BlenderRule) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (m *BlenderRule) GetRule() isBlenderRule_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (x *BlenderRule) GetPositiveRule() *PositiveRule {
	if x, ok := x.GetRule().(*BlenderRule_PositiveRule); ok {
		return x.PositiveRule
	}
	return nil
}

func (x *BlenderRule) GetInsertRule() *InsertRule {
	if x, ok := x.GetRule().(*BlenderRule_InsertRule); ok {
		return x.InsertRule
	}
	return nil
}

func (x *BlenderRule) GetNegativeRule() *NegativeRule {
	if x, ok := x.GetRule().(*BlenderRule_NegativeRule); ok {
		return x.NegativeRule
	}
	return nil
}

func (x *BlenderRule) GetDiversityRule() *DiversityRule {
	if x, ok := x.GetRule().(*BlenderRule_DiversityRule); ok {
		return x.DiversityRule
	}
	return nil
}

func (m *BlenderRule) GetEvalMethod() isBlenderRule_EvalMethod {
	if m != nil {
		return m.EvalMethod
	}
	return nil
}

func (x *BlenderRule) GetBoolean() *Boolean {
	if x, ok := x.GetEvalMethod().(*BlenderRule_Boolean); ok {
		return x.Boolean
	}
	return nil
}

// Deprecated: Do not use.
func (x *BlenderRule) GetEqual() *Equal {
	if x, ok := x.GetEvalMethod().(*BlenderRule_Equal); ok {
		return x.Equal
	}
	return nil
}

func (x *BlenderRule) GetGreaterThan() *GreaterThan {
	if x, ok := x.GetEvalMethod().(*BlenderRule_GreaterThan); ok {
		return x.GreaterThan
	}
	return nil
}

func (x *BlenderRule) GetLessThan() *LessThan {
	if x, ok := x.GetEvalMethod().(*BlenderRule_LessThan); ok {
		return x.LessThan
	}
	return nil
}

func (x *BlenderRule) GetInterval() *Interval {
	if x, ok := x.GetEvalMethod().(*BlenderRule_Interval); ok {
		return x.Interval
	}
	return nil
}

func (x *BlenderRule) GetEqualV2() *EqualV2 {
	if x, ok := x.GetEvalMethod().(*BlenderRule_EqualV2); ok {
		return x.EqualV2
	}
	return nil
}

type isBlenderRule_Rule interface {
	isBlenderRule_Rule()
}

type BlenderRule_PositiveRule struct {
	PositiveRule *PositiveRule `protobuf:"bytes,6,opt,name=positive_rule,json=positiveRule,proto3,oneof"`
}

type BlenderRule_InsertRule struct {
	InsertRule *InsertRule `protobuf:"bytes,7,opt,name=insert_rule,json=insertRule,proto3,oneof"`
}

type BlenderRule_NegativeRule struct {
	NegativeRule *NegativeRule `protobuf:"bytes,8,opt,name=negative_rule,json=negativeRule,proto3,oneof"`
}

type BlenderRule_DiversityRule struct {
	DiversityRule *DiversityRule `protobuf:"bytes,9,opt,name=diversity_rule,json=diversityRule,proto3,oneof"`
}

func (*BlenderRule_PositiveRule) isBlenderRule_Rule() {}

func (*BlenderRule_InsertRule) isBlenderRule_Rule() {}

func (*BlenderRule_NegativeRule) isBlenderRule_Rule() {}

func (*BlenderRule_DiversityRule) isBlenderRule_Rule() {}

type isBlenderRule_EvalMethod interface {
	isBlenderRule_EvalMethod()
}

type BlenderRule_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,11,opt,name=boolean,proto3,oneof"`
}

type BlenderRule_Equal struct {
	// Deprecated: Do not use.
	Equal *Equal `protobuf:"bytes,12,opt,name=equal,proto3,oneof"`
}

type BlenderRule_GreaterThan struct {
	GreaterThan *GreaterThan `protobuf:"bytes,13,opt,name=greater_than,json=greaterThan,proto3,oneof"`
}

type BlenderRule_LessThan struct {
	LessThan *LessThan `protobuf:"bytes,14,opt,name=less_than,json=lessThan,proto3,oneof"`
}

type BlenderRule_Interval struct {
	Interval *Interval `protobuf:"bytes,15,opt,name=interval,proto3,oneof"`
}

type BlenderRule_EqualV2 struct {
	EqualV2 *EqualV2 `protobuf:"bytes,16,opt,name=equal_v2,json=equalV2,proto3,oneof"`
}

func (*BlenderRule_Boolean) isBlenderRule_EvalMethod() {}

func (*BlenderRule_Equal) isBlenderRule_EvalMethod() {}

func (*BlenderRule_GreaterThan) isBlenderRule_EvalMethod() {}

func (*BlenderRule_LessThan) isBlenderRule_EvalMethod() {}

func (*BlenderRule_Interval) isBlenderRule_EvalMethod() {}

func (*BlenderRule_EqualV2) isBlenderRule_EvalMethod() {}

type Boolean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Boolean) Reset() {
	*x = Boolean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Boolean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Boolean) ProtoMessage() {}

func (x *Boolean) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Boolean.ProtoReflect.Descriptor instead.
func (*Boolean) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{1}
}

type EqualV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EqualityType:
	//	*EqualV2_Number
	//	*EqualV2_String_
	EqualityType isEqualV2_EqualityType `protobuf_oneof:"equality_type"`
}

func (x *EqualV2) Reset() {
	*x = EqualV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EqualV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EqualV2) ProtoMessage() {}

func (x *EqualV2) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EqualV2.ProtoReflect.Descriptor instead.
func (*EqualV2) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{2}
}

func (m *EqualV2) GetEqualityType() isEqualV2_EqualityType {
	if m != nil {
		return m.EqualityType
	}
	return nil
}

func (x *EqualV2) GetNumber() *Equal {
	if x, ok := x.GetEqualityType().(*EqualV2_Number); ok {
		return x.Number
	}
	return nil
}

func (x *EqualV2) GetString_() *StringEquality {
	if x, ok := x.GetEqualityType().(*EqualV2_String_); ok {
		return x.String_
	}
	return nil
}

type isEqualV2_EqualityType interface {
	isEqualV2_EqualityType()
}

type EqualV2_Number struct {
	Number *Equal `protobuf:"bytes,1,opt,name=number,proto3,oneof"`
}

type EqualV2_String_ struct {
	String_ *StringEquality `protobuf:"bytes,2,opt,name=string,proto3,oneof"`
}

func (*EqualV2_Number) isEqualV2_EqualityType() {}

func (*EqualV2_String_) isEqualV2_EqualityType() {}

type Equal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComparedTo float32 `protobuf:"fixed32,1,opt,name=compared_to,json=comparedTo,proto3" json:"compared_to,omitempty"`
	Tolerance  float32 `protobuf:"fixed32,2,opt,name=tolerance,proto3" json:"tolerance,omitempty"`
}

func (x *Equal) Reset() {
	*x = Equal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Equal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equal) ProtoMessage() {}

func (x *Equal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equal.ProtoReflect.Descriptor instead.
func (*Equal) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{3}
}

func (x *Equal) GetComparedTo() float32 {
	if x != nil {
		return x.ComparedTo
	}
	return 0
}

func (x *Equal) GetTolerance() float32 {
	if x != nil {
		return x.Tolerance
	}
	return 0
}

type StringEquality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*StringEquality_Raw
	Value isStringEquality_Value `protobuf_oneof:"value"`
}

func (x *StringEquality) Reset() {
	*x = StringEquality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringEquality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringEquality) ProtoMessage() {}

func (x *StringEquality) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringEquality.ProtoReflect.Descriptor instead.
func (*StringEquality) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{4}
}

func (m *StringEquality) GetValue() isStringEquality_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *StringEquality) GetRaw() string {
	if x, ok := x.GetValue().(*StringEquality_Raw); ok {
		return x.Raw
	}
	return ""
}

type isStringEquality_Value interface {
	isStringEquality_Value()
}

type StringEquality_Raw struct {
	Raw string `protobuf:"bytes,1,opt,name=raw,proto3,oneof"`
}

func (*StringEquality_Raw) isStringEquality_Value() {}

type GreaterThan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComparedTo float32 `protobuf:"fixed32,1,opt,name=compared_to,json=comparedTo,proto3" json:"compared_to,omitempty"`
	OrEqual    bool    `protobuf:"varint,2,opt,name=or_equal,json=orEqual,proto3" json:"or_equal,omitempty"`
}

func (x *GreaterThan) Reset() {
	*x = GreaterThan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreaterThan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreaterThan) ProtoMessage() {}

func (x *GreaterThan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreaterThan.ProtoReflect.Descriptor instead.
func (*GreaterThan) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{5}
}

func (x *GreaterThan) GetComparedTo() float32 {
	if x != nil {
		return x.ComparedTo
	}
	return 0
}

func (x *GreaterThan) GetOrEqual() bool {
	if x != nil {
		return x.OrEqual
	}
	return false
}

type LessThan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComparedTo float32 `protobuf:"fixed32,1,opt,name=compared_to,json=comparedTo,proto3" json:"compared_to,omitempty"`
	OrEqual    bool    `protobuf:"varint,2,opt,name=or_equal,json=orEqual,proto3" json:"or_equal,omitempty"`
}

func (x *LessThan) Reset() {
	*x = LessThan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LessThan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LessThan) ProtoMessage() {}

func (x *LessThan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LessThan.ProtoReflect.Descriptor instead.
func (*LessThan) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{6}
}

func (x *LessThan) GetComparedTo() float32 {
	if x != nil {
		return x.ComparedTo
	}
	return 0
}

func (x *LessThan) GetOrEqual() bool {
	if x != nil {
		return x.OrEqual
	}
	return false
}

type Interval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpperBound     float32 `protobuf:"fixed32,1,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	LowerBound     float32 `protobuf:"fixed32,2,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	LowerInclusive bool    `protobuf:"varint,3,opt,name=lower_inclusive,json=lowerInclusive,proto3" json:"lower_inclusive,omitempty"`
	UpperInclusive bool    `protobuf:"varint,4,opt,name=upper_inclusive,json=upperInclusive,proto3" json:"upper_inclusive,omitempty"`
}

func (x *Interval) Reset() {
	*x = Interval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interval) ProtoMessage() {}

func (x *Interval) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interval.ProtoReflect.Descriptor instead.
func (*Interval) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{7}
}

func (x *Interval) GetUpperBound() float32 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

func (x *Interval) GetLowerBound() float32 {
	if x != nil {
		return x.LowerBound
	}
	return 0
}

func (x *Interval) GetLowerInclusive() bool {
	if x != nil {
		return x.LowerInclusive
	}
	return false
}

func (x *Interval) GetUpperInclusive() bool {
	if x != nil {
		return x.UpperInclusive
	}
	return false
}

type SparseIdMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
}

func (x *SparseIdMatch) Reset() {
	*x = SparseIdMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseIdMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseIdMatch) ProtoMessage() {}

func (x *SparseIdMatch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseIdMatch.ProtoReflect.Descriptor instead.
func (*SparseIdMatch) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{8}
}

func (x *SparseIdMatch) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

type PositiveRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectPct *float64 `protobuf:"fixed64,1,opt,name=select_pct,json=selectPct,proto3,oneof" json:"select_pct,omitempty"`
	MinPos    *uint64  `protobuf:"varint,2,opt,name=min_pos,json=minPos,proto3,oneof" json:"min_pos,omitempty"`
	MaxPos    *uint64  `protobuf:"varint,3,opt,name=max_pos,json=maxPos,proto3,oneof" json:"max_pos,omitempty"`
}

func (x *PositiveRule) Reset() {
	*x = PositiveRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositiveRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositiveRule) ProtoMessage() {}

func (x *PositiveRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositiveRule.ProtoReflect.Descriptor instead.
func (*PositiveRule) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{9}
}

func (x *PositiveRule) GetSelectPct() float64 {
	if x != nil && x.SelectPct != nil {
		return *x.SelectPct
	}
	return 0
}

func (x *PositiveRule) GetMinPos() uint64 {
	if x != nil && x.MinPos != nil {
		return *x.MinPos
	}
	return 0
}

func (x *PositiveRule) GetMaxPos() uint64 {
	if x != nil && x.MaxPos != nil {
		return *x.MaxPos
	}
	return 0
}

type InsertRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectPct              *float64      `protobuf:"fixed64,1,opt,name=select_pct,json=selectPct,proto3,oneof" json:"select_pct,omitempty"`
	MinPos                 *uint64       `protobuf:"varint,2,opt,name=min_pos,json=minPos,proto3,oneof" json:"min_pos,omitempty"`
	MaxPos                 *uint64       `protobuf:"varint,3,opt,name=max_pos,json=maxPos,proto3,oneof" json:"max_pos,omitempty"`
	Priority               uint32        `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	AppliesToAllInsertions bool          `protobuf:"varint,5,opt,name=applies_to_all_insertions,json=appliesToAllInsertions,proto3" json:"applies_to_all_insertions,omitempty"`
	RankingMethod          RankingMethod `protobuf:"varint,6,opt,name=ranking_method,json=rankingMethod,proto3,enum=delivery.RankingMethod" json:"ranking_method,omitempty"`
}

func (x *InsertRule) Reset() {
	*x = InsertRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRule) ProtoMessage() {}

func (x *InsertRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRule.ProtoReflect.Descriptor instead.
func (*InsertRule) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{10}
}

func (x *InsertRule) GetSelectPct() float64 {
	if x != nil && x.SelectPct != nil {
		return *x.SelectPct
	}
	return 0
}

func (x *InsertRule) GetMinPos() uint64 {
	if x != nil && x.MinPos != nil {
		return *x.MinPos
	}
	return 0
}

func (x *InsertRule) GetMaxPos() uint64 {
	if x != nil && x.MaxPos != nil {
		return *x.MaxPos
	}
	return 0
}

func (x *InsertRule) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *InsertRule) GetAppliesToAllInsertions() bool {
	if x != nil {
		return x.AppliesToAllInsertions
	}
	return false
}

func (x *InsertRule) GetRankingMethod() RankingMethod {
	if x != nil {
		return x.RankingMethod
	}
	return RankingMethod_QUALITY_SCORE
}

type NegativeRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluckPct         *float64 `protobuf:"fixed64,1,opt,name=pluck_pct,json=pluckPct,proto3,oneof" json:"pluck_pct,omitempty"`
	ForbidLessPos    *uint64  `protobuf:"varint,2,opt,name=forbid_less_pos,json=forbidLessPos,proto3,oneof" json:"forbid_less_pos,omitempty"`
	MinSpacing       *uint64  `protobuf:"varint,3,opt,name=min_spacing,json=minSpacing,proto3,oneof" json:"min_spacing,omitempty"`
	ForbidGreaterPos *uint64  `protobuf:"varint,4,opt,name=forbid_greater_pos,json=forbidGreaterPos,proto3,oneof" json:"forbid_greater_pos,omitempty"`
	MaxCount         *uint64  `protobuf:"varint,5,opt,name=max_count,json=maxCount,proto3,oneof" json:"max_count,omitempty"`
}

func (x *NegativeRule) Reset() {
	*x = NegativeRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NegativeRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NegativeRule) ProtoMessage() {}

func (x *NegativeRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NegativeRule.ProtoReflect.Descriptor instead.
func (*NegativeRule) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{11}
}

func (x *NegativeRule) GetPluckPct() float64 {
	if x != nil && x.PluckPct != nil {
		return *x.PluckPct
	}
	return 0
}

func (x *NegativeRule) GetForbidLessPos() uint64 {
	if x != nil && x.ForbidLessPos != nil {
		return *x.ForbidLessPos
	}
	return 0
}

func (x *NegativeRule) GetMinSpacing() uint64 {
	if x != nil && x.MinSpacing != nil {
		return *x.MinSpacing
	}
	return 0
}

func (x *NegativeRule) GetForbidGreaterPos() uint64 {
	if x != nil && x.ForbidGreaterPos != nil {
		return *x.ForbidGreaterPos
	}
	return 0
}

func (x *NegativeRule) GetMaxCount() uint64 {
	if x != nil && x.MaxCount != nil {
		return *x.MaxCount
	}
	return 0
}

type DiversityRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Multi *float64 `protobuf:"fixed64,1,opt,name=multi,proto3,oneof" json:"multi,omitempty"`
}

func (x *DiversityRule) Reset() {
	*x = DiversityRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiversityRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiversityRule) ProtoMessage() {}

func (x *DiversityRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiversityRule.ProtoReflect.Descriptor instead.
func (*DiversityRule) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{12}
}

func (x *DiversityRule) GetMulti() float64 {
	if x != nil && x.Multi != nil {
		return *x.Multi
	}
	return 0
}

type BlenderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlenderRule        []*BlenderRule      `protobuf:"bytes,1,rep,name=blender_rule,json=blenderRule,proto3" json:"blender_rule,omitempty"`
	QualityScoreConfig *QualityScoreConfig `protobuf:"bytes,2,opt,name=quality_score_config,json=qualityScoreConfig,proto3" json:"quality_score_config,omitempty"`
}

func (x *BlenderConfig) Reset() {
	*x = BlenderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlenderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlenderConfig) ProtoMessage() {}

func (x *BlenderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlenderConfig.ProtoReflect.Descriptor instead.
func (*BlenderConfig) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{13}
}

func (x *BlenderConfig) GetBlenderRule() []*BlenderRule {
	if x != nil {
		return x.BlenderRule
	}
	return nil
}

func (x *BlenderConfig) GetQualityScoreConfig() *QualityScoreConfig {
	if x != nil {
		return x.QualityScoreConfig
	}
	return nil
}

type QualityScoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeightedSumTerm []*QualityScoreTerm `protobuf:"bytes,1,rep,name=weighted_sum_term,json=weightedSumTerm,proto3" json:"weighted_sum_term,omitempty"`
}

func (x *QualityScoreConfig) Reset() {
	*x = QualityScoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityScoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityScoreConfig) ProtoMessage() {}

func (x *QualityScoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityScoreConfig.ProtoReflect.Descriptor instead.
func (*QualityScoreConfig) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{14}
}

func (x *QualityScoreConfig) GetWeightedSumTerm() []*QualityScoreTerm {
	if x != nil {
		return x.WeightedSumTerm
	}
	return nil
}

type QualityScoreTerms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualityScoreTerms []*QualityScoreTerm `protobuf:"bytes,1,rep,name=quality_score_terms,json=qualityScoreTerms,proto3" json:"quality_score_terms,omitempty"`
}

func (x *QualityScoreTerms) Reset() {
	*x = QualityScoreTerms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityScoreTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityScoreTerms) ProtoMessage() {}

func (x *QualityScoreTerms) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityScoreTerms.ProtoReflect.Descriptor instead.
func (*QualityScoreTerms) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{15}
}

func (x *QualityScoreTerms) GetQualityScoreTerms() []*QualityScoreTerm {
	if x != nil {
		return x.QualityScoreTerms
	}
	return nil
}

type QualityScoreTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FetchMethod:
	//	*QualityScoreTerm_AttributeName
	//	*QualityScoreTerm_Product
	FetchMethod               isQualityScoreTerm_FetchMethod `protobuf_oneof:"fetch_method"`
	FetchHigh                 *float32                       `protobuf:"fixed32,10,opt,name=fetch_high,json=fetchHigh,proto3,oneof" json:"fetch_high,omitempty"`
	FetchLow                  *float32                       `protobuf:"fixed32,11,opt,name=fetch_low,json=fetchLow,proto3,oneof" json:"fetch_low,omitempty"`
	Weight                    *float32                       `protobuf:"fixed32,12,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	Offset                    float32                        `protobuf:"fixed32,13,opt,name=offset,proto3" json:"offset,omitempty"`
	TermConditionalEvaluation *TermConditionalEvaluation     `protobuf:"bytes,14,opt,name=term_conditional_evaluation,json=termConditionalEvaluation,proto3,oneof" json:"term_conditional_evaluation,omitempty"`
}

func (x *QualityScoreTerm) Reset() {
	*x = QualityScoreTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityScoreTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityScoreTerm) ProtoMessage() {}

func (x *QualityScoreTerm) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityScoreTerm.ProtoReflect.Descriptor instead.
func (*QualityScoreTerm) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{16}
}

func (m *QualityScoreTerm) GetFetchMethod() isQualityScoreTerm_FetchMethod {
	if m != nil {
		return m.FetchMethod
	}
	return nil
}

func (x *QualityScoreTerm) GetAttributeName() string {
	if x, ok := x.GetFetchMethod().(*QualityScoreTerm_AttributeName); ok {
		return x.AttributeName
	}
	return ""
}

func (x *QualityScoreTerm) GetProduct() *QualityScoreTerms {
	if x, ok := x.GetFetchMethod().(*QualityScoreTerm_Product); ok {
		return x.Product
	}
	return nil
}

func (x *QualityScoreTerm) GetFetchHigh() float32 {
	if x != nil && x.FetchHigh != nil {
		return *x.FetchHigh
	}
	return 0
}

func (x *QualityScoreTerm) GetFetchLow() float32 {
	if x != nil && x.FetchLow != nil {
		return *x.FetchLow
	}
	return 0
}

func (x *QualityScoreTerm) GetWeight() float32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *QualityScoreTerm) GetOffset() float32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QualityScoreTerm) GetTermConditionalEvaluation() *TermConditionalEvaluation {
	if x != nil {
		return x.TermConditionalEvaluation
	}
	return nil
}

type isQualityScoreTerm_FetchMethod interface {
	isQualityScoreTerm_FetchMethod()
}

type QualityScoreTerm_AttributeName struct {
	AttributeName string `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName,proto3,oneof"`
}

type QualityScoreTerm_Product struct {
	Product *QualityScoreTerms `protobuf:"bytes,3,opt,name=product,proto3,oneof"`
}

func (*QualityScoreTerm_AttributeName) isQualityScoreTerm_FetchMethod() {}

func (*QualityScoreTerm_Product) isQualityScoreTerm_FetchMethod() {}

type TermConditionalEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueIfFalse    float32 `protobuf:"fixed32,1,opt,name=value_if_false,json=valueIfFalse,proto3" json:"value_if_false,omitempty"`
	AttributeName   string  `protobuf:"bytes,2,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	HashedAttribute uint64  `protobuf:"varint,3,opt,name=hashed_attribute,json=hashedAttribute,proto3" json:"hashed_attribute,omitempty"`
	// Types that are assignable to EvalMethod:
	//	*TermConditionalEvaluation_Boolean
	//	*TermConditionalEvaluation_Equal
	//	*TermConditionalEvaluation_GreaterThan
	//	*TermConditionalEvaluation_LessThan
	//	*TermConditionalEvaluation_Interval
	//	*TermConditionalEvaluation_SparseIdMatch
	EvalMethod isTermConditionalEvaluation_EvalMethod `protobuf_oneof:"eval_method"`
}

func (x *TermConditionalEvaluation) Reset() {
	*x = TermConditionalEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermConditionalEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermConditionalEvaluation) ProtoMessage() {}

func (x *TermConditionalEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermConditionalEvaluation.ProtoReflect.Descriptor instead.
func (*TermConditionalEvaluation) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{17}
}

func (x *TermConditionalEvaluation) GetValueIfFalse() float32 {
	if x != nil {
		return x.ValueIfFalse
	}
	return 0
}

func (x *TermConditionalEvaluation) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *TermConditionalEvaluation) GetHashedAttribute() uint64 {
	if x != nil {
		return x.HashedAttribute
	}
	return 0
}

func (m *TermConditionalEvaluation) GetEvalMethod() isTermConditionalEvaluation_EvalMethod {
	if m != nil {
		return m.EvalMethod
	}
	return nil
}

func (x *TermConditionalEvaluation) GetBoolean() *Boolean {
	if x, ok := x.GetEvalMethod().(*TermConditionalEvaluation_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *TermConditionalEvaluation) GetEqual() *Equal {
	if x, ok := x.GetEvalMethod().(*TermConditionalEvaluation_Equal); ok {
		return x.Equal
	}
	return nil
}

func (x *TermConditionalEvaluation) GetGreaterThan() *GreaterThan {
	if x, ok := x.GetEvalMethod().(*TermConditionalEvaluation_GreaterThan); ok {
		return x.GreaterThan
	}
	return nil
}

func (x *TermConditionalEvaluation) GetLessThan() *LessThan {
	if x, ok := x.GetEvalMethod().(*TermConditionalEvaluation_LessThan); ok {
		return x.LessThan
	}
	return nil
}

func (x *TermConditionalEvaluation) GetInterval() *Interval {
	if x, ok := x.GetEvalMethod().(*TermConditionalEvaluation_Interval); ok {
		return x.Interval
	}
	return nil
}

func (x *TermConditionalEvaluation) GetSparseIdMatch() *SparseIdMatch {
	if x, ok := x.GetEvalMethod().(*TermConditionalEvaluation_SparseIdMatch); ok {
		return x.SparseIdMatch
	}
	return nil
}

type isTermConditionalEvaluation_EvalMethod interface {
	isTermConditionalEvaluation_EvalMethod()
}

type TermConditionalEvaluation_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,4,opt,name=boolean,proto3,oneof"`
}

type TermConditionalEvaluation_Equal struct {
	Equal *Equal `protobuf:"bytes,5,opt,name=equal,proto3,oneof"`
}

type TermConditionalEvaluation_GreaterThan struct {
	GreaterThan *GreaterThan `protobuf:"bytes,6,opt,name=greater_than,json=greaterThan,proto3,oneof"`
}

type TermConditionalEvaluation_LessThan struct {
	LessThan *LessThan `protobuf:"bytes,7,opt,name=less_than,json=lessThan,proto3,oneof"`
}

type TermConditionalEvaluation_Interval struct {
	Interval *Interval `protobuf:"bytes,8,opt,name=interval,proto3,oneof"`
}

type TermConditionalEvaluation_SparseIdMatch struct {
	SparseIdMatch *SparseIdMatch `protobuf:"bytes,9,opt,name=sparse_id_match,json=sparseIdMatch,proto3,oneof"`
}

func (*TermConditionalEvaluation_Boolean) isTermConditionalEvaluation_EvalMethod() {}

func (*TermConditionalEvaluation_Equal) isTermConditionalEvaluation_EvalMethod() {}

func (*TermConditionalEvaluation_GreaterThan) isTermConditionalEvaluation_EvalMethod() {}

func (*TermConditionalEvaluation_LessThan) isTermConditionalEvaluation_EvalMethod() {}

func (*TermConditionalEvaluation_Interval) isTermConditionalEvaluation_EvalMethod() {}

func (*TermConditionalEvaluation_SparseIdMatch) isTermConditionalEvaluation_EvalMethod() {}

var File_proto_delivery_blender_proto protoreflect.FileDescriptor

var file_proto_delivery_blender_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x22, 0xfd, 0x04, 0x0a, 0x0b, 0x42, 0x6c, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x01, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x42, 0x02, 0x18, 0x01, 0x48, 0x01, 0x52, 0x05, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x0c, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x68, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61,
	0x6e, 0x48, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e,
	0x12, 0x31, 0x0a, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c,
	0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x54,
	0x68, 0x61, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x5f, 0x76,
	0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x56, 0x32, 0x48, 0x01, 0x52, 0x07, 0x65, 0x71,
	0x75, 0x61, 0x6c, 0x56, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4a, 0x04, 0x08, 0x0a,
	0x10, 0x0b, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x06, 0x22, 0x09, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x22, 0x79, 0x0a, 0x07, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x56, 0x32, 0x12, 0x29,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a,
	0x0d, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x46,
	0x0a, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x2d, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x54, 0x68, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x22, 0x46, 0x0a, 0x08, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x21, 0x0a, 0x0d, 0x53, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x49, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x22, 0x95, 0x01, 0x0a,
	0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x6f, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x50,
	0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x39, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x41, 0x6c, 0x6c,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f,
	0x73, 0x22, 0xaf, 0x02, 0x0a, 0x0c, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x63, 0x6b, 0x5f, 0x70, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x63, 0x6b, 0x50, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x0d, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x4c, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x53, 0x70, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x5f, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x47, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x6c, 0x75, 0x63, 0x6b, 0x5f, 0x70, 0x63, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x0d, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x22, 0x99, 0x01, 0x0a, 0x0d, 0x42, 0x6c,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x62,
	0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5c, 0x0a, 0x12, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x11, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x52, 0x0f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x54,
	0x65, 0x72, 0x6d, 0x22, 0x5f, 0x0a, 0x11, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x72,
	0x6d, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x22, 0xb7, 0x03, 0x0a, 0x10, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x27, 0x0a, 0x0e, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x01, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x48, 0x69, 0x67, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x02, 0x52, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x77, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x68, 0x0a, 0x1b, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x04, 0x52, 0x19, 0x74, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x77, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x0a, 0x22, 0xde,
	0x03, 0x0a, 0x19, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x66, 0x46, 0x61, 0x6c,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x0c,
	0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x41, 0x0a,
	0x0f, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x49, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x49, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x0d, 0x0a, 0x0b, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2a,
	0x35, 0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x43, 0x4f, 0x52,
	0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x01, 0x42, 0x61, 0x0a, 0x1a, 0x61, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x42, 0x07, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x01, 0x5a,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x64, 0x61, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_delivery_blender_proto_rawDescOnce sync.Once
	file_proto_delivery_blender_proto_rawDescData = file_proto_delivery_blender_proto_rawDesc
)

func file_proto_delivery_blender_proto_rawDescGZIP() []byte {
	file_proto_delivery_blender_proto_rawDescOnce.Do(func() {
		file_proto_delivery_blender_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_delivery_blender_proto_rawDescData)
	})
	return file_proto_delivery_blender_proto_rawDescData
}

var file_proto_delivery_blender_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_delivery_blender_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_delivery_blender_proto_goTypes = []interface{}{
	(RankingMethod)(0),                // 0: delivery.RankingMethod
	(*BlenderRule)(nil),               // 1: delivery.BlenderRule
	(*Boolean)(nil),                   // 2: delivery.Boolean
	(*EqualV2)(nil),                   // 3: delivery.EqualV2
	(*Equal)(nil),                     // 4: delivery.Equal
	(*StringEquality)(nil),            // 5: delivery.StringEquality
	(*GreaterThan)(nil),               // 6: delivery.GreaterThan
	(*LessThan)(nil),                  // 7: delivery.LessThan
	(*Interval)(nil),                  // 8: delivery.Interval
	(*SparseIdMatch)(nil),             // 9: delivery.SparseIdMatch
	(*PositiveRule)(nil),              // 10: delivery.PositiveRule
	(*InsertRule)(nil),                // 11: delivery.InsertRule
	(*NegativeRule)(nil),              // 12: delivery.NegativeRule
	(*DiversityRule)(nil),             // 13: delivery.DiversityRule
	(*BlenderConfig)(nil),             // 14: delivery.BlenderConfig
	(*QualityScoreConfig)(nil),        // 15: delivery.QualityScoreConfig
	(*QualityScoreTerms)(nil),         // 16: delivery.QualityScoreTerms
	(*QualityScoreTerm)(nil),          // 17: delivery.QualityScoreTerm
	(*TermConditionalEvaluation)(nil), // 18: delivery.TermConditionalEvaluation
}
var file_proto_delivery_blender_proto_depIdxs = []int32{
	10, // 0: delivery.BlenderRule.positive_rule:type_name -> delivery.PositiveRule
	11, // 1: delivery.BlenderRule.insert_rule:type_name -> delivery.InsertRule
	12, // 2: delivery.BlenderRule.negative_rule:type_name -> delivery.NegativeRule
	13, // 3: delivery.BlenderRule.diversity_rule:type_name -> delivery.DiversityRule
	2,  // 4: delivery.BlenderRule.boolean:type_name -> delivery.Boolean
	4,  // 5: delivery.BlenderRule.equal:type_name -> delivery.Equal
	6,  // 6: delivery.BlenderRule.greater_than:type_name -> delivery.GreaterThan
	7,  // 7: delivery.BlenderRule.less_than:type_name -> delivery.LessThan
	8,  // 8: delivery.BlenderRule.interval:type_name -> delivery.Interval
	3,  // 9: delivery.BlenderRule.equal_v2:type_name -> delivery.EqualV2
	4,  // 10: delivery.EqualV2.number:type_name -> delivery.Equal
	5,  // 11: delivery.EqualV2.string:type_name -> delivery.StringEquality
	0,  // 12: delivery.InsertRule.ranking_method:type_name -> delivery.RankingMethod
	1,  // 13: delivery.BlenderConfig.blender_rule:type_name -> delivery.BlenderRule
	15, // 14: delivery.BlenderConfig.quality_score_config:type_name -> delivery.QualityScoreConfig
	17, // 15: delivery.QualityScoreConfig.weighted_sum_term:type_name -> delivery.QualityScoreTerm
	17, // 16: delivery.QualityScoreTerms.quality_score_terms:type_name -> delivery.QualityScoreTerm
	16, // 17: delivery.QualityScoreTerm.product:type_name -> delivery.QualityScoreTerms
	18, // 18: delivery.QualityScoreTerm.term_conditional_evaluation:type_name -> delivery.TermConditionalEvaluation
	2,  // 19: delivery.TermConditionalEvaluation.boolean:type_name -> delivery.Boolean
	4,  // 20: delivery.TermConditionalEvaluation.equal:type_name -> delivery.Equal
	6,  // 21: delivery.TermConditionalEvaluation.greater_than:type_name -> delivery.GreaterThan
	7,  // 22: delivery.TermConditionalEvaluation.less_than:type_name -> delivery.LessThan
	8,  // 23: delivery.TermConditionalEvaluation.interval:type_name -> delivery.Interval
	9,  // 24: delivery.TermConditionalEvaluation.sparse_id_match:type_name -> delivery.SparseIdMatch
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_proto_delivery_blender_proto_init() }
func file_proto_delivery_blender_proto_init() {
	if File_proto_delivery_blender_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_delivery_blender_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlenderRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Boolean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EqualV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Equal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringEquality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreaterThan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LessThan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseIdMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositiveRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NegativeRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiversityRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlenderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityScoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityScoreTerms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityScoreTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermConditionalEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_delivery_blender_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BlenderRule_PositiveRule)(nil),
		(*BlenderRule_InsertRule)(nil),
		(*BlenderRule_NegativeRule)(nil),
		(*BlenderRule_DiversityRule)(nil),
		(*BlenderRule_Boolean)(nil),
		(*BlenderRule_Equal)(nil),
		(*BlenderRule_GreaterThan)(nil),
		(*BlenderRule_LessThan)(nil),
		(*BlenderRule_Interval)(nil),
		(*BlenderRule_EqualV2)(nil),
	}
	file_proto_delivery_blender_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*EqualV2_Number)(nil),
		(*EqualV2_String_)(nil),
	}
	file_proto_delivery_blender_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*StringEquality_Raw)(nil),
	}
	file_proto_delivery_blender_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_proto_delivery_blender_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_proto_delivery_blender_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_proto_delivery_blender_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_proto_delivery_blender_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*QualityScoreTerm_AttributeName)(nil),
		(*QualityScoreTerm_Product)(nil),
	}
	file_proto_delivery_blender_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*TermConditionalEvaluation_Boolean)(nil),
		(*TermConditionalEvaluation_Equal)(nil),
		(*TermConditionalEvaluation_GreaterThan)(nil),
		(*TermConditionalEvaluation_LessThan)(nil),
		(*TermConditionalEvaluation_Interval)(nil),
		(*TermConditionalEvaluation_SparseIdMatch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_delivery_blender_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_delivery_blender_proto_goTypes,
		DependencyIndexes: file_proto_delivery_blender_proto_depIdxs,
		EnumInfos:         file_proto_delivery_blender_proto_enumTypes,
		MessageInfos:      file_proto_delivery_blender_proto_msgTypes,
	}.Build()
	File_proto_delivery_blender_proto = out.File
	file_proto_delivery_blender_proto_rawDesc = nil
	file_proto_delivery_blender_proto_goTypes = nil
	file_proto_delivery_blender_proto_depIdxs = nil
}
