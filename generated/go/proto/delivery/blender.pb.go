// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: proto/delivery/blender.proto

package delivery

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BlenderRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeName string `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	// Types that are assignable to Rule:
	//	*BlenderRule_PositiveRule
	//	*BlenderRule_InsertRule
	//	*BlenderRule_NegativeRule
	//	*BlenderRule_DiversityRule
	Rule isBlenderRule_Rule `protobuf_oneof:"rule"`
}

func (x *BlenderRule) Reset() {
	*x = BlenderRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlenderRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlenderRule) ProtoMessage() {}

func (x *BlenderRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlenderRule.ProtoReflect.Descriptor instead.
func (*BlenderRule) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{0}
}

func (x *BlenderRule) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (m *BlenderRule) GetRule() isBlenderRule_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (x *BlenderRule) GetPositiveRule() *PositiveRule {
	if x, ok := x.GetRule().(*BlenderRule_PositiveRule); ok {
		return x.PositiveRule
	}
	return nil
}

func (x *BlenderRule) GetInsertRule() *InsertRule {
	if x, ok := x.GetRule().(*BlenderRule_InsertRule); ok {
		return x.InsertRule
	}
	return nil
}

func (x *BlenderRule) GetNegativeRule() *NegativeRule {
	if x, ok := x.GetRule().(*BlenderRule_NegativeRule); ok {
		return x.NegativeRule
	}
	return nil
}

func (x *BlenderRule) GetDiversityRule() *DiversityRule {
	if x, ok := x.GetRule().(*BlenderRule_DiversityRule); ok {
		return x.DiversityRule
	}
	return nil
}

type isBlenderRule_Rule interface {
	isBlenderRule_Rule()
}

type BlenderRule_PositiveRule struct {
	PositiveRule *PositiveRule `protobuf:"bytes,6,opt,name=positive_rule,json=positiveRule,proto3,oneof"`
}

type BlenderRule_InsertRule struct {
	InsertRule *InsertRule `protobuf:"bytes,7,opt,name=insert_rule,json=insertRule,proto3,oneof"`
}

type BlenderRule_NegativeRule struct {
	NegativeRule *NegativeRule `protobuf:"bytes,8,opt,name=negative_rule,json=negativeRule,proto3,oneof"`
}

type BlenderRule_DiversityRule struct {
	DiversityRule *DiversityRule `protobuf:"bytes,9,opt,name=diversity_rule,json=diversityRule,proto3,oneof"`
}

func (*BlenderRule_PositiveRule) isBlenderRule_Rule() {}

func (*BlenderRule_InsertRule) isBlenderRule_Rule() {}

func (*BlenderRule_NegativeRule) isBlenderRule_Rule() {}

func (*BlenderRule_DiversityRule) isBlenderRule_Rule() {}

type PositiveRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectPct *float64 `protobuf:"fixed64,1,opt,name=select_pct,json=selectPct,proto3,oneof" json:"select_pct,omitempty"`
	MinPos    *uint64  `protobuf:"varint,2,opt,name=min_pos,json=minPos,proto3,oneof" json:"min_pos,omitempty"`
	MaxPos    *uint64  `protobuf:"varint,3,opt,name=max_pos,json=maxPos,proto3,oneof" json:"max_pos,omitempty"`
}

func (x *PositiveRule) Reset() {
	*x = PositiveRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositiveRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositiveRule) ProtoMessage() {}

func (x *PositiveRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositiveRule.ProtoReflect.Descriptor instead.
func (*PositiveRule) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{1}
}

func (x *PositiveRule) GetSelectPct() float64 {
	if x != nil && x.SelectPct != nil {
		return *x.SelectPct
	}
	return 0
}

func (x *PositiveRule) GetMinPos() uint64 {
	if x != nil && x.MinPos != nil {
		return *x.MinPos
	}
	return 0
}

func (x *PositiveRule) GetMaxPos() uint64 {
	if x != nil && x.MaxPos != nil {
		return *x.MaxPos
	}
	return 0
}

type InsertRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectPct *float64 `protobuf:"fixed64,1,opt,name=select_pct,json=selectPct,proto3,oneof" json:"select_pct,omitempty"`
	MinPos    *uint64  `protobuf:"varint,2,opt,name=min_pos,json=minPos,proto3,oneof" json:"min_pos,omitempty"`
	MaxPos    *uint64  `protobuf:"varint,3,opt,name=max_pos,json=maxPos,proto3,oneof" json:"max_pos,omitempty"`
}

func (x *InsertRule) Reset() {
	*x = InsertRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRule) ProtoMessage() {}

func (x *InsertRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRule.ProtoReflect.Descriptor instead.
func (*InsertRule) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{2}
}

func (x *InsertRule) GetSelectPct() float64 {
	if x != nil && x.SelectPct != nil {
		return *x.SelectPct
	}
	return 0
}

func (x *InsertRule) GetMinPos() uint64 {
	if x != nil && x.MinPos != nil {
		return *x.MinPos
	}
	return 0
}

func (x *InsertRule) GetMaxPos() uint64 {
	if x != nil && x.MaxPos != nil {
		return *x.MaxPos
	}
	return 0
}

type NegativeRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluckPct         *float64 `protobuf:"fixed64,1,opt,name=pluck_pct,json=pluckPct,proto3,oneof" json:"pluck_pct,omitempty"`
	ForbidLessPos    *uint64  `protobuf:"varint,2,opt,name=forbid_less_pos,json=forbidLessPos,proto3,oneof" json:"forbid_less_pos,omitempty"`
	MinSpacing       *uint64  `protobuf:"varint,3,opt,name=min_spacing,json=minSpacing,proto3,oneof" json:"min_spacing,omitempty"`
	ForbidGreaterPos *uint64  `protobuf:"varint,4,opt,name=forbid_greater_pos,json=forbidGreaterPos,proto3,oneof" json:"forbid_greater_pos,omitempty"`
	MaxCount         *uint64  `protobuf:"varint,5,opt,name=max_count,json=maxCount,proto3,oneof" json:"max_count,omitempty"`
}

func (x *NegativeRule) Reset() {
	*x = NegativeRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NegativeRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NegativeRule) ProtoMessage() {}

func (x *NegativeRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NegativeRule.ProtoReflect.Descriptor instead.
func (*NegativeRule) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{3}
}

func (x *NegativeRule) GetPluckPct() float64 {
	if x != nil && x.PluckPct != nil {
		return *x.PluckPct
	}
	return 0
}

func (x *NegativeRule) GetForbidLessPos() uint64 {
	if x != nil && x.ForbidLessPos != nil {
		return *x.ForbidLessPos
	}
	return 0
}

func (x *NegativeRule) GetMinSpacing() uint64 {
	if x != nil && x.MinSpacing != nil {
		return *x.MinSpacing
	}
	return 0
}

func (x *NegativeRule) GetForbidGreaterPos() uint64 {
	if x != nil && x.ForbidGreaterPos != nil {
		return *x.ForbidGreaterPos
	}
	return 0
}

func (x *NegativeRule) GetMaxCount() uint64 {
	if x != nil && x.MaxCount != nil {
		return *x.MaxCount
	}
	return 0
}

type DiversityRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Multi *float64 `protobuf:"fixed64,1,opt,name=multi,proto3,oneof" json:"multi,omitempty"`
}

func (x *DiversityRule) Reset() {
	*x = DiversityRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiversityRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiversityRule) ProtoMessage() {}

func (x *DiversityRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiversityRule.ProtoReflect.Descriptor instead.
func (*DiversityRule) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{4}
}

func (x *DiversityRule) GetMulti() float64 {
	if x != nil && x.Multi != nil {
		return *x.Multi
	}
	return 0
}

type BlenderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlenderRule        []*BlenderRule      `protobuf:"bytes,1,rep,name=blender_rule,json=blenderRule,proto3" json:"blender_rule,omitempty"`
	QualityScoreConfig *QualityScoreConfig `protobuf:"bytes,2,opt,name=quality_score_config,json=qualityScoreConfig,proto3" json:"quality_score_config,omitempty"`
}

func (x *BlenderConfig) Reset() {
	*x = BlenderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlenderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlenderConfig) ProtoMessage() {}

func (x *BlenderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlenderConfig.ProtoReflect.Descriptor instead.
func (*BlenderConfig) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{5}
}

func (x *BlenderConfig) GetBlenderRule() []*BlenderRule {
	if x != nil {
		return x.BlenderRule
	}
	return nil
}

func (x *BlenderConfig) GetQualityScoreConfig() *QualityScoreConfig {
	if x != nil {
		return x.QualityScoreConfig
	}
	return nil
}

type QualityScoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeightedSumTerm []*QualityScoreTerm `protobuf:"bytes,1,rep,name=weighted_sum_term,json=weightedSumTerm,proto3" json:"weighted_sum_term,omitempty"`
}

func (x *QualityScoreConfig) Reset() {
	*x = QualityScoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityScoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityScoreConfig) ProtoMessage() {}

func (x *QualityScoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityScoreConfig.ProtoReflect.Descriptor instead.
func (*QualityScoreConfig) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{6}
}

func (x *QualityScoreConfig) GetWeightedSumTerm() []*QualityScoreTerm {
	if x != nil {
		return x.WeightedSumTerm
	}
	return nil
}

type QualityScoreTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FetchMethod:
	//	*QualityScoreTerm_AttributeName
	//	*QualityScoreTerm_RandomNormal
	//	*QualityScoreTerm_Ones
	FetchMethod isQualityScoreTerm_FetchMethod `protobuf_oneof:"fetch_method"`
	FetchHigh   *float64                       `protobuf:"fixed64,10,opt,name=fetch_high,json=fetchHigh,proto3,oneof" json:"fetch_high,omitempty"`
	FetchLow    *float64                       `protobuf:"fixed64,11,opt,name=fetch_low,json=fetchLow,proto3,oneof" json:"fetch_low,omitempty"`
	Weight      float64                        `protobuf:"fixed64,12,opt,name=weight,proto3" json:"weight,omitempty"`
	Offset      float64                        `protobuf:"fixed64,13,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *QualityScoreTerm) Reset() {
	*x = QualityScoreTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityScoreTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityScoreTerm) ProtoMessage() {}

func (x *QualityScoreTerm) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityScoreTerm.ProtoReflect.Descriptor instead.
func (*QualityScoreTerm) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{7}
}

func (m *QualityScoreTerm) GetFetchMethod() isQualityScoreTerm_FetchMethod {
	if m != nil {
		return m.FetchMethod
	}
	return nil
}

func (x *QualityScoreTerm) GetAttributeName() string {
	if x, ok := x.GetFetchMethod().(*QualityScoreTerm_AttributeName); ok {
		return x.AttributeName
	}
	return ""
}

func (x *QualityScoreTerm) GetRandomNormal() *NormalDistribution {
	if x, ok := x.GetFetchMethod().(*QualityScoreTerm_RandomNormal); ok {
		return x.RandomNormal
	}
	return nil
}

func (x *QualityScoreTerm) GetOnes() bool {
	if x, ok := x.GetFetchMethod().(*QualityScoreTerm_Ones); ok {
		return x.Ones
	}
	return false
}

func (x *QualityScoreTerm) GetFetchHigh() float64 {
	if x != nil && x.FetchHigh != nil {
		return *x.FetchHigh
	}
	return 0
}

func (x *QualityScoreTerm) GetFetchLow() float64 {
	if x != nil && x.FetchLow != nil {
		return *x.FetchLow
	}
	return 0
}

func (x *QualityScoreTerm) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *QualityScoreTerm) GetOffset() float64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type isQualityScoreTerm_FetchMethod interface {
	isQualityScoreTerm_FetchMethod()
}

type QualityScoreTerm_AttributeName struct {
	AttributeName string `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName,proto3,oneof"`
}

type QualityScoreTerm_RandomNormal struct {
	RandomNormal *NormalDistribution `protobuf:"bytes,2,opt,name=random_normal,json=randomNormal,proto3,oneof"`
}

type QualityScoreTerm_Ones struct {
	Ones bool `protobuf:"varint,3,opt,name=ones,proto3,oneof"`
}

func (*QualityScoreTerm_AttributeName) isQualityScoreTerm_FetchMethod() {}

func (*QualityScoreTerm_RandomNormal) isQualityScoreTerm_FetchMethod() {}

func (*QualityScoreTerm_Ones) isQualityScoreTerm_FetchMethod() {}

type NormalDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mean     float64 `protobuf:"fixed64,1,opt,name=mean,proto3" json:"mean,omitempty"`
	Variance float64 `protobuf:"fixed64,2,opt,name=variance,proto3" json:"variance,omitempty"`
}

func (x *NormalDistribution) Reset() {
	*x = NormalDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_delivery_blender_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalDistribution) ProtoMessage() {}

func (x *NormalDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_delivery_blender_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalDistribution.ProtoReflect.Descriptor instead.
func (*NormalDistribution) Descriptor() ([]byte, []int) {
	return file_proto_delivery_blender_proto_rawDescGZIP(), []int{8}
}

func (x *NormalDistribution) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *NormalDistribution) GetVariance() float64 {
	if x != nil {
		return x.Variance
	}
	return 0
}

var File_proto_delivery_blender_proto protoreflect.FileDescriptor

var file_proto_delivery_blender_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x22, 0xc1, 0x02, 0x0a, 0x0b, 0x42, 0x6c, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x06, 0x22, 0x95, 0x01, 0x0a,
	0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x6f, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x50,
	0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x63, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x0c, 0x4e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x6c, 0x75, 0x63, 0x6b, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x6c, 0x75, 0x63, 0x6b, 0x50, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x4c, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x02, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x67, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x10,
	0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x75, 0x63, 0x6b, 0x5f,
	0x70, 0x63, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x5f, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x0d,
	0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x22, 0x99, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x0b, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x4e,
	0x0a, 0x14, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5c,
	0x0a, 0x12, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x11, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x0f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x22, 0xbf, 0x02, 0x0a,
	0x10, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x27, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x04, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x04, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x09, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x48, 0x69, 0x67, 0x68, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x08,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x77, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x0a, 0x22, 0x44,
	0x0a, 0x12, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x0a, 0x1a, 0x61, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x42, 0x07, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x01, 0x5a, 0x38, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x64, 0x61, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_delivery_blender_proto_rawDescOnce sync.Once
	file_proto_delivery_blender_proto_rawDescData = file_proto_delivery_blender_proto_rawDesc
)

func file_proto_delivery_blender_proto_rawDescGZIP() []byte {
	file_proto_delivery_blender_proto_rawDescOnce.Do(func() {
		file_proto_delivery_blender_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_delivery_blender_proto_rawDescData)
	})
	return file_proto_delivery_blender_proto_rawDescData
}

var file_proto_delivery_blender_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_delivery_blender_proto_goTypes = []interface{}{
	(*BlenderRule)(nil),        // 0: delivery.BlenderRule
	(*PositiveRule)(nil),       // 1: delivery.PositiveRule
	(*InsertRule)(nil),         // 2: delivery.InsertRule
	(*NegativeRule)(nil),       // 3: delivery.NegativeRule
	(*DiversityRule)(nil),      // 4: delivery.DiversityRule
	(*BlenderConfig)(nil),      // 5: delivery.BlenderConfig
	(*QualityScoreConfig)(nil), // 6: delivery.QualityScoreConfig
	(*QualityScoreTerm)(nil),   // 7: delivery.QualityScoreTerm
	(*NormalDistribution)(nil), // 8: delivery.NormalDistribution
}
var file_proto_delivery_blender_proto_depIdxs = []int32{
	1, // 0: delivery.BlenderRule.positive_rule:type_name -> delivery.PositiveRule
	2, // 1: delivery.BlenderRule.insert_rule:type_name -> delivery.InsertRule
	3, // 2: delivery.BlenderRule.negative_rule:type_name -> delivery.NegativeRule
	4, // 3: delivery.BlenderRule.diversity_rule:type_name -> delivery.DiversityRule
	0, // 4: delivery.BlenderConfig.blender_rule:type_name -> delivery.BlenderRule
	6, // 5: delivery.BlenderConfig.quality_score_config:type_name -> delivery.QualityScoreConfig
	7, // 6: delivery.QualityScoreConfig.weighted_sum_term:type_name -> delivery.QualityScoreTerm
	8, // 7: delivery.QualityScoreTerm.random_normal:type_name -> delivery.NormalDistribution
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_proto_delivery_blender_proto_init() }
func file_proto_delivery_blender_proto_init() {
	if File_proto_delivery_blender_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_delivery_blender_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlenderRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositiveRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NegativeRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiversityRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlenderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityScoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityScoreTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_delivery_blender_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_delivery_blender_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BlenderRule_PositiveRule)(nil),
		(*BlenderRule_InsertRule)(nil),
		(*BlenderRule_NegativeRule)(nil),
		(*BlenderRule_DiversityRule)(nil),
	}
	file_proto_delivery_blender_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_proto_delivery_blender_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_proto_delivery_blender_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_proto_delivery_blender_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_proto_delivery_blender_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*QualityScoreTerm_AttributeName)(nil),
		(*QualityScoreTerm_RandomNormal)(nil),
		(*QualityScoreTerm_Ones)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_delivery_blender_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_delivery_blender_proto_goTypes,
		DependencyIndexes: file_proto_delivery_blender_proto_depIdxs,
		MessageInfos:      file_proto_delivery_blender_proto_msgTypes,
	}.Build()
	File_proto_delivery_blender_proto = out.File
	file_proto_delivery_blender_proto_rawDesc = nil
	file_proto_delivery_blender_proto_goTypes = nil
	file_proto_delivery_blender_proto_depIdxs = nil
}
