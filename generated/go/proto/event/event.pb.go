// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: proto/event/event.proto

package event

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/promotedai/schema/generated/go/proto/common"
	delivery "github.com/promotedai/schema/generated/go/proto/delivery"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IdentifierProvenance int32

const (
	IdentifierProvenance_UNKNOWN            IdentifierProvenance = 0
	IdentifierProvenance_NULL               IdentifierProvenance = 1
	IdentifierProvenance_EMPTY              IdentifierProvenance = 2
	IdentifierProvenance_AUTOGENERATED      IdentifierProvenance = 3
	IdentifierProvenance_PLATFORM_SPECIFIED IdentifierProvenance = 4
)

// Enum value maps for IdentifierProvenance.
var (
	IdentifierProvenance_name = map[int32]string{
		0: "UNKNOWN",
		1: "NULL",
		2: "EMPTY",
		3: "AUTOGENERATED",
		4: "PLATFORM_SPECIFIED",
	}
	IdentifierProvenance_value = map[string]int32{
		"UNKNOWN":            0,
		"NULL":               1,
		"EMPTY":              2,
		"AUTOGENERATED":      3,
		"PLATFORM_SPECIFIED": 4,
	}
)

func (x IdentifierProvenance) Enum() *IdentifierProvenance {
	p := new(IdentifierProvenance)
	*p = x
	return p
}

func (x IdentifierProvenance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentifierProvenance) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_event_event_proto_enumTypes[0].Descriptor()
}

func (IdentifierProvenance) Type() protoreflect.EnumType {
	return &file_proto_event_event_proto_enumTypes[0]
}

func (x IdentifierProvenance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentifierProvenance.Descriptor instead.
func (IdentifierProvenance) EnumDescriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{0}
}

type CohortArm int32

const (
	CohortArm_UNKNOWN_GROUP CohortArm = 0
	CohortArm_CONTROL       CohortArm = 1
	CohortArm_TREATMENT     CohortArm = 2
	CohortArm_TREATMENT1    CohortArm = 3
	CohortArm_TREATMENT2    CohortArm = 4
	CohortArm_TREATMENT3    CohortArm = 5
)

// Enum value maps for CohortArm.
var (
	CohortArm_name = map[int32]string{
		0: "UNKNOWN_GROUP",
		1: "CONTROL",
		2: "TREATMENT",
		3: "TREATMENT1",
		4: "TREATMENT2",
		5: "TREATMENT3",
	}
	CohortArm_value = map[string]int32{
		"UNKNOWN_GROUP": 0,
		"CONTROL":       1,
		"TREATMENT":     2,
		"TREATMENT1":    3,
		"TREATMENT2":    4,
		"TREATMENT3":    5,
	}
)

func (x CohortArm) Enum() *CohortArm {
	p := new(CohortArm)
	*p = x
	return p
}

func (x CohortArm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CohortArm) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_event_event_proto_enumTypes[1].Descriptor()
}

func (CohortArm) Type() protoreflect.EnumType {
	return &file_proto_event_event_proto_enumTypes[1]
}

func (x CohortArm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CohortArm.Descriptor instead.
func (CohortArm) EnumDescriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{1}
}

type ImpressionSourceType int32

const (
	ImpressionSourceType_UNKNOWN_IMPRESSION_SOURCE_TYPE ImpressionSourceType = 0
	ImpressionSourceType_DELIVERY                       ImpressionSourceType = 1
	ImpressionSourceType_CLIENT_BACKEND                 ImpressionSourceType = 2
)

// Enum value maps for ImpressionSourceType.
var (
	ImpressionSourceType_name = map[int32]string{
		0: "UNKNOWN_IMPRESSION_SOURCE_TYPE",
		1: "DELIVERY",
		2: "CLIENT_BACKEND",
	}
	ImpressionSourceType_value = map[string]int32{
		"UNKNOWN_IMPRESSION_SOURCE_TYPE": 0,
		"DELIVERY":                       1,
		"CLIENT_BACKEND":                 2,
	}
)

func (x ImpressionSourceType) Enum() *ImpressionSourceType {
	p := new(ImpressionSourceType)
	*p = x
	return p
}

func (x ImpressionSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImpressionSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_event_event_proto_enumTypes[2].Descriptor()
}

func (ImpressionSourceType) Type() protoreflect.EnumType {
	return &file_proto_event_event_proto_enumTypes[2]
}

func (x ImpressionSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImpressionSourceType.Descriptor instead.
func (ImpressionSourceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{2}
}

type ActionType int32

const (
	ActionType_UNKNOWN_ACTION_TYPE ActionType = 0
	ActionType_CUSTOM_ACTION_TYPE  ActionType = 1
	ActionType_NAVIGATE            ActionType = 2
	ActionType_ADD_TO_CART         ActionType = 4
	ActionType_REMOVE_FROM_CART    ActionType = 10
	ActionType_CHECKOUT            ActionType = 8
	ActionType_PURCHASE            ActionType = 3
	ActionType_SHARE               ActionType = 5
	ActionType_LIKE                ActionType = 6
	ActionType_UNLIKE              ActionType = 9
	ActionType_COMMENT             ActionType = 7
	ActionType_MAKE_OFFER          ActionType = 11
	ActionType_ASK_QUESTION        ActionType = 12
	ActionType_ANSWER_QUESTION     ActionType = 13
	ActionType_COMPLETE_SIGN_IN    ActionType = 14
	ActionType_COMPLETE_SIGN_UP    ActionType = 15
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0:  "UNKNOWN_ACTION_TYPE",
		1:  "CUSTOM_ACTION_TYPE",
		2:  "NAVIGATE",
		4:  "ADD_TO_CART",
		10: "REMOVE_FROM_CART",
		8:  "CHECKOUT",
		3:  "PURCHASE",
		5:  "SHARE",
		6:  "LIKE",
		9:  "UNLIKE",
		7:  "COMMENT",
		11: "MAKE_OFFER",
		12: "ASK_QUESTION",
		13: "ANSWER_QUESTION",
		14: "COMPLETE_SIGN_IN",
		15: "COMPLETE_SIGN_UP",
	}
	ActionType_value = map[string]int32{
		"UNKNOWN_ACTION_TYPE": 0,
		"CUSTOM_ACTION_TYPE":  1,
		"NAVIGATE":            2,
		"ADD_TO_CART":         4,
		"REMOVE_FROM_CART":    10,
		"CHECKOUT":            8,
		"PURCHASE":            3,
		"SHARE":               5,
		"LIKE":                6,
		"UNLIKE":              9,
		"COMMENT":             7,
		"MAKE_OFFER":          11,
		"ASK_QUESTION":        12,
		"ANSWER_QUESTION":     13,
		"COMPLETE_SIGN_IN":    14,
		"COMPLETE_SIGN_UP":    15,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_event_event_proto_enumTypes[3].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_proto_event_event_proto_enumTypes[3]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{3}
}

type View_ViewType int32

const (
	View_UNKNOWN_VIEW_TYPE View_ViewType = 0
	View_WEB_PAGE          View_ViewType = 1
	View_APP_SCREEN        View_ViewType = 2
)

// Enum value maps for View_ViewType.
var (
	View_ViewType_name = map[int32]string{
		0: "UNKNOWN_VIEW_TYPE",
		1: "WEB_PAGE",
		2: "APP_SCREEN",
	}
	View_ViewType_value = map[string]int32{
		"UNKNOWN_VIEW_TYPE": 0,
		"WEB_PAGE":          1,
		"APP_SCREEN":        2,
	}
)

func (x View_ViewType) Enum() *View_ViewType {
	p := new(View_ViewType)
	*p = x
	return p
}

func (x View_ViewType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (View_ViewType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_event_event_proto_enumTypes[4].Descriptor()
}

func (View_ViewType) Type() protoreflect.EnumType {
	return &file_proto_event_event_proto_enumTypes[4]
}

func (x View_ViewType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use View_ViewType.Descriptor instead.
func (View_ViewType) EnumDescriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{6, 0}
}

type JoinedIdentifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformId   uint64 `protobuf:"varint,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LogUserId    string `protobuf:"bytes,3,opt,name=log_user_id,json=logUserId,proto3" json:"log_user_id,omitempty"`
	SessionId    string `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ViewId       string `protobuf:"bytes,5,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	AutoViewId   string `protobuf:"bytes,9,opt,name=auto_view_id,json=autoViewId,proto3" json:"auto_view_id,omitempty"`
	RequestId    string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	InsertionId  string `protobuf:"bytes,7,opt,name=insertion_id,json=insertionId,proto3" json:"insertion_id,omitempty"`
	ImpressionId string `protobuf:"bytes,8,opt,name=impression_id,json=impressionId,proto3" json:"impression_id,omitempty"`
}

func (x *JoinedIdentifiers) Reset() {
	*x = JoinedIdentifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinedIdentifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinedIdentifiers) ProtoMessage() {}

func (x *JoinedIdentifiers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinedIdentifiers.ProtoReflect.Descriptor instead.
func (*JoinedIdentifiers) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{0}
}

func (x *JoinedIdentifiers) GetPlatformId() uint64 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *JoinedIdentifiers) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JoinedIdentifiers) GetLogUserId() string {
	if x != nil {
		return x.LogUserId
	}
	return ""
}

func (x *JoinedIdentifiers) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *JoinedIdentifiers) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *JoinedIdentifiers) GetAutoViewId() string {
	if x != nil {
		return x.AutoViewId
	}
	return ""
}

func (x *JoinedIdentifiers) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *JoinedIdentifiers) GetInsertionId() string {
	if x != nil {
		return x.InsertionId
	}
	return ""
}

func (x *JoinedIdentifiers) GetImpressionId() string {
	if x != nil {
		return x.ImpressionId
	}
	return ""
}

type IdentifierProvenances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdProvenance       IdentifierProvenance `protobuf:"varint,1,opt,name=user_id_provenance,json=userIdProvenance,proto3,enum=event.IdentifierProvenance" json:"user_id_provenance,omitempty"`
	SessionIdProvenance    IdentifierProvenance `protobuf:"varint,2,opt,name=session_id_provenance,json=sessionIdProvenance,proto3,enum=event.IdentifierProvenance" json:"session_id_provenance,omitempty"`
	ViewIdProvenance       IdentifierProvenance `protobuf:"varint,3,opt,name=view_id_provenance,json=viewIdProvenance,proto3,enum=event.IdentifierProvenance" json:"view_id_provenance,omitempty"`
	AutoViewIdProvenance   IdentifierProvenance `protobuf:"varint,8,opt,name=auto_view_id_provenance,json=autoViewIdProvenance,proto3,enum=event.IdentifierProvenance" json:"auto_view_id_provenance,omitempty"`
	ImpressionIdProvenance IdentifierProvenance `protobuf:"varint,4,opt,name=impression_id_provenance,json=impressionIdProvenance,proto3,enum=event.IdentifierProvenance" json:"impression_id_provenance,omitempty"`
	ActionIdProvenance     IdentifierProvenance `protobuf:"varint,5,opt,name=action_id_provenance,json=actionIdProvenance,proto3,enum=event.IdentifierProvenance" json:"action_id_provenance,omitempty"`
	ContentIdProvenance    IdentifierProvenance `protobuf:"varint,6,opt,name=content_id_provenance,json=contentIdProvenance,proto3,enum=event.IdentifierProvenance" json:"content_id_provenance,omitempty"`
	RequestIdProvenance    IdentifierProvenance `protobuf:"varint,7,opt,name=request_id_provenance,json=requestIdProvenance,proto3,enum=event.IdentifierProvenance" json:"request_id_provenance,omitempty"`
}

func (x *IdentifierProvenances) Reset() {
	*x = IdentifierProvenances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierProvenances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierProvenances) ProtoMessage() {}

func (x *IdentifierProvenances) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierProvenances.ProtoReflect.Descriptor instead.
func (*IdentifierProvenances) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{1}
}

func (x *IdentifierProvenances) GetUserIdProvenance() IdentifierProvenance {
	if x != nil {
		return x.UserIdProvenance
	}
	return IdentifierProvenance_UNKNOWN
}

func (x *IdentifierProvenances) GetSessionIdProvenance() IdentifierProvenance {
	if x != nil {
		return x.SessionIdProvenance
	}
	return IdentifierProvenance_UNKNOWN
}

func (x *IdentifierProvenances) GetViewIdProvenance() IdentifierProvenance {
	if x != nil {
		return x.ViewIdProvenance
	}
	return IdentifierProvenance_UNKNOWN
}

func (x *IdentifierProvenances) GetAutoViewIdProvenance() IdentifierProvenance {
	if x != nil {
		return x.AutoViewIdProvenance
	}
	return IdentifierProvenance_UNKNOWN
}

func (x *IdentifierProvenances) GetImpressionIdProvenance() IdentifierProvenance {
	if x != nil {
		return x.ImpressionIdProvenance
	}
	return IdentifierProvenance_UNKNOWN
}

func (x *IdentifierProvenances) GetActionIdProvenance() IdentifierProvenance {
	if x != nil {
		return x.ActionIdProvenance
	}
	return IdentifierProvenance_UNKNOWN
}

func (x *IdentifierProvenances) GetContentIdProvenance() IdentifierProvenance {
	if x != nil {
		return x.ContentIdProvenance
	}
	return IdentifierProvenance_UNKNOWN
}

func (x *IdentifierProvenances) GetRequestIdProvenance() IdentifierProvenance {
	if x != nil {
		return x.RequestIdProvenance
	}
	return IdentifierProvenance_UNKNOWN
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformId    uint64                 `protobuf:"varint,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	UserInfo      *common.UserInfo       `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Timing        *common.Timing         `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	ClientInfo    *common.ClientInfo     `protobuf:"bytes,4,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	IdProvenances *IdentifierProvenances `protobuf:"bytes,7,opt,name=id_provenances,json=idProvenances,proto3" json:"id_provenances,omitempty"`
	Properties    *common.Properties     `protobuf:"bytes,6,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetPlatformId() uint64 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *User) GetUserInfo() *common.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *User) GetTiming() *common.Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *User) GetClientInfo() *common.ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *User) GetIdProvenances() *IdentifierProvenances {
	if x != nil {
		return x.IdProvenances
	}
	return nil
}

func (x *User) GetProperties() *common.Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type CohortMembership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformId   uint64             `protobuf:"varint,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	UserInfo     *common.UserInfo   `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Timing       *common.Timing     `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	ClientInfo   *common.ClientInfo `protobuf:"bytes,4,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	MembershipId string             `protobuf:"bytes,6,opt,name=membership_id,json=membershipId,proto3" json:"membership_id,omitempty"`
	CohortId     string             `protobuf:"bytes,8,opt,name=cohort_id,json=cohortId,proto3" json:"cohort_id,omitempty"`
	Arm          CohortArm          `protobuf:"varint,9,opt,name=arm,proto3,enum=event.CohortArm" json:"arm,omitempty"`
	Properties   *common.Properties `protobuf:"bytes,10,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *CohortMembership) Reset() {
	*x = CohortMembership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CohortMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CohortMembership) ProtoMessage() {}

func (x *CohortMembership) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CohortMembership.ProtoReflect.Descriptor instead.
func (*CohortMembership) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{3}
}

func (x *CohortMembership) GetPlatformId() uint64 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *CohortMembership) GetUserInfo() *common.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *CohortMembership) GetTiming() *common.Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *CohortMembership) GetClientInfo() *common.ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *CohortMembership) GetMembershipId() string {
	if x != nil {
		return x.MembershipId
	}
	return ""
}

func (x *CohortMembership) GetCohortId() string {
	if x != nil {
		return x.CohortId
	}
	return ""
}

func (x *CohortMembership) GetArm() CohortArm {
	if x != nil {
		return x.Arm
	}
	return CohortArm_UNKNOWN_GROUP
}

func (x *CohortMembership) GetProperties() *common.Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type WebPageView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url          string       `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Referrer     string       `protobuf:"bytes,3,opt,name=referrer,proto3" json:"referrer,omitempty"`
	DocumentSize *common.Size `protobuf:"bytes,4,opt,name=document_size,json=documentSize,proto3" json:"document_size,omitempty"`
}

func (x *WebPageView) Reset() {
	*x = WebPageView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebPageView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebPageView) ProtoMessage() {}

func (x *WebPageView) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebPageView.ProtoReflect.Descriptor instead.
func (*WebPageView) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{4}
}

func (x *WebPageView) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebPageView) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *WebPageView) GetDocumentSize() *common.Size {
	if x != nil {
		return x.DocumentSize
	}
	return nil
}

type AppScreenView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AppScreenView) Reset() {
	*x = AppScreenView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppScreenView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppScreenView) ProtoMessage() {}

func (x *AppScreenView) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppScreenView.ProtoReflect.Descriptor instead.
func (*AppScreenView) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{5}
}

type View struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformId  uint64             `protobuf:"varint,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	UserInfo    *common.UserInfo   `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Timing      *common.Timing     `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	ClientInfo  *common.ClientInfo `protobuf:"bytes,4,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	ViewId      string             `protobuf:"bytes,6,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	AutoViewId  string             `protobuf:"bytes,17,opt,name=auto_view_id,json=autoViewId,proto3" json:"auto_view_id,omitempty"`
	SessionId   string             `protobuf:"bytes,7,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Name        string             `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	UseCase     delivery.UseCase   `protobuf:"varint,9,opt,name=use_case,json=useCase,proto3,enum=delivery.UseCase" json:"use_case,omitempty"`
	SearchQuery string             `protobuf:"bytes,10,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
	Properties  *common.Properties `protobuf:"bytes,11,opt,name=properties,proto3" json:"properties,omitempty"`
	Locale      *common.Locale     `protobuf:"bytes,16,opt,name=locale,proto3" json:"locale,omitempty"`
	ViewType    View_ViewType      `protobuf:"varint,13,opt,name=view_type,json=viewType,proto3,enum=event.View_ViewType" json:"view_type,omitempty"`
	// Types that are assignable to UiType:
	//	*View_WebPageView
	//	*View_AppScreenView
	UiType        isView_UiType          `protobuf_oneof:"ui_type"`
	IdProvenances *IdentifierProvenances `protobuf:"bytes,18,opt,name=id_provenances,json=idProvenances,proto3" json:"id_provenances,omitempty"`
}

func (x *View) Reset() {
	*x = View{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *View) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View) ProtoMessage() {}

func (x *View) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View.ProtoReflect.Descriptor instead.
func (*View) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{6}
}

func (x *View) GetPlatformId() uint64 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *View) GetUserInfo() *common.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *View) GetTiming() *common.Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *View) GetClientInfo() *common.ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *View) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *View) GetAutoViewId() string {
	if x != nil {
		return x.AutoViewId
	}
	return ""
}

func (x *View) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *View) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *View) GetUseCase() delivery.UseCase {
	if x != nil {
		return x.UseCase
	}
	return delivery.UseCase_UNKNOWN_USE_CASE
}

func (x *View) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

func (x *View) GetProperties() *common.Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *View) GetLocale() *common.Locale {
	if x != nil {
		return x.Locale
	}
	return nil
}

func (x *View) GetViewType() View_ViewType {
	if x != nil {
		return x.ViewType
	}
	return View_UNKNOWN_VIEW_TYPE
}

func (m *View) GetUiType() isView_UiType {
	if m != nil {
		return m.UiType
	}
	return nil
}

func (x *View) GetWebPageView() *WebPageView {
	if x, ok := x.GetUiType().(*View_WebPageView); ok {
		return x.WebPageView
	}
	return nil
}

func (x *View) GetAppScreenView() *AppScreenView {
	if x, ok := x.GetUiType().(*View_AppScreenView); ok {
		return x.AppScreenView
	}
	return nil
}

func (x *View) GetIdProvenances() *IdentifierProvenances {
	if x != nil {
		return x.IdProvenances
	}
	return nil
}

type isView_UiType interface {
	isView_UiType()
}

type View_WebPageView struct {
	WebPageView *WebPageView `protobuf:"bytes,14,opt,name=web_page_view,json=webPageView,proto3,oneof"`
}

type View_AppScreenView struct {
	AppScreenView *AppScreenView `protobuf:"bytes,15,opt,name=app_screen_view,json=appScreenView,proto3,oneof"`
}

func (*View_WebPageView) isView_UiType() {}

func (*View_AppScreenView) isView_UiType() {}

type AutoView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformId uint64             `protobuf:"varint,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	UserInfo   *common.UserInfo   `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Timing     *common.Timing     `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	ClientInfo *common.ClientInfo `protobuf:"bytes,4,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	AutoViewId string             `protobuf:"bytes,6,opt,name=auto_view_id,json=autoViewId,proto3" json:"auto_view_id,omitempty"`
	ViewId     string             `protobuf:"bytes,14,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	SessionId  string             `protobuf:"bytes,7,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Name       string             `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	UseCase    delivery.UseCase   `protobuf:"varint,9,opt,name=use_case,json=useCase,proto3,enum=delivery.UseCase" json:"use_case,omitempty"`
	Properties *common.Properties `protobuf:"bytes,10,opt,name=properties,proto3" json:"properties,omitempty"`
	Locale     *common.Locale     `protobuf:"bytes,11,opt,name=locale,proto3" json:"locale,omitempty"`
	// Types that are assignable to UiType:
	//	*AutoView_WebPageView
	//	*AutoView_AppScreenView
	UiType        isAutoView_UiType      `protobuf_oneof:"ui_type"`
	IdProvenances *IdentifierProvenances `protobuf:"bytes,15,opt,name=id_provenances,json=idProvenances,proto3" json:"id_provenances,omitempty"`
}

func (x *AutoView) Reset() {
	*x = AutoView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoView) ProtoMessage() {}

func (x *AutoView) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoView.ProtoReflect.Descriptor instead.
func (*AutoView) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{7}
}

func (x *AutoView) GetPlatformId() uint64 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *AutoView) GetUserInfo() *common.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *AutoView) GetTiming() *common.Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *AutoView) GetClientInfo() *common.ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *AutoView) GetAutoViewId() string {
	if x != nil {
		return x.AutoViewId
	}
	return ""
}

func (x *AutoView) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *AutoView) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AutoView) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AutoView) GetUseCase() delivery.UseCase {
	if x != nil {
		return x.UseCase
	}
	return delivery.UseCase_UNKNOWN_USE_CASE
}

func (x *AutoView) GetProperties() *common.Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *AutoView) GetLocale() *common.Locale {
	if x != nil {
		return x.Locale
	}
	return nil
}

func (m *AutoView) GetUiType() isAutoView_UiType {
	if m != nil {
		return m.UiType
	}
	return nil
}

func (x *AutoView) GetWebPageView() *WebPageView {
	if x, ok := x.GetUiType().(*AutoView_WebPageView); ok {
		return x.WebPageView
	}
	return nil
}

func (x *AutoView) GetAppScreenView() *AppScreenView {
	if x, ok := x.GetUiType().(*AutoView_AppScreenView); ok {
		return x.AppScreenView
	}
	return nil
}

func (x *AutoView) GetIdProvenances() *IdentifierProvenances {
	if x != nil {
		return x.IdProvenances
	}
	return nil
}

type isAutoView_UiType interface {
	isAutoView_UiType()
}

type AutoView_WebPageView struct {
	WebPageView *WebPageView `protobuf:"bytes,12,opt,name=web_page_view,json=webPageView,proto3,oneof"`
}

type AutoView_AppScreenView struct {
	AppScreenView *AppScreenView `protobuf:"bytes,13,opt,name=app_screen_view,json=appScreenView,proto3,oneof"`
}

func (*AutoView_WebPageView) isAutoView_UiType() {}

func (*AutoView_AppScreenView) isAutoView_UiType() {}

type IndexPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index []int32 `protobuf:"varint,1,rep,packed,name=index,proto3" json:"index,omitempty"`
}

func (x *IndexPath) Reset() {
	*x = IndexPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexPath) ProtoMessage() {}

func (x *IndexPath) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexPath.ProtoReflect.Descriptor instead.
func (*IndexPath) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{8}
}

func (x *IndexPath) GetIndex() []int32 {
	if x != nil {
		return x.Index
	}
	return nil
}

type Impression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformId           uint64                 `protobuf:"varint,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	UserInfo             *common.UserInfo       `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Timing               *common.Timing         `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	ClientInfo           *common.ClientInfo     `protobuf:"bytes,4,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	ImpressionId         string                 `protobuf:"bytes,6,opt,name=impression_id,json=impressionId,proto3" json:"impression_id,omitempty"`
	InsertionId          string                 `protobuf:"bytes,7,opt,name=insertion_id,json=insertionId,proto3" json:"insertion_id,omitempty"`
	RequestId            string                 `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ViewId               string                 `protobuf:"bytes,10,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	AutoViewId           string                 `protobuf:"bytes,15,opt,name=auto_view_id,json=autoViewId,proto3" json:"auto_view_id,omitempty"`
	SessionId            string                 `protobuf:"bytes,9,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ContentId            string                 `protobuf:"bytes,12,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	SourceType           ImpressionSourceType   `protobuf:"varint,13,opt,name=source_type,json=sourceType,proto3,enum=event.ImpressionSourceType" json:"source_type,omitempty"`
	HasSuperimposedViews bool                   `protobuf:"varint,14,opt,name=has_superimposed_views,json=hasSuperimposedViews,proto3" json:"has_superimposed_views,omitempty"`
	ClientPosition       *IndexPath             `protobuf:"bytes,16,opt,name=client_position,json=clientPosition,proto3" json:"client_position,omitempty"`
	IdProvenances        *IdentifierProvenances `protobuf:"bytes,17,opt,name=id_provenances,json=idProvenances,proto3" json:"id_provenances,omitempty"`
	Properties           *common.Properties     `protobuf:"bytes,11,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Impression) Reset() {
	*x = Impression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Impression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Impression) ProtoMessage() {}

func (x *Impression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Impression.ProtoReflect.Descriptor instead.
func (*Impression) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{9}
}

func (x *Impression) GetPlatformId() uint64 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *Impression) GetUserInfo() *common.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *Impression) GetTiming() *common.Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *Impression) GetClientInfo() *common.ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *Impression) GetImpressionId() string {
	if x != nil {
		return x.ImpressionId
	}
	return ""
}

func (x *Impression) GetInsertionId() string {
	if x != nil {
		return x.InsertionId
	}
	return ""
}

func (x *Impression) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Impression) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *Impression) GetAutoViewId() string {
	if x != nil {
		return x.AutoViewId
	}
	return ""
}

func (x *Impression) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Impression) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *Impression) GetSourceType() ImpressionSourceType {
	if x != nil {
		return x.SourceType
	}
	return ImpressionSourceType_UNKNOWN_IMPRESSION_SOURCE_TYPE
}

func (x *Impression) GetHasSuperimposedViews() bool {
	if x != nil {
		return x.HasSuperimposedViews
	}
	return false
}

func (x *Impression) GetClientPosition() *IndexPath {
	if x != nil {
		return x.ClientPosition
	}
	return nil
}

func (x *Impression) GetIdProvenances() *IdentifierProvenances {
	if x != nil {
		return x.IdProvenances
	}
	return nil
}

func (x *Impression) GetProperties() *common.Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type NavigateAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUrl string `protobuf:"bytes,1,opt,name=target_url,json=targetUrl,proto3" json:"target_url,omitempty"`
}

func (x *NavigateAction) Reset() {
	*x = NavigateAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigateAction) ProtoMessage() {}

func (x *NavigateAction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigateAction.ProtoReflect.Descriptor instead.
func (*NavigateAction) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{10}
}

func (x *NavigateAction) GetTargetUrl() string {
	if x != nil {
		return x.TargetUrl
	}
	return ""
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformId       uint64             `protobuf:"varint,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	UserInfo         *common.UserInfo   `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Timing           *common.Timing     `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	ClientInfo       *common.ClientInfo `protobuf:"bytes,4,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	ActionId         string             `protobuf:"bytes,6,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	ImpressionId     string             `protobuf:"bytes,7,opt,name=impression_id,json=impressionId,proto3" json:"impression_id,omitempty"`
	InsertionId      string             `protobuf:"bytes,8,opt,name=insertion_id,json=insertionId,proto3" json:"insertion_id,omitempty"`
	RequestId        string             `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ViewId           string             `protobuf:"bytes,11,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	AutoViewId       string             `protobuf:"bytes,23,opt,name=auto_view_id,json=autoViewId,proto3" json:"auto_view_id,omitempty"`
	SessionId        string             `protobuf:"bytes,10,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ContentId        string             `protobuf:"bytes,21,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	Name             string             `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	ActionType       ActionType         `protobuf:"varint,14,opt,name=action_type,json=actionType,proto3,enum=event.ActionType" json:"action_type,omitempty"`
	CustomActionType string             `protobuf:"bytes,15,opt,name=custom_action_type,json=customActionType,proto3" json:"custom_action_type,omitempty"`
	ElementId        string             `protobuf:"bytes,17,opt,name=element_id,json=elementId,proto3" json:"element_id,omitempty"`
	// Types that are assignable to Action:
	//	*Action_NavigateAction
	Action               isAction_Action        `protobuf_oneof:"action"`
	HasSuperimposedViews bool                   `protobuf:"varint,22,opt,name=has_superimposed_views,json=hasSuperimposedViews,proto3" json:"has_superimposed_views,omitempty"`
	ClientPosition       *IndexPath             `protobuf:"bytes,24,opt,name=client_position,json=clientPosition,proto3" json:"client_position,omitempty"`
	IdProvenances        *IdentifierProvenances `protobuf:"bytes,25,opt,name=id_provenances,json=idProvenances,proto3" json:"id_provenances,omitempty"`
	Properties           *common.Properties     `protobuf:"bytes,20,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{11}
}

func (x *Action) GetPlatformId() uint64 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *Action) GetUserInfo() *common.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *Action) GetTiming() *common.Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *Action) GetClientInfo() *common.ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *Action) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *Action) GetImpressionId() string {
	if x != nil {
		return x.ImpressionId
	}
	return ""
}

func (x *Action) GetInsertionId() string {
	if x != nil {
		return x.InsertionId
	}
	return ""
}

func (x *Action) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Action) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *Action) GetAutoViewId() string {
	if x != nil {
		return x.AutoViewId
	}
	return ""
}

func (x *Action) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Action) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *Action) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Action) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_UNKNOWN_ACTION_TYPE
}

func (x *Action) GetCustomActionType() string {
	if x != nil {
		return x.CustomActionType
	}
	return ""
}

func (x *Action) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (m *Action) GetAction() isAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Action) GetNavigateAction() *NavigateAction {
	if x, ok := x.GetAction().(*Action_NavigateAction); ok {
		return x.NavigateAction
	}
	return nil
}

func (x *Action) GetHasSuperimposedViews() bool {
	if x != nil {
		return x.HasSuperimposedViews
	}
	return false
}

func (x *Action) GetClientPosition() *IndexPath {
	if x != nil {
		return x.ClientPosition
	}
	return nil
}

func (x *Action) GetIdProvenances() *IdentifierProvenances {
	if x != nil {
		return x.IdProvenances
	}
	return nil
}

func (x *Action) GetProperties() *common.Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type isAction_Action interface {
	isAction_Action()
}

type Action_NavigateAction struct {
	NavigateAction *NavigateAction `protobuf:"bytes,18,opt,name=navigate_action,json=navigateAction,proto3,oneof"`
}

func (*Action_NavigateAction) isAction_Action() {}

type IOSError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Domain      string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	BatchNumber int32  `protobuf:"varint,4,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
}

func (x *IOSError) Reset() {
	*x = IOSError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSError) ProtoMessage() {}

func (x *IOSError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSError.ProtoReflect.Descriptor instead.
func (*IOSError) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{12}
}

func (x *IOSError) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *IOSError) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *IOSError) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IOSError) GetBatchNumber() int32 {
	if x != nil {
		return x.BatchNumber
	}
	return 0
}

type ErrorHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IosErrors   []*IOSError `protobuf:"bytes,1,rep,name=ios_errors,json=iosErrors,proto3" json:"ios_errors,omitempty"`
	TotalErrors int32       `protobuf:"varint,2,opt,name=total_errors,json=totalErrors,proto3" json:"total_errors,omitempty"`
}

func (x *ErrorHistory) Reset() {
	*x = ErrorHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorHistory) ProtoMessage() {}

func (x *ErrorHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorHistory.ProtoReflect.Descriptor instead.
func (*ErrorHistory) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{13}
}

func (x *ErrorHistory) GetIosErrors() []*IOSError {
	if x != nil {
		return x.IosErrors
	}
	return nil
}

func (x *ErrorHistory) GetTotalErrors() int32 {
	if x != nil {
		return x.TotalErrors
	}
	return 0
}

type AncestorIdHistoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AncestorId string `protobuf:"bytes,1,opt,name=ancestor_id,json=ancestorId,proto3" json:"ancestor_id,omitempty"`
	// Types that are assignable to LoggedEvent:
	//	*AncestorIdHistoryItem_UserEvent
	//	*AncestorIdHistoryItem_SessionIdFromUserEvent
	//	*AncestorIdHistoryItem_ViewEvent
	//	*AncestorIdHistoryItem_AutoViewEvent
	LoggedEvent isAncestorIdHistoryItem_LoggedEvent `protobuf_oneof:"logged_event"`
	BatchNumber int32                               `protobuf:"varint,5,opt,name=batch_number,json=batchNumber,proto3" json:"batch_number,omitempty"`
}

func (x *AncestorIdHistoryItem) Reset() {
	*x = AncestorIdHistoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AncestorIdHistoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AncestorIdHistoryItem) ProtoMessage() {}

func (x *AncestorIdHistoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AncestorIdHistoryItem.ProtoReflect.Descriptor instead.
func (*AncestorIdHistoryItem) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{14}
}

func (x *AncestorIdHistoryItem) GetAncestorId() string {
	if x != nil {
		return x.AncestorId
	}
	return ""
}

func (m *AncestorIdHistoryItem) GetLoggedEvent() isAncestorIdHistoryItem_LoggedEvent {
	if m != nil {
		return m.LoggedEvent
	}
	return nil
}

func (x *AncestorIdHistoryItem) GetUserEvent() *User {
	if x, ok := x.GetLoggedEvent().(*AncestorIdHistoryItem_UserEvent); ok {
		return x.UserEvent
	}
	return nil
}

func (x *AncestorIdHistoryItem) GetSessionIdFromUserEvent() string {
	if x, ok := x.GetLoggedEvent().(*AncestorIdHistoryItem_SessionIdFromUserEvent); ok {
		return x.SessionIdFromUserEvent
	}
	return ""
}

func (x *AncestorIdHistoryItem) GetViewEvent() *View {
	if x, ok := x.GetLoggedEvent().(*AncestorIdHistoryItem_ViewEvent); ok {
		return x.ViewEvent
	}
	return nil
}

func (x *AncestorIdHistoryItem) GetAutoViewEvent() *AutoView {
	if x, ok := x.GetLoggedEvent().(*AncestorIdHistoryItem_AutoViewEvent); ok {
		return x.AutoViewEvent
	}
	return nil
}

func (x *AncestorIdHistoryItem) GetBatchNumber() int32 {
	if x != nil {
		return x.BatchNumber
	}
	return 0
}

type isAncestorIdHistoryItem_LoggedEvent interface {
	isAncestorIdHistoryItem_LoggedEvent()
}

type AncestorIdHistoryItem_UserEvent struct {
	UserEvent *User `protobuf:"bytes,2,opt,name=user_event,json=userEvent,proto3,oneof"`
}

type AncestorIdHistoryItem_SessionIdFromUserEvent struct {
	SessionIdFromUserEvent string `protobuf:"bytes,3,opt,name=session_id_from_user_event,json=sessionIdFromUserEvent,proto3,oneof"`
}

type AncestorIdHistoryItem_ViewEvent struct {
	ViewEvent *View `protobuf:"bytes,4,opt,name=view_event,json=viewEvent,proto3,oneof"`
}

type AncestorIdHistoryItem_AutoViewEvent struct {
	AutoViewEvent *AutoView `protobuf:"bytes,6,opt,name=auto_view_event,json=autoViewEvent,proto3,oneof"`
}

func (*AncestorIdHistoryItem_UserEvent) isAncestorIdHistoryItem_LoggedEvent() {}

func (*AncestorIdHistoryItem_SessionIdFromUserEvent) isAncestorIdHistoryItem_LoggedEvent() {}

func (*AncestorIdHistoryItem_ViewEvent) isAncestorIdHistoryItem_LoggedEvent() {}

func (*AncestorIdHistoryItem_AutoViewEvent) isAncestorIdHistoryItem_LoggedEvent() {}

type AncestorIdHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogUserIdHistory       []*AncestorIdHistoryItem `protobuf:"bytes,1,rep,name=log_user_id_history,json=logUserIdHistory,proto3" json:"log_user_id_history,omitempty"`
	TotalLogUserIdsLogged  int32                    `protobuf:"varint,2,opt,name=total_log_user_ids_logged,json=totalLogUserIdsLogged,proto3" json:"total_log_user_ids_logged,omitempty"`
	SessionIdHistory       []*AncestorIdHistoryItem `protobuf:"bytes,3,rep,name=session_id_history,json=sessionIdHistory,proto3" json:"session_id_history,omitempty"`
	TotalSessionIdsLogged  int32                    `protobuf:"varint,4,opt,name=total_session_ids_logged,json=totalSessionIdsLogged,proto3" json:"total_session_ids_logged,omitempty"`
	ViewIdHistory          []*AncestorIdHistoryItem `protobuf:"bytes,5,rep,name=view_id_history,json=viewIdHistory,proto3" json:"view_id_history,omitempty"`
	TotalViewIdsLogged     int32                    `protobuf:"varint,6,opt,name=total_view_ids_logged,json=totalViewIdsLogged,proto3" json:"total_view_ids_logged,omitempty"`
	AutoViewIdHistory      []*AncestorIdHistoryItem `protobuf:"bytes,7,rep,name=auto_view_id_history,json=autoViewIdHistory,proto3" json:"auto_view_id_history,omitempty"`
	TotalAutoViewIdsLogged int32                    `protobuf:"varint,8,opt,name=total_auto_view_ids_logged,json=totalAutoViewIdsLogged,proto3" json:"total_auto_view_ids_logged,omitempty"`
}

func (x *AncestorIdHistory) Reset() {
	*x = AncestorIdHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AncestorIdHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AncestorIdHistory) ProtoMessage() {}

func (x *AncestorIdHistory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AncestorIdHistory.ProtoReflect.Descriptor instead.
func (*AncestorIdHistory) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{15}
}

func (x *AncestorIdHistory) GetLogUserIdHistory() []*AncestorIdHistoryItem {
	if x != nil {
		return x.LogUserIdHistory
	}
	return nil
}

func (x *AncestorIdHistory) GetTotalLogUserIdsLogged() int32 {
	if x != nil {
		return x.TotalLogUserIdsLogged
	}
	return 0
}

func (x *AncestorIdHistory) GetSessionIdHistory() []*AncestorIdHistoryItem {
	if x != nil {
		return x.SessionIdHistory
	}
	return nil
}

func (x *AncestorIdHistory) GetTotalSessionIdsLogged() int32 {
	if x != nil {
		return x.TotalSessionIdsLogged
	}
	return 0
}

func (x *AncestorIdHistory) GetViewIdHistory() []*AncestorIdHistoryItem {
	if x != nil {
		return x.ViewIdHistory
	}
	return nil
}

func (x *AncestorIdHistory) GetTotalViewIdsLogged() int32 {
	if x != nil {
		return x.TotalViewIdsLogged
	}
	return 0
}

func (x *AncestorIdHistory) GetAutoViewIdHistory() []*AncestorIdHistoryItem {
	if x != nil {
		return x.AutoViewIdHistory
	}
	return nil
}

func (x *AncestorIdHistory) GetTotalAutoViewIdsLogged() int32 {
	if x != nil {
		return x.TotalAutoViewIdsLogged
	}
	return 0
}

type MobileDiagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceIdentifier        string             `protobuf:"bytes,1,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty"`
	ClientVersion           string             `protobuf:"bytes,2,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	PromotedLibraryVersion  string             `protobuf:"bytes,3,opt,name=promoted_library_version,json=promotedLibraryVersion,proto3" json:"promoted_library_version,omitempty"`
	BatchesAttempted        int32              `protobuf:"varint,4,opt,name=batches_attempted,json=batchesAttempted,proto3" json:"batches_attempted,omitempty"`
	BatchesSentSuccessfully int32              `protobuf:"varint,5,opt,name=batches_sent_successfully,json=batchesSentSuccessfully,proto3" json:"batches_sent_successfully,omitempty"`
	BatchesWithErrors       int32              `protobuf:"varint,6,opt,name=batches_with_errors,json=batchesWithErrors,proto3" json:"batches_with_errors,omitempty"`
	ErrorHistory            *ErrorHistory      `protobuf:"bytes,7,opt,name=error_history,json=errorHistory,proto3" json:"error_history,omitempty"`
	AncestorIdHistory       *AncestorIdHistory `protobuf:"bytes,8,opt,name=ancestor_id_history,json=ancestorIdHistory,proto3" json:"ancestor_id_history,omitempty"`
}

func (x *MobileDiagnostics) Reset() {
	*x = MobileDiagnostics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobileDiagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobileDiagnostics) ProtoMessage() {}

func (x *MobileDiagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobileDiagnostics.ProtoReflect.Descriptor instead.
func (*MobileDiagnostics) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{16}
}

func (x *MobileDiagnostics) GetDeviceIdentifier() string {
	if x != nil {
		return x.DeviceIdentifier
	}
	return ""
}

func (x *MobileDiagnostics) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *MobileDiagnostics) GetPromotedLibraryVersion() string {
	if x != nil {
		return x.PromotedLibraryVersion
	}
	return ""
}

func (x *MobileDiagnostics) GetBatchesAttempted() int32 {
	if x != nil {
		return x.BatchesAttempted
	}
	return 0
}

func (x *MobileDiagnostics) GetBatchesSentSuccessfully() int32 {
	if x != nil {
		return x.BatchesSentSuccessfully
	}
	return 0
}

func (x *MobileDiagnostics) GetBatchesWithErrors() int32 {
	if x != nil {
		return x.BatchesWithErrors
	}
	return 0
}

func (x *MobileDiagnostics) GetErrorHistory() *ErrorHistory {
	if x != nil {
		return x.ErrorHistory
	}
	return nil
}

func (x *MobileDiagnostics) GetAncestorIdHistory() *AncestorIdHistory {
	if x != nil {
		return x.AncestorIdHistory
	}
	return nil
}

type Diagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformId uint64             `protobuf:"varint,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	UserInfo   *common.UserInfo   `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Timing     *common.Timing     `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	ClientInfo *common.ClientInfo `protobuf:"bytes,4,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	// Types that are assignable to DiagnosticsMessage:
	//	*Diagnostics_MobileDiagnostics
	DiagnosticsMessage isDiagnostics_DiagnosticsMessage `protobuf_oneof:"diagnostics_message"`
}

func (x *Diagnostics) Reset() {
	*x = Diagnostics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostics) ProtoMessage() {}

func (x *Diagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostics.ProtoReflect.Descriptor instead.
func (*Diagnostics) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{17}
}

func (x *Diagnostics) GetPlatformId() uint64 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *Diagnostics) GetUserInfo() *common.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *Diagnostics) GetTiming() *common.Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *Diagnostics) GetClientInfo() *common.ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (m *Diagnostics) GetDiagnosticsMessage() isDiagnostics_DiagnosticsMessage {
	if m != nil {
		return m.DiagnosticsMessage
	}
	return nil
}

func (x *Diagnostics) GetMobileDiagnostics() *MobileDiagnostics {
	if x, ok := x.GetDiagnosticsMessage().(*Diagnostics_MobileDiagnostics); ok {
		return x.MobileDiagnostics
	}
	return nil
}

type isDiagnostics_DiagnosticsMessage interface {
	isDiagnostics_DiagnosticsMessage()
}

type Diagnostics_MobileDiagnostics struct {
	MobileDiagnostics *MobileDiagnostics `protobuf:"bytes,5,opt,name=mobile_diagnostics,json=mobileDiagnostics,proto3,oneof"`
}

func (*Diagnostics_MobileDiagnostics) isDiagnostics_DiagnosticsMessage() {}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformId       uint64                  `protobuf:"varint,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	UserInfo         *common.UserInfo        `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Timing           *common.Timing          `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	ClientInfo       *common.ClientInfo      `protobuf:"bytes,4,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	Device           *common.Device          `protobuf:"bytes,24,opt,name=device,proto3" json:"device,omitempty"`
	User             []*User                 `protobuf:"bytes,7,rep,name=user,proto3" json:"user,omitempty"`
	CohortMembership []*CohortMembership     `protobuf:"bytes,8,rep,name=cohort_membership,json=cohortMembership,proto3" json:"cohort_membership,omitempty"`
	View             []*View                 `protobuf:"bytes,11,rep,name=view,proto3" json:"view,omitempty"`
	AutoView         []*AutoView             `protobuf:"bytes,25,rep,name=auto_view,json=autoView,proto3" json:"auto_view,omitempty"`
	Request          []*delivery.Request     `protobuf:"bytes,12,rep,name=request,proto3" json:"request,omitempty"`
	Insertion        []*delivery.Insertion   `protobuf:"bytes,13,rep,name=insertion,proto3" json:"insertion,omitempty"`
	Impression       []*Impression           `protobuf:"bytes,14,rep,name=impression,proto3" json:"impression,omitempty"`
	Action           []*Action               `protobuf:"bytes,15,rep,name=action,proto3" json:"action,omitempty"`
	DeliveryLog      []*delivery.DeliveryLog `protobuf:"bytes,18,rep,name=delivery_log,json=deliveryLog,proto3" json:"delivery_log,omitempty"`
	Diagnostics      []*Diagnostics          `protobuf:"bytes,23,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_event_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_event_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_event_proto_rawDescGZIP(), []int{18}
}

func (x *LogRequest) GetPlatformId() uint64 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *LogRequest) GetUserInfo() *common.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *LogRequest) GetTiming() *common.Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *LogRequest) GetClientInfo() *common.ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *LogRequest) GetDevice() *common.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *LogRequest) GetUser() []*User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LogRequest) GetCohortMembership() []*CohortMembership {
	if x != nil {
		return x.CohortMembership
	}
	return nil
}

func (x *LogRequest) GetView() []*View {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *LogRequest) GetAutoView() []*AutoView {
	if x != nil {
		return x.AutoView
	}
	return nil
}

func (x *LogRequest) GetRequest() []*delivery.Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *LogRequest) GetInsertion() []*delivery.Insertion {
	if x != nil {
		return x.Insertion
	}
	return nil
}

func (x *LogRequest) GetImpression() []*Impression {
	if x != nil {
		return x.Impression
	}
	return nil
}

func (x *LogRequest) GetAction() []*Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *LogRequest) GetDeliveryLog() []*delivery.DeliveryLog {
	if x != nil {
		return x.DeliveryLog
	}
	return nil
}

func (x *LogRequest) GetDiagnostics() []*Diagnostics {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

var File_proto_event_event_proto protoreflect.FileDescriptor

var file_proto_event_event_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x02, 0x0a, 0x11, 0x4a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x6f,
	0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x56, 0x69,
	0x65, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9a, 0x05, 0x0a, 0x15,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x4f, 0x0a, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x49, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x17,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x61, 0x75, 0x74, 0x6f,
	0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x55, 0x0a, 0x18, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x16, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43,
	0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xe5, 0x02,
	0x0a, 0x10, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x03, 0x61, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x6d,
	0x52, 0x03, 0x61, 0x72, 0x6d, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x74, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x15, 0x0a, 0x0d, 0x41,
	0x70, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0x98, 0x06, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x56, 0x69, 0x65,
	0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x61,
	0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x76, 0x69,
	0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x48,
	0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x43, 0x0a, 0x0e, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x08, 0x56, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x45, 0x42, 0x5f,
	0x50, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x43,
	0x52, 0x45, 0x45, 0x4e, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x75, 0x69, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x22, 0xff, 0x04,
	0x0a, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x73,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x07, 0x75, 0x73, 0x65, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x38, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x57,
	0x65, 0x62, 0x50, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x65,
	0x62, 0x50, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x70, 0x70,
	0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x0d, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x75, 0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22,
	0x21, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0xc7, 0x05, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x68, 0x61, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x61,
	0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0e, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x2f, 0x0a, 0x0e,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x95, 0x07,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x56, 0x69,
	0x65, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x61, 0x73,
	0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x61, 0x73, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12,
	0x39, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x0d, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a,
	0x04, 0x08, 0x13, 0x10, 0x14, 0x22, 0x7b, 0x0a, 0x08, 0x49, 0x4f, 0x53, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x61, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6f, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x4f, 0x53, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6f, 0x73, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x15, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c,
	0x0a, 0x1a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0a,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52,
	0x09, 0x76, 0x69, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x56, 0x69, 0x65, 0x77,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xa3, 0x04, 0x0a, 0x11, 0x41, 0x6e, 0x63,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4b,
	0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x19, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x63, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69,
	0x64, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x73, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x11, 0x61, 0x75, 0x74, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x3a, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x6f, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x22, 0xbe,
	0x03, 0x0a, 0x11, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12,
	0x3a, 0x0a, 0x19, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x13, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x9c, 0x02, 0x0a, 0x0b, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x12,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xeb,
	0x05, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x11, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x10, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6c,
	0x6f, 0x67, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x52,
	0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x34, 0x0a, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04,
	0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11,
	0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x17, 0x2a, 0x63, 0x0a, 0x14,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x4f, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x04, 0x2a, 0x6a, 0x0a, 0x09, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x6d, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x31, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x32, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x33, 0x10, 0x05, 0x2a, 0x5c, 0x0a,
	0x14, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x9f, 0x02, 0x0a, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x41, 0x56, 0x49, 0x47, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x44,
	0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x41, 0x52, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x43, 0x41, 0x52, 0x54, 0x10, 0x0a,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4b, 0x45, 0x10,
	0x06, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x09, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41,
	0x4b, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x53,
	0x4b, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0d, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x5f, 0x49, 0x4e, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x55, 0x50, 0x10, 0x0f, 0x42, 0x59, 0x0a,
	0x17, 0x61, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x61, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_event_event_proto_rawDescOnce sync.Once
	file_proto_event_event_proto_rawDescData = file_proto_event_event_proto_rawDesc
)

func file_proto_event_event_proto_rawDescGZIP() []byte {
	file_proto_event_event_proto_rawDescOnce.Do(func() {
		file_proto_event_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_event_event_proto_rawDescData)
	})
	return file_proto_event_event_proto_rawDescData
}

var file_proto_event_event_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_event_event_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_proto_event_event_proto_goTypes = []interface{}{
	(IdentifierProvenance)(0),     // 0: event.IdentifierProvenance
	(CohortArm)(0),                // 1: event.CohortArm
	(ImpressionSourceType)(0),     // 2: event.ImpressionSourceType
	(ActionType)(0),               // 3: event.ActionType
	(View_ViewType)(0),            // 4: event.View.ViewType
	(*JoinedIdentifiers)(nil),     // 5: event.JoinedIdentifiers
	(*IdentifierProvenances)(nil), // 6: event.IdentifierProvenances
	(*User)(nil),                  // 7: event.User
	(*CohortMembership)(nil),      // 8: event.CohortMembership
	(*WebPageView)(nil),           // 9: event.WebPageView
	(*AppScreenView)(nil),         // 10: event.AppScreenView
	(*View)(nil),                  // 11: event.View
	(*AutoView)(nil),              // 12: event.AutoView
	(*IndexPath)(nil),             // 13: event.IndexPath
	(*Impression)(nil),            // 14: event.Impression
	(*NavigateAction)(nil),        // 15: event.NavigateAction
	(*Action)(nil),                // 16: event.Action
	(*IOSError)(nil),              // 17: event.IOSError
	(*ErrorHistory)(nil),          // 18: event.ErrorHistory
	(*AncestorIdHistoryItem)(nil), // 19: event.AncestorIdHistoryItem
	(*AncestorIdHistory)(nil),     // 20: event.AncestorIdHistory
	(*MobileDiagnostics)(nil),     // 21: event.MobileDiagnostics
	(*Diagnostics)(nil),           // 22: event.Diagnostics
	(*LogRequest)(nil),            // 23: event.LogRequest
	(*common.UserInfo)(nil),       // 24: common.UserInfo
	(*common.Timing)(nil),         // 25: common.Timing
	(*common.ClientInfo)(nil),     // 26: common.ClientInfo
	(*common.Properties)(nil),     // 27: common.Properties
	(*common.Size)(nil),           // 28: common.Size
	(delivery.UseCase)(0),         // 29: delivery.UseCase
	(*common.Locale)(nil),         // 30: common.Locale
	(*common.Device)(nil),         // 31: common.Device
	(*delivery.Request)(nil),      // 32: delivery.Request
	(*delivery.Insertion)(nil),    // 33: delivery.Insertion
	(*delivery.DeliveryLog)(nil),  // 34: delivery.DeliveryLog
}
var file_proto_event_event_proto_depIdxs = []int32{
	0,  // 0: event.IdentifierProvenances.user_id_provenance:type_name -> event.IdentifierProvenance
	0,  // 1: event.IdentifierProvenances.session_id_provenance:type_name -> event.IdentifierProvenance
	0,  // 2: event.IdentifierProvenances.view_id_provenance:type_name -> event.IdentifierProvenance
	0,  // 3: event.IdentifierProvenances.auto_view_id_provenance:type_name -> event.IdentifierProvenance
	0,  // 4: event.IdentifierProvenances.impression_id_provenance:type_name -> event.IdentifierProvenance
	0,  // 5: event.IdentifierProvenances.action_id_provenance:type_name -> event.IdentifierProvenance
	0,  // 6: event.IdentifierProvenances.content_id_provenance:type_name -> event.IdentifierProvenance
	0,  // 7: event.IdentifierProvenances.request_id_provenance:type_name -> event.IdentifierProvenance
	24, // 8: event.User.user_info:type_name -> common.UserInfo
	25, // 9: event.User.timing:type_name -> common.Timing
	26, // 10: event.User.client_info:type_name -> common.ClientInfo
	6,  // 11: event.User.id_provenances:type_name -> event.IdentifierProvenances
	27, // 12: event.User.properties:type_name -> common.Properties
	24, // 13: event.CohortMembership.user_info:type_name -> common.UserInfo
	25, // 14: event.CohortMembership.timing:type_name -> common.Timing
	26, // 15: event.CohortMembership.client_info:type_name -> common.ClientInfo
	1,  // 16: event.CohortMembership.arm:type_name -> event.CohortArm
	27, // 17: event.CohortMembership.properties:type_name -> common.Properties
	28, // 18: event.WebPageView.document_size:type_name -> common.Size
	24, // 19: event.View.user_info:type_name -> common.UserInfo
	25, // 20: event.View.timing:type_name -> common.Timing
	26, // 21: event.View.client_info:type_name -> common.ClientInfo
	29, // 22: event.View.use_case:type_name -> delivery.UseCase
	27, // 23: event.View.properties:type_name -> common.Properties
	30, // 24: event.View.locale:type_name -> common.Locale
	4,  // 25: event.View.view_type:type_name -> event.View.ViewType
	9,  // 26: event.View.web_page_view:type_name -> event.WebPageView
	10, // 27: event.View.app_screen_view:type_name -> event.AppScreenView
	6,  // 28: event.View.id_provenances:type_name -> event.IdentifierProvenances
	24, // 29: event.AutoView.user_info:type_name -> common.UserInfo
	25, // 30: event.AutoView.timing:type_name -> common.Timing
	26, // 31: event.AutoView.client_info:type_name -> common.ClientInfo
	29, // 32: event.AutoView.use_case:type_name -> delivery.UseCase
	27, // 33: event.AutoView.properties:type_name -> common.Properties
	30, // 34: event.AutoView.locale:type_name -> common.Locale
	9,  // 35: event.AutoView.web_page_view:type_name -> event.WebPageView
	10, // 36: event.AutoView.app_screen_view:type_name -> event.AppScreenView
	6,  // 37: event.AutoView.id_provenances:type_name -> event.IdentifierProvenances
	24, // 38: event.Impression.user_info:type_name -> common.UserInfo
	25, // 39: event.Impression.timing:type_name -> common.Timing
	26, // 40: event.Impression.client_info:type_name -> common.ClientInfo
	2,  // 41: event.Impression.source_type:type_name -> event.ImpressionSourceType
	13, // 42: event.Impression.client_position:type_name -> event.IndexPath
	6,  // 43: event.Impression.id_provenances:type_name -> event.IdentifierProvenances
	27, // 44: event.Impression.properties:type_name -> common.Properties
	24, // 45: event.Action.user_info:type_name -> common.UserInfo
	25, // 46: event.Action.timing:type_name -> common.Timing
	26, // 47: event.Action.client_info:type_name -> common.ClientInfo
	3,  // 48: event.Action.action_type:type_name -> event.ActionType
	15, // 49: event.Action.navigate_action:type_name -> event.NavigateAction
	13, // 50: event.Action.client_position:type_name -> event.IndexPath
	6,  // 51: event.Action.id_provenances:type_name -> event.IdentifierProvenances
	27, // 52: event.Action.properties:type_name -> common.Properties
	17, // 53: event.ErrorHistory.ios_errors:type_name -> event.IOSError
	7,  // 54: event.AncestorIdHistoryItem.user_event:type_name -> event.User
	11, // 55: event.AncestorIdHistoryItem.view_event:type_name -> event.View
	12, // 56: event.AncestorIdHistoryItem.auto_view_event:type_name -> event.AutoView
	19, // 57: event.AncestorIdHistory.log_user_id_history:type_name -> event.AncestorIdHistoryItem
	19, // 58: event.AncestorIdHistory.session_id_history:type_name -> event.AncestorIdHistoryItem
	19, // 59: event.AncestorIdHistory.view_id_history:type_name -> event.AncestorIdHistoryItem
	19, // 60: event.AncestorIdHistory.auto_view_id_history:type_name -> event.AncestorIdHistoryItem
	18, // 61: event.MobileDiagnostics.error_history:type_name -> event.ErrorHistory
	20, // 62: event.MobileDiagnostics.ancestor_id_history:type_name -> event.AncestorIdHistory
	24, // 63: event.Diagnostics.user_info:type_name -> common.UserInfo
	25, // 64: event.Diagnostics.timing:type_name -> common.Timing
	26, // 65: event.Diagnostics.client_info:type_name -> common.ClientInfo
	21, // 66: event.Diagnostics.mobile_diagnostics:type_name -> event.MobileDiagnostics
	24, // 67: event.LogRequest.user_info:type_name -> common.UserInfo
	25, // 68: event.LogRequest.timing:type_name -> common.Timing
	26, // 69: event.LogRequest.client_info:type_name -> common.ClientInfo
	31, // 70: event.LogRequest.device:type_name -> common.Device
	7,  // 71: event.LogRequest.user:type_name -> event.User
	8,  // 72: event.LogRequest.cohort_membership:type_name -> event.CohortMembership
	11, // 73: event.LogRequest.view:type_name -> event.View
	12, // 74: event.LogRequest.auto_view:type_name -> event.AutoView
	32, // 75: event.LogRequest.request:type_name -> delivery.Request
	33, // 76: event.LogRequest.insertion:type_name -> delivery.Insertion
	14, // 77: event.LogRequest.impression:type_name -> event.Impression
	16, // 78: event.LogRequest.action:type_name -> event.Action
	34, // 79: event.LogRequest.delivery_log:type_name -> delivery.DeliveryLog
	22, // 80: event.LogRequest.diagnostics:type_name -> event.Diagnostics
	81, // [81:81] is the sub-list for method output_type
	81, // [81:81] is the sub-list for method input_type
	81, // [81:81] is the sub-list for extension type_name
	81, // [81:81] is the sub-list for extension extendee
	0,  // [0:81] is the sub-list for field type_name
}

func init() { file_proto_event_event_proto_init() }
func file_proto_event_event_proto_init() {
	if File_proto_event_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_event_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinedIdentifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierProvenances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CohortMembership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebPageView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppScreenView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*View); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Impression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigateAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOSError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AncestorIdHistoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AncestorIdHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobileDiagnostics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diagnostics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_event_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_event_event_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*View_WebPageView)(nil),
		(*View_AppScreenView)(nil),
	}
	file_proto_event_event_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*AutoView_WebPageView)(nil),
		(*AutoView_AppScreenView)(nil),
	}
	file_proto_event_event_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Action_NavigateAction)(nil),
	}
	file_proto_event_event_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*AncestorIdHistoryItem_UserEvent)(nil),
		(*AncestorIdHistoryItem_SessionIdFromUserEvent)(nil),
		(*AncestorIdHistoryItem_ViewEvent)(nil),
		(*AncestorIdHistoryItem_AutoViewEvent)(nil),
	}
	file_proto_event_event_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Diagnostics_MobileDiagnostics)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_event_event_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_event_event_proto_goTypes,
		DependencyIndexes: file_proto_event_event_proto_depIdxs,
		EnumInfos:         file_proto_event_event_proto_enumTypes,
		MessageInfos:      file_proto_event_event_proto_msgTypes,
	}.Build()
	File_proto_event_event_proto = out.File
	file_proto_event_event_proto_rawDesc = nil
	file_proto_event_event_proto_goTypes = nil
	file_proto_event_event_proto_depIdxs = nil
}
