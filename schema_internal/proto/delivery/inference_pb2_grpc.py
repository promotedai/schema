# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from schema_internal.proto.delivery import inference_pb2 as schema__internal_dot_proto_dot_delivery_dot_inference__pb2


class EmbeddingsStub(object):
    """A separate service should be created for other types of inference (e.g. text
    generation).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListModels = channel.unary_unary(
                '/inference.Embeddings/ListModels',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=schema__internal_dot_proto_dot_delivery_dot_inference__pb2.ListModelsResponse.FromString,
                _registered_method=True)
        self.Embed = channel.unary_unary(
                '/inference.Embeddings/Embed',
                request_serializer=schema__internal_dot_proto_dot_delivery_dot_inference__pb2.EmbedRequest.SerializeToString,
                response_deserializer=schema__internal_dot_proto_dot_delivery_dot_inference__pb2.EmbedResponse.FromString,
                _registered_method=True)


class EmbeddingsServicer(object):
    """A separate service should be created for other types of inference (e.g. text
    generation).
    """

    def ListModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Embed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmbeddingsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=schema__internal_dot_proto_dot_delivery_dot_inference__pb2.ListModelsResponse.SerializeToString,
            ),
            'Embed': grpc.unary_unary_rpc_method_handler(
                    servicer.Embed,
                    request_deserializer=schema__internal_dot_proto_dot_delivery_dot_inference__pb2.EmbedRequest.FromString,
                    response_serializer=schema__internal_dot_proto_dot_delivery_dot_inference__pb2.EmbedResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'inference.Embeddings', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('inference.Embeddings', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Embeddings(object):
    """A separate service should be created for other types of inference (e.g. text
    generation).
    """

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inference.Embeddings/ListModels',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            schema__internal_dot_proto_dot_delivery_dot_inference__pb2.ListModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Embed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/inference.Embeddings/Embed',
            schema__internal_dot_proto_dot_delivery_dot_inference__pb2.EmbedRequest.SerializeToString,
            schema__internal_dot_proto_dot_delivery_dot_inference__pb2.EmbedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
