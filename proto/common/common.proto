syntax = "proto3";
package common;

option java_multiple_files = true;
option java_package = "ai.promoted.proto.common";
option java_outer_classname = "CommonProto";
option go_package = "github.com/promotedai/schema/generated/go/proto/common";
import "google/protobuf/struct.proto";

// Next ID = 7.
message EntityPath {
  uint64 platform_id = 1;
  uint64 customer_id = 2;
  uint64 account_id = 4;
  uint64 campaign_id = 5;
  uint64 promotion_id = 6;
  uint64 content_id = 3;
}

// Next ID = 21.
enum CurrencyCode {
  UNKNOWN_CURRENCY_CODE = 0;
  USD = 1;
  EUR = 2;
  JPY = 3;
  GBP = 4;
  AUD = 5;
  CAD = 6;
  CHF = 7;
  CNY = 8;
  HKD = 9;
  NZD = 10;
  SEK = 11;
  KRW = 12;
  SGD = 13;
  NOK = 14;
  MXN = 15;
  INR = 16;
  RUB = 17;
  ZAR = 18;
  TRY = 19;
  BRL = 20;
}

// Common submessage that scopes helps scope a request/log to a user.
//
// Next ID = 4.
message UserInfo {

  // Optional.  The Platform's actual user ID.
  // This field will be cleared from our transaction logs.
  string user_id = 1;

  // Optional.  This is a user UUID that is different from user_id and
  // can quickly be disassociated from the actual user ID.  This is useful:
  // 1. in case the user wants to be forgotten.
  // 2. logging unauthenticated users.
  // The user UUID is in a different ID space than user_id.
  string log_user_id = 2;

  // Optional, defaults to false. Indicates that the user is from the
  // marketplace or Promoted team.
  bool is_internal_user = 3;

}

// Info about the client.
// Next ID = 3.
message ClientInfo {

  // Next ID = 5;
  enum ClientType {
    UNKNOWN_REQUEST_CLIENT = 0;
    PLATFORM_SERVER = 1; // Your (customer) server.
    PLATFORM_CLIENT = 2; // Your (customer) client.
    reserved 3 to 4;
  }
  ClientType client_type = 1;

  // Used to indicate the type of traffic.  We can use this to prioritize resources.
  // Next ID = 6.
  enum TrafficType {
    UNKNOWN_TRAFFIC_TYPE = 0;
    PRODUCTION = 1; // Live traffic.
    REPLAY = 2; // Replayed traffic.  We'd like similar to PRODUCTION level.
    SHADOW = 4; // Shadow traffic to delivery during logging.
    reserved 3, 5;
  }
  TrafficType traffic_type = 2;
}

// Next ID = 4.
enum DeviceType {
  UNKNOWN_DEVICE_TYPE = 0;
  DESKTOP = 1;
  MOBILE = 2;
  TABLET = 3;
}

// Locale for session
// Next ID = 3.
message Locale {
  // CodeReview - Which ISO code is this?  ISO 639-1? 2? 3?
  // "en", "zh_Hant", "fr"
  string language_code = 1;

  // CodeReview - Which ISO code?  ISO 3166-1?
  // "US", "CA", "FR"
  string region_code = 2;
}

// Rectangle size in pixels
// Next ID = 3.
message Size {
  uint32 width = 1;
  uint32 height = 2;
}

// Device screen
// Next ID = 3.
message Screen {
  // Android: DisplayMetrics.widthPixels/heightPixels
  // iOS: UIScreen.nativeBounds.width/height
  Size size = 1;

  // Natural scale factor.
  // Android: DisplayMetrics.density
  // iOS: UIScreen.scale
  float scale = 2;
}

// A sub-message containing Device info.
// Next ID = 11.
message Device {
  DeviceType device_type = 1;

  // Android: android.os.Build.BRAND
  //          (eg. "google", "verizon", "tmobile", "Samsung")
  // iOS: "Apple"
  string brand = 2;

  // Android: android.os.Build.MANUFACTURER
  //          (eg. "HTC", "Motorola", "HUAWEI")
  // iOS: "Apple"
  string manufacturer = 3;

  // Android: android.os.Build.MODEL
  //          (eg. "GT-S5830L", "MB860")
  // iOS: "iPhoneXX,YY" or "iPadXX,YY"
  string identifier = 4;

  // Android: android.os.Build.VERSION.RELEASE
  // iOS: "14.4.1"
  string os_version = 5;

  // Deprecated.
  Locale locale = 6 [deprecated = true];

  Screen screen = 7;

  // Optional.  We'll use IP Address to guess the user's
  // location when necessary and possible on desktop.
  // Most likely in a server integration this should be the value
  // of the X-Forwarded-For header.
  string ip_address = 8;

  // Optional. User device's actual geolocation if available.
  Location location = 9;

  // Optional. Information about the user's web client (on web or mobile browser).
  Browser browser = 10;
}

// https://raw.githubusercontent.com/snowplow/iglu-central/master/schemas/org.ietf/http_client_hints/jsonschema/1-0-0
// A newer alternative to user agent strings.
// Next ID = 8.
message ClientHints {
  bool is_mobile = 1;
  repeated ClientHintBrand brand = 2;
  string architecture = 3;
  string model = 4;
  string platform = 5;
  string platform_version = 6;
  string ua_full_version = 7;
}

// https://raw.githubusercontent.com/snowplow/iglu-central/master/schemas/org.ietf/http_client_hints/jsonschema/1-0-0
// a part of ClientHints.
// Next ID = 3.
message ClientHintBrand {
  string brand = 1;
  string version = 2;
}

// A sub-message containing Browser info.
// Next ID = 4.
message Browser {
  string user_agent = 1;

  Size viewport_size = 2;

  ClientHints client_hints = 3;
}

// Next ID = 4.
message Location {
  // [-90, 90]
  double latitude = 1;

  // [-180, 180]
  double longitude = 2;

  // Optional. Accuracy of location if known.
  double accuracy_in_meters = 3;
}

// A message containing timing information.
//
// We can add common timing info to this message.  Down the road, we might
// make more specific Timing messages (e.g. MetricsTiming).  We can reuse
// the field numbers.
//
// Next ID = 4.
message Timing {

  // Optional.  Client timestamp when event was created.
  uint64 client_log_timestamp = 1;

  reserved 2, 3;
}

// Supports custom properties per platform.
// Next ID = 4.
message Properties {
  oneof struct_field {
    // Optional.  Contains protobuf serialized bytes.
    bytes struct_bytes = 1;

    // Optional.  Can be converted to/from JSON.
    google.protobuf.Struct struct = 2;
  }
  reserved 3;
}
