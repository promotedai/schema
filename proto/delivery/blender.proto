syntax = "proto3";
package delivery;

option java_multiple_files = true;
option java_package = "ai.promoted.proto.delivery";
option java_outer_classname = "Blender";
option go_package = "github.com/promotedai/schema/generated/go/proto/delivery";
option csharp_namespace = "Promoted.Delivery";

// This behaves like a COALESCE in SQL. Lookups are performed in order until one
// succeeds. If they all fail, the default value is produced.
//
// A leaf with constant value can be represented by a default with no lookups.
//
// Next ID = 3.
message LeafExpression {
  repeated Lookup lookups = 1;
  float default = 2;
}

// This represents a lookup into data structures outside of the syntax tree
// (e.g. a feature map).
//
// Next ID = 3.
message Lookup {
  oneof lookup_type {
    uint64 feature_id = 1;
    uint64 parameter_key = 2;
  }
}

// This describes the executor built and used by Blender.
//
// Next ID = 3.
message BlenderConfig {
  // How to compute the quality score. The final decision for an allocation will
  // will always be a (descending) sort based on this score. Quality score ties
  // are ignored.
  BlenderExpression quality_score = 1;

  // Additional, preliminary sorting logic. Quality score-based sorting is a
  // backstop for ties resulting from this.
  BlenderSortKey sort_key = 2;
}

// Each expression type must represent the production of a single float. This is
// the only supported output data type. Expressions are not allowed to produce
// nulls or errors.
//
// (Floating point arithmetic can produce special values, or simply overflow.
// These are not considered errors and handling is not defined here.)
//
// Next ID = 4.
message BlenderExpression {
  oneof exp_type {
    LeafExpression leaf = 1;
    BlenderArithmeticExpression arithmetic_exp = 2;
    BlenderConditionalExpression conditional_exp = 3;
  }
}

// The specified operator is used across all inputs
// (e.g. inputs[0] + inputs[1] + inputs[2])
//
// Next ID = 7.
message BlenderArithmeticExpression {
  enum Operator {
    UNKNOWN = 0;
    ADD = 1;
    MULTIPLY = 2;
    SUBTRACT = 3;
    DIVIDE = 4;
    MIN = 5;
    MAX = 6;
    // These are only coherent as unary operators, but putting them here while
    // the Blender-config-validation story is still unclear.
    FLOOR = 7;
    CEILING = 8;
  }
  Operator op = 1;
  repeated BlenderExpression inputs = 2;
}

// This represents if(-else) branches in processing. For a single execution of
// the expression:
// - Both sides of the predicate are computed
// - Only one of the branches is computed
//
// Conjunction/disjunctions (i.e. AND/OR) can be formed by nesting conditionals.
//
// Next ID = 6.
message BlenderConditionalExpression {
  enum Operator {
    UNKNOWN = 0;
    EQUAL = 1;
    GREATER_THAN = 2;
    GREATER_THAN_OR_EQUAL = 3;
  }
  Operator op = 1;
  BlenderExpression predicate_lhs = 2;
  BlenderExpression predicate_rhs = 3;
  BlenderExpression then_branch = 4;
  BlenderExpression else_branch = 5;
}

// This defines a tuple of expressions that Blender should use for sorting. All
// sorts are assumed to be descending, as is done with quality scores.
//
// Next ID = 2.
message BlenderSortKey {
  // Positions correspond to sort priority. elements[0] ties are broken using
  // elements[1], elements[1] ties are broken using elements[2], and so on. Ties
  // of the last element are broken by the overall quality score.
  repeated BlenderExpression elements = 1;
}

// This is only capable of exploring values in simple ways. More complex logic
// description (e.g. conditionals) is left to Blender.
//
// Next ID = 2.
message HyperloopConfig {
  // Parameter keys in Blender correspond to this map.
  map<uint64, HyperloopParameter> parameters = 1;
}

// A parameter is effectively an experiment. Invalid parameter descriptions are
// skipped.
//
// Next ID = 3.
message HyperloopParameter {
  // Each parameter has 1000 buckets, shared among the groups. A parameter is
  // considered invalid if:
  // - Groups have overlapping bucket ranges
  // - Any bucket range starts below 0 or ends above 1000
  repeated HyperloopGroup groups = 1;
  // Any buckets which are not claimed by a group produce this value.
  float default = 2;
}

// A group is a bucket range and method of value generation.
//
// Next ID = 4.
message HyperloopGroup {
  // [low_bucket, high_bucket]
  int32 low_bucket = 1;
  int32 high_bucket = 2;
  HyperloopExpression exp = 3;
}

// See the comment for BlenderExpression.
//
// Next ID = 4.
message HyperloopExpression {
  oneof node_type {
    LeafExpression leaf = 1;
    HyperloopGeneratorExpression generator_exp = 2;
    HyperloopConditionalExpression conditional_exp = 3;
  }
}

// This is distinct from leaf in case we ever want to do generation based on
// other expressions.
//
// Next ID = 3.
message HyperloopGeneratorExpression {
  oneof generator {
    HyperloopUniformGenerator uniform = 1;
    HyperloopUniformMultiGenerator uniform_multi = 2;
  }
}

// Generates a value from a uniform distribution.
//
// Next ID = 3.
message HyperloopUniformGenerator {
  // [low_bound, high_bound]
  float low_bound = 1;
  float high_bound = 2;
}

// Uses a uniform distribution to choose a multiplier, but not to actually
// generate the final value. The final value is bounded by (base / multi, base *
// multi). There's a 50/50 chance whether multiplication or division is done.
//
// Next ID = 3.
message HyperloopUniformMultiGenerator {
  float base = 1;
  // A multi of <= 1 is invalid.
  float multi = 2;
}

// This is intended to be redundant with BlenderConditionalExpression but for
// Hyperloop messages. Protobuf doesn't have the metaprogramming to reuse that
// definition here without bringing in all Blender expressions. Unlikely our
// definition of conditional expression will ever have to change (outside of
// additional operator support).
//
// Next ID = 6.
message HyperloopConditionalExpression {
  enum Operator {
    UNKNOWN = 0;
    EQUAL = 1;
    GREATER_THAN = 2;
    GREATER_THAN_OR_EQUAL = 3;
  }
  Operator op = 1;
  HyperloopExpression predicate_lhs = 2;
  HyperloopExpression predicate_rhs = 3;
  HyperloopExpression then_branch = 4;
  HyperloopExpression else_branch = 5;
}

// These correspond to the above Hyperloop messages, but group assignment and
// values have been realized.
//
// Next ID = 2.
message HyperloopLog { map<uint64, HyperloopParameterLog> parameter_logs = 1; }

// Next ID = 3.
message HyperloopParameterLog {
  int32 bucket = 1;
  float value = 2;
}
