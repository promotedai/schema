syntax = "proto3";
package event;

option java_multiple_files = true;
option java_package = "ai.promoted.proto.event";
option java_outer_classname = "Event";
option go_package = "github.com/promotedai/schema/generated/go/proto/event";

import "proto/common/common.proto";
import "proto/delivery/delivery.proto";
import "proto/delivery/execution.proto";

// We do not need this yet.
// import "proto/promotion/promotion.proto";

// Important: Fields 1-5 are common fields that we want to be similar across
// different log records.

// This structure is used to help deduplicate identifiers that live in many
// event types.
// Next ID = 10.
message JoinedIdentifiers {
  uint64 platform_id = 1;
  string user_id = 2;
  string log_user_id = 3;

  string session_id = 4;
  string view_id = 5;
  string auto_view_id = 9;
  string request_id = 6;
  string insertion_id = 7;
  string impression_id = 8;
}

// Indicates the value of IDs when logged from metrics client library.
// Used for diagnostics and validation to show where IDs are being set.
// Next ID = 5;
enum IdentifierProvenance {
  UNKNOWN = 0;
  // Set to null by platform code.
  NULL = 1;
  // Set to the empty string by platform integration code.
  EMPTY = 2;
  // Automatically generated by metrics library.
  AUTOGENERATED = 3;
  // Set to a specific value by platform integration code.
  PLATFORM_SPECIFIED = 4;
}

// Diagnostics message indicating where each of an event's IDs originated
// from in metrics client library.
// Next ID = 11;
message IdentifierProvenances {
  IdentifierProvenance user_id_provenance = 1;
  IdentifierProvenance log_user_id_provenance = 9;
  IdentifierProvenance session_id_provenance = 2;
  IdentifierProvenance view_id_provenance = 3;
  IdentifierProvenance auto_view_id_provenance = 8;
  IdentifierProvenance insertion_id_provenance = 10;
  IdentifierProvenance impression_id_provenance = 4;
  IdentifierProvenance action_id_provenance = 5;
  IdentifierProvenance content_id_provenance = 6;
  IdentifierProvenance request_id_provenance = 7;
}

// Used to store user properties.  E.g. purchasedContentIds.
// Clients can update each User multiple times by logging the User with the same
// user_id.  Unset fields will not be updated. Repeated fields will act like a
// merge if the item has a key.  Otherwise, it'll act like an append.
// Next ID = 8.
message User {

  // Optional.  If not set, set by API servers.
  // If not set, API server uses LogRequest.platform_id.
  uint64 platform_id = 1;

  // Optional.  Must be set on LogRequest or here.
  common.UserInfo user_info = 2;

  // Optional.  If not set, set by API servers.
  // If not set, API server uses LogRequest.timing.
  common.Timing timing = 3;

  // Optional.  If not set, API server uses LogRequest.client_info.
  common.ClientInfo client_info = 4;

  reserved 5; // Reserving fields for future common fields.

  // Optional.  Used for debugging.
  IdentifierProvenances id_provenances = 7;

  // Optional.  Custom properties per platform.
  common.Properties properties = 6;
}


// The arm (experiment's group) when the Cohort is for an experiment.
// Next ID = 6.
enum CohortArm {
  UNKNOWN_GROUP = 0;
  CONTROL = 1;
  TREATMENT = 2;

  // These are generic arms (groups) that can be used when there are multiple treatments.
  TREATMENT1 = 3;
  TREATMENT2 = 4;
  TREATMENT3 = 5;
}

// For linking users to cohorts.
// Next ID = 11.
message CohortMembership {

  // Optional.  If not set, set by API servers.
  // If not set, API server uses LogRequest.platform_id.
  uint64 platform_id = 1;

  // Optional.  Must be set on LogRequest or here.
  common.UserInfo user_info = 2;

  // Optional.  If not set, set by API servers.
  // If not set, API server uses LogRequest.timing.
  common.Timing timing = 3;

  // Optional.  If not set, API server uses LogRequest.client_info.
  common.ClientInfo client_info = 4;

  reserved 5; // Reserving fields for future common fields.

  // Optional.  Primary key.
  // SDKs usually handles this automatically. For details, see
  // https://github.com/promotedai/schema#setting-primary-keys
  string membership_id = 6;

  reserved 7; // A future optimized CohortId.

  // Optional.  This field refers to the cohort (currently stored as an enum).
  string cohort_id = 8;

  // Optional.
  CohortArm arm = 9;

  // Optional.  Custom properties per platform.
  common.Properties properties = 10;
}


// Submessage on View for Web page visits.
// Next ID = 5.
message WebPageView {

  // Optional.  This is the url for the page.
  string url = 1;

  reserved 2;

  // Optional.  Can be a full referrer string.  Could be just the UTM.
  string referrer = 3;

  common.Size document_size = 4;
}

// Submessage on View for screen views.
// Next ID = 2.
message AppScreenView {
  reserved 1;
}

// A view of a single page/screen (e.g. feed, search results, etc).
// Next ID = 19.
message View {

  // Optional.  If not set, set by API servers.
  // If not set, API server uses LogRequest.platform_id.
  uint64 platform_id = 1;

  // Optional.  Must be set on LogRequest or here.
  common.UserInfo user_info = 2;

  // Optional.  If not set, set by API servers.
  // If not set, API server uses LogRequest.timing.
  common.Timing timing = 3;

  // Optional.  If not set, API server uses LogRequest.client_info.
  common.ClientInfo client_info = 4;

  reserved 5; // Reserving fields for future common fields.

  // Optional.  Primary key.
  // SDKs usually handles this automatically. For details, see
  // https://github.com/promotedai/schema#setting-primary-keys
  string view_id = 6;
  
  // Optional.  Do not set this outside the client SDK.
  string auto_view_id = 17;

  // Optional.
  string session_id = 7;

  // Optional.  The name of the view.
  string name = 8;

  // Optional.
  delivery.UseCase use_case = 9;

  // Optional.
  string search_query = 10;

  // Optional.  Custom properties per platform.
  common.Properties properties = 11;

  reserved 12;

  // Optional.
  common.Locale locale = 16;

  // If a specific view is set (`web_page_view` and `app_screen_view`),
  // clients do not need to set it directly.  If those fields and `view_type`
  // have conflicting values, the specific view field is used.
  ViewType view_type = 13;
  enum ViewType {
    UNKNOWN_VIEW_TYPE = 0;
    WEB_PAGE = 1;
    APP_SCREEN = 2;
  }

  // Optional.
  oneof ui_type {
    WebPageView web_page_view = 14;
    AppScreenView app_screen_view = 15;
  }

  // Optional.  Used for debugging.
  IdentifierProvenances id_provenances = 18;
}

// An automatically generated view logged by web and mobile SDKs.
// Platform clients should never log this directly. Let the SDKs
// handle this instead.
// Next ID = 16.
message AutoView {

  // Optional.  If not set, set by API servers.
  // If not set, API server uses LogRequest.platform_id.
  uint64 platform_id = 1;

  // Optional.  Must be set on LogRequest or here.
  common.UserInfo user_info = 2;

  // Optional.  If not set, set by API servers.
  // If not set, API server uses LogRequest.timing.
  common.Timing timing = 3;

  // Optional.  If not set, API server uses LogRequest.client_info.
  common.ClientInfo client_info = 4;

  reserved 5; // Reserving fields for future common fields.

  // Optional.  Primary key.
  // SDKs usually handles this automatically. For details, see
  // https://github.com/promotedai/schema#setting-primary-keys
  string auto_view_id = 6;
  
  // Optional.  Do not set this outside the client SDK.
  string view_id = 14;

  // Optional.
  string session_id = 7;

  // Optional.  The name of the view.
  string name = 8;

  // Optional.
  delivery.UseCase use_case = 9;

  // Optional.  Custom properties per platform.
  common.Properties properties = 10;

  // Optional.
  common.Locale locale = 11;

  // Optional.
  oneof ui_type {
    WebPageView web_page_view = 12;
    AppScreenView app_screen_view = 13;
  }

  // Optional.  Used for debugging.
  IdentifierProvenances id_provenances = 15;
}

// Contextual information about where impression was served.
// Allows backends to infer expected behavior about
// corresponding content.
// Next ID = 3.
enum ImpressionSourceType {
  UNKNOWN_IMPRESSION_SOURCE_TYPE = 0;

  // Content was served by Promoted Delivery API.
  DELIVERY = 1;

  // Content was not served by Promoted Delivery API.
  CLIENT_BACKEND = 2;
}

// Represents a position in a list view, most commonly used with
// mobile clients (though it can apply to web too).
// The indexes represent a zero-based hierarchical path of sections,
// subsections, and items. For example:
// [2] -> Item at index 2 in a flat list
// [0, 1] -> Section 0, item 1 in a sectioned list
// [0, 1, 5] -> Section 0, subsection 1, item 5 in a sectioned list
// Next ID = 2.
message IndexPath {

  // Index of item in path.
  repeated int32 index = 1;
}

// When an Insertion (instance of Content) is shown to a user.
// Impressions are immutable.
// Next ID = 18.
message Impression {

  // Optional.  If not set, set by API servers.
  // If not set, API server uses LogRequest.platform_id.
  uint64 platform_id = 1;

  // Optional.  Must be set on LogRequest or here.
  common.UserInfo user_info = 2;

  // Optional.  If not set, set by API servers.
  // If not set, API server uses LogRequest.timing.
  common.Timing timing = 3;

  // Optional.  If not set, API server uses LogRequest.client_info.
  common.ClientInfo client_info = 4;

  reserved 5; // Reserving fields for future common fields.

  // Optional.  Primary key.
  // SDKs usually handles this automatically. For details, see
  // https://github.com/promotedai/schema#setting-primary-keys
  string impression_id = 6;

  // Optional.
  string insertion_id = 7;

  // Optional.
  string request_id = 8;

  // Optional.
  string view_id = 10;

  // Optional.
  string auto_view_id = 15;

  // Optional.
  string session_id = 9;

  // Optional. content_id is used as a hint when insertion_id is not set.
  // For more accurate results, set insertion_id.
  string content_id = 12;

  // Optional.
  ImpressionSourceType source_type = 13;

  // Optional. Indicates that this impression occurred in a view that may
  // not be topmost in the view hierarchy, and thus may have been obscured
  // from the user.
  bool has_superimposed_views = 14;
  
  // Optional. Position the the impression within its enclosing list.
  IndexPath client_position = 16;

  // Optional.  Used for debugging.
  IdentifierProvenances id_provenances = 17;

  // Optional.  Custom properties per platform.
  common.Properties properties = 11;
}

// The action that user wants to perform.
//
// Next ID = 16.
enum ActionType {
  UNKNOWN_ACTION_TYPE = 0;

  // Action that doesn't correspond to any of the below.
  CUSTOM_ACTION_TYPE = 1;

  // Navigating to details about content.
  NAVIGATE = 2;

  // Adding an item to shopping cart.
  ADD_TO_CART = 4;

  // Remove an item from shopping cart.
  REMOVE_FROM_CART = 10;

  // Going to checkout.
  CHECKOUT = 8;

  // Purchasing an item.
  PURCHASE = 3;

  // Sharing content.
  SHARE = 5;

  // Liking content.
  LIKE = 6;

  // Un-liking content.
  UNLIKE = 9;

  // Commenting on content.
  COMMENT = 7;

  // Making an offer on content.
  MAKE_OFFER = 11;

  // Asking a question about content.
  ASK_QUESTION = 12;

  // Answering a question about content.
  ANSWER_QUESTION = 13;

  // Complete sign-in.
  // No content_id needed.  If set, set it to the Content's ID (not User).
  COMPLETE_SIGN_IN = 14;

  // Complete sign-up.
  // No content_id needed.  If set, set it to the Content's ID (not User).
  COMPLETE_SIGN_UP = 15;
}

// Next ID = 2.
message NavigateAction {

  // Optional.  The next URL.
  string target_url = 1;
}

// Actions are user actions.  Example: Click.
// Actions are immutable.
// Next ID = 26.
message Action {

  // Optional.  If not set, set by API servers.
  // If not set, API server uses LogRequest.platform_id.
  uint64 platform_id = 1;

  // Optional.  Must be set on LogRequest or here.
  common.UserInfo user_info = 2;

  // Optional.  If not set, set by API servers.
  // If not set, API server uses LogRequest.timing.
  common.Timing timing = 3;

  // Optional.  If not set, API server uses LogRequest.client_info.
  common.ClientInfo client_info = 4;

  reserved 5; // Reserving fields for future common fields.

  // Optional.  Primary key.
  // SDKs usually handles this automatically. For details, see
  // https://github.com/promotedai/schema#setting-primary-keys
  string action_id = 6;

  // Optional.
  string impression_id = 7;

  // Optional.
  string insertion_id = 8;

  // Optional.
  string request_id = 9;

  // Optional.
  string view_id = 11;

  // Optional.
  string auto_view_id = 23;

  // Optional.
  string session_id = 10;

  // Optional. content_id is used as a hint when impression_id is not set.
  // For more accurate results, set impression_id if available.
  string content_id = 21;

  // Optional.  Custom name of the action that the user performed.
  // E.g. "Product clicked".  Do not stick parameters or pii in this name.
  string name = 12;
  reserved 13; // For future dictionary ID for name.

  // Optional.  The action that the user wants to perform.
  ActionType action_type = 14;

  // Optional.
  string custom_action_type = 15;
  reserved 16; // For a dictionary ID for custom_action_type;

  string element_id = 17;

  oneof action {
    NavigateAction navigate_action = 18;
  }

  reserved 19;

  // Optional. Indicates that this action occurred in a view that may
  // not be topmost in the view hierarchy.
  bool has_superimposed_views = 22;
  
  // Optional. Position the the action within its enclosing list.
  IndexPath client_position = 24;

  // Optional.  Used for debugging.
  IdentifierProvenances id_provenances = 25;

  // Optional.  Custom properties per platform.
  common.Properties properties = 20;
}


// Error from iOS client.
// Next ID = 5.
message IOSError {
  // Error code from NSError.
  int32 code = 1;

  // Error domain from NSError.
  string domain = 2;

  // Description of error.
  string description = 3;

  // Which batch generated the error.
  int32 batch_number = 4;
}

// History of errors from client.
// Next ID = 3.
message ErrorHistory {
  // Window of latest errors.
  repeated IOSError ios_errors = 1;

  // Total number of errors encountered.
  int32 total_errors = 2;
}

// Ancestor ID either logged as event or external ID.
// Next ID = 7.
message AncestorIdHistoryItem {
  // Changed value of ancestor ID.
  string ancestor_id = 1;

  // Event that caused the change, if any.
  oneof logged_event {
    User user_event = 2;
    // Internally autogenerated session ID.
    string session_id_from_user_event = 3;
    View view_event = 4;
    AutoView auto_view_event = 6;
  }

  // Which batch number the event was logged in
  int32 batch_number = 5;
}

// History of ancestor IDs logged by client.
// Next ID = 9.
message AncestorIdHistory {
  // Window of latest log user ids.
  repeated AncestorIdHistoryItem log_user_id_history = 1;

  // Total number of log user ids logged this session.
  int32 total_log_user_ids_logged = 2;

  // Window of latest session ids.
  repeated AncestorIdHistoryItem session_id_history = 3;

  // Total number of session ids logged this session.
  int32 total_session_ids_logged = 4;

  // Window of latest view ids.
  repeated AncestorIdHistoryItem view_id_history = 5;

  // Total number of view ids logged this session.
  int32 total_view_ids_logged = 6;

  // Window of latest auto view ids.
  repeated AncestorIdHistoryItem auto_view_id_history = 7;

  // Total number of auto view ids logged this session.
  int32 total_auto_view_ids_logged = 8;
}

// Diagnostic information for mobile clients.
// Next ID = 9.
message MobileDiagnostics {
  // Unique identifier for device sending this message.
  string device_identifier = 1;

  // Version identifier for client app.
  string client_version = 2;

  // Version of Promoted library.
  string promoted_library_version = 3;

  // Number of batch logs attempted.
  int32 batches_attempted = 4;

  // Number of batch logs sent successfully.
  int32 batches_sent_successfully = 5;

  // Number of batch logs that failed to send.
  int32 batches_with_errors = 6;

  // Error history.
  ErrorHistory error_history = 7;

  // Ancestor ID history. See #133.
  AncestorIdHistory ancestor_id_history = 8;
}

// Wrapper message for all kinds of diagnostic messages.
// Next ID = 6.
message Diagnostics {
  // Common fields.
  uint64 platform_id = 1;
  common.UserInfo user_info = 2;
  common.Timing timing = 3;
  common.ClientInfo client_info = 4;

  oneof diagnostics_message {
    MobileDiagnostics mobile_diagnostics = 5;
  }
}

// A way to batch up log requests into the same request.
// Clients can reference logs in different batches.
// Keep in sync with FlatEvent and FlatResponseInsertion.
// Next ID = 26.
message LogRequest {

  // Optional.  If not set, set by API servers.
  // If not set, API server uses the value set on each log record.
  uint64 platform_id = 1;

  // Optional.  This field is a default user_info to use on all log records
  // on this LogRequest.  Must be set here or on each child log record.
  // Clients need to validate that the user_info fields match the actual user.
  common.UserInfo user_info = 2;

  // Optional.  This field is a default timing to use on all log records
  // on this LogRequest.  If neither the log record timing or LogRequest
  // timing is set, then Promoted's API creates one.
  common.Timing timing = 3;

  // Optional.
  common.ClientInfo client_info = 4;

  // Optional. Information about the user device.
  common.Device device = 24;

  reserved 5; // Reserving fields for future common fields.
  reserved 6; // To keep numbers similar to FlatEvent.  We can use this for Rpc Header.
  repeated User user = 7;
  repeated CohortMembership cohort_membership = 8;
  reserved 9;
  reserved 10;
  repeated View view = 11;
  repeated AutoView auto_view = 25;
  repeated delivery.Request request = 12;
  repeated delivery.Insertion insertion = 13;
  repeated Impression impression = 14;
  repeated Action action = 15;
  reserved 16;
  reserved 17;
  repeated delivery.DeliveryLog delivery_log = 18;
  reserved 19 to 22;
  repeated Diagnostics diagnostics = 23;
}
